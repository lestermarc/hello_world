--------------------------------------------------------
--  DDL for Package Body WEB_ASA_RECORD
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "WEB_ASA_RECORD" 
/**
* 07.02.2008 RRI L avalidation du devis recalcul les délais depuis l'enregistrement de la montre.
* 06.12.2007 RRI Correction à l'avancement des flux, on garde les dates de création/modif
et on recalcule les délais après validation du devis.
*/
 IS
/**
* get the status description of the status code
*/
FUNCTION GET_WEB_STATE_DESCR
                     ( pState_Code VARCHAR2,
					   pPc_lang_id pcs.PC_LANG.PC_LANG_ID%TYPE ) RETURN VARCHAR2 IS
    ret PCS.PC_GCODES.GCDTEXT1%TYPE;
  BEGIN

  SELECT pcs.pc_functions.GetDescodeDescr('C_ASA_REP_STATUS',pState_Code,pPc_lang_id) INTO ret
  FROM dual;


    RETURN ret;
   EXCEPTION WHEN OTHERS THEN
	 RETURN pState_Code;
  END;

 /**
 *  get the status of the selected asa_record
 */
 FUNCTION GET_WEB_STATE_CODE
                     ( pAsa_record_id ASA_RECORD.ASA_RECORD_ID%TYPE) RETURN VARCHAR2 IS
  ret ASA_RECORD.C_ASA_REP_STATUS%TYPE;
  BEGIN
    SELECT C_ASA_REP_STATUS INTO ret
	FROM
	  ASA_RECORD
	WHERE
	  ASA_RECORD_ID=pAsa_record_id;
    RETURN ret;
  END;

 FUNCTION GET_WEB_STATE_FROM
                     ( pAsa_record_id ASA_RECORD.ASA_RECORD_ID%TYPE) RETURN DATE IS
  BEGIN
    RETURN TO_DATE('20050701','yyyymmdd');
  END;

 FUNCTION GET_WEB_STATE_INFO
                     ( pAsa_record_id ASA_RECORD.ASA_RECORD_ID%TYPE) RETURN VARCHAR2 IS
  BEGIN
    RETURN 'Pas d''info complémentaire...';
  END;

 /**
 *  execute the action to the selected asa_record
 */
 FUNCTION FIRE_ACTION( pAsa_record_id ASA_RECORD.ASA_RECORD_ID%TYPE,
               pAction_Code VARCHAR2) RETURN VARCHAR2 IS
      newseq                       NUMBER (2);
      currenteventsid              asa_record.asa_record_events_id%TYPE;
      neweventsid                  asa_record.asa_record_events_id%TYPE;
   BEGIN
      SELECT MAX (rre_seq) + 1
        INTO newseq
        FROM asa_record_events
       WHERE asa_record_id = pasa_record_id;

      SELECT init_id_seq.NEXTVAL
        INTO neweventsid
        FROM DUAL;

      SELECT asa_record_events_id
        INTO currenteventsid
        FROM asa_record
       WHERE asa_record_id = pasa_record_id;

	record_events_fire (neweventsid,
                                               newseq,
                                               pasa_record_id,
                                               currenteventsid,
                                               pAction_Code
                                              );
	if (pAction_Code='03') then --recalcul des délais à l'acceptation du devis
     UDPATE_DELAIS(pasa_record_id,sysdate,'03');
	 end if;

	RETURN 'ok';
  END;

  PROCEDURE UDPATE_DELAIS(pASA_RECORD_ID ASA_RECORD.ASA_RECORD_ID%type,
    newDELAY DATE, newState ASA_RECORD.C_ASA_REP_STATUS%type) IS

    newSeq ASA_DELAY_HISTORY.ADH_SEQ%type;

	endDelay date;
	vARE_CONF_DATE_C ASA_RECORD.ARE_CONF_DATE_C%type;
	vARE_NB_DAYS_WAIT ASA_RECORD.ARE_NB_DAYS_WAIT%type;
	vARE_NB_DAYS_COMP ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS_MAX ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS_CTRL ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS_EXP ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS_SENDING ASA_RECORD.ARE_NB_DAYS%type;
	vARE_NB_DAYS_WAIT_MAX ASA_RECORD.ARE_NB_DAYS%type;
	vARE_UPD_DATE_C ASA_RECORD.ARE_UPD_DATE_C%type;
	vARE_DATE_START_REP ASA_RECORD.ARE_DATE_START_REP%type;
	vARE_DATE_END_REP ASA_RECORD.ARE_DATE_END_REP%type;
	vARE_DATE_END_CTRL ASA_RECORD.ARE_DATE_END_REP%type;
	vARE_DATE_START_EXP ASA_RECORD.ARE_DATE_END_REP%type;
	vARE_DATE_END_SENDING ASA_RECORD.ARE_DATE_END_REP%type;
	vARE_DATE_REG_REP date;
	vADH_DATE_REG_REP number(1);
	vADH_DATE_START_REP number(1);
	vADH_DATE_END_REP number(1);
	vADH_DATE_END_CTRL number(1);
	vADH_DATE_START_EXP number(1);
	vADH_DATE_END_SENDING number(1);
	vADH_CONF_DATE_C number(1);
	vADH_CONF_DATE_S number(1);
	vADH_NB_DAYS_WAIT number(1);
	vADH_NB_DAYS number(1);
	vADH_NB_DAYS_CTRL number(1);
	vADH_NB_DAYS_EXP number(1);
	ADH_DATE_END_SENDING number(1);
  BEGIN

    SELECT
    MAX (ADH_SEQ)+1 into newSeq
  FROM
    ASA_DELAY_HISTORY
  WHERE
   ASA_RECORD_ID = pASA_RECORD_ID;

    --calcul du nouveau délai en partant de newDelay
  vADH_NB_DAYS_WAIT:=0;
  vADH_NB_DAYS:=0;
  vADH_NB_DAYS_CTRL:=0;
  vADH_NB_DAYS_EXP:=0;
  vADH_DATE_END_SENDING:=0;
  vADH_DATE_REG_REP:=0;
	vADH_DATE_START_REP :=1;
	vADH_DATE_END_REP :=1;
	vADH_DATE_END_CTRL	 :=1;
	vADH_DATE_START_EXP :=1;
	vADH_DATE_END_SENDING :=1;
	vADH_CONF_DATE_C :=0;
	vADH_CONF_DATE_S :=0;
  select
    ARE_NB_DAYS_WAIT
	,ARE_NB_DAYS_WAIT_COMP
	,ARE_NB_DAYS_WAIT_MAX
	,ARE_NB_DAYS
	,ARE_NB_DAYS_CTRL
	,ARE_NB_DAYS_EXP
	,ARE_NB_DAYS_SENDING
	,ARE_NB_DAYS_WAIT_MAX
	,newDelay --,ARE_DATE_REG_REP RRI 07/02/2008
	,ARE_UPD_DATE_C
  into
	vARE_NB_DAYS_WAIT
	,vARE_NB_DAYS_COMP
	,vARE_NB_DAYS_MAX
	,vARE_NB_DAYS
	,vARE_NB_DAYS_CTRL
	,vARE_NB_DAYS_EXP
	,vARE_NB_DAYS_SENDING
	,vARE_NB_DAYS_WAIT_MAX
	,vARE_DATE_REG_REP
	,vARE_UPD_DATE_C
  from
    asa_delay_history
  where
    asa_record_id=pASA_RECORD_ID and ADH_SEQ=newSeq-1;

  vARE_DATE_START_REP := FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,newDelay,vARE_NB_DAYS_WAIT_MAX);
  vARE_DATE_END_REP:= FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,vARE_DATE_START_REP,vARE_NB_DAYS);

  vARE_DATE_END_CTRL:= FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,vARE_DATE_END_REP,vARE_NB_DAYS_CTRL);
  vARE_DATE_END_CTRL:= FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,vARE_DATE_END_REP,vARE_NB_DAYS_CTRL);
  vARE_DATE_START_EXP:= FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,vARE_DATE_END_CTRL,vARE_NB_DAYS_EXP);
  vARE_DATE_END_SENDING:= FAL_SCHEDULE_FUNCTIONS.GetDecalageForwardDate(null,null,null,null,null,null,vARE_DATE_START_EXP,vARE_NB_DAYS_SENDING);

	--update history

  select ARE_CONF_DATE_C into vARE_CONF_DATE_C from asa_record where asa_record_id=pASA_RECORD_ID;

	update ASA_RECORD
	set
	ARE_UPD_DATE_C = newDelay,
	A_DATEMOD = sysdate,
	ARE_DATE_REG_REP = vARE_DATE_REG_REP,
	ARE_DATE_START_REP = vARE_DATE_START_REP,
	ARE_DATE_END_REP = vARE_DATE_END_REP,
	ARE_DATE_END_CTRL = vARE_DATE_END_CTRL,
	ARE_DATE_START_EXP = vARE_DATE_START_EXP,
	ARE_DATE_END_SENDING = vARE_DATE_END_SENDING
	 where asa_record_id=pASA_RECORD_ID;

  --update history
  insert into ASA_DELAY_HISTORY
    (ASA_DELAY_HISTORY_ID, ASA_RECORD_ID, ADH_SEQ,
	ARE_DATE_REG_REP, ADH_DATE_REG_REP, ARE_NB_DAYS_WAIT,
	ADH_NB_DAYS_WAIT, ARE_NB_DAYS_WAIT_COMP, ADH_NB_DAYS_WAIT_COMP, ARE_NB_DAYS_WAIT_MAX,
	ADH_NB_DAYS_WAIT_MAX, ARE_DATE_START_REP, ADH_DATE_START_REP, ARE_NB_DAYS,
	ADH_NB_DAYS, ARE_DATE_END_REP, ADH_DATE_END_REP, ARE_NB_DAYS_CTRL, ADH_NB_DAYS_CTRL,--
	ARE_DATE_END_CTRL, ADH_DATE_END_CTRL, ARE_NB_DAYS_EXP, ADH_NB_DAYS_EXP,
	ARE_DATE_START_EXP, ADH_DATE_START_EXP, ARE_NB_DAYS_SENDING, ADH_NB_DAYS_SENDING,
	ARE_DATE_END_SENDING, ADH_DATE_END_SENDING,
	ADH_REQ_DATE_C,	ARE_CONF_DATE_C, ADH_CONF_DATE_C,
	ARE_UPD_DATE_C, ADH_UPD_DATE_C,
	ADH_REQ_DATE_S, ADH_CONF_DATE_S, ADH_UPD_DATE_S,
	A_DATECRE, A_IDCRE, C_ASA_REP_STATUS)
values
  (init_id_seq.nextval, pASA_RECORD_ID, newSeq,
  vARE_DATE_REG_REP, vADH_DATE_REG_REP, vARE_NB_DAYS_WAIT,
  vADH_NB_DAYS_WAIT, vARE_NB_DAYS_COMP, 0, vARE_NB_DAYS_WAIT_MAX,
   0, vARE_DATE_START_REP,vADH_DATE_START_REP, vARE_NB_DAYS,
   --ADH_NB_DAYS, ARE_DATE_END_REP, ADH_DATE_END_REP, ARE_NB_DAYS_CTRL, ADH_NB_DAYS_CTRL,
   vADH_NB_DAYS,vARE_DATE_END_REP, vADH_DATE_END_REP, vARE_NB_DAYS_CTRL, vADH_NB_DAYS_CTRL,
   --ARE_DATE_END_CTRL, ADH_DATE_END_CTRL, ARE_NB_DAYS_EXP, ADH_NB_DAYS_EXP,
   vARE_DATE_END_CTRL,vADH_DATE_END_CTRL, vARE_NB_DAYS_EXP, vADH_NB_DAYS_EXP,
   --ARE_DATE_START_EXP, ADH_DATE_START_EXP, ARE_NB_DAYS_SENDING, ADH_NB_DAYS_SENDING,
   vARE_DATE_START_EXP, vADH_DATE_START_EXP,vARE_NB_DAYS_SENDING ,vADH_DATE_END_SENDING,
   --ARE_DATE_END_SENDING, ADH_DATE_END_SENDING,
   vARE_DATE_END_SENDING, vADH_DATE_END_SENDING,
   --ADH_REQ_DATE_C,	ARE_CONF_DATE_C, ADH_CONF_DATE_C,vARE_UPD_DATE_C,ADH_UPD_DATE_C,
   0, vARE_CONF_DATE_C, vADH_CONF_DATE_C, vARE_UPD_DATE_C, 1,
   --ADH_REQ_DATE_S, ADH_CONF_DATE_S, ADH_UPD_DATE_S
   0,vADH_CONF_DATE_S, 1,
   sysdate, 'WEB', newState);

  --update des attrib
	ASA_RECORD_GENERATE_DOC.UPDATEATTRIB (pASA_RECORD_ID) ;
  END;

  PROCEDURE CREATE_NEW_STOLEN_GOODS
                     ( pAsa_guaranty_cards_id ASA_GUARANTY_CARDS.ASA_GUARANTY_CARDS_ID%TYPE,
					   pDate ASA_STOLEN_GOODS.ASG_DATE%TYPE,
					   pMemo ASA_STOLEN_GOODS.ASG_MEMO%TYPE) IS
  newNb ASA_STOLEN_GOODS.ASG_NUMBER%TYPE;
  BEGIN
    SELECT LPAD(MAX(ASG_NUMBER)+1,10,'0') INTO newNb FROM ASA_STOLEN_GOODS;

	INSERT INTO ASA_STOLEN_GOODS (
	  ASA_STOLEN_GOODS_ID,
	  GCO_GOOD_ID,
	  GCO_CHAR1_ID,
	  GCO_CHAR2_ID,
	  GCO_CHAR3_ID,
	  GCO_CHAR4_ID,
	  GCO_CHAR5_ID,
	  ASG_CHAR1_VALUE,
	  ASG_CHAR2_VALUE,
	  ASG_CHAR3_VALUE,
	  ASG_CHAR4_VALUE,
	  ASG_CHAR5_VALUE,
	  PAC_ASA_DISTRIB_ID,
	  PC_ASA_DISTRIB_LANG_ID,
	  PAC_ASA_DISTRIB_ADDR_ID,
	  ASG_ADDRESS_DISTRIB,
	  ASG_POSTCODE_DISTRIB,
	  ASG_TOWN_DISTRIB,
	  ASG_STATE_DISTRIB,
	  ASG_FORMAT_CITY_DISTRIB,
	  PC_ASA_DISTRIB_CNTRY_ID,
	  PAC_ASA_FIN_CUST_ID,
	  PC_ASA_FIN_CUST_LANG_ID,
	  PAC_ASA_FIN_CUST_ADDR_ID,
	  ASG_ADDRESS_FIN_CUST,
	  ASG_POSTCODE_FIN_CUST,
	  ASG_TOWN_FIN_CUST,
	  ASG_STATE_FIN_CUST,
	  ASG_FORMAT_CITY_FIN_CUST,
	  PC_ASA_FIN_CUST_CNTRY_ID,
	  ASG_DATE,
	  ASG_MEMO,
	  A_DATECRE,
	  A_IDCRE,
	  ASG_NUMBER,
	  ASA_GUARANTY_CARDS_ID)
	SELECT
	  init_id_seq.NEXTVAL,
	  GCO_GOOD_ID,
	  GCO_CHAR1_ID,
	  GCO_CHAR2_ID,
	  GCO_CHAR3_ID,
	  GCO_CHAR4_ID,
	  GCO_CHAR5_ID,
	  AGC_CHAR1_VALUE,
	  AGC_CHAR2_VALUE,
	  AGC_CHAR3_VALUE,
	  AGC_CHAR4_VALUE,
	  AGC_CHAR5_VALUE,
	  PAC_ASA_DISTRIB_ID,
	  PC_ASA_DISTRIB_LANG_ID,
	  PAC_ASA_DISTRIB_ADDR_ID,
	  AGC_ADDRESS_DISTRIB,
	  AGC_POSTCODE_DISTRIB,
	  AGC_TOWN_DISTRIB,
	  AGC_STATE_DISTRIB,
	  AGC_FORMAT_CITY_DISTRIB,
	  PC_ASA_DISTRIB_CNTRY_ID,
	  PAC_ASA_FIN_CUST_ID,
	  PC_ASA_FIN_CUST_LANG_ID,
	  PAC_ASA_FIN_CUST_ADDR_ID,
	  AGC_ADDRESS_FIN_CUST,
	  AGC_POSTCODE_FIN_CUST,
	  AGC_TOWN_FIN_CUST,
	  AGC_STATE_FIN_CUST,
	  AGC_FORMAT_CITY_FIN_CUST,
	  PC_ASA_FIN_CUST_CNTRY_ID,
	  pDate ASG_DATE,
	  pMemo ASG_MEMO,
	  SYSDATE A_DATECRE,
	  'ECON' A_IDCRE,
	  newNb ASG_NUMBER,
	  ASA_GUARANTY_CARDS_ID
	FROM
	  ASA_GUARANTY_CARDS
	WHERE asa_guaranty_cards_id = pAsa_guaranty_cards_id;

  END;


  FUNCTION SET_WEBACCOUNT_FOR_TRACKING( pAsa_record_id ASA_RECORD.asa_record_id%TYPE,
                                        pWebAccount WEB_USER.WEU_LOGIN_NAME%TYPE,
										errorMsg OUT VARCHAR2 ) RETURN NUMBER IS
  n NUMBER(1);
  BEGIN
    SELECT COUNT(*) INTO n FROM ASA_RECORD WHERE asa_record_id = pAsa_record_id;
	IF (n = 0) THEN
	  BEGIN
	    RETURN NULL;
	  END;
	ELSE
	  BEGIN
      SELECT COUNT(*) INTO n FROM ASA_FREE_DATA WHERE asa_record_id = pAsa_record_id;
	  IF (n = 0) THEN
	    BEGIN
		INSERT INTO ASA_FREE_DATA ( ASA_FREE_DATA_ID, ASA_REP_TYPE_ID, ASA_RECORD_ID, ARD_ALPHA_SHORT_1,
                                    ARD_ALPHA_SHORT_2, ARD_ALPHA_SHORT_3, ARD_ALPHA_SHORT_4, ARD_ALPHA_SHORT_5, ARD_ALPHA_LONG_1,
                                    ARD_ALPHA_LONG_2, ARD_ALPHA_LONG_3, ARD_ALPHA_LONG_4, ARD_ALPHA_LONG_5, ARD_INTEGER_1,
                                    ARD_INTEGER_2, ARD_INTEGER_3, ARD_INTEGER_4, ARD_INTEGER_5, ARD_DECIMAL_1, ARD_DECIMAL_2,
                                    ARD_DECIMAL_3, ARD_DECIMAL_4, ARD_DECIMAL_5, ARD_BOOLEAN_1, ARD_BOOLEAN_2, ARD_BOOLEAN_3,
                                    ARD_BOOLEAN_4, ARD_BOOLEAN_5, DIC_ASA_REC_FREE5_ID, DIC_ASA_REC_FREE4_ID, DIC_ASA_REC_FREE3_ID,
                                    DIC_ASA_REC_FREE2_ID, DIC_ASA_REC_FREE1_ID, A_DATECRE, A_DATEMOD, A_IDCRE,
                                    A_IDMOD ) VALUES (
                                    init_id_seq.NEXTVAL, NULL, pAsa_record_id, NULL, NULL, NULL, NULL, NULL,
									pWebAccount, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
									NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL,
									SYSDATE, NULL, 'ECON', NULL);
		END;

	  ELSE
	    BEGIN
				UPDATE ASA_FREE_DATA SET (ARD_ALPHA_LONG_1, A_DATEMOD, A_IDMOD)=(SELECT pWebAccount, SYSDATE, 'WEB' FROM dual) WHERE
				ASA_RECORD_ID = pAsa_record_id;
		END;

	  END IF;
	  RETURN 1;
	  END;
	 END IF;
	  EXCEPTION WHEN OTHERS THEN
	  BEGIN
	    errorMsg := 'Failed to udpate';
	    RETURN 0;
	  END;

  END;


    /**
  * copy during state evolution
  */
  PROCEDURE RECORD_EVENTS_FIRE(newEventsId ASA_RECORD.ASA_RECORD_EVENTS_ID%TYPE,
                               newSeq ASA_RECORD_EVENTS.RRE_SEQ%TYPE,
                               pASA_RECORD_ID ASA_RECORD.ASA_RECORD_ID%TYPE,
							   pASA_RECORD_EVENTS_ID ASA_RECORD.ASA_RECORD_EVENTS_ID%TYPE,
							   newState ASA_RECORD.C_ASA_REP_STATUS%TYPE) IS
  BEGIN
  INSERT INTO ASA_RECORD_EVENTS ( ASA_RECORD_EVENTS_ID, RRE_SEQ, ASA_RECORD_ID, C_ASA_REP_STATUS,
        RRE_DOCUMENT, RRE_DATE, RRE_MAIN_PRINTING, RRE_ALT1_PRINTING, RRE_ALT2_PRINTING, RRE_ALT3_PRINTING,
        RRE_ALT4_PRINTING, RRE_ALT5_PRINTING, RRE_DATE_MAIN_PRINTING, RRE_DATE_ALT1_PRINTING,
        RRE_DATE_ALT2_PRINTING, RRE_DATE_ALT3_PRINTING, RRE_DATE_ALT4_PRINTING, RRE_DATE_ALT5_PRINTING,
        DOC_POSITION_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD, RRE_DOC_POSITION_UPD_STAT, RRE_FREE_NUM1,
        RRE_FREE_NUM2, RRE_FREE_CHAR1, RRE_FREE_CHAR2, RRE_FREE_MEMO1, RRE_FREE_MEMO2, RRE_FREE_DATE1,
        RRE_FREE_DATE2, DIC_ASA_FREE_DICO_EVENTS2_ID, DIC_ASA_FREE_DICO_EVENTS1_ID, RRE_ALT6_PRINTING,
        RRE_ALT7_PRINTING, RRE_ALT8_PRINTING, RRE_ALT9_PRINTING, RRE_ALT10_PRINTING, RRE_DATE_ALT6_PRINTING,
        RRE_DATE_ALT7_PRINTING, RRE_DATE_ALT8_PRINTING, RRE_DATE_ALT9_PRINTING, RRE_DATE_ALT10_PRINTING,
        DOC_DOCUMENT_ID ) VALUES (
          newEventsId, newSeq, pAsa_record_id, newState, NULL,  SYSDATE
          , 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL,  SYSDATE
          , NULL, 'ECON', NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
          , 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL);


  INSERT INTO ASA_RECORD_TASK ( ASA_RECORD_TASK_ID, ASA_RECORD_ID, RET_POSITION, RET_OPTIONAL,
	C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS,
	RET_GUARANTY_CODE, DIC_GARANTY_CODE_ID, RET_FINISHED,
	RET_TIME, RET_TIME_USED, RET_DESCR, RET_DESCR2, FAL_TASK_ID, DIC_OPERATOR_ID, FAL_FACTORY_FLOOR_ID,
	RET_WORK_RATE, RET_SALE_AMOUNT, RET_SALE_AMOUNT2, GCO_BILL_GOOD_ID, RET_COST_PRICE, RET_AMOUNT,
	ASA_RECORD_EVENTS_ID, RET_FREE_NUM1, RET_FREE_NUM2, RET_FREE_CHAR1, RET_FREE_CHAR2,
	DIC_ASA_FREE_DICO_TASK1_ID, DIC_ASA_FREE_DICO_TASK2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD,
	RET_SALE_AMOUNT_ME, RET_SALE_AMOUNT_EURO, RET_SALE_AMOUNT2_ME, RET_SALE_AMOUNT2_EURO, RET_AMOUNT_ME,
	RET_AMOUNT_EURO, RET_DESCR3, RET_EXTERNAL ) SELECT
	init_id_seq.NEXTVAL, t.asa_record_id, ret_position, RET_OPTIONAL, C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS,
	RET_GUARANTY_CODE,T.DIC_GARANTY_CODE_ID, RET_FINISHED,
	RET_TIME, RET_TIME_USED, RET_DESCR, RET_DESCR2, FAL_TASK_ID, DIC_OPERATOR_ID, FAL_FACTORY_FLOOR_ID,
	RET_WORK_RATE, RET_SALE_AMOUNT, RET_SALE_AMOUNT2, T.GCO_BILL_GOOD_ID, RET_COST_PRICE, RET_AMOUNT,
	newEventsId, RET_FREE_NUM1, RET_FREE_NUM2, RET_FREE_CHAR1, RET_FREE_CHAR2,
	DIC_ASA_FREE_DICO_TASK1_ID, DIC_ASA_FREE_DICO_TASK2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD,
	RET_SALE_AMOUNT_ME, RET_SALE_AMOUNT_EURO, RET_SALE_AMOUNT2_ME, RET_SALE_AMOUNT2_EURO, RET_AMOUNT_ME,
	RET_AMOUNT_EURO, RET_DESCR3, RET_EXTERNAL
	FROM ASA_RECORD_TASK T
	WHERE t.asa_record_id=pASA_RECORD_ID
	  AND T.ASA_RECORD_EVENTS_ID = pASA_RECORD_EVENTS_ID;

	INSERT INTO ASA_RECORD_COMP ( ASA_RECORD_COMP_ID, ASA_RECORD_ID, ARC_POSITION, ARC_OPTIONAL,
	C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS, ARC_GUARANTY_CODE, DIC_GARANTY_CODE_ID, GCO_COMPONENT_ID,
	GCO_CHAR1_ID, GCO_CHAR2_ID, GCO_CHAR3_ID, GCO_CHAR4_ID, GCO_CHAR5_ID, ARC_CHAR1_VALUE,
	ARC_CHAR2_VALUE, ARC_CHAR3_VALUE, ARC_CHAR4_VALUE, ARC_CHAR5_VALUE, ARC_COST_PRICE, ARC_SALE_PRICE,
	ARC_SALE_PRICE2, ARC_QUANTITY, ARC_DESCR, ARC_DESCR2, ARC_CDMVT, STM_COMP_LOCATION_ID,
	STM_COMP_STOCK_ID, STM_COMP_MVT_KIND_ID, STM_COMP_STOCK_MVT_ID, ASA_RECORD_EVENTS_ID, ARC_FREE_NUM1,
	ARC_FREE_NUM2, ARC_FREE_CHAR1, ARC_FREE_CHAR2, DIC_ASA_FREE_DICO_COMP1_ID,
	DIC_ASA_FREE_DICO_COMP2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD, ARC_SALE_PRICE_ME,
	ARC_SALE_PRICE_EURO, ARC_SALE_PRICE2_ME, ARC_SALE_PRICE2_EURO, ARC_NB_DAYS_APPRO, ARC_DESCR3,
	STM_WORK_STOCK_ID, STM_WORK_LOCATION_ID, STM_WORK_STOCK_MOVEMENT_ID, DOC_ATTRIB_POSITION_ID,
	ARC_PIECE, ARC_SET, ARC_VERSION, ARC_CHRONOLOGICAL, ARC_STD_CHAR_1, ARC_STD_CHAR_2, ARC_STD_CHAR_3,
	ARC_STD_CHAR_4, ARC_STD_CHAR_5, ARC_MOVEMENT_DATE )
	SELECT INIT_ID_SEQ.NEXTVAL, C.ASA_RECORD_ID, ARC_POSITION, ARC_OPTIONAL,
	C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS, ARC_GUARANTY_CODE, DIC_GARANTY_CODE_ID, GCO_COMPONENT_ID,
	C.GCO_CHAR1_ID, C.GCO_CHAR2_ID, C.GCO_CHAR3_ID, C.GCO_CHAR4_ID, C.GCO_CHAR5_ID, ARC_CHAR1_VALUE,
	ARC_CHAR2_VALUE, ARC_CHAR3_VALUE, ARC_CHAR4_VALUE, ARC_CHAR5_VALUE, ARC_COST_PRICE, ARC_SALE_PRICE,
	ARC_SALE_PRICE2, ARC_QUANTITY, ARC_DESCR, ARC_DESCR2, ARC_CDMVT, STM_COMP_LOCATION_ID,
	STM_COMP_STOCK_ID, STM_COMP_MVT_KIND_ID, STM_COMP_STOCK_MVT_ID, newEventsId, ARC_FREE_NUM1,
	ARC_FREE_NUM2, ARC_FREE_CHAR1, ARC_FREE_CHAR2, DIC_ASA_FREE_DICO_COMP1_ID,
	DIC_ASA_FREE_DICO_COMP2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD,  ARC_SALE_PRICE_ME,
	ARC_SALE_PRICE_EURO, ARC_SALE_PRICE2_ME, ARC_SALE_PRICE2_EURO, ARC_NB_DAYS_APPRO, ARC_DESCR3,
	STM_WORK_STOCK_ID, STM_WORK_LOCATION_ID, STM_WORK_STOCK_MOVEMENT_ID, DOC_ATTRIB_POSITION_ID,
	ARC_PIECE, ARC_SET, ARC_VERSION, ARC_CHRONOLOGICAL, ARC_STD_CHAR_1, ARC_STD_CHAR_2, ARC_STD_CHAR_3,
	ARC_STD_CHAR_4, ARC_STD_CHAR_5, ARC_MOVEMENT_DATE
	FROM ASA_RECORD_COMP C
	WHERE C.ASA_RECORD_ID=pASA_RECORD_ID
	AND C.asa_record_events_id=pASA_RECORD_EVENTS_ID;

    UPDATE ASA_RECORD SET
	   c_asa_rep_status=newState,
	   A_DATEMOD=SYSDATE,
	   A_IDMOD='ECON'
	WHERE
	  asa_record_id=pAsa_record_id;


  END;


  /**
  *        DEPRECATED use instead RECORD_EVENTS_FIRE
  */

  PROCEDURE COPY_COMP_AND_TASK(pAsa_record_id ASA_RECORD.ASA_RECORD_ID%TYPE,
                               old_asa_record_events_id ASA_RECORD_EVENTS.ASA_RECORD_EVENTS_ID%TYPE,
							   NEW_ASA_RECORD_EVENTS_ID ASA_RECORD_EVENTS.ASA_RECORD_EVENTS_ID%TYPE) IS
  BEGIN
    INSERT INTO ASA_RECORD_COMP (
	  ASA_RECORD_COMP_ID, ASA_RECORD_ID, ARC_POSITION, ARC_OPTIONAL,
		C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS, ARC_GUARANTY_CODE, DIC_GARANTY_CODE_ID, GCO_COMPONENT_ID,
		GCO_CHAR1_ID, GCO_CHAR2_ID, GCO_CHAR3_ID, GCO_CHAR4_ID, GCO_CHAR5_ID, ARC_CHAR1_VALUE,
		ARC_CHAR2_VALUE, ARC_CHAR3_VALUE, ARC_CHAR4_VALUE, ARC_CHAR5_VALUE, ARC_COST_PRICE, ARC_SALE_PRICE,
		ARC_SALE_PRICE2, ARC_QUANTITY, ARC_DESCR, ARC_DESCR2, ARC_CDMVT, STM_COMP_LOCATION_ID,
		STM_COMP_STOCK_ID, STM_COMP_MVT_KIND_ID, STM_COMP_STOCK_MVT_ID, ASA_RECORD_EVENTS_ID, ARC_FREE_NUM1,
		ARC_FREE_NUM2, ARC_FREE_CHAR1, ARC_FREE_CHAR2, DIC_ASA_FREE_DICO_COMP1_ID,
		DIC_ASA_FREE_DICO_COMP2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD, ARC_SALE_PRICE_ME,
		ARC_SALE_PRICE_EURO, ARC_SALE_PRICE2_ME, ARC_SALE_PRICE2_EURO, ARC_NB_DAYS_APPRO, ARC_DESCR3,
		STM_WORK_STOCK_ID, STM_WORK_LOCATION_ID, STM_WORK_STOCK_MOVEMENT_ID, DOC_ATTRIB_POSITION_ID,
		ARC_PIECE, ARC_SET, ARC_VERSION, ARC_CHRONOLOGICAL, ARC_STD_CHAR_1, ARC_STD_CHAR_2, ARC_STD_CHAR_3,
		ARC_STD_CHAR_4, ARC_STD_CHAR_5, ARC_MOVEMENT_DATE )
		SELECT
			init_id_seq.NEXTVAL,
			ASA_RECORD_ID,
			ARC_POSITION,
			ARC_OPTIONAL,
			C_ASA_ACCEPT_OPTION,
			C_ASA_GEN_DOC_POS, ARC_GUARANTY_CODE, DIC_GARANTY_CODE_ID, GCO_COMPONENT_ID,
			GCO_CHAR1_ID, GCO_CHAR2_ID, GCO_CHAR3_ID, GCO_CHAR4_ID, GCO_CHAR5_ID, ARC_CHAR1_VALUE,
			ARC_CHAR2_VALUE, ARC_CHAR3_VALUE, ARC_CHAR4_VALUE, ARC_CHAR5_VALUE, ARC_COST_PRICE, ARC_SALE_PRICE,
			ARC_SALE_PRICE2, ARC_QUANTITY, ARC_DESCR, ARC_DESCR2, ARC_CDMVT, STM_COMP_LOCATION_ID,
			STM_COMP_STOCK_ID, STM_COMP_MVT_KIND_ID, STM_COMP_STOCK_MVT_ID, NEW_ASA_RECORD_EVENTS_ID, ARC_FREE_NUM1,
			ARC_FREE_NUM2, ARC_FREE_CHAR1, ARC_FREE_CHAR2, DIC_ASA_FREE_DICO_COMP1_ID,
			DIC_ASA_FREE_DICO_COMP2_ID,
			SYSDATE, A_DATEMOD, 'WEB', A_IDMOD,
			ARC_SALE_PRICE_ME,
			ARC_SALE_PRICE_EURO, ARC_SALE_PRICE2_ME, ARC_SALE_PRICE2_EURO, ARC_NB_DAYS_APPRO, ARC_DESCR3,
			STM_WORK_STOCK_ID, STM_WORK_LOCATION_ID, STM_WORK_STOCK_MOVEMENT_ID, DOC_ATTRIB_POSITION_ID,
			ARC_PIECE, ARC_SET, ARC_VERSION, ARC_CHRONOLOGICAL, ARC_STD_CHAR_1, ARC_STD_CHAR_2, ARC_STD_CHAR_3,
			ARC_STD_CHAR_4, ARC_STD_CHAR_5, ARC_MOVEMENT_DATE
		FROM
  		  ASA_RECORD_COMP
		WHERE
		  asa_record_id=pAsa_record_id
         AND ASA_RECORD_EVENTS_ID = old_ASA_RECORD_EVENTS_ID;

INSERT INTO
  ASA_RECORD_TASK
  ( ASA_RECORD_TASK_ID, ASA_RECORD_ID, RET_POSITION, RET_OPTIONAL,
	C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS, RET_GUARANTY_CODE, DIC_GARANTY_CODE_ID, RET_FINISHED,
	RET_TIME, RET_TIME_USED, RET_DESCR, RET_DESCR2, FAL_TASK_ID, DIC_OPERATOR_ID, FAL_FACTORY_FLOOR_ID,
	RET_WORK_RATE, RET_SALE_AMOUNT, RET_SALE_AMOUNT2, GCO_BILL_GOOD_ID, RET_COST_PRICE, RET_AMOUNT,
	ASA_RECORD_EVENTS_ID, RET_FREE_NUM1, RET_FREE_NUM2, RET_FREE_CHAR1, RET_FREE_CHAR2,
	DIC_ASA_FREE_DICO_TASK1_ID, DIC_ASA_FREE_DICO_TASK2_ID, A_DATECRE, A_DATEMOD, A_IDCRE, A_IDMOD,
	RET_SALE_AMOUNT_ME, RET_SALE_AMOUNT_EURO, RET_SALE_AMOUNT2_ME, RET_SALE_AMOUNT2_EURO, RET_AMOUNT_ME,
	RET_AMOUNT_EURO, RET_DESCR3, RET_EXTERNAL )
SELECT
	INIT_ID_SEQ.NEXTVAL, ASA_RECORD_ID, RET_POSITION, RET_OPTIONAL,
	C_ASA_ACCEPT_OPTION, C_ASA_GEN_DOC_POS, RET_GUARANTY_CODE, DIC_GARANTY_CODE_ID, RET_FINISHED,
	RET_TIME, RET_TIME_USED, RET_DESCR, RET_DESCR2, FAL_TASK_ID, DIC_OPERATOR_ID, FAL_FACTORY_FLOOR_ID,
	RET_WORK_RATE, RET_SALE_AMOUNT, RET_SALE_AMOUNT2, GCO_BILL_GOOD_ID, RET_COST_PRICE, RET_AMOUNT,
	new_ASA_RECORD_EVENTS_ID,
	RET_FREE_NUM1, RET_FREE_NUM2, RET_FREE_CHAR1, RET_FREE_CHAR2,
	DIC_ASA_FREE_DICO_TASK1_ID, DIC_ASA_FREE_DICO_TASK2_ID,
	SYSDATE, A_DATEMOD, 'WEB', A_IDMOD,
	RET_SALE_AMOUNT_ME, RET_SALE_AMOUNT_EURO, RET_SALE_AMOUNT2_ME, RET_SALE_AMOUNT2_EURO, RET_AMOUNT_ME,
	RET_AMOUNT_EURO, RET_DESCR3, RET_EXTERNAL
FROM
  ASA_RECORD_TASK
WHERE
  asa_record_id=pAsa_record_id
  AND ASA_RECORD_EVENTS_ID = old_ASA_RECORD_EVENTS_ID;
END;

  FUNCTION GET_LAST_CURRENT_DOCID(aRecordId ASA_RECORD.ASA_RECORD_ID%TYPE) RETURN NUMBER
  IS
  ret DOC_DOCUMENT.DOC_DOCUMENT_ID%TYPE;
  BEGIN

  SELECT
    MAX(doc_document_id) INTO ret
  FROM
	 ASA_BINDED_DOCUMENTS DB,
	 ASA_RECORD R
  WHERE
	  R.ASA_RECORD_ID=DB.ASA_RECORD_ID
	  AND R.C_ASA_REP_STATUS = DB.c_asa_rep_status
	  AND R.asa_recorD_id=aRecordId;

	RETURN ret;

  EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN NULL;

  END;

  FUNCTION GET_LAST_CURRENT_DOC_INFO(aRecordId ASA_RECORD.ASA_RECORD_ID%TYPE) RETURN VARCHAR2
  IS
    ret VARCHAR2(200);
  BEGIN
    SELECT DMT_NUMBER INTO ret
	FROM
	  DOC_DOCUMENT
	WHERE DOC_DOCUMENT_ID=GET_LAST_CURRENT_DOCID(aRecordId);
  RETURN ret;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;

  PROCEDURE HAS_ACCEPT_POLICIES(accountName WEB_USER.WEU_LOGIN_NAME%TYPE, returnValue OUT VARCHAR2) IS
  BEGIN
    SELECT
	  COUNT(*) INTO returnValue
	FROM
	  WEB_USER
	WHERE
	  WEU_LOGIN_NAME LIKE accountName
	  AND (WEU_CONFIRM_VALUE IS NOT NULL) AND (WEU_CONFIRM_VALUE<>'REFUSED');
  END;

  PROCEDURE ACCEPT_POLICIES(accountName WEB_USER.WEU_LOGIN_NAME%TYPE) IS
  BEGIN
    UPDATE
	  WEB_USER
	SET
	  WEU_CONFIRM_VALUE = TO_CHAR(SYSDATE,'dd.mm.yyyy')
	WHERE
	  WEU_LOGIN_NAME LIKE accountName;
  END;

  PROCEDURE REFUSE_POLICIES(accountName WEB_USER.WEU_LOGIN_NAME%TYPE) IS
  BEGIN
    UPDATE
	  WEB_USER
	SET
	  WEU_CONFIRM_VALUE = 'REFUSED'
	WHERE
	  WEU_LOGIN_NAME LIKE accountName;
  END;

FUNCTION getnbtotdays (arecordid asa_record.asa_record_id%TYPE)
      RETURN NUMBER
   IS
      RESULT      NUMBER (3);
   BEGIN
      RESULT := 0;

      SELECT   history.are_nb_days
             + history.are_nb_days_ctrl
             + history.are_nb_days_sending
             + history.are_nb_days_wait_max
        INTO RESULT
        FROM asa_delay_history history,
             (SELECT MAX (asa_delay_history_id) asa_delay_history_id
                FROM asa_delay_history
               WHERE asa_record_id = arecordid) history_max
       WHERE history.asa_delay_history_id = history_max.asa_delay_history_id;

      RETURN RESULT;
   END getnbtotdays;

END Web_Asa_Record;
