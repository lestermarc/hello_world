
  CREATE OR REPLACE PROCEDURE "C_ITX"."ACT_JOB_JOURNAL_UPDATE" (aFYE_NO_EXERCICE ACS_FINANCIAL_YEAR.FYE_NO_EXERCICE%type,
                                                   aJOU_NUMBER      ACT_JOURNAL.JOU_NUMBER%type)
/**
* Description
*
* @lastUpdate
* @version 2003
* @public
* @param aFYE_NO_EXERCICE
* @param aJOU_NUMBER
*/
is
  JournalId ACT_JOURNAL.ACT_JOURNAL_ID%type;
  JobId     ACT_JOURNAL.ACT_JOB_ID%type;
  Integrate ACJ_JOB_TYPE.C_ACI_FINANCIAL_LINK%type;

-----
begin
  -- Recherche info journal Financier
  begin
    select JOU.ACT_JOURNAL_ID,
          JOU.ACT_JOB_ID,
          TYP.C_ACI_FINANCIAL_LINK into JournalId, JobId, Integrate
      from ACS_ACCOUNTING     ACC,
          ACJ_JOB_TYPE       TYP,
          ACT_JOB            JOB,
          ACT_JOURNAL        JOU,
          ACS_FINANCIAL_YEAR YEA
        where YEA.FYE_NO_EXERCICE       = aFYE_NO_EXERCICE
          and YEA.ACS_FINANCIAL_YEAR_ID = JOU.ACS_FINANCIAL_YEAR_ID
          and JOU.ACT_JOB_ID            = JOB.ACT_JOB_ID
          and JOU.ACS_ACCOUNTING_ID     = ACC.ACS_ACCOUNTING_ID
          and TYP.ACJ_JOB_TYPE_ID       = JOB.ACJ_JOB_TYPE_ID
          and ACC.C_TYPE_ACCOUNTING     = 'FIN'
          and JOU.JOU_NUMBER            = aJOU_NUMBER
          and JOB.C_JOB_STATE           = 'DEF';
  exception
    when NO_DATA_FOUND then
      JobId := null;
  end;

  -- Recherche info journal Analytique
  if JobId is null then
    begin
      select JOU.ACT_JOURNAL_ID,
            JOU.ACT_JOB_ID,
            TYP.C_ACI_FINANCIAL_LINK into JournalId, JobId, Integrate
        from ACS_ACCOUNTING     ACC,
            ACJ_JOB_TYPE       TYP,
            ACT_JOB            JOB,
            ACT_JOURNAL        JOU,
            ACS_FINANCIAL_YEAR YEA
          where YEA.FYE_NO_EXERCICE       = aFYE_NO_EXERCICE
            and YEA.ACS_FINANCIAL_YEAR_ID = JOU.ACS_FINANCIAL_YEAR_ID
            and JOU.ACT_JOB_ID            = JOB.ACT_JOB_ID
            and JOU.ACS_ACCOUNTING_ID     = ACC.ACS_ACCOUNTING_ID
            and TYP.ACJ_JOB_TYPE_ID       = JOB.ACJ_JOB_TYPE_ID
            and ACC.C_TYPE_ACCOUNTING     = 'MAN'
            and JOU.JOU_NUMBER            = aJOU_NUMBER
            and JOB.C_JOB_STATE           = 'DEF';
    exception
      when NO_DATA_FOUND then
        JobId := null;
    end;
  end if;

  if JobId is null then
    raise_application_error(-20000, 'PCS - procedure ACT_JOB_JOURNAL_UPDATE - Journal not found !');
  end if;

  update ACT_JOB
    set C_JOB_STATE = decode(Integrate, 1, 'PEND', 'FINT')
    where ACT_JOB_ID = JobId;

  update ACT_ETAT_JOURNAL
    set C_ETAT_JOURNAL = 'PROV'
    where ACT_JOURNAL_ID in (select ACT_JOURNAL_ID
	                           from ACT_JOURNAL
                               where ACT_JOB_ID = JobId);

  delete from ACT_PERIOD_BALANCE_COLL
    where ACT_JOURNAL_ID = JournalId;

  commit;

end ACT_JOB_JOURNAL_UPDATE;




  CREATE OR REPLACE PROCEDURE "C_ITX"."ACT_PERIOD_BALANCE_UPDATE" (aFYE_NO_EXERCICE ACS_FINANCIAL_YEAR.FYE_NO_EXERCICE%type,
                                                      aJOU_NUMBER      ACT_JOURNAL.JOU_NUMBER%type)
/**
* Description
*
* @lastUpdate
* @version DEVELOP
* @public
* @param aFYE_NO_EXERCICE
* @param aJOU_NUMBER
*/
is
  ---------------------
  function IsToTransfer(aACT_JOURNAL_ID ACT_JOURNAL.ACT_JOURNAL_ID%type)
    return number
  is
    Result    number := 0;
    JournalId ACT_JOURNAL.ACT_JOURNAL_ID%type;

  begin
    begin
      select ACT_JOURNAL_ID into JournalId
        from ACT_PERIOD_BALANCE_COLL
        where ACT_JOURNAL_ID = aACT_JOURNAL_ID;
    exception
      when TOO_MANY_ROWS then
        Result := 0;
      when NO_DATA_FOUND then
        Result := 1;
    end;
    return Result;
  end IsToTransfer;

  -------------------------
  procedure JournalTransfer(aACT_JOURNAL_ID ACT_JOURNAL.ACT_JOURNAL_ID%type)
  is
    cursor JournalImputationsCursor(aACT_JOURNAL_ID ACT_JOURNAL.ACT_JOURNAL_ID%type) is
      select IMP.ACS_FINANCIAL_ACCOUNT_ID,
             IMP.ACS_PERIOD_ID,
             IMP2.ACS_PERIOD_ID ACS2_PERIOD_ID,
             CAT.ACJ_CATALOGUE_DOCUMENT_ID,
             CAT2.ACJ_CATALOGUE_DOCUMENT_ID ACJ2_CATALOGUE_DOCUMENT_ID,
             IMP.ACS_FINANCIAL_CURRENCY_ID,
             count(*) NUMBER_OF_DOCUMENT,
             sum(IMP.IMF_AMOUNT_LC_D)  IMF_AMOUNT_LC_D,
             sum(IMP.IMF_AMOUNT_LC_C)  IMF_AMOUNT_LC_C,
             sum(IMP.IMF_AMOUNT_FC_D)  IMF_AMOUNT_FC_D,
             sum(IMP.IMF_AMOUNT_FC_C)  IMF_AMOUNT_FC_C,
             sum(IMP.IMF_AMOUNT_EUR_D) IMF_AMOUNT_EUR_D,
             sum(IMP.IMF_AMOUNT_EUR_C) IMF_AMOUNT_EUR_C
        from
             ACT_FINANCIAL_IMPUTATION IMP2,
             ACJ_CATALOGUE_DOCUMENT   CAT2,
             ACT_DOCUMENT             DOC2,
             ACT_EXPIRY               EXP,
             ACT_DET_PAYMENT          DET,
             ACJ_CATALOGUE_DOCUMENT   CAT,
             ACS_FINANCIAL_ACCOUNT    FIN,
             ACT_FINANCIAL_IMPUTATION IMP,
             ACT_DOCUMENT             DOC,
             ACT_JOURNAL              JOU
        where JOU.ACT_JOURNAL_ID             = aACT_JOURNAL_ID
          and JOU.ACT_JOB_ID                 = DOC.ACT_JOB_ID
          and DOC.ACT_DOCUMENT_ID            = IMP.ACT_DOCUMENT_ID
          and IMP.ACS_FINANCIAL_ACCOUNT_ID   = FIN.ACS_FINANCIAL_ACCOUNT_ID
          and FIN.FIN_COLLECTIVE             = 1
          and DOC.ACJ_CATALOGUE_DOCUMENT_ID  = CAT.ACJ_CATALOGUE_DOCUMENT_ID
          and IMP.ACT_DET_PAYMENT_ID         = DET.ACT_DET_PAYMENT_ID(+)
          and DET.ACT_EXPIRY_ID              = EXP.ACT_EXPIRY_ID(+)
          and EXP.ACT_DOCUMENT_ID            = DOC2.ACT_DOCUMENT_ID(+)
          and DOC2.ACJ_CATALOGUE_DOCUMENT_ID = CAT2.ACJ_CATALOGUE_DOCUMENT_ID(+)
          and DOC2.ACT_DOCUMENT_ID           = IMP2.ACT_DOCUMENT_ID(+)
          and nvl(IMP2.IMF_PRIMARY, 1)       = 1
        group by IMP.ACS_FINANCIAL_ACCOUNT_ID,
                 IMP.ACS_PERIOD_ID,
                 IMP2.ACS_PERIOD_ID,
                 CAT.ACJ_CATALOGUE_DOCUMENT_ID,
                 CAT2.ACJ_CATALOGUE_DOCUMENT_ID,
                 IMP.ACS_FINANCIAL_CURRENCY_ID;

    ImputationRow JournalImputationsCursor%rowtype;
  -----
  begin
    open JournalImputationsCursor(aACT_JOURNAL_ID);
    fetch JournalImputationsCursor into ImputationRow;
    while JournalImputationsCursor%found loop
      insert into ACT_PERIOD_BALANCE_COLL
        (ACT_PERIOD_BALANCE_COLL_ID,
         ACT_JOURNAL_ID,
         ACS_FINANCIAL_ACCOUNT_ID,
         ACS_PERIOD_ID,
         ACS2_PERIOD_ID,
         ACJ_CATALOGUE_DOCUMENT_ID,
         ACJ2_CATALOGUE_DOCUMENT_ID,
         ACS_FINANCIAL_CURRENCY_ID,
         NUMBER_OF_DOCUMENT,
         IMF_AMOUNT_LC_D,
         IMF_AMOUNT_LC_C,
         IMF_AMOUNT_FC_D,
         IMF_AMOUNT_FC_C,
         IMF_AMOUNT_EUR_D,
         IMF_AMOUNT_EUR_C)
      values
        (INIT_ID_SEQ.nextval,
         aACT_JOURNAL_ID,
         ImputationRow.ACS_FINANCIAL_ACCOUNT_ID,
         ImputationRow.ACS_PERIOD_ID,
         ImputationRow.ACS2_PERIOD_ID,
         ImputationRow.ACJ_CATALOGUE_DOCUMENT_ID,
         ImputationRow.ACJ2_CATALOGUE_DOCUMENT_ID,
         ImputationRow.ACS_FINANCIAL_CURRENCY_ID,
         ImputationRow.NUMBER_OF_DOCUMENT,
         ImputationRow.IMF_AMOUNT_LC_D,
         ImputationRow.IMF_AMOUNT_LC_C,
         ImputationRow.IMF_AMOUNT_FC_D,
         ImputationRow.IMF_AMOUNT_FC_C,
         ImputationRow.IMF_AMOUNT_EUR_D,
         ImputationRow.IMF_AMOUNT_EUR_C);
      fetch JournalImputationsCursor into ImputationRow;
    end loop;
    close JournalImputationsCursor;
  end JournalTransfer;

-----
begin
  for Journal in (select JOU.ACT_JOURNAL_ID
                    from ACT_ETAT_JOURNAL   ETA,
                         ACT_JOURNAL        JOU,
                         ACS_FINANCIAL_YEAR YEA
                    where ((YEA.FYE_NO_EXERCICE       = aFYE_NO_EXERCICE) or aFYE_NO_EXERCICE is null)
                      and   YEA.ACS_FINANCIAL_YEAR_ID = JOU.ACS_FINANCIAL_YEAR_ID
                      and ((JOU.JOU_NUMBER            = aJOU_NUMBER) or aJOU_NUMBER is null)
                      and   JOU.ACT_JOURNAL_ID        = ETA.ACT_JOURNAL_ID
                      and   ETA.C_SUB_SET             = 'ACC'
                      and   ETA.C_ETAT_JOURNAL        = 'DEF') loop
    if IsToTransfer(Journal.ACT_JOURNAL_ID) = 1 then
      JournalTransfer(Journal.ACT_JOURNAL_ID);
	  commit;
    end if;
  end loop;
end ACT_PERIOD_BALANCE_UPDATE;




  CREATE OR REPLACE PROCEDURE "C_ITX"."ACT_YEARS_CALCULATION" (aType in number default 0)
/**
* Description
*   Recalulation des totaux par type
* @author BL
* @lastUpdate
* @version DEVELOP
* @public
* @param aType  :  0: Toutes, 1: Financières, 2: Analytiques
*/
is
  -- curseur de recherche des exercices comptables
  cursor YearsCursor is
    select ACS_FINANCIAL_YEAR_ID
      from ACS_FINANCIAL_YEAR
      where C_STATE_FINANCIAL_YEAR in ('CLO', 'ACT')
      order by FYE_NO_EXERCICE asc;

  YearId ACS_FINANCIAL_YEAR.ACS_FINANCIAL_YEAR_ID%type;

-----
begin

  open YearsCursor;
  fetch YearsCursor into YearId;

  while YearsCursor%found loop

    if aType in (0, 1) then
      ACT_TOTAL_CALCULATION.YearCalculation(YearId);
      commit;
    end if;

    if aType in (0, 2) then
      ACT_TOTAL_CALCULATION.MgmYearCalculation(YearId);
      commit;
    end if;

    fetch YearsCursor into YearId;

  end loop;

  close YearsCursor;

end ACT_YEARS_CALCULATION;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETINTERVALDATES" (aFrom      in varchar2,
                                                aTo        in varchar2,
                                                aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
  /**
  * Description  Initialisation des variables "package" ACT_FUNCTIONS.DATE_FROM et ACT_FUNCTIONS.DATE_TO
                 afin de pouvoir les exploiter par le biais de vues d'interrogation
  *
  * @author   Bruno Lachausse
  * @version  21.06.2001
  * @public
  * @param    aFrom       Date de ...
  * @param    aTo         Date à  ...
  * @param    aRefCursor  Variable curseur en entrée/sortie permettant l'exploitation de la procédure par Cystal Report 8
  * .........
  * @return   return value for functions
  */
begin
  ACT_FUNCTIONS.DATE_FROM := to_date(aFrom, 'yyyymmdd');
  ACT_FUNCTIONS.DATE_TO   := to_date(aTo, 'yyyymmdd');
  open aRefCursor for
    select *
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_ACR_ACC_BALANCE_DATE" (aACC_NUMBER_From       in     varchar2,
                                                         aACC_NUMBER_To         in     varchar2,
                                                         aACS_FINANCIAL_YEAR_ID in     varchar2,
                                                         aCUMUL_DATE            in     varchar2,
                                                         aCUMUL_DATE_FROM       in     varchar2,
                                                         aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
  ACR_FUNCTIONS.ACC_NUMBER1     := aACC_NUMBER_From;
  ACR_FUNCTIONS.ACC_NUMBER2     := aACC_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID     := aACS_FINANCIAL_YEAR_ID;
  ACR_FUNCTIONS.CUMUL_DATE      := to_date(aCUMUL_DATE, 'yyyymmdd');
  ACR_FUNCTIONS.CUMUL_DATE_FROM := to_date(aCUMUL_DATE_FROM, 'yyyymmdd');
  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION := 0;
  end if;
  open aRefCursor for
    select *
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_ACT_EXPIRIES" (aDate            in     varchar2,
                                                 aACC_NUMBER_From in     varchar2,
                                                 aACC_NUMBER_To   in     varchar2,
                                                 aBRO             in     varchar2,
                                                 aRateType        in     varchar2,
                                                 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
  ACT_FUNCTIONS.ANALYSE_DATE       := to_date(aDate, 'yyyymmdd');
  ACT_FUNCTIONS.ANALYSE_AUXILIARY1 := aACC_NUMBER_From;
  ACT_FUNCTIONS.ANALYSE_AUXILIARY2 := aACC_NUMBER_To;
  if aBRO = '1' then
    ACT_FUNCTIONS.BRO := 1;
  else
    ACT_FUNCTIONS.BRO := 0;
  end if;
  begin
    ACT_CURRENCY_EVALUATION.RATE_TYPE := to_number(aRateType);
  exception
    when INVALID_NUMBER then
      ACT_CURRENCY_EVALUATION.RATE_TYPE := 1;  -- Cours du jour
  end;
  open aRefCursor for
    select *
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_ACT_IMPUTATION" (aACC_NUMBER_From       in     varchar2,
                                                   aACC_NUMBER_To         in     varchar2,
                                                   aACS_FINANCIAL_YEAR_ID in     varchar2,
                                                   aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
  ACR_FUNCTIONS.ACC_NUMBER1    := aACC_NUMBER_From;
  ACR_FUNCTIONS.ACC_NUMBER2    := aACC_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID    := aACS_FINANCIAL_YEAR_ID;
  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION := 0;
  end if;
  open aRefCursor for
    select *
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_ACT_JOURNAL_COND" (aJOU_NUMBER_From       in     varchar2,
                                                     aJOU_NUMBER_To         in     varchar2,
                                                     aACS_FINANCIAL_YEAR_ID in     varchar2,
                                                     aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
  ACR_FUNCTIONS.JOU_NUMBER1 := aJOU_NUMBER_From;
  ACR_FUNCTIONS.JOU_NUMBER2 := aJOU_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID := aACS_FINANCIAL_YEAR_ID;
  open aRefCursor for
    select *
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_GCO_GOOD_ID" (aGoodId in varchar2,
                                                 aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
PPS_INIT.GCO_GOOD_ID := aGoodId;
open aRefCursor for
     select * from DUAL;

end C8_SetV_GCO_GOOD_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C8_SETV_PPS_NOMENCLATURE_ID" (aNomId in varchar2,
                                                         aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
is
begin
PPS_INIT.PPS_NOMENCLATURE_ID := aNomId;
open aRefCursor for
     select * from DUAL;
end C8_SetV_PPS_NOMENCLATURE_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETINTERVALDATES" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                aFrom      in varchar2,
                                                aTo        in varchar2)
is
begin
  if (aFrom is not null) and (Length(Trim(aFrom)) > 0) then
    ACT_FUNCTIONS.DATE_FROM := to_date(aFrom, 'yyyymmdd');
  end if;
  if (aTo is not null) and (Length(Trim(aTo)) > 0) then
    ACT_FUNCTIONS.DATE_TO   := to_date(aTo, 'yyyymmdd');
  end if;
  open aRefCursor for
    select 1 ID
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_ACR_ACC_BALANCE_DATE" (aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                         aACC_NUMBER_From       in     varchar2,
                                                         aACC_NUMBER_To         in     varchar2,
                                                         aACS_FINANCIAL_YEAR_ID in     varchar2,
                                                         aCUMUL_DATE            in     varchar2,
                                                         aCUMUL_DATE_FROM       in     varchar2)
is
begin
  if (aACC_NUMBER_From is not null) and (Length(Trim(aACC_NUMBER_From)) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1     := aACC_NUMBER_From;
  else
    ACR_FUNCTIONS.ACC_NUMBER1     := ' ';
  end if;
  if (aACC_NUMBER_To is not null) and (Length(Trim(aACC_NUMBER_To)) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2     := aACC_NUMBER_To;
  end if;
  if (aACS_FINANCIAL_YEAR_ID is not null) and (Length(Trim(aACS_FINANCIAL_YEAR_ID)) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID     := aACS_FINANCIAL_YEAR_ID;
  end if;
  if (aCUMUL_DATE is not null) and (Length(Trim(aCUMUL_DATE)) > 0) then
    ACR_FUNCTIONS.CUMUL_DATE      := to_date(aCUMUL_DATE, 'yyyymmdd');
  end if;
  if (aCUMUL_DATE_FROM is not null) and (Length(Trim(aCUMUL_DATE_FROM)) > 0) then
    ACR_FUNCTIONS.CUMUL_DATE_FROM := to_date(aCUMUL_DATE_FROM, 'yyyymmdd');
  end if;
  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION := 0;
  end if;
  open aRefCursor for
    select 1 ID
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_ACT_EXPIRIES" (aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                 aDate            in     varchar2,
                                                 aACC_NUMBER_From in     varchar2,
                                                 aACC_NUMBER_To   in     varchar2,
                                                 aBRO             in     varchar2,
                                                 aRateType        in     varchar2)
is
begin
  if (aDate is not null) and (Length(Trim(aDate)) > 0) then
    ACT_FUNCTIONS.ANALYSE_DATE       := to_date(aDate, 'YYYYMMDD');
  end if;
  if (aACC_NUMBER_From is not null) and (Length(Trim(aACC_NUMBER_From)) > 0)   then
    ACT_FUNCTIONS.ANALYSE_AUXILIARY1 := aACC_NUMBER_From;
  else
    ACT_FUNCTIONS.ANALYSE_AUXILIARY1 := ' ';
  end if;
  if (aACC_NUMBER_To is not null) and (Length(Trim(aACC_NUMBER_To)) > 0)   then
    ACT_FUNCTIONS.ANALYSE_AUXILIARY2 := aACC_NUMBER_To;
  else
    ACT_FUNCTIONS.ANALYSE_AUXILIARY2 := ' ';
  end if;
  if (aBRO is not null) and (Length(Trim(aBRO)) > 0)   then
    if aBRO = '1' then
      ACT_FUNCTIONS.BRO := 1;
    else
      ACT_FUNCTIONS.BRO := 0;
    end if;
  end if;

  if (aRateType is not null) and (Length(Trim(aRateType)) > 0)   then
    begin
      ACT_CURRENCY_EVALUATION.RATE_TYPE := to_number(aRateType);
    exception
      when INVALID_NUMBER then
        ACT_CURRENCY_EVALUATION.RATE_TYPE := 1;  -- Cours du jour
    end;
  end if;

  open aRefCursor for
    select 1 ID
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_ACT_IMPUTATION" (aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                   aACC_NUMBER_From       in     varchar2,
                                                   aACC_NUMBER_To         in     varchar2,
                                                   aACS_FINANCIAL_YEAR_ID in     varchar2)
is
begin
  if (aACC_NUMBER_From is not null) and (Length(Trim(aACC_NUMBER_From)) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1    := aACC_NUMBER_From;
  else
    ACR_FUNCTIONS.ACC_NUMBER1    := ' ';
  end if;
  if (aACC_NUMBER_To is not null) and (Length(Trim(aACC_NUMBER_To)) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2    := aACC_NUMBER_To;
  end if;
  if (aACS_FINANCIAL_YEAR_ID is not null) and (Length(Trim(aACS_FINANCIAL_YEAR_ID)) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID    := aACS_FINANCIAL_YEAR_ID;
  end if;
  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION := 0;
  end if;
  open aRefCursor for
    select 1 ID
    from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_ACT_JOURNAL_COND" (aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                     aJOU_NUMBER_From       in     varchar2,
                                                     aJOU_NUMBER_To         in     varchar2,
                                                     aACS_FINANCIAL_YEAR_ID in     varchar2)
is
begin
  if (aJOU_NUMBER_From is not null) and (Length(Trim(aJOU_NUMBER_From)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER1 := aJOU_NUMBER_From;
  else
    ACR_FUNCTIONS.JOU_NUMBER1 := ' ';
  end if;
  if (aJOU_NUMBER_To is not null) and (Length(Trim(aJOU_NUMBER_To)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER2 := aJOU_NUMBER_To;
  end if;
  if (aACS_FINANCIAL_YEAR_ID is not null) and (Length(Trim(aACS_FINANCIAL_YEAR_ID)) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID := aACS_FINANCIAL_YEAR_ID;
  end if;
  open aRefCursor for
    select 1 ID
      from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_GCO_GOOD_ID" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                 aGoodId in varchar2)
is
begin
if length (trim(aGoodId)) > 0 then
   PPS_INIT.GCO_GOOD_ID := aGoodId;
end if;

open aRefCursor for
     select 1 ID from DUAL;

end C9_SetV_GCO_GOOD_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SETV_PPS_NOMENCLATURE_ID" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                         aNomId in varchar2)
is
begin

if length (trim(aNomId)) > 0 then
   PPS_INIT.PPS_NOMENCLATURE_ID := aNomId;
end if;

open aRefCursor for
     select 1 ID from DUAL;
end C9_SetV_PPS_NOMENCLATURE_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SET_ACT_VAT_DET_ACCOUNT" (pRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                       aFrom      in varchar2,
                                                       aTo        in varchar2,
                                                       pVatDetAccountId in varchar2)
is
begin
  if aFrom is not null and Length(Trim(aFrom)) > 0 then
    ACT_FUNCTIONS.DATE_FROM := to_date(aFrom, 'YYYYMMDD');
  end if;
  if aTo is not null  and Length(Trim(aTo)) > 0 then
    ACT_FUNCTIONS.DATE_TO   := to_date(aTo, 'YYYYMMDD');
  end if;
  if (pVatDetAccountId is not null) and (Length(Trim(pVatDetAccountId)) > 0) and (pVatDetAccountId <> '0') then
    ACT_FUNCTIONS.VAT_DET_ACC_ID  := pVatDetAccountId;
  end if;
  open pRefCursor for
   select 1 ID
   from DUAL;
end;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_SQM_GET_RESULTS_DETAIL" (

aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
EvaluationId in varchar2,
ResultId in varchar2,
ThirdId in varchar2)

IS

BEGIN

OPEN AREFCURSOR FOR

SELECT PEN.*,
AXE.SAX_NAME,
AXE.C_AXIS_TYPE,
AXE.SAX_DESCRIPTION,
AXE.SAX_COMMENT,
DET.PDE_BASIS_DELAY,
DET.PDE_INTERMEDIATE_DELAY,
DET.PDE_FINAL_DELAY,
DET.PDE_BASIS_QUANTITY,
DET.PDE_INTERMEDIATE_QUANTITY,
DET.PDE_FINAL_QUANTITY,
DOC.DMT_NUMBER,
DOC.DMT_DATE_DOCUMENT,
DOC.DMT_DATE_VALUE,
DOC.DMT_PARTNER_NUMBER,
DOC.DMT_DATE_PARTNER_DOCUMENT,
DOC.DMT_PARTNER_REFERENCE,
GOO.GOO_MAJOR_REFERENCE,
GOO.GOO_SECONDARY_REFERENCE,
PAC.REP_DESCR,
REC.RCO_NUMBER
from SQM_PENALTY PEN,
	 SQM_EVAL_S_PENALTY SPEN,
	 SQM_AXIS AXE,
	 DOC_POSITION_DETAIL DET,
	 DOC_POSITION POS,
	 DOC_DOCUMENT DOC,
	 GCO_GOOD GOO,
	 PAC_REPRESENTATIVE PAC,
	 DOC_RECORD REC
WHERE SQM_FUNCTIONS.IsPenaltyUsed(PEN.SQM_PENALTY_ID, To_Number(ResultId))<>0
AND SPEN.SQM_EVALUATION_ID = To_Number(EvaluationId)
AND SPEN.SQM_PENALTY_ID = PEN.SQM_PENALTY_ID
AND PEN.SQM_AXIS_ID = AXE.SQM_AXIS_ID
AND PEN.PAC_THIRD_ID = To_Number(ThirdId)
AND PEN.DOC_POSITION_DETAIL_ID = DET.DOC_POSITION_DETAIL_ID
AND PEN.DOC_POSITION_ID = POS.DOC_POSITION_ID
AND DET.DOC_DOCUMENT_ID = DOC.DOC_DOCUMENT_ID
AND PEN.GCO_GOOD_ID = GOO.GCO_GOOD_ID (+)
AND POS.PAC_REPRESENTATIVE_ID = PAC.PAC_REPRESENTATIVE_ID (+)
AND POS.DOC_RECORD_ID = REC.DOC_RECORD_ID (+);

END;




  CREATE OR REPLACE PROCEDURE "C_ITX"."C9_STM_DELIVERY_PLAN_BY_WEEK" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     varchar2
, PROCPARAM_1 in     varchar2
)

is
/**
* Procédure stockée utilisée pour le rapport STM_DELIVERY_PLAN_BY_WEEK_RPT (Liste des cours de matières premières)
*
* @author TDY
* @lastUpdate
* @version 2003
* @public
* @param PROCPARAM_0	Date de début de 1ere semaine 'yyyyMMdd' à analyser
* @param PROCPARAM_0	Date de fin de dernière semaine 'yyyyMMdd'
*/
begin

open aRefCursor for
 SELECT DPL_YEAR,
        DIU_NAME,
		DED_DATE,
		DED_CODE
 FROM   STM_DELIVERY_S_DIU S,
        STM_DELIVERY_PLAN  P,
		STM_DISTRIBUTION_UNIT U,
        (select *
		 from   STM_DELIVERY_DAY
		 where (DED_DATE >=TO_DATE (PROCPARAM_0, 'YYYYMMDD') AND DED_DATE<=TO_DATE (PROCPARAM_1, 'YYYYMMDD'))) D
 WHERE  S.STM_DELIVERY_PLAN_ID = P.STM_DELIVERY_PLAN_ID AND
        S.STM_DISTRIBUTION_UNIT_ID= U.STM_DISTRIBUTION_UNIT_ID AND
	    S.STM_DELIVERY_S_DIU_ID   = D.STM_DELIVERY_S_DIU_ID(+);

end C9_STM_DELIVERY_PLAN_BY_WEEK;




  CREATE OR REPLACE PROCEDURE "C_ITX"."DOC_RECAP_POS" (DOCUMENT_ID NUMBER)
IS
/**
* Description
*    procedure de mise à jour des positions 'RECAP'
* @author X
* @param DOCUMENT_ID : id du document à mettre à jour.
*/

  -- Type de position
  gauge_type_pos doc_position.c_gauge_type_pos%type;
  --Id de la position
  position_id doc_position.doc_position_id%type;
  -- Variables de totalisation
  tot_basis_quantity doc_position.pos_basis_quantity%type;
  tot_intermediate_quantity doc_position.pos_intermediate_quantity%type;
  tot_final_quantity doc_position.pos_final_quantity%type;
  tot_discount_amount doc_position.pos_discount_amount%type;
  tot_charge_amount doc_position.pos_charge_amount%type;
  tot_vat_amount doc_position.pos_vat_amount%type;
  tot_gross_unit_value doc_position.pos_gross_unit_value%type;
  tot_net_unit_value doc_position.pos_net_unit_value%type;
  tot_gross_value doc_position.pos_gross_value%type;
  tot_net_value_excl doc_position.pos_net_value_excl%type;
  tot_net_value_incl doc_position.pos_net_value_incl%type;
  tot_net_weight doc_position.pos_net_weight%type;
  tot_gross_weight doc_position.pos_gross_weight%type;
  -- curseur sur les positions du document dans l'ordre des num¿ros de position
  CURSOR POSITION_CURSOR(doc_id NUMBER) IS
  SELECT DOC_POSITION_ID,
         C_GAUGE_TYPE_POS,
         POS_BASIS_QUANTITY,
         POS_INTERMEDIATE_QUANTITY,
         POS_FINAL_QUANTITY,
         POS_DISCOUNT_AMOUNT,
         POS_CHARGE_AMOUNT,
         POS_VAT_AMOUNT,
         POS_GROSS_UNIT_VALUE,
         POS_NET_UNIT_VALUE,
         POS_GROSS_VALUE,
         POS_NET_VALUE_EXCL,
         POS_NET_VALUE_INCL,
         POS_NET_WEIGHT,
         POS_GROSS_WEIGHT
  FROM DOC_POSITION
  WHERE DOC_DOCUMENT_ID = doc_id
  ORDER BY POS_NUMBER;
  POSITION_TUPLE POSITION_CURSOR%ROWTYPE;
BEGIN
  -- initialisation des compteurs de totalisation
  tot_basis_quantity        := 0;
  tot_intermediate_quantity := 0;
  tot_final_quantity        := 0;
  tot_discount_amount       := 0;
  tot_charge_amount         := 0;
  tot_vat_amount            := 0;
  tot_gross_unit_value      := 0;
  tot_net_unit_value        := 0;
  tot_gross_value           := 0;
  tot_net_value_excl        := 0;
  tot_net_value_incl        := 0;
  tot_net_weight            := 0;
  tot_gross_weight          := 0;
  -- ouverture du curseur
  OPEN POSITION_CURSOR(DOCUMENT_ID);

  -- premi¿re position
  FETCH POSITION_CURSOR INTO position_tuple;

  WHILE POSITION_CURSOR%FOUND LOOP

    -- si on est sur une posituion de r¿cap, on la met ¿ jour avec les totaux des lignes pr¿c¿dente
    IF position_tuple.c_gauge_type_pos = '6' THEN
       UPDATE DOC_POSITION SET
         POS_BASIS_QUANTITY        = tot_basis_quantity,
         POS_INTERMEDIATE_QUANTITY = tot_intermediate_quantity,
         POS_FINAL_QUANTITY        = tot_final_quantity,
         POS_DISCOUNT_AMOUNT       = tot_discount_amount,
         POS_CHARGE_AMOUNT         = tot_charge_amount,
         POS_VAT_AMOUNT            = tot_vat_amount,
         POS_GROSS_UNIT_VALUE      = tot_gross_unit_value,
         POS_NET_UNIT_VALUE        = tot_net_unit_value,
         POS_GROSS_VALUE           = tot_gross_value,
         POS_NET_VALUE_EXCL        = tot_net_value_excl,
         POS_NET_VALUE_INCL        = tot_net_value_incl,
         POS_NET_WEIGHT            = tot_net_weight,
         POS_GROSS_WEIGHT          = tot_gross_weight
       WHERE DOC_POSITION_ID = position_tuple.doc_position_id;
       -- remise à zéro des compteurs de totalisation
       tot_basis_quantity        := 0;
       tot_intermediate_quantity := 0;
       tot_final_quantity        := 0;
       tot_discount_amount       := 0;
       tot_charge_amount         := 0;
       tot_vat_amount            := 0;
       tot_gross_unit_value      := 0;
       tot_net_unit_value        := 0;
       tot_gross_value           := 0;
       tot_net_value_excl        := 0;
       tot_net_value_incl        := 0;
       tot_net_weight            := 0;
       tot_gross_weight          := 0;
    ELSE
      -- cumul des positions
      tot_basis_quantity        := tot_basis_quantity        + position_tuple.pos_basis_quantity;
      tot_intermediate_quantity := tot_intermediate_quantity + position_tuple.pos_intermediate_quantity;
      tot_final_quantity        := tot_final_quantity        + position_tuple.pos_final_quantity;
      tot_discount_amount       := tot_discount_amount       + position_tuple.pos_discount_amount;
      tot_charge_amount         := tot_charge_amount         + position_tuple.pos_charge_amount;
      tot_vat_amount            := tot_vat_amount            + position_tuple.pos_vat_amount;
      tot_gross_unit_value      := tot_gross_unit_value      + position_tuple.pos_gross_unit_value;
      tot_net_unit_value        := tot_net_unit_value        + position_tuple.pos_net_unit_value;
      tot_gross_value           := tot_gross_value           + position_tuple.pos_gross_value;
      tot_net_value_excl        := tot_net_value_excl        + position_tuple.pos_net_value_excl;
      tot_net_value_incl        := tot_net_value_incl        + position_tuple.pos_net_value_incl;
      tot_net_weight            := tot_net_weight            + position_tuple.pos_net_weight;
      tot_gross_weight          := tot_gross_weight          + position_tuple.pos_gross_weight;
    END IF;

    -- position suivante
    FETCH POSITION_CURSOR INTO position_tuple;

  END LOOP;

  -- fermeture du curseur des positions
  CLOSE POSITION_CURSOR;

END DOC_RECAP_POS;




  CREATE OR REPLACE PROCEDURE "C_ITX"."DUPLICATEGOODNOMANDOPPLAN" (lMainPart in varchar2, lNewMainPart in varchar2)
/**
* Description
*    Méthode interne non publiée chez nos clients
*    Duplique un bien, sa nom de prod par défaut avec duplication des composants et également duplication de la gamme
*    dans le but de faire des tests
*    Principe Bien racine    XXXXXXXXX composants XXXXXXXXX1, XXXXXXXXX2... XXXXXXXXXn  Gamme XXXXXXXXX
*             nouvelle racine  YYYYYYY composants YYYYYYY1, YYYYYYY2... YYYYYYYn  Gamme YYYYYYY
*    Il est impératif d'avoir un bien racin organisé comme expliqué ci-dessus
*    Dans DEVELOP, il y a l'article 1000.05.STO qui est fait selon cette règle
* @created fp 20.06.2012
* @lastUpdate
* @public
* @param iMainPart : partie racine du bien à copier
* @param iNewMainPart : partie rtacine des nouveau biens créés
*/
is
  lMainGoodId    number;
  lNewMainGoodId number;
  lNewNomId      number                     := GetNewId;
  lNewPlanId     number(12)                 := GetNewId;
  lOldPlanId     number(12);
  ltplNom        PPS_NOMENCLATURE%rowtype;
begin
  -- Copie de la gamme opératoire
  declare
    ltplPlan fal_schedule_plan%rowtype;
  begin
    select *
      into ltplPlan
      from fal_schedule_plan
     where SCH_REF = lMainPart;

    lOldPlanId                     := ltplPlan.FAL_SCHEDULE_PLAN_ID;
    ltplPlan.FAL_SCHEDULE_PLAN_ID  := lNewPlanId;
    ltplPlan.SCH_REF               := lNewMainPart;
    ltplPlan.A_DATECRE             := sysdate;
    ltplPlan.A_DATEMOD             := null;
    ltplPlan.A_IDCRE               := PCS.PC_INIT_SESSION.GetUserIni;
    ltplPlan.A_IDMOD               := null;

    insert into fal_schedule_plan
         values ltplPlan;

    for ltplOperation in (select LSL.*
                            from fal_list_step_link LSL
                           where FAL_SCHEDULE_PLAN_ID = lOldPlanId) loop
      ltplOperation.FAL_SCHEDULE_STEP_ID  := GetNewId;
      ltplOperation.FAL_SCHEDULE_PLAN_ID  := lNewPlanId;
      ltplOperation.A_DATECRE             := sysdate;
      ltplOperation.A_DATEMOD             := null;
      ltplOperation.A_IDCRE               := PCS.PC_INIT_SESSION.GetUserIni;
      ltplOperation.A_IDMOD               := null;

      insert into fal_list_step_link
           values ltplOperation;
    end loop;
  exception
    when no_data_found then
      null;
  end;

  -- Copie du produit principal
  select GCO_GOOD_ID
    into lMainGoodId
    from GCO_GOOD
   where GOO_MAJOR_REFERENCE = lMainPart;

  GCO_PRC_GOOD.DuplicateProduct(iSourceGoodID      => lMainGoodId
                              , iNewGoodID         => lNewMainGoodId
                              , iNewMajorRef       => lNewMainPart
                              , iNewSecRef         => lNewMainPart
                              , iDuplStock         => 1
                              , iDuplPurchase      => 1
                              , iDuplManufacture   => 1
                              , iDuplSubcontract   => 1
                              , iDuplTariff        => 1
                               );

  -- Mise à jour de la gamme dans les données compl de fabrication
  update GCO_COMPL_DATA_MANUFACTURE
     set FAL_SCHEDULE_PLAN_ID = lNewPlanId
   where GCO_GOOD_ID = lNewMainGoodId;

  --Copie de la nomenclature
  select *
    into ltplNom
    from PPS_NOMENCLATURE
   where PPS_NOMENCLATURE_ID = PPS_I_LIB_FUNCTIONS.GetDefaultNomenclature(lMainGoodId, '2');

  ltplNom.PPS_NOMENCLATURE_ID  := lNewNomId;
  ltplNom.GCO_GOOD_ID          := lNewMainGoodId;
  ltplNom.A_DATECRE            := sysdate;
  ltplNom.A_DATEMOD            := null;
  ltplNom.A_IDCRE              := PCS.PC_INIT_SESSION.GetUserIni;
  ltplNom.A_IDMOD              := null;

  insert into PPS_NOMENCLATURE
       values ltplNom;

  -- Copie et duplication des composants de nomenclature
  for ltplComp in (select NOM.*
                     from PPS_NOM_BOND NOM
                    where PPS_NOMENCLATURE_ID = PPS_I_LIB_FUNCTIONS.GetDefaultNomenclature(lMainGoodId, '2') ) loop
    declare
      lNewCptId number;
      lCptRef   varchar2(30) := FWK_I_LIB_ENTITY.getVarchar2FieldFromPk('GCO_GOOD', 'GOO_MAJOR_REFERENCE', ltplComp.GCO_GOOD_ID);
    begin
      GCO_PRC_GOOD.DuplicateProduct(iSourceGoodID       => ltplComp.GCO_GOOD_ID
                                  , iNewGoodID          => lNewCptId
                                  , iNewMajorRef        => lNewMainPart || substr(lCptRef, -1, 1)
                                  , iNewSecRef          => lNewMainPart || substr(lCptRef, -1, 1)
                                  , iDuplStock          => 1
                                  , iDuplPurchase       => 1
                                  , iDuplManufacture    => 1
                                  , iDuplSubcontract    => 1
                                  , iDuplTariff         => 1
                                  , iDuplNomenclature   => 1
                                   );
      ltplComp.PPS_NOM_BOND_ID      := GetNewId;
      ltplComp.PPS_NOMENCLATURE_ID  := lNewNomId;
      ltplComp.GCO_GOOD_ID          := lNewCptId;
      ltplComp.A_DATECRE            := sysdate;
      ltplComp.A_DATEMOD            := null;
      ltplComp.A_IDCRE              := PCS.PC_INIT_SESSION.GetUserIni;
      ltplComp.A_IDMOD              := null;

      insert into PPS_NOM_BOND
           values ltplComp;
    end;
  end loop;
end DuplicateGoodNomAndOpPlan;


  CREATE OR REPLACE PROCEDURE "C_ITX"."FAL_C9_TRACABILITY_PRNT" (
  aRefCursor   in out Crystal_Cursor_Types.DualCursorTyp
, PARAMETER_0  in     GCO_GOOD.GOO_MAJOR_REFERENCE%type   -- Produit de ... (* si tous)
, PARAMETER_1  in     GCO_GOOD.GOO_MAJOR_REFERENCE%type   -- Produit à ... (* si tous)
, PARAMETER_2  in     FAL_TRACABILITY.HIS_PT_LOT%type   -- Lot de ... (* si tous)
, PARAMETER_3  in     FAL_TRACABILITY.HIS_PT_LOT%type   -- Lot à ... (* si tous)
, PARAMETER_4  in     FAL_TRACABILITY.HIS_PT_PIECE%type   -- Pièce de ... (* si tous)
, PARAMETER_5  in     FAL_TRACABILITY.HIS_PT_PIECE%type   -- Pièce à... (* si tous)
, PARAMETER_9  in     FAL_TRACABILITY.HIS_PT_VERSION%type   -- Version de ... (* si tous)
, PARAMETER_10 in     FAL_TRACABILITY.HIS_PT_VERSION%type   -- Version à... (* si tous)
, PARAMETER_11 in     FAL_TRACABILITY.HIS_CHRONOLOGY_PT%type   -- Chrono de ... (* si tous)
, PARAMETER_12 in     FAL_TRACABILITY.HIS_CHRONOLOGY_PT%type   -- Chrono à... (* si tous)
, PARAMETER_6  in     number   -- Profondeur de nomenclature visible souhaitée (=-1 si profondeur infinie)
, PARAMETER_7  in     integer   -- Voir tous les composants (1=Oui 2=Non)
, PARAMETER_8  in     PCS.PC_LANG.PC_LANG_ID%type   -- Langue de l'utilisateur
)
is
  /* Curseurs de sélection des informations à imprimer */
  -- Sélection des produits
  cursor CUR_GCO_GOOD_SELECTION
  is
    select distinct GOOD.GCO_GOOD_ID
                  , GOOD.GOO_MAJOR_REFERENCE
                  , GOOD.GOO_SECONDARY_REFERENCE
               from GCO_GOOD GOOD
              where (   PARAMETER_0 = '*'
                     or GOOD.GOO_MAJOR_REFERENCE >= PARAMETER_0)
                and (   PARAMETER_1 = '*'
                     or GOOD.GOO_MAJOR_REFERENCE <= PARAMETER_1)
                and exists(select 1
                             from GCO_CHARACTERIZATION
                            where GCO_GOOD_ID = GOOD.GCO_GOOD_ID)
                and (   PARAMETER_2 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '01'
                                          and SEM_VALUE >= PARAMETER_2) )
                and (   PARAMETER_3 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '01'
                                          and SEM_VALUE <= PARAMETER_3) )
                and (   PARAMETER_4 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '02'
                                          and SEM_VALUE >= PARAMETER_4) )
                and (   PARAMETER_5 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '02'
                                          and SEM_VALUE <= PARAMETER_5) )
                and (   PARAMETER_9 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '03'
                                          and SEM_VALUE >= PARAMETER_9) )
                and (   PARAMETER_10 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_ELEMENT_NUMBER
                                        where C_ELEMENT_TYPE = '03'
                                          and SEM_VALUE <= PARAMETER_10) )
                and (   PARAMETER_11 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_STOCK_POSITION
                                        where SPO_CHRONOLOGICAL >= PARAMETER_11) )
                and (   PARAMETER_12 = '*'
                     or GCO_GOOD_ID in(select GCO_GOOD_ID
                                         from STM_STOCK_POSITION
                                        where SPO_CHRONOLOGICAL <= PARAMETER_12) )
                and (    (exists(select GCO_CHARACTERIZATION_ID
                                   from GCO_CHARACTERIZATION
                                  where GCO_GOOD_ID = GOOD.GCO_GOOD_ID
                                    and C_CHARACT_TYPE = '3'
                                    and CHA_STOCK_MANAGEMENT = 1) )
                     or (exists(select GCO_CHARACTERIZATION_ID
                                  from GCO_CHARACTERIZATION
                                 where GCO_GOOD_ID = GOOD.GCO_GOOD_ID
                                   and C_CHARACT_TYPE = '4'
                                   and CHA_STOCK_MANAGEMENT = 1) )
                     or (exists(select GCO_CHARACTERIZATION_ID
                                  from GCO_CHARACTERIZATION
                                 where GCO_GOOD_ID = GOOD.GCO_GOOD_ID
                                   and C_CHARACT_TYPE = '1'
                                   and CHA_STOCK_MANAGEMENT = 1) )
                     or (exists(select GCO_CHARACTERIZATION_ID
                                  from GCO_CHARACTERIZATION
                                 where GCO_GOOD_ID = GOOD.GCO_GOOD_ID
                                   and C_CHARACT_TYPE = '5'
                                   and CHA_STOCK_MANAGEMENT = 1) )
                    )
           order by GOOD.GOO_MAJOR_REFERENCE;

  -- Sélection des lots et pièces concernées
  cursor CUR_FAL_LOT_OR_PIECE_SELECTION(aGCO_GOOD_ID GCO_GOOD.GCO_GOOD_ID%type)
  is
    select   min(GCO_GOOD_ID)
           , SEM_VALUE
           , 'LOT' as CHARACTERIZATION
        from STM_ELEMENT_NUMBER
       where (    C_ELEMENT_TYPE = '01'
              and (   PARAMETER_2 = '*'
                   or SEM_VALUE >= PARAMETER_2)
              and (   PARAMETER_3 = '*'
                   or SEM_VALUE <= PARAMETER_3)
              and (GCO_GOOD_ID = aGCO_GOOD_ID)
             )
    group by SEM_VALUE
    union
    select   min(GCO_GOOD_ID)
           , SEM_VALUE
           , 'PIECE' as CHARACTERIZATION
        from STM_ELEMENT_NUMBER
       where C_ELEMENT_TYPE = '02'
         and (   PARAMETER_4 = '*'
              or SEM_VALUE >= PARAMETER_4)
         and (   PARAMETER_5 = '*'
              or SEM_VALUE <= PARAMETER_5)
         and (GCO_GOOD_ID = aGCO_GOOD_ID)
    group by SEM_VALUE
    union
    select   min(GCO_GOOD_ID)
           , SEM_VALUE
           , 'VERSION' as CHARACTERIZATION
        from STM_ELEMENT_NUMBER
       where C_ELEMENT_TYPE = '03'
         and (   PARAMETER_9 = '*'
              or SEM_VALUE >= PARAMETER_9)
         and (   PARAMETER_10 = '*'
              or SEM_VALUE <= PARAMETER_10)
         and (GCO_GOOD_ID = aGCO_GOOD_ID)
    group by SEM_VALUE
    union
    select   min(GCO_GOOD_ID)
           , SPO_CHRONOLOGICAL SEM_VALUE
           , 'CHRONO' as CHARACTERIZATION
        from STM_STOCK_POSITION
       where SPO_CHRONOLOGICAL is not null
         and (   PARAMETER_11 = '*'
              or SPO_CHRONOLOGICAL >= PARAMETER_11)
         and (   PARAMETER_12 = '*'
              or SPO_CHRONOLOGICAL <= PARAMETER_12)
         and (GCO_GOOD_ID = aGCO_GOOD_ID)
    group by SPO_CHRONOLOGICAL;

  -- Sélection des lignes racines
  cursor CUR_FAL_TRACABILITY(
    aGoodId  GCO_GOOD.GCO_GOOD_ID%type
  , aPiece   STM_ELEMENT_NUMBER.SEM_VALUE%type
  , aLot     STM_ELEMENT_NUMBER.SEM_VALUE%type
  , aVersion STM_ELEMENT_NUMBER.SEM_VALUE%type
  )
  is
    select distinct TRA.FAL_LOT_ID
                  , TRA.STM_STOCK_MOVEMENT_ID
                  , TRA.ASA_RECORD_ID
                  , max(TRA.A_DATECRE)
                  , sum(TRA.HIS_QTY) TRA_QTY
               from FAL_TRACABILITY TRA
              where TRA.GCO_GOOD_ID = aGoodID
                and (   aPiece is null
                     or TRA.HIS_PT_PIECE = aPiece)
                and (   aLot is null
                     or TRA.HIS_PT_LOT = aLot)
                and (   aVersion is null
                     or TRA.HIS_PT_VERSION = aVersion)
           group by TRA.FAL_LOT_ID
                  , TRA.STM_STOCK_MOVEMENT_ID
                  , ASA_RECORD_ID
           order by max(TRA.A_DATECRE) desc;

  /* Variables */
  CurGcoGoodSelection CUR_GCO_GOOD_SELECTION%rowtype;
  CurFalLotSelection  CUR_FAL_LOT_OR_PIECE_SELECTION%rowtype;
  CurFalTracability   CUR_FAL_TRACABILITY%rowtype;
  sSEM_VALUE_LOT      STM_ELEMENT_NUMBER.SEM_VALUE%type;
  sSEM_VALUE_PIECE    STM_ELEMENT_NUMBER.SEM_VALUE%type;
  sSEM_VALUE_VERSION  STM_ELEMENT_NUMBER.SEM_VALUE%type;
  sSEM_VALUE_CHRONO   STM_STOCK_POSITION.SPO_CHRONOLOGICAL%type;
  iNOMENCLATURE_DEPTH integer;
  nGroupField         number;
  aDateParent         date;
  aLotParent          FAL_LOT.FAL_LOT_ID%type;
  ShowAllComponents   boolean;
begin
  -- Suppression des enregistrements qui pourraient subsister.
  delete from FAL_TRACABILITY_PRNT;

  nGroupField          := 0;
  iNOMENCLATURE_DEPTH  := 0;

  -- Voir ou non tous les composants
  if PARAMETER_7 = 1 then
    ShowAllComponents  := true;
  else
    ShowAllComponents  := false;
  end if;

  if     PARAMETER_0 is not null
     and PARAMETER_1 is not null then
    -- Pour chaque produit de la fourchette de sélection
    for CurGcoGoodSelection in CUR_GCO_GOOD_SELECTION loop
      -- Pour chaque Tuple Produit, Lot, Piece des fourchettes de sélection
      for CurFalLotSelection in CUR_FAL_LOT_OR_PIECE_SELECTION(CurGcoGoodSelection.GCO_GOOD_ID) loop
        -- Pièce et lot
        if CurFalLotSelection.CHARACTERIZATION = 'PIECE' then
          sSEM_VALUE_LOT      := null;
          sSEM_VALUE_PIECE    := CurFalLotSelection.SEM_VALUE;
          sSEM_VALUE_VERSION  := null;
          sSEM_VALUE_CHRONO   := null;
        elsif CurFalLotSelection.CHARACTERIZATION = 'LOT' then
          sSEM_VALUE_LOT      := CurFalLotSelection.SEM_VALUE;
          sSEM_VALUE_PIECE    := null;
          sSEM_VALUE_VERSION  := null;
          sSEM_VALUE_CHRONO   := null;
        elsif CurFalLotSelection.CHARACTERIZATION = 'VERSION' then
          sSEM_VALUE_LOT      := null;
          sSEM_VALUE_PIECE    := null;
          sSEM_VALUE_VERSION  := CurFalLotSelection.SEM_VALUE;
          sSEM_VALUE_CHRONO   := null;
        else
          sSEM_VALUE_LOT      := null;
          sSEM_VALUE_PIECE    := null;
          sSEM_VALUE_VERSION  := null;
          sSEM_VALUE_CHRONO   := CurFalLotSelection.SEM_VALUE;
        end if;

        -- Pour chaque ligne de tracabilité obtenue
        open CUR_FAL_TRACABILITY(CurGcoGoodSelection.GCO_GOOD_ID, sSEM_VALUE_PIECE, sSEM_VALUE_LOT, sSEM_VALUE_VERSION);

        fetch CUR_FAL_TRACABILITY
         into CurFalTracability;

        if CUR_FAL_TRACABILITY%notfound then
          iNOMENCLATURE_DEPTH  := 0;
          Fal_Print_Procs.BUILDTRACABILITY_ROW(nGroupField
                                             , CurGcoGoodSelection.GCO_GOOD_ID   --aGCO_GOOD_ID             IN GCO_GOOD.GCO_GOOD_ID%TYPE
                                             , null   --aGCO_GCO_GOOD_ID         IN GCO_GOOD.GCO_GOOD_ID%TYPE
                                             , null   --aFAL_LOT_ID              IN FAL_LOT.FAL_LOT_ID%TYPE
                                             , null   --aDOC_POSITION_ID         IN FAL_TRACABILITY.DOC_POSITION_ID%TYPE
                                             , iNOMENCLATURE_DEPTH
                                             , null   --aHIS_DMT_NUMBER          IN DOC_DOCUMENT.DMT_NUMBER%TYPE
                                             , sSEM_VALUE_LOT   --aHIS_PT_LOT              IN FAL_TRACABILITY.HIS_PT_LOT%TYPE
                                             , null   --aLOT_REFCOMPL            IN FAL_LOT.LOT_REFCOMPL%TYPE
                                             , sSEM_VALUE_PIECE   --IN FAL_TRACABILITY.HIS_PT_PIECE%TYPE
                                             , sSEM_VALUE_VERSION   --aHIS_PT_VERSION          IN FAL_TRACABILITY.HIS_PT_VERSION%TYPE
                                             , sSEM_VALUE_CHRONO   --aHIS_CHRONOLOGY_PT       IN FAL_TRACABILITY.HIS_CHRONOLOGY_PT%TYPE
                                             , null   --aHIS_PT_STD_CHAR_1       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_1%TYPE
                                             , null   --aHIS_PT_STD_CHAR_2       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_2%TYPE
                                             , null   --aHIS_PT_STD_CHAR_3       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_3%TYPE
                                             , null   --aHIS_PT_STD_CHAR_4       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_4%TYPE
                                             , null   --aHIS_PT_STD_CHAR_5       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_5%TYPE
                                             , null   --aHIS_CPT_PIECE           IN FAL_TRACABILITY.HIS_CPT_PIECE%TYPE
                                             , null   --aHIS_CPT_LOT             IN FAL_TRACABILITY.HIS_CPT_LOT%TYPE
                                             , null   --aHIS_CPT_VERSION         IN FAL_TRACABILITY.HIS_CPT_VERSION%TYPE
                                             , null   --aHIS_CHRONOLOGY_CPT      IN FAL_TRACABILITY.HIS_CHRONOLOGY_CPT%TYPE
                                             , null   --aHIS_CPT_STD_CHAR_1      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_1%TYPE
                                             , null   --aHIS_CPT_STD_CHAR_2      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_2%TYPE
                                             , null   --aHIS_CPT_STD_CHAR_3      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_3%TYPE
                                             , null   --aHIS_CPT_STD_CHAR_4      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_4%TYPE
                                             , null   --aHIS_CPT_STD_CHAR_5      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_5%TYPE
                                             , null   --aHIS_PLAN_NUMBER         IN FAL_TRACABILITY.HIS_PLAN_NUMBER%TYPE
                                             , null   --aHIS_PLAN_VERSION        IN FAL_TRACABILITY.HIS_PLAN_VERSION%TYPE
                                             , null   --aHIS_VERSION_ORIGINE_NUM IN FAL_TRACABILITY.HIS_VERSION_ORIGIN_NUM%TYPE
                                             , null   --aMOVEMENT_DATE           IN FAL_HISTO_LOT.A_DATECRE%TYPE
                                             , null   --aMOVEMENT_QTE            IN FAL_HISTO_LOT.HIS_QTE%TYPE
                                             , null   --aEVEN_TYPE_DESCR         IN VARCHAR2
                                             , null   --aCPT_QUANTITY            IN NUMBER DEFAULT 0
                                             , null
                                             , null
                                             , null
                                              );

          -- Ajout de tous les composants
          if ShowAllComponents then
            Fal_Print_Procs.ADDALLCOMPONENTS(nGroupField
                                           , CurFalTracability.FAL_LOT_ID
                                           , CurGcoGoodSelection.GCO_GOOD_ID
                                           , iNOMENCLATURE_DEPTH
                                           , sSEM_VALUE_LOT
                                           , sSEM_VALUE_PIECE
                                           , sSEM_VALUE_VERSION
                                            );
          end if;
        else
          loop
            exit when CUR_FAL_TRACABILITY%notfound;
            nGroupField          := nGroupField + 1;
            iNOMENCLATURE_DEPTH  := 0;
            -- Construction ligne de tracabilité
            Fal_Print_Procs.BUILDTRACABILITY_ROW(nGroupField
                                               , CurGcoGoodSelection.GCO_GOOD_ID   --aGCO_GOOD_ID             IN GCO_GOOD.GCO_GOOD_ID%TYPE
                                               , null   --aGCO_GCO_GOOD_ID         IN GCO_GOOD.GCO_GOOD_ID%TYPE
                                               , CurFalTracability.FAL_LOT_ID   --aFAL_LOT_ID              IN FAL_LOT.FAL_LOT_ID%TYPE
                                               , null
                                               , iNOMENCLATURE_DEPTH
                                               , null   --aHIS_DMT_NUMBER          IN DOC_DOCUMENT.DMT_NUMBER%TYPE
                                               , sSEM_VALUE_LOT   --aHIS_PT_LOT                IN FAL_TRACABILITY.HIS_PT_LOT%TYPE
                                               , null   --aLOT_REFCOMPL            IN FAL_LOT.LOT_REFCOMPL%TYPE
                                               , sSEM_VALUE_PIECE   --aHIS_PT_PIECE            IN FAL_TRACABILITY.HIS_PT_PIECE%TYPE
                                               , sSEM_VALUE_VERSION   --IN FAL_TRACABILITY.HIS_PT_VERSION%TYPE
                                               , sSEM_VALUE_CHRONO   --aHIS_CHRONOLOGY_PT       IN FAL_TRACABILITY.HIS_CHRONOLOGY_PT%TYPE
                                               , null   --aHIS_PT_STD_CHAR_1       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_1%TYPE
                                               , null   --aHIS_PT_STD_CHAR_2       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_2%TYPE
                                               , null   --aHIS_PT_STD_CHAR_3       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_3%TYPE
                                               , null   --aHIS_PT_STD_CHAR_4       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_4%TYPE
                                               , null   --aHIS_PT_STD_CHAR_5       IN FAL_TRACABILITY.HIS_PT_STD_CHAR_5%TYPE
                                               , null   --aHIS_CPT_PIECE           IN FAL_TRACABILITY.HIS_CPT_PIECE%TYPE
                                               , null   --aHIS_CPT_LOT             IN FAL_TRACABILITY.HIS_CPT_LOT%TYPE
                                               , null   --aHIS_CPT_VERSION         IN FAL_TRACABILITY.HIS_CPT_VERSION%TYPE
                                               , null   --aHIS_CHRONOLOGY_CPT      IN FAL_TRACABILITY.HIS_CHRONOLOGY_CPT%TYPE
                                               , null   --aHIS_CPT_STD_CHAR_1      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_1%TYPE
                                               , null   --aHIS_CPT_STD_CHAR_2      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_2%TYPE
                                               , null   --aHIS_CPT_STD_CHAR_3      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_3%TYPE
                                               , null   --aHIS_CPT_STD_CHAR_4      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_4%TYPE
                                               , null   --aHIS_CPT_STD_CHAR_5      IN FAL_TRACABILITY.HIS_CPT_STD_CHAR_5%TYPE
                                               , null   --aHIS_PLAN_NUMBER         IN FAL_TRACABILITY.HIS_PLAN_NUMBER%TYPE
                                               , null   --aHIS_PLAN_VERSION        IN FAL_TRACABILITY.HIS_PLAN_VERSION%TYPE
                                               , null   --aHIS_VERSION_ORIGINE_NUM IN FAL_TRACABILITY.HIS_VERSION_ORIGIN_NUM%TYPE
                                               , null   --aMOVEMENT_DATE           IN FAL_HISTO_LOT.A_DATECRE%TYPE
                                               , null   --aMOVEMENT_QTE            IN FAL_HISTO_LOT.HIS_QTE%TYPE
                                               , null   --aEVEN_TYPE_DESCR         IN VARCHAR2
                                               , CurFalTracability.TRA_QTY   --aCPT_QUANTITY            IN NUMBER DEFAULT 0
                                               , null
                                               , null
                                               , CurFalTracability.ASA_RECORD_ID
                                                );
            -- Ajout des mouvements de réception
            Fal_Print_Procs.AddReceptionMovement(CurGcoGoodSelection.GCO_GOOD_ID
                                               , sSEM_VALUE_LOT
                                               , sSEM_VALUE_PIECE
                                               , sSEM_VALUE_VERSION
                                               , sSEM_VALUE_CHRONO
                                               , CurFalTracability.FAL_LOT_ID
                                               , CurFalTracability.STM_STOCK_MOVEMENT_ID
                                               , nGroupField
                                                );
            aDateParent          := null;
            aLotParent           := 0;
            -- Parcours des enfants
            iNOMENCLATURE_DEPTH  := iNOMENCLATURE_DEPTH + 1;
            Fal_Print_Procs.BUILDTRACABILITY_DESCENDANT(nGroupField
                                                      , CurGcoGoodSelection.GCO_GOOD_ID
                                                      , sSEM_VALUE_LOT
                                                      , sSEM_VALUE_PIECE
                                                      , sSEM_VALUE_VERSION
                                                      , sSEM_VALUE_CHRONO
                                                      , null
                                                      , null
                                                      , null
                                                      , null
                                                      , null
                                                      , iNomenclature_depth
                                                      , aLotParent
                                                      , aDateParent
                                                      , ShowAllComponents
                                                      , CurFalTracability.FAL_LOT_ID
                                                      , CurFalTracability.STM_STOCK_MOVEMENT_ID
                                                      , CurFalTracability.ASA_RECORD_ID
                                                      , 0
                                                       );

            -- Ajout de tous les composants
            if ShowAllComponents then
              Fal_Print_Procs.ADDALLCOMPONENTS(nGroupField
                                             , CurFalTracability.FAL_LOT_ID
                                             , CurGcoGoodSelection.GCO_GOOD_ID
                                             , iNOMENCLATURE_DEPTH + 1
                                             , sSEM_VALUE_LOT
                                             , sSEM_VALUE_PIECE
                                             , sSEM_VALUE_VERSION
                                              );
            end if;

            -- Si caractérisation de type pièce, et que l'on a plusieurs points d'entrée alors on ne prend que le plus réçent
            -- (Les autres seront compris dans ce plus réçent).
            if    not(sSEM_VALUE_PIECE is null)
               or (sSEM_VALUE_PIECE <> '') then
              exit;
            end if;

            fetch CUR_FAL_TRACABILITY
             into CurFalTracability;
          end loop;
        end if;

        close CUR_FAL_TRACABILITY;
      end loop;
    end loop;
  end if;

  -- Sélection résultat.
  open aRefCursor for
    select *
      from FAL_TRACABILITY_PRNT
     where (   PARAMETER_6 = -1
            or FTP_NOMENCLATURE_DEPTH <= PARAMETER_6);
exception
  when others then
    raise;
end Fal_C9_Tracability_Prnt;


  CREATE OR REPLACE PROCEDURE "C_ITX"."FAL_WEIGH_MV_REFRESH"
is

begin
  DBMS_SNAPSHOT.REFRESH('MV_FAL_WEIGH');
  DBMS_SNAPSHOT.REFRESH('MV_FWE_INV_POIDS_MAT');
  DBMS_SNAPSHOT.REFRESH('MV_FWE_LOSS_BY_LOT');
  DBMS_SNAPSHOT.REFRESH('MV_FWE_LOSS_BY_OPE');
  DBMS_SNAPSHOT.REFRESH('MV_FWE_LOSS_BY_POSITION');
  DBMS_SNAPSHOT.REFRESH('MV_FWE_LOSS_BY_PRODUCT');

end FAL_WEIGH_MV_REFRESH;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_ACR_ACC_BALANCE_PER_STR" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* Procédure stockée utilisée pour le rapport ACR_ACC_BALANCE_PER_STR (Balance CG à une période, avec classification
*
* @author SDO
* @lastUpdate
* @version 2003
* @public
* @param PROCPARAM_0    Exercice        (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Classification  (ClASSIFICATION_ID)
*/
begin

pcs.pc_init_session.setLanId (procuser_lanid);

open aRefCursor for
    SELECT
        CFL.LEAF_DESCR LEAF_DESCR,
        CFL.NODE01 NODE01,
        CFL.NODE02 NODE02,
        CFL.NODE03 NODE03,
        CFL.NODE04 NODE04,
        CFL.NODE05 NODE05,
        CFL.NODE06 NODE06,
        CFL.NODE07 NODE07,
        CFL.NODE08 NODE08,
        CFL.NODE09 NODE09,
        CFL.NODE10 NODE10,
        TOT.ACS_PERIOd_ID ACS_PERIOD_ID,
        TOT.C_TYPE_PERIOD C_TYPE_PERIOD,
        TOT.C_TYPE_CUMUL C_tYPE_CUMUL,
        TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN,
        TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV,
        TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME,
        TOT.TOT_DEBIT_LC AMOUNT_LC_D,
        TOT.TOT_CREDIT_LC AMOUNT_LC_C,
        TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
        TOT.TOT_DEBIT_FC AMOUNT_FC_D,
        TOT.TOT_CREDIT_FC AMOUNT_FC_C,
        PER.PER_NO_PERIOD PER_NO_PERIOD,
        CFL.PC_LANG_ID,
        (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE01) bool01,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE02) bool02,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE03) bool03,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE04) bool04,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE05) bool05,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE06) bool06,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE07) bool07,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE08) bool08,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE09) bool09,
         (select CLN_FREE_BOOLEAN_1
          from classif_node cno, classif_node_descr cnd
          where cno.classif_node_id= cnd.classif_node_id
          and cno.classification_id=cfl.classification_id
          and cnd.pc_lang_id=1
          and ltrim(nvl(cno.CLN_CODE,'')||' '||cnd.des_descr)=NODE10) bool10
    FROM
        ACS_FINANCIAL_YEAR FYE,
        ACS_PERIOD PER,
        ACS_DIVISION_ACCOUNT DIV,
        ACS_FINANCIAL_ACCOUNT ACC,
        ACS_FINANCIAL_CURRENCY FIN,
        ACT_TOTAL_BY_PERIOD TOT,
        CLASSIF_FLAT CFL
    WHERE
        CFL.CLASSIFICATION_ID = PROCPARAM_1 AND
        CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID AND
        TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID (+) AND
        FYE.FYE_NO_EXERCICE = PROCPARAM_0 AND
        FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID AND
        PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID AND
        TOT.ACS_AUXILIARY_ACCOUNT_ID IS NULL
  UNION ALL
    SELECT
        (select max(cl.LEAF_DESCR) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) LEAF_DESCR,
        (select max(cl.NODE01) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE01,
        (select max(cl.NODE02) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE02,
        (select max(cl.NODE03) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE03,
        (select max(cl.NODE04) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE04,
        (select max(cl.NODE05) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE05,
        (select max(cl.NODE06) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE06,
        (select max(cl.NODE07) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE07,
        (select max(cl.NODE08) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE08,
        (select max(cl.NODE09) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE09,
        (select max(cl.NODE10) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'120999')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE10,
        TOT.ACS_PERIOd_ID ACS_PERIOD_ID,
        '2' C_TYPE_PERIOD,
        'EXT' C_tYPE_CUMUL,
        (select max(acs_account_id) from acs_account where acc_number='120999') ACS_FINANCIAL_ACCOUNT_ID,
        '120999' ACC_NUMBER_FIN,
        --(select max(b.acs_division_account_id) from acs_account a, acs_division_account b where a.acs_account_id=b.acs_division_account_id and acc_number='E00000') ACS_DIVISION_ACCOUNT_ID,
        --'E00000' ACC_NUMBER_DIV,
        TOT.ACS_DIVISION_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV,
        TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME,
        sum(-TOT.TOT_DEBIT_LC) AMOUNT_LC_D,
        sum(-TOT.TOT_CREDIT_LC) AMOUNT_LC_C,
        TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
        sum(-TOT.TOT_DEBIT_FC) AMOUNT_FC_D,
        sum(-TOT.TOT_CREDIT_FC) AMOUNT_FC_C,
        PER.PER_NO_PERIOD PER_NO_PERIOD,
        CFL.PC_LANG_ID,
        0 bool01,
        0 bool02,
        0 bool03,
        0 bool04,
        0 bool05,
        0 bool06,
        0 bool07,
        0 bool08,
        0 bool09,
        0 bool10
    FROM
        ACS_FINANCIAL_YEAR FYE,
        ACS_PERIOD PER,
        ACS_DIVISION_ACCOUNT DIV,
        ACS_FINANCIAL_ACCOUNT ACC,
        ACS_FINANCIAL_CURRENCY FIN,
        ACT_TOTAL_BY_PERIOD TOT,
        CLASSIF_FLAT CFL
    WHERE
        CFL.CLASSIFICATION_ID = PROCPARAM_1 AND
        CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID AND
        TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID (+) AND
        FYE.FYE_NO_EXERCICE = PROCPARAM_0 AND
        FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID AND
        PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID AND
        TOT.ACS_AUXILIARY_ACCOUNT_ID IS NULL
        and acc.c_balance_sheet_profit_loss='B'
        group by
        TOT.ACS_PERIOd_ID,
        TOT.C_TYPE_PERIOD,
        TOT.ACS_DIVISION_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID),
        TOT.ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetLocalCurrencyName,
        TOT.ACS_ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID),
        PER.PER_NO_PERIOD,
        CFL.PC_LANG_ID
    UNION ALL
        SELECT
        (select max(cl.LEAF_DESCR) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) LEAF_DESCR,
        (select max(cl.NODE01) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE01,
        (select max(cl.NODE02) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE02,
        (select max(cl.NODE03) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE03,
        (select max(cl.NODE04) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE04,
        (select max(cl.NODE05) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE05,
        (select max(cl.NODE06) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE06,
        (select max(cl.NODE07) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE07,
        (select max(cl.NODE08) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE08,
        (select max(cl.NODE09) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE09,
        (select max(cl.NODE10) from CLASSIF_FLAT cl where cl.classification_id=PROCPARAM_1 and instr(cl.leaf_descr,'880000')>0 and cl.pc_lang_id=CFL.PC_LANG_ID) NODE10,
        TOT.ACS_PERIOd_ID ACS_PERIOD_ID,
        '2' C_TYPE_PERIOD,
        'EXT' C_tYPE_CUMUL,
        (select max(acs_account_id) from acs_account where acc_number='880000') ACS_FINANCIAL_ACCOUNT_ID,
        '880000' ACC_NUMBER_FIN,
        --(select max(b.acs_division_account_id) from acs_account a, acs_division_account b where a.acs_account_id=b.acs_division_account_id and acc_number='E00000') ACS_DIVISION_ACCOUNT_ID,
        --'E00000' ACC_NUMBER_DIV,
        TOT.ACS_DIVISION_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV,
        TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME,
        sum(-TOT.TOT_DEBIT_LC) AMOUNT_LC_D,
        sum(-TOT.TOT_CREDIT_LC) AMOUNT_LC_C,
        TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
        sum(-TOT.TOT_DEBIT_FC) AMOUNT_FC_D,
        sum(-TOT.TOT_CREDIT_FC) AMOUNT_FC_C,
        PER.PER_NO_PERIOD PER_NO_PERIOD,
        CFL.PC_LANG_ID,
        0 bool01,
        0 bool02,
        0 bool03,
        0 bool04,
        0 bool05,
        0 bool06,
        0 bool07,
        0 bool08,
        0 bool09,
        0 bool10
    FROM
        ACS_FINANCIAL_YEAR FYE,
        ACS_PERIOD PER,
        ACS_DIVISION_ACCOUNT DIV,
        ACS_FINANCIAL_ACCOUNT ACC,
        ACS_FINANCIAL_CURRENCY FIN,
        ACT_TOTAL_BY_PERIOD TOT,
        CLASSIF_FLAT CFL
    WHERE
        CFL.CLASSIFICATION_ID = PROCPARAM_1 AND
        CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID AND
        TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID AND
        TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID (+) AND
        FYE.FYE_NO_EXERCICE = PROCPARAM_0 AND
        FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID AND
        PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID AND
        TOT.ACS_AUXILIARY_ACCOUNT_ID IS NULL
        and acc.c_balance_sheet_profit_loss='P'
        group by
        TOT.ACS_PERIOd_ID,
        TOT.C_TYPE_PERIOD,
        TOT.ACS_DIVISION_ACCOUNT_ID,
        ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID),
        TOT.ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetLocalCurrencyName,
        TOT.ACS_ACS_FINANCIAL_CURRENCY_ID,
        ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID),
        PER.PER_NO_PERIOD,
        CFL.PC_LANG_ID
        ;
end IND_ACR_ACC_BALANCE_PER_STR;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_ACI_DOCUMENT" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
)

is
/**
* Procédure stockée utilisée dans un rapport. Document d'intégration
*
* @author
* @lastUpdate
* @version
* @public
* @param PROCPARAM_0    id du docuement        (ACI_DOCUMENT_ID)
*/
begin

--pcs.pc_init_session.setLanId (procuser_lanid);

open aRefCursor for
    select
    a.aci_document_id,
    a.C_INTERFACE_CONTROL,
    a.C_INTERFACE_ORIGIN,
    a.c_status_document,
    a.c_fail_reason,
    a.doc_number,
    a.doc_document_date,
    a.a_datecre,
    a.a_idcre,
    a.a_datemod,
    a.a_idmod,
    b.aci_financial_imputation_id,
    b.IMF_CONTROL_FLAG,
    b.IMF_VALUE_DATE,
    b.IMF_TRANSACTION_DATE,
    b.ACC_NUMBER,
    b.DIV_NUMBER,
    b.RCO_TITLE,
    b.imf_description,
    b.CURRENCY2,
    b.IMF_AMOUNT_LC_D,
    b.IMF_AMOUNT_LC_C,
    b.IMF_EXCHANGE_RATE,
    b.IMF_BASE_PRICE,
    b.CURRENCY1,
    b.IMF_AMOUNT_FC_D,
    b.IMF_AMOUNT_FC_C,
    b.a_datecre a_datecre_imp,
    b.a_idcre a_idcre_imp,
    b.a_datemod a_datemod_imp,
    b.a_idmod a_idmod_imp,
    (select decode(max(acc.acc_number),null,'Compte '||b.acc_number||' inexistant dans la Gestion des comptes','OK')
     from acs_account acc, acs_financial_account fin
     where acc.acs_account_id=fin.acs_financial_account_id
     and acc.acc_number= b.acc_number) test_account,
    (select decode(max(acc.acc_number),null,'Division '||b.div_number||' inexistante dans la Gestion des comptes','OK')
     from acs_account acc, acs_division_account fin
     where acc.acs_account_id=fin.acs_division_account_id
     and acc.acc_number= b.div_number) test_division,
    (select case
             when max(rec.rco_title) is null and b.rco_title is not null
             then 'Dossier '||b.rco_title||' inexistant dans la Gestion des dossiers'
             else 'OK'
            end
     from doc_record rec
     where rec.rco_title= b.rco_title) test_dossier
    from
    aci_document a,
    aci_financial_imputation b
    where
    a.aci_document_id=b.aci_document_id
    and a.aci_document_id=PROCPARAM_0;

end IND_C9_ACI_DOCUMENT;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_ACT_IMP_BY_DIV" (PROCPARAM0 acs_account.acc_number%type,
                                PROCPARAM1 acs_account.acc_number%type,
                                PROCPARAM2 acs_financial_year.fye_no_exercice%type,
                                PROCPARAM3 acs_period.per_no_period%type,
                                PROCPARAM4 acs_period.per_no_period%type,
                                PROCPARAM5 acs_account.acc_number%type,
                                PROCPARAM6 number,
                                PROCPARAM7 number,
                                aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal ACT_IMP_BY_DIVISION
 is
 AccountFrom acs_account.acc_number%type;
 AccountTo acs_account.acc_number%type;
 PeriodFrom acs_period.per_no_period%type;
 PeriodTo acs_period.per_no_period%type;
 pYear acs_financial_year.fye_no_exercice%type;
 DivNum acs_account.acc_number%type;
 SansDivExclu number(1);
 DetailImput number (1);

 begin
  AccountFrom:=PROCPARAM0;
  AccountTo:=PROCPARAM1;
  pYear:=PROCPARAM2;
  PeriodFrom:=PROCPARAM3;
  PeriodTo:=PROCPARAM4;
  DivNum:=PROCPARAM5;
  SansDivExclu:=PROCPARAM6;
  DetailImput:=PROCPARAM7;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
      select IMP.ACT_FINANCIAL_IMPUTATION_ID,
       FIN.ACC_NUMBER,
	   (select des_description_summary from acs_description des where imp.acs_financial_account_id=des.acs_account_id and des.pc_lang_id=1) acc_description,
       (SELECT DIV.ACC_NUMBER FROM ACS_ACCOUNT DIV WHERE DIV.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER,
	   (select des_description_summary from acs_description des where IMP.IMF_ACS_DIVISION_ACCOUNT_ID=des.acs_account_id and des.pc_lang_id=1) div_description,
       (select rco_title from doc_record rec where imp.doc_record_id=rec.doc_record_id) rco_title,
	   (select rco_description from doc_record rec where imp.doc_record_id=rec.doc_record_id) rco_description,
       (SELECT DOC.DOC_NUMBER FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID) DOC_NUMBER,
	   ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID) FINANCIAL_IMPUTATION_ID,
	   (select acc.acc_number
	    from act_financial_imputation imp2, acs_account acc
		where ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)=imp2.act_financial_imputation_id
		and imp2.acs_financial_account_id=acc.acs_account_id) contre_ecriture,
       IMP.IMF_TYPE,
       IMP.IMF_PRIMARY,
       IMP.IMF_DESCRIPTION,
	   (select currency
        from acs_financial_currency fcur, pcs.pc_curr cur
        where imp.acs_acs_financial_currency_id=fcur.acs_financial_currency_id
        and fcur.pc_curr_id=cur.pc_curr_id) CURRENCY_MB,
       IMP.IMF_AMOUNT_LC_D,
       IMP.IMF_AMOUNT_LC_C,
       (select currency
        from acs_financial_currency fcur, pcs.pc_curr cur
        where imp.acs_financial_currency_id=fcur.acs_financial_currency_id
        and fcur.pc_curr_id=cur.pc_curr_id) CURRENCY_ME,
       IMP.IMF_AMOUNT_FC_D,
       IMP.IMF_AMOUNT_FC_C,
	   IMP.IMF_EXCHANGE_RATE,
       IMP.IMF_AMOUNT_EUR_D,
       IMP.IMF_AMOUNT_EUR_C,
       IMP.IMF_VALUE_DATE,
       IMP.IMF_TRANSACTION_DATE,
       IMP.C_GENRE_TRANSACTION,
       IMP.A_CONFIRM,
       IMP.A_DATECRE,
       IMP.A_DATEMOD,
       IMP.A_IDCRE,
       IMP.A_IDMOD,
       IMP.IMF_GENRE,
       IMP.IMF_BASE_PRICE,
       (SELECT JOU.JOU_NUMBER FROM ACT_JOURNAL JOU WHERE JOU.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)) JOU_NUMBER,
       (SELECT JOU.JOU_DESCRIPTION FROM ACT_JOURNAL JOU WHERE JOU.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)) JOU_DESCRIPTION,
       (select ETA.C_ETAT_JOURNAL
       from ACT_ETAT_JOURNAL ETA
       where ETA.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)
         and ETA.C_SUB_SET      = 'ACC') C_ETAT_JOURNAL,
       (select SCA.C_TYPE_CUMUL
        from ACJ_SUB_SET_CAT SCA
        where SCA.ACJ_CATALOGUE_DOCUMENT_ID = (SELECT DOC.ACJ_CATALOGUE_DOCUMENT_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)
          and SCA.C_SUB_SET                   = 'ACC') C_TYPE_CUMUL,
       PER.C_TYPE_PERIOD,
       DetailImput DETAIL_IMPUT
  from
       ACS_PERIOD                 PER,
       ACT_FINANCIAL_IMPUTATION   IMP,
       ACS_ACCOUNT                FIN,
       ACS_SUB_SET                SUB,
       ACS_FINANCIAL_YEAR         YEA
 where SUB.ACS_SUB_SET_ID              = FIN.ACS_SUB_SET_ID
   and SUB.C_SUB_SET                   = 'ACC'
   and FIN.ACC_NUMBER                 >= AccountFrom
   and FIN.ACC_NUMBER                 <= AccountTo
   and YEA.FYE_NO_EXERCICE            = pYear
   and PER.PER_NO_PERIOD	            >= PeriodFrom
   and PER.PER_NO_PERIOD	            <= PeriodTo
   and FIN.ACS_ACCOUNT_ID              = IMP.ACS_FINANCIAL_ACCOUNT_ID
   and IMP.ACS_PERIOD_ID               = PER.ACS_PERIOD_ID
   AND PER.ACS_FINANCIAL_YEAR_ID       = YEA.ACS_FINANCIAL_YEAR_ID
   and not exists (select 1
   	   	   		   from acs_division_account div
				   where IMP.IMF_ACS_DIVISION_ACCOUNT_ID=div.acs_division_account_id
				   and div.DIC_DIV_ACC_CODE_1_ID=decode(SansDivExclu,1,'02','XX'))
   and (
        exists (select 1
                from acs_account acc
                where acc.acs_account_id=IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                and acc.acc_number=DivNum)
        or DivNum is null
        );


 end ind_c9_act_imp_by_div;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_ACT_IMP_BY_DOC_RECORD" (PROCPARAM0 acs_account.acc_number%type,
                                PROCPARAM1 acs_account.acc_number%type,
                                PROCPARAM2 acs_financial_year.fye_no_exercice%type,
                                PROCPARAM3 acs_period.per_no_period%type,
                                PROCPARAM4 acs_period.per_no_period%type,
                                PROCPARAM5 acs_account.acc_number%type,
                                PROCPARAM6 number,
                                PROCPARAM7 number,
                                PROCPARAM8 doc_record.rco_title%type,
                                PROCPARAM9 doc_record.rco_title%type,
                                aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal ACT_IMP_BY_DIVISION
 is
 AccountFrom acs_account.acc_number%type;
 AccountTo acs_account.acc_number%type;
 PeriodFrom acs_period.per_no_period%type;
 PeriodTo acs_period.per_no_period%type;
 pYear acs_financial_year.fye_no_exercice%type;
 DivNum acs_account.acc_number%type;
 SansDivExclu number(1);
 DetailImput number (1);
 DocRecordFrom doc_record.rco_title%type;
 DocRecordTo doc_record.rco_title%type;

 begin
  AccountFrom:=PROCPARAM0;
  AccountTo:=PROCPARAM1;
  pYear:=PROCPARAM2;
  PeriodFrom:=PROCPARAM3;
  PeriodTo:=PROCPARAM4;
  DivNum:=PROCPARAM5;
  SansDivExclu:=PROCPARAM6;
  DetailImput:=PROCPARAM7;
  DocRecordFrom:=PROCPARAM8;
  DocRecordTo:=PROCPARAM9;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
      select IMP.ACT_FINANCIAL_IMPUTATION_ID,
       FIN.ACC_NUMBER,
	   (select des_description_summary from acs_description des where imp.acs_financial_account_id=des.acs_account_id and des.pc_lang_id=1) acc_description,
       (SELECT DIV.ACC_NUMBER FROM ACS_ACCOUNT DIV WHERE DIV.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER,
	   (select des_description_summary from acs_description des where IMP.IMF_ACS_DIVISION_ACCOUNT_ID=des.acs_account_id and des.pc_lang_id=1) div_description,
       (select rco_title from doc_record rec where imp.doc_record_id=rec.doc_record_id) rco_title,
	   (select rco_description from doc_record rec where imp.doc_record_id=rec.doc_record_id) rco_description,
       (SELECT DOC.DOC_NUMBER FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID) DOC_NUMBER,
	   ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID) FINANCIAL_IMPUTATION_ID,
	   (select acc.acc_number
	    from act_financial_imputation imp2, acs_account acc
		where ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)=imp2.act_financial_imputation_id
		and imp2.acs_financial_account_id=acc.acs_account_id) contre_ecriture,
       IMP.IMF_TYPE,
       IMP.IMF_PRIMARY,
       IMP.IMF_DESCRIPTION,
	   (select currency
        from acs_financial_currency fcur, pcs.pc_curr cur
        where imp.acs_acs_financial_currency_id=fcur.acs_financial_currency_id
        and fcur.pc_curr_id=cur.pc_curr_id) CURRENCY_MB,
       IMP.IMF_AMOUNT_LC_D,
       IMP.IMF_AMOUNT_LC_C,
       (select currency
        from acs_financial_currency fcur, pcs.pc_curr cur
        where imp.acs_financial_currency_id=fcur.acs_financial_currency_id
        and fcur.pc_curr_id=cur.pc_curr_id) CURRENCY_ME,
       IMP.IMF_AMOUNT_FC_D,
       IMP.IMF_AMOUNT_FC_C,
	   IMP.IMF_EXCHANGE_RATE,
       IMP.IMF_AMOUNT_EUR_D,
       IMP.IMF_AMOUNT_EUR_C,
       IMP.IMF_VALUE_DATE,
       IMP.IMF_TRANSACTION_DATE,
       IMP.C_GENRE_TRANSACTION,
       IMP.A_CONFIRM,
       IMP.A_DATECRE,
       IMP.A_DATEMOD,
       IMP.A_IDCRE,
       IMP.A_IDMOD,
       IMP.IMF_GENRE,
       IMP.IMF_BASE_PRICE,
       (SELECT JOU.JOU_NUMBER FROM ACT_JOURNAL JOU WHERE JOU.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)) JOU_NUMBER,
       (SELECT JOU.JOU_DESCRIPTION FROM ACT_JOURNAL JOU WHERE JOU.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)) JOU_DESCRIPTION,
       (select ETA.C_ETAT_JOURNAL
       from ACT_ETAT_JOURNAL ETA
       where ETA.ACT_JOURNAL_ID = (SELECT DOC.ACT_JOURNAL_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)
         and ETA.C_SUB_SET      = 'ACC') C_ETAT_JOURNAL,
       (select SCA.C_TYPE_CUMUL
        from ACJ_SUB_SET_CAT SCA
        where SCA.ACJ_CATALOGUE_DOCUMENT_ID = (SELECT DOC.ACJ_CATALOGUE_DOCUMENT_ID FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID)
          and SCA.C_SUB_SET                   = 'ACC') C_TYPE_CUMUL,
       PER.C_TYPE_PERIOD,
       DetailImput DETAIL_IMPUT
  from
       ACS_PERIOD                 PER,
       ACT_FINANCIAL_IMPUTATION   IMP,
       ACS_ACCOUNT                FIN,
       ACS_SUB_SET                SUB,
       ACS_FINANCIAL_YEAR         YEA
 where SUB.ACS_SUB_SET_ID              = FIN.ACS_SUB_SET_ID
   and SUB.C_SUB_SET                   = 'ACC'
   and FIN.ACC_NUMBER                 >= AccountFrom
   and FIN.ACC_NUMBER                 <= AccountTo
   and YEA.FYE_NO_EXERCICE            = pYear
   and PER.PER_NO_PERIOD	            >= PeriodFrom
   and PER.PER_NO_PERIOD	            <= PeriodTo
   and nvl((select rco_title from doc_record rec where imp.doc_record_id=rec.doc_record_id),'0') >= nvl(DocRecordFrom,'0')
   and nvl((select rco_title from doc_record rec where imp.doc_record_id=rec.doc_record_id),'zz') <= nvl(DocRecordTo,'zz')
   and FIN.ACS_ACCOUNT_ID              = IMP.ACS_FINANCIAL_ACCOUNT_ID
   and IMP.ACS_PERIOD_ID               = PER.ACS_PERIOD_ID
   AND PER.ACS_FINANCIAL_YEAR_ID       = YEA.ACS_FINANCIAL_YEAR_ID
   and not exists (select 1
   	   	   		   from acs_division_account div
				   where IMP.IMF_ACS_DIVISION_ACCOUNT_ID=div.acs_division_account_id
				   and div.DIC_DIV_ACC_CODE_1_ID=decode(SansDivExclu,1,'02','XX'))
   and (
        exists (select 1
                from acs_account acc
                where acc.acs_account_id=IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                and acc.acc_number=DivNum)
        or DivNum is null
        );


 end ind_c9_act_imp_by_doc_record;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_ACT_SOLDE_BY_DIV" (PROCPARAM0 number,PROCPARAM1 number,PROCPARAM2 number, PROCPARAM3 varchar2, PROCPARAM4 number, PROCPARAM5 number, aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal ACT_IMP_BY_DIVISION
 is
 vYear number(4);
 vPeriodFrom number(2);
 vPeriodTo number(2);
 DivNum varchar2(10);
 SansDivExclu number(1);
 DetailPeriod number(1);

 begin
  vYear:=PROCPARAM0;
  vPeriodFrom:=PROCPARAM1;
  vPeriodTo:=PROCPARAM2;
  DivNum:=PROCPARAM3;
  SansDivExclu:=PROCPARAM4;
  DetailPeriod:=PROCPARAM5;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
      select
(select acc_number from acs_account acc where tot.acs_division_account_id=acc.acs_account_id) div_number,
(select des_description_summary from acs_description des where tot.acs_division_account_id=des.acs_account_id and des.pc_lang_id=1) div_descr,
(select acc_number from acs_account acc where tot.acs_financial_account_id=acc.acs_account_id) acc_number,
(select des_description_summary from acs_description des where tot.acs_financial_account_id=des.acs_account_id and des.pc_lang_id=1) acc_descr,
(select currency
 from acs_financial_currency fin, pcs.pc_curr cur
 where fin.acs_financial_currency_id = tot.acs_financial_currency_id and fin.pc_curr_id = cur.pc_curr_id) currency1,
tot.tot_debit_lc,
tot.tot_credit_lc,
tot.tot_debit_lc - tot.tot_credit_lc solde_mb,
(select currency
 from acs_financial_currency fin, pcs.pc_curr cur
 where fin.acs_financial_currency_id = tot.acs_acs_financial_currency_id and fin.pc_curr_id = cur.pc_curr_id) currency2,
tot.tot_debit_fc,
tot.tot_credit_fc,
tot.tot_debit_fc - tot.tot_credit_fc solde_me,
yea.FYE_NO_EXERCICE,
per.per_no_period,
(select des_description_summary from acs_description des where per.acs_period_id=des.acs_period_id and des.pc_lang_id=1) period_descr,
per.per_start_date,
per.per_end_date,
tot.c_type_period,
tot.c_type_cumul,
DetailPeriod DETAIL_PERIOD
from
act_total_by_period tot,
acs_period per,
acs_financial_year yea
where
tot.acs_period_id=per.acs_period_id
and per.acs_financial_year_id=yea.acs_financial_year_id
and yea.fye_no_exercice=vYear
and per.per_no_period>=vPeriodFrom
and per.per_no_period<=vPeriodTo
and ((select acc_number from acs_account acc where tot.acs_division_account_id=acc.acs_account_id)=DivNum
     or DivNum is null)
and tot.acs_division_account_id is not null
and tot.acs_auxiliary_account_id is null
and exists (select 1
            from acs_financial_account fin
            where tot.acs_financial_account_id=fin.acs_financial_account_id
            and DIC_FIN_ACC_CODE_5_ID='01')
and not exists (select 1
                 from acs_division_account div
                 where tot.ACS_DIVISION_ACCOUNT_ID=div.acs_division_account_id
                 and div.DIC_DIV_ACC_CODE_1_ID=decode(SansDivExclu,1,'02','XX'));


 end ind_c9_act_solde_by_div;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_AVS_CTRL" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,PROCPARAM2 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal HRM_AVS_CTRL
 is
 vPeriodFrom varchar2(6);
 vPeriodTo varchar2(6);
 SearchName varchar2(200);

 begin
  vPeriodFrom:=PROCPARAM0;
  vPeriodTo:=PROCPARAM1;
  SearchName:=PROCPARAM2;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  a.hrm_employee_id,
  per_search_name,
  emp_number,
  emp_social_securityno,
  emp_social_securityno2,
  hit_pay_period,
  to_char(hit_pay_period,'YYYYMM') period_yyyymm,
  nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemSoumAVS',hit_pay_period,hit_pay_period),0)+
   nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemBasAVSPa100',hit_pay_period,hit_pay_period),0) soum_avs,
  nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemMaxSoumAC',hit_pay_period,hit_pay_period),0) max_soum_ac,
  nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemSoumAC',hit_pay_period,hit_pay_period),0)+
    nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemSoumACPa',hit_pay_period,hit_pay_period),0) soum_ac,
nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemMaxSoumACC',hit_pay_period,hit_pay_period),0) max_soum_acc,
  nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemSoumACC',hit_pay_period,hit_pay_period),0)+
    nvl(hrm_functions.sumelem(a.hrm_employee_id,'CemSoumACCPa',hit_pay_period,hit_pay_period),0) soum_acc
  from
  (select distinct hrm_employee_id, hit_pay_period from hrm_history) a,
  hrm_person b
  where
  a.hrm_employee_id=b.hrm_person_id
  and to_char(hit_pay_period,'YYYYMM') between vPeriodFrom and vPeriodTo
  and exists (select 1
  		   from hrm_history_detail his, hrm_elements ele
  		   where his.hrm_elements_id=ele.hrm_elements_id
  		   and a.hrm_employee_id=his.hrm_employee_id
  		   and a.hit_pay_period=his.his_pay_period
  		   and ele.ele_code in ('CemSoumAVS','CemBasAVSPa100','CemMaxSoumAC','CemSoumAC','CemSoumACPa')
  		   )
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null);
  --order by per_search_name;


 end ind_c9_avs_ctrl;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_AVS_CTRL_SUB" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
--(PROCPARAM0 varchar2,PROCPARAM1 varchar2,PROCPARAM2 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal HRM_AVS_CTRL (sous-rapport)
 is
 --vPeriodFrom varchar2(6);
 --vPeriodTo varchar2(6);
 --EmpId number;

 begin
  --vPeriodFrom:=PROCPARAM0;
  --vPeriodTo:=PROCPARAM1;
  --EmpId:=to_number(PROCPARAM2);

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  b.hrm_elements_id,
  b.hrm_elements_root_id,
  d.hrm_employee_id,
  d.hrm_salary_sheet_id,
  elr_root_code,
  erd_descr,
  related_code,
  his_pay_period,
  to_char(his_pay_period,'YYYYMM') period_yyyymm,
  his_pay_sum_val his_pay_sum_val_chf,
  hrm_itx.GET_PERS_CURR(d.hrm_employee_id,his_pay_period) currency,
  hrm_itx.GET_PERS_RATE(d.hrm_employee_id,his_pay_period) rate,
  round(his_pay_sum_val/hrm_itx.GET_PERS_RATE(d.hrm_employee_id,his_pay_period),2) his_pay_sum_val_dev
  from
  hrm_formulas_structure a,
  hrm_elements_root b,
  hrm_elements_root_descr c,
  hrm_history_detail d
  where
  a.related_id=b.hrm_elements_id
  and b.hrm_elements_root_id=c.hrm_elements_root_id
  and b.hrm_elements_id=d.hrm_elements_id
  and main_code in ('CemBasAVS','CemBasAVS2','CemBasAVS3','CemBasAVS4','CemBasAVSPa100')
  and related_code not in ('CemBasAVS','CemBasAVS2','CemBasAVS3','CemBasAVS4','CemBasAVSPa100')
  and related_code<>'ConEmAVS'
  and c.pc_lang_id=1;
  --and d.hrm_employee_id=EmpId
  --and to_char(his_pay_period,'YYYYMM') between vPeriodFrom and vPeriodTo
  --order by his_pay_period,elr_root_code;


 end ind_c9_avs_ctrl_sub;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_BILLING_SHEET" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,PROCPARAM2 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure utilisée par le rapport HRM_BILLING_SHEET
 is
 vPeriodFrom varchar2(6);
 vPeriodTo varchar2(6);
 SearchName varchar2(200);

 begin
  vPeriodFrom:=PROCPARAM0;
  vPeriodTo:=PROCPARAM1;
  SearchName:=PROCPARAM2;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  per_search_name,
  emp_number,
  coe_descr,
  substr(coe_descr,1,3) regroup_code,
  substr(coe_descr,5,999) regroup_descr,
  coe_box,
  (select max(erd_descr)
   from hrm_elements_root r, hrm_elements_root_descr d
   where r.hrm_elements_root_id=d.hrm_elements_root_id
   and a.coe_box=r.elr_root_code
   and d.pc_lang_id=1) erd_descr_FR,
  (select max(erd_descr)
   from hrm_elements_root r, hrm_elements_root_descr d
   where r.hrm_elements_root_id=d.hrm_elements_root_id
   and a.coe_box=r.elr_root_code
   and d.pc_lang_id=3) erd_descr_EN,
  currency,
  sum(his_pay_sum_val_chf) his_pay_sum_val_chf,
  sum(his_pay_sum_val_dev) his_pay_sum_val_dev
  from
  v_ind_hrm_cub_list a
  where
  col_name='BILLING SHEET'
  and a.pc_lang_id=1
  and period between vPeriodFrom and vPeriodTo
  and (per_search_name like upper(SearchName||'%')
        or SearchName is null)
  group by per_search_name,
  emp_number,
  coe_descr,
  coe_box,
  currency;
 /*UNION ALL
   select
  per_search_name,
  emp_number,
  coe_descr,
  substr(coe_descr,1,3) regroup_code,
  substr(coe_descr,5,999) regroup_descr,
  coe_box,
  (select max(erd_descr)
   from hrm_elements_root r, hrm_elements_root_descr d
   where r.hrm_elements_root_id=d.hrm_elements_root_id
   and coe.coe_box=r.elr_root_code
   and d.pc_lang_id=1) erd_descr_FR,
  (select max(erd_descr)
   from hrm_elements_root r, hrm_elements_root_descr d
   where r.hrm_elements_root_id=d.hrm_elements_root_id
   and coe.coe_box=r.elr_root_code
   and d.pc_lang_id=3) erd_descr_EN,
  (select max(cod_code)
   from hrm_employee_const ec, hrm_constants c, hrm_code_table tb,
        (select hrm_employee_id, hrm_constants_id, max(emc_value_from) emc_value_from from hrm_employee_const group by hrm_employee_id, hrm_constants_id) lec
   where per.hrm_person_id=ec.hrm_employee_id
   and ec.hrm_constants_id=c.hrm_constants_id
   and ec.hrm_code_table_id=tb.hrm_code_table_id
   and ec.hrm_employee_id=lec.hrm_employee_id
   and ec.hrm_constants_id=lec.hrm_constants_id
   and ec.emc_value_from=lec.emc_value_from
   and con_code='ConEmMonnaieDéc'
   ) currency,
  sum(0) his_pay_sum_val_chf,
  sum(0) his_pay_sum_val_dev
  from
  hrm_person per,
  hrm_control_list col,
  hrm_control_elements coe
  where
  col.hrm_control_list_id=coe.hrm_control_list_id
  and col_name='BILLING SHEET'
  and (per_search_name like upper(SearchName||'%')
        or SearchName is null)
  and not exists (select 1
  	  	  		 from v_ind_hrm_cub_list v
                 where
                 col_name='BILLING SHEET'
				 and v.pc_lang_id=1
                 and period between vPeriodFrom and vPeriodTo
                 and per.hrm_person_id=v.hrm_employee_id
				 and coe.coe_box=v.coe_box)
  and exists (select 1
  	  		 from hrm_history h
			 where per.hrm_person_id=h.hrm_employee_id
			 and to_char(hit_pay_period,'YYYYMM') between vPeriodFrom and vPeriodTo)
  group by per_search_name,
  emp_number,
  coe_descr,
  coe_box,
  per.hrm_person_id ;
*/

 end ind_c9_billing_sheet;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_BREAK_NAP" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,PARAMETER_0 varchar2)
 -- Procédure C9 pour rapport Crystal
 is
 vPeriod varchar2(6);

 begin
  vPeriod:=PARAMETER_0;

  open aRefCursor for
  select
  v.hrm_break_id,
  b.BRK_DESCRIPTION,
  b.BRK_BREAK_DATE,
  b.BRK_VALUE_DATE,
  b.BRK_STATUS,
  v.sab_pay_date,
  to_char(v.sab_pay_date,'YYYYMM') period,
  v.v_hbc_acc_name,
  c.DIC_FIN_ACC_CODE_1_ID,
  c.DIC_FIN_ACC_CODE_2_ID,
  v.heb_div_number,
  p.per_search_name,
  p.emp_secondary_key,
  v.currency,
  v.v_hbc_debit_amount_dev,
  v.v_hbc_credit_amount_dev,
  v.v_hbc_debit_amount,
  v.v_hbc_credit_amount
  from
  v_ind_hrm_break_detail v,
  hrm_break b,
  (select acc.acc_number,fac.DIC_FIN_ACC_CODE_1_ID,fac.DIC_FIN_ACC_CODE_2_ID
   from acs_account acc, ACS_FINANCIAL_ACCOUNT fac
   where acc.acs_account_id=fac.ACS_FINANCIAL_ACCOUNT_id
   and (fac.DIC_FIN_ACC_CODE_1_ID is not null
        or fac.DIC_FIN_ACC_CODE_2_ID is not null)) c,
  hrm_person p
  where
  v.hrm_break_id=b.hrm_break_id
  and v.v_hbc_acc_name=c.acc_number
  and v.hrm_employee_id=p.hrm_person_id
  and to_char(sab_pay_date,'YYYYMM')=vPeriod;

end ind_c9_break_nap;


  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_CERTIF_NDF_PERIOD" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,PROCPARAM2 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure de génération des données AVS
 is
 vPeriodFrom varchar2(6);
 vPeriodTo varchar2(6);
 SearchName varchar2(200);

 begin
  vPeriodFrom:=PROCPARAM0;
  vPeriodTo:=PROCPARAM1;
  SearchName:=PROCPARAM2;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  a.hrm_person_id,
  a.per_last_name||' '||a.per_first_name per_fullname,
  a.emp_number,
  com_dic_functions.GETDICODESCR('DIC_PERSON_POLITNESS',a.per_title,a.pc_lang_id) per_title,
  case
   when a.per_mail_add_selector=0 then a.per_businessstreet
   when a.per_mail_add_selector=1 then a.per_homestreet
   when a.per_mail_add_selector=2 then a.per_otherstreet
   when a.per_mail_add_selector=3 then a.per_taxstreet
  end per_homestreet,
  case
   when a.per_mail_add_selector=0 then a.per_businesspostalcode
   when a.per_mail_add_selector=1 then a.per_homepostalcode
   when a.per_mail_add_selector=2 then a.per_otherpostalcode
   when a.per_mail_add_selector=3 then a.per_taxpostalcode
  end per_homepostalcode,
  case
   when a.per_mail_add_selector=0 then a.per_businesscity
   when a.per_mail_add_selector=1 then a.per_homecity
   when a.per_mail_add_selector=2 then a.per_othercity
   when a.per_mail_add_selector=3 then a.per_taxcity
  end per_homecity,
  case
   when a.per_mail_add_selector=0 then a.per_businesscountry
   when a.per_mail_add_selector=1 then a.per_homecountry
   when a.per_mail_add_selector=2 then a.per_othercountry
   when a.per_mail_add_selector=3 then a.per_taxcountry
  end per_homecountry,
  b.ino_in,
  b.ino_out,
  c.con_begin,
  c.con_end,
  case
   when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
   then to_date(vPeriodFrom,'YYYYMM')
   else c.con_begin
  end certif_begin,
  case
   when c.con_end is null or c.con_end > to_date(vPeriodTo,'YYYYMM')
   then last_day(to_date(vPeriodTo,'YYYYMM'))
   else c.con_end
  end certif_end,
  c.dic_salary_number_id,
  com_dic_functions.getDicoDescr('DIC_SALARY_NUMBER',c.dic_salary_number_id,a.pc_lang_id) san_descr,
  (select max(job_descr)
   from hrm_person_job pj, hrm_job job
   where a.hrm_person_id=pj.hrm_person_id
   and pj.hrm_job_id=job.hrm_job_id
   and pj.pej_from<=(case
                     when c.con_end is null or c.con_end > to_date(vPeriodTo,'YYYYMM')
                     then last_day(to_date(vPeriodTo,'YYYYMM'))
                     else c.con_end
                    end) --certif_end
    and nvl(pj.pej_to,to_date('31.12.4000','DD.MM.YYYY'))>=(case
                                               when c.con_begin is null or c.con_begin < to_date(vPeriodFrom,'YYYYMM')
                                               then to_date(vPeriodFrom,'YYYYMM')
                                               else c.con_begin
                                              end) --certif_begin
   ) job_title,
  a.pc_lang_id,
  e.hrm_elements_id,
  e.elr_root_code,
  e.erd_descr,
  hrm_itx.get_pers_currYYYYMM(a.hrm_person_id,(select to_char(max(hit_pay_period),'YYYYMM')
                                                               from hrm_history hit2
                                                       where hit2.hrm_employee_id=a.hrm_person_id
                                                       and hit2.hit_pay_period<=nvl(last_day(to_date(vPeriodTo,'YYYYMM')),to_date('31.12.4000','DD.MM.YYYY'))
                                                )
                             ) currency,
  hrm_itx.sumelemdevise(a.hrm_person_id,e.ele_code, case
                                                     when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
                                                     then to_date(vPeriodFrom,'YYYYMM')
                                                     else c.con_begin
                                                    end,
                                                    case
                                                      when hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4)) > last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      then last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      else hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4))
                                                     end) his_pay_sum_val,
  substr(vPeriodFrom,1,4) year,
  vPeriodFrom period_from,
  vPeriodTo period_to
  from
  hrm_person a,
  hrm_in_out b,
  hrm_contract c,
  (-- Eléments de la liste avec leur description: le lien se fait sur le Positionnement = code statistique
  select e1.hrm_control_elements_id hrm_elements_id,
            e1.coe_code ele_code,
          e1.coe_box elr_root_code,
          d1.erd_descr,
          d1.pc_lang_id
          from hrm_control_elements e1, hrm_elements_root r1, hrm_elements_root_descr d1
          where e1.coe_box=r1.elr_root_code(+)
          and r1.hrm_elements_root_id=d1.hrm_elements_root_id(+)
          and e1.hrm_control_list_id=(select hrm_control_list_id from hrm_control_list where col_name='Certificat d''avantages en nature')
    ) e
  where
  a.hrm_person_id=b.hrm_employee_id
  and b.hrm_in_out_id=c.hrm_in_out_id
  and e.pc_lang_id=a.pc_lang_id
  and (c.con_begin<=last_day(to_date(vPeriodTo,'YYYYMM'))
      or c.con_begin is null)
  and (c.con_end>=to_date(vPeriodFrom,'YYYYMM')
      or c.con_end is null)
  and (b.ino_in<=last_day(to_date(vPeriodTo,'YYYYMM'))
      or b.ino_in is null)
  and (b.ino_out>=to_date(vPeriodFrom,'YYYYMM')
      or b.ino_out is null)
  and hrm_itx.sumelemdevise(a.hrm_person_id,e.ele_code, case
                                                     when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
                                                     then to_date(vPeriodFrom,'YYYYMM')
                                                     else c.con_begin
                                                    end,
                                                    case
                                                      when hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4)) > last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      then last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      else hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4))
                                                     end) <> 0
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null);


 end ind_c9_certif_NDF_period;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_CERTIF_PERIOD" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,PROCPARAM2 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure de génération des données AVS
 is
 vPeriodFrom varchar2(6);
 vPeriodTo varchar2(6);
 SearchName varchar2(200);

 begin
  vPeriodFrom:=PROCPARAM0;
  vPeriodTo:=PROCPARAM1;
  SearchName:=PROCPARAM2;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  a.hrm_person_id,
  a.per_last_name||' '||a.per_first_name per_fullname,
  a.emp_number,
  com_dic_functions.GETDICODESCR('DIC_PERSON_POLITNESS',a.per_title,a.pc_lang_id) per_title,
  case
   when a.per_mail_add_selector=0 then a.per_businessstreet
   when a.per_mail_add_selector=1 then a.per_homestreet
   when a.per_mail_add_selector=2 then a.per_otherstreet
   when a.per_mail_add_selector=3 then a.per_taxstreet
  end per_homestreet,
  case
   when a.per_mail_add_selector=0 then a.per_businesspostalcode
   when a.per_mail_add_selector=1 then a.per_homepostalcode
   when a.per_mail_add_selector=2 then a.per_otherpostalcode
   when a.per_mail_add_selector=3 then a.per_taxpostalcode
  end per_homepostalcode,
  case
   when a.per_mail_add_selector=0 then a.per_businesscity
   when a.per_mail_add_selector=1 then a.per_homecity
   when a.per_mail_add_selector=2 then a.per_othercity
   when a.per_mail_add_selector=3 then a.per_taxcity
  end per_homecity,
  case
   when a.per_mail_add_selector=0 then a.per_businesscountry
   when a.per_mail_add_selector=1 then a.per_homecountry
   when a.per_mail_add_selector=2 then a.per_othercountry
   when a.per_mail_add_selector=3 then a.per_taxcountry
  end per_homecountry,
  b.ino_in,
  b.ino_out,
  c.con_begin,
  c.con_end,
  case
   when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
   then to_date(vPeriodFrom,'YYYYMM')
   else c.con_begin
  end certif_begin,
  case
   when c.con_end is null or c.con_end > to_date(vPeriodTo,'YYYYMM')
   then last_day(to_date(vPeriodTo,'YYYYMM'))
   else c.con_end
  end certif_end,
  c.dic_salary_number_id,
  com_dic_functions.getDicoDescr('DIC_SALARY_NUMBER',c.dic_salary_number_id,a.pc_lang_id) san_descr,
  /*(select replace(max(his_pay_value),'"','')
   from hrm_history_detail his, hrm_elements ele
   where his.hrm_elements_id=ele.hrm_elements_id
   and his.hrm_employee_id=a.hrm_person_id
   and ele.ele_code='DivColFunction'
   and his.his_pay_period in (select max(hit_pay_period)
                                     from hrm_history hit
                             where hit.hrm_employee_id=his.hrm_employee_id
                             and hit.hit_pay_period<nvl(c.con_end,to_date('31.12.4000','DD.MM.YYYY')))
   ) job_title,*/
  (select max(job_descr)
   from hrm_person_job pj, hrm_job job
   where a.hrm_person_id=pj.hrm_person_id
   and pj.hrm_job_id=job.hrm_job_id
   and pj.pej_from<=(case
                     when c.con_end is null or c.con_end > to_date(vPeriodTo,'YYYYMM')
                     then last_day(to_date(vPeriodTo,'YYYYMM'))
                     else c.con_end
                    end) --certif_end
    and nvl(pj.pej_to,to_date('31.12.4000','DD.MM.YYYY'))>=(case
                                               when c.con_begin is null or c.con_begin < to_date(vPeriodFrom,'YYYYMM')
                                               then to_date(vPeriodFrom,'YYYYMM')
                                               else c.con_begin
                                              end) --certif_begin
   ) job_title,
  a.pc_lang_id,
  e.hrm_elements_id,
  e.elr_root_code,
  e.erd_descr,
  hrm_itx.get_pers_currYYYYMM(a.hrm_person_id,(select to_char(max(hit_pay_period),'YYYYMM')
                                                               from hrm_history hit2
                                                       where hit2.hrm_employee_id=a.hrm_person_id
                                                       and hit2.hit_pay_period<=nvl(last_day(to_date(vPeriodTo,'YYYYMM')),to_date('31.12.4000','DD.MM.YYYY'))
                                                )
                             ) currency,
  hrm_itx.sumelemdevise(a.hrm_person_id,e.ele_code, case
                                                     when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
                                                     then to_date(vPeriodFrom,'YYYYMM')
                                                     else c.con_begin
                                                    end,
                                                    case
                                                      when hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4)) > last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      then last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      else hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4))
                                                     end) his_pay_sum_val,
  substr(vPeriodFrom,1,4) year,
  vPeriodFrom period_from,
  vPeriodTo period_to
  from
  hrm_person a,
  hrm_in_out b,
  hrm_contract c,
  (-- Eléments de la liste avec leur description: le lien se fait sur le Positionnement = code statistique
  select e1.hrm_control_elements_id hrm_elements_id,
            e1.coe_code ele_code,
          e1.coe_box elr_root_code,
          d1.erd_descr,
          d1.pc_lang_id
          from hrm_control_elements e1, hrm_elements_root r1, hrm_elements_root_descr d1
          where e1.coe_box=r1.elr_root_code(+)
          and r1.hrm_elements_root_id=d1.hrm_elements_root_id(+)
          and e1.hrm_control_list_id=(select hrm_control_list_id from hrm_control_list where col_name='Certificat de salaire')
   union all
   -- 16.01.2016 : Réactivé pour pouvoir retourner les bonnes rubriques du Certificat de Salaire
   -- Elements du brut avec leur description
   select str.related_id,
          str.related_code,
          elr_root_code,
          d2.erd_descr,
          d2.pc_lang_id
          from hrm_formulas_structure str, hrm_elements ele,hrm_elements_family f,hrm_elements_root r2,hrm_elements_root_descr d2
          where str.related_id=ele.hrm_elements_id
          and str.related_id=f.hrm_elements_id
          and f.hrm_elements_root_id=r2.hrm_elements_root_id
          and r2.hrm_elements_root_id=d2.hrm_elements_root_id
          and main_code in ('CemSalBrut','CemSalBrut2','CemSalBrut3')
          and related_code not in ('CemSalBrut','CemSalBrut2','CemSalBrut3')

    ) e
  where
  a.hrm_person_id=b.hrm_employee_id
  and b.hrm_in_out_id=c.hrm_in_out_id
  and e.pc_lang_id=a.pc_lang_id
  and (c.con_begin<=last_day(to_date(vPeriodTo,'YYYYMM'))
      or c.con_begin is null)
  and (c.con_end>=to_date(vPeriodFrom,'YYYYMM')
      or c.con_end is null)
  and (b.ino_in<=last_day(to_date(vPeriodTo,'YYYYMM'))
      or b.ino_in is null)
  and (b.ino_out>=to_date(vPeriodFrom,'YYYYMM')
      or b.ino_out is null)
  and hrm_itx.sumelemdevise(a.hrm_person_id,e.ele_code, case
                                                     when c.con_begin is null or c.con_begin < last_day(to_date(vPeriodFrom,'YYYYMM'))
                                                     then to_date(vPeriodFrom,'YYYYMM')
                                                     else c.con_begin
                                                    end,
                                                    case
                                                      when hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4)) > last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      then last_day(to_date(vPeriodTo,'YYYYMM'))
                                                      else hrm_ind_avs.nextConBeginEnd(a.hrm_person_id,c.con_begin,substr(vPeriodTo,1,4))
                                                     end) <> 0
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null);


 end ind_c9_certif_period;



  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_COMPARE_PAY" (PARAMETER_PROC0 varchar2, PARAMETER_PROC1 varchar2, aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure utilisée par les rapports Crystal HRM_COMPARE_BANK
 is
 vPeriod varchar2(6);
 SearchName varchar2(200);

 begin
  vPeriod:=PARAMETER_PROC0;
  SearchName:=PARAMETER_PROC1;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  hrm_employee_id,
  per_search_name,
  emp_number,
  ino_in,
  ino_out,
  ban_name1,
  ban_city,
  cntid,
  pay_mode,
  pay_acc_num,
  --pay_ban_etab,
  --pay_ban_guich,
  --pay_swift,
  vPeriod period_yyyymm,
  to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM') period_yyyymm_1,
  currency,
  (select pay_amount
   from hrm_pay_log log
   where nvl(log.pc_bank_id,0)=nvl(sub.pc_bank_id,0)
   and nvl(log.pay_acc_num,'0')=nvl(sub.pay_acc_num,'0')
   and nvl(log.acs_financial_currency_id,0)=nvl(sub.acs_financial_currency_id,0)
   and log.pay_mode=sub.pay_mode
   and log.hrm_employee_id=sub.hrm_employee_id
   and to_char(log.pay_period,'YYYYMM')=vPeriod
   ) pay_amount,
  (select pay_amount
   from hrm_pay_log log
   where nvl(log.pc_bank_id,0)=nvl(sub.pc_bank_id,0)
   and nvl(log.pay_acc_num,'0')=nvl(sub.pay_acc_num,'0')
   and nvl(log.acs_financial_currency_id,0)=nvl(sub.acs_financial_currency_id,0)
   and log.pay_mode=sub.pay_mode
   and log.hrm_employee_id=sub.hrm_employee_id
   and log.pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-1))
   ) pay_amount_1
  from
  (select
   distinct
   a.hrm_employee_id,
   a.pc_bank_id,
   acs_financial_currency_id,
   per_search_name,
   emp_number,
   d.entry ino_in,
   d.exit ino_out,
   b.ban_name1,
   b.ban_city,
   (select cntid from pcs.pc_cntry cnt where b.pc_cntry_id=cnt.pc_cntry_id) cntid,
   pay_mode,
   pay_acc_num,
   (select currency
    from acs_financial_currency fcur, pcs.pc_curr cur
    where a.acs_financial_currency_id=fcur.acs_financial_currency_id
    and fcur.pc_curr_id=cur.pc_curr_id) currency
   --pay_ban_etab,
   --pay_ban_guich,
   --pay_swift
   from
   hrm_pay_log a,
   pcs.pc_bank b,
   hrm_person c,
   v_hrm_last_entry d
   where
   a.pc_bank_id=b.pc_bank_id(+)
   and a.hrm_employee_id=c.hrm_person_id
   and a.hrm_employee_id=d.empid(+)
   and (to_char(pay_period,'YYYYMM')=vPeriod
        or pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-1))
   	 )
   and (per_search_name like upper(SearchName||'%')
        or SearchName is null)
   ) sub;

 end ind_c9_compare_pay;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_COMPARE_PERIOD" (PARAMETER_PROC0 varchar2, PARAMETER_PROC1 varchar2, PARAMETER_PROC2 varchar2, aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure utilisée par les rapports Crystal HRM_COMPARE_PERIOD et HRM_COMPARE_TRIM
 is
 vPeriod varchar2(6);
 SearchName varchar2(200);
 Class7Display varchar2(10);

 begin
  vPeriod:=PARAMETER_PROC0;           --Période référence (YYYYMM)
  SearchName:=PARAMETER_PROC1;        --Nom de l'employé (vide -> tous les employés)
  Class7Display:=PARAMETER_PROC2;     --Forcer affichage des rubriques de la classe 7

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  hrm_employee_id,
  hrm_elements_id,
  hrm_elements_root_id,
  pc_lang_id,
  ele_code,
  c_root_type,
  c_root_variant,
  per_search_name,
  emp_number,
  ino_in,
  ino_out,
  to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM') period_yyyymm_1,
  vPeriod period_yyyymm,
  elr_root_code,
  erd_descr,
  hrm_itx.SUMELEMYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) his_pay_sum_val_chf_1,
  hrm_itx.GET_PERS_CURRYYYYMM(hrm_employee_id,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) currency_1,
  hrm_itx.SUMELEMDEVISEYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) his_pay_sum_val_dev_1,
  hrm_itx.SUMELEMYYYYMM(hrm_employee_id,ele_code,vPeriod,vPeriod) his_pay_sum_val_chf,
  hrm_itx.GET_PERS_CURRYYYYMM(hrm_employee_id,vPeriod) currency,
  hrm_itx.SUMELEMDEVISEYYYYMM(hrm_employee_id,ele_code,vPeriod,vPeriod) his_pay_sum_val_dev
  from
  (select
   distinct
   a.hrm_employee_id,
   f.hrm_elements_id,
   d.hrm_elements_root_id,
   e.pc_lang_id,
   ele_code,
   c_root_type,
   c_root_variant,
   per_search_name,
   emp_number,
   entry ino_in,
   exit ino_out,
   elr_root_code,
   erd_descr
   from
   hrm_history_detail a,
   hrm_person b,
   hrm_elements_family c,
   hrm_elements_root d,
   hrm_elements_root_descr e,
   hrm_elements f,
   v_hrm_last_entry g
   where
   a.hrm_employee_id=b.hrm_person_id
   and a.hrm_elements_id=c.hrm_elements_id
   and c.hrm_elements_root_id=d.hrm_elements_root_id
   and d.hrm_elements_root_id=e.hrm_elements_root_id
   and c.hrm_elements_id=f.hrm_elements_id
   and e.pc_lang_id=b.pc_lang_id
   and b.hrm_person_id=g.empid
   and ELF_IS_REFERENCE=1
   and (to_char(a.his_pay_period,'YYYYMM')=vPeriod
       or a.his_pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-1)))
    and (
       (elr_is_print=1 and elr_condition<>'FALSE')
       or
        (substr(elr_root_code,1,1)='7' and elr_reporting=1 and upper(Class7Display)='VRAI')
       )
   and elr_root_code not like '8%'
   and (per_search_name like upper(SearchName||'%')
      or SearchName is null)
   )  ;

 end ind_c9_compare_period;


  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_COMPARE_PERIOD_TRIM" (PARAMETER_PROC0 varchar2, PARAMETER_PROC1 varchar2, PARAMETER_PROC2 varchar2, aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure utilisée par les rapports Crystal HRM_COMPARE_PERIOD et HRM_COMPARE_TRIM
 is
 vPeriod varchar2(6);
 SearchName varchar2(200);
 Class7Display varchar2(10);

 begin
  vPeriod:=PARAMETER_PROC0;           --Période référence (YYYYMM)
  SearchName:=PARAMETER_PROC1;        --Nom de l'employé (vide -> tous les employés)
  Class7Display:=PARAMETER_PROC2;     --Forcer affichage des rubriques de la classe 7

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  hrm_employee_id,
  hrm_elements_id,
  hrm_elements_root_id,
  pc_lang_id,
  ele_code,
  c_root_type,
  c_root_variant,
  per_search_name,
  emp_number,
  ino_in,
  ino_out,
  to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM') period_yyyymm_2,
  to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM') period_yyyymm_1,
  vPeriod period_yyyymm,
  elr_root_code,
  erd_descr,
  hrm_itx.SUMELEMYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM')) his_pay_sum_val_chf_2,
  hrm_itx.GET_PERS_CURRYYYYMM(hrm_employee_id,to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM')) currency_2,
  hrm_itx.SUMELEMDEVISEYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-2),'YYYYMM')) his_pay_sum_val_dev_2,
  hrm_itx.SUMELEMYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) his_pay_sum_val_chf_1,
  hrm_itx.GET_PERS_CURRYYYYMM(hrm_employee_id,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) currency_1,
  hrm_itx.SUMELEMDEVISEYYYYMM(hrm_employee_id,ele_code,to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM'),to_char(add_months(to_date(vPeriod,'YYYYMM'),-1),'YYYYMM')) his_pay_sum_val_dev_1,
  hrm_itx.SUMELEMYYYYMM(hrm_employee_id,ele_code,vPeriod,vPeriod) his_pay_sum_val_chf,
  hrm_itx.GET_PERS_CURRYYYYMM(hrm_employee_id,vPeriod) currency,
  hrm_itx.SUMELEMDEVISEYYYYMM(hrm_employee_id,ele_code,vPeriod,vPeriod) his_pay_sum_val_dev
  from
  (select
   distinct
   a.hrm_employee_id,
   f.hrm_elements_id,
   d.hrm_elements_root_id,
   e.pc_lang_id,
   ele_code,
   c_root_type,
   c_root_variant,
   per_search_name,
   emp_number,
   entry ino_in,
   exit ino_out,
   elr_root_code,
   erd_descr
   from
   hrm_history_detail a,
   hrm_person b,
   hrm_elements_family c,
   hrm_elements_root d,
   hrm_elements_root_descr e,
   hrm_elements f,
   v_hrm_last_entry g
   where
   a.hrm_employee_id=b.hrm_person_id
   and a.hrm_elements_id=c.hrm_elements_id
   and c.hrm_elements_root_id=d.hrm_elements_root_id
   and d.hrm_elements_root_id=e.hrm_elements_root_id
   and c.hrm_elements_id=f.hrm_elements_id
   and e.pc_lang_id=b.pc_lang_id
   and b.hrm_person_id=g.empid
   and ELF_IS_REFERENCE=1
   and (to_char(a.his_pay_period,'YYYYMM')=vPeriod
       or a.his_pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-1))
	   or a.his_pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-2))
   	)
   and (to_char(a.his_pay_period,'YYYYMM')=vPeriod
       or a.his_pay_period=last_day(add_months(to_date(vPeriod,'YYYYMM'),-1)))
    and (
       (elr_is_print=1 and elr_condition<>'FALSE')
       or
        (substr(elr_root_code,1,1)='7' and elr_reporting=1 and upper(Class7Display)='VRAI')
       )
   and elr_root_code not like '8%'
   and (per_search_name like upper(SearchName||'%')
      or SearchName is null)
   )  ;

 end ind_c9_compare_period_trim;


  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_CTRL_MAJOR_AVS" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
-- Procédure utilisée dans le rapport Crystal HRM_MAJORATION_AVS
is
 vPeriod varchar2(6);
 SearchName varchar2(200);
begin
 vPeriod:=PROCPARAM0;
 SearchName:=PROCPARAM1;

 OPEN AREFCURSOR FOR
  select
hrm_employee_id,
per_search_name,
emp_number,
coe_box,
coe_descr,
coe_code,
elr_root_code,
erd_descr,
his_pay_period,
period,
his_pay_value,
his_pay_sum_val_chf,
currency,
his_pay_sum_val_dev
from
v_ind_hrm_cub_list
where
col_name='Contrôle Majoration AVS'
and pc_lang_id=1
and period=vPeriod
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null);
end ind_c9_ctrl_major_avs;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_CTRL_TAUX_BLOQUE" (PROCPARAM0 varchar2,PROCPARAM1 varchar2,aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
-- Procédure utilisée dans le rapport Crystal HRM_TAUX_BLOQUE
is
 vPeriod varchar2(6);
 SearchName varchar2(200);
begin
 vPeriod:=PROCPARAM0;
 SearchName:=PROCPARAM1;

 OPEN AREFCURSOR FOR
  select
  related_id,
  hrm_person_id,
  per_search_name,
  elr_root_code,
  erd_descr,
  his_pay_period,
  to_char(his_pay_period,'YYYYMM') period_yyyymm,
  his_pay_sum_val his_pay_sum_val_chf,
  hrm_itx.GET_PERS_CURR(d.hrm_employee_id,d.his_pay_period) currency,
  round(his_pay_sum_val/hrm_itx.GET_PERS_RATE(d.hrm_employee_id,d.his_pay_period),2) his_pay_sum_val_dev,
  'Base' gs
  from
  hrm_formulas_structure a,
  hrm_elements_root b,
  hrm_elements_root_descr c,
  hrm_history_detail d,
  hrm_person e
  where
  a.related_id=b.hrm_elements_id
  and b.hrm_elements_root_id=c.hrm_elements_root_id
  and b.hrm_elements_id=d.hrm_elements_id
  and d.hrm_employee_id=e.hrm_person_id
  and main_code in ('CemBasTauxBloqué','CemBasTauxBloqué2','CemBasTauxBloqué3','CemBasTauxBloqué4')
  and related_code not in ('CemBasTauxBloqué','CemBasTauxBloqué2','CemBasTauxBloqué3','CemBasTauxBloqué4')
  and c.pc_lang_id=1
  and to_char(his_pay_period,'YYYYMM')=vPeriod
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null)
  UNION ALL
  select
  a.hrm_elements_id,
  hrm_person_id,
  per_search_name,
  elr_root_code,
  erd_descr,
  his_pay_period,
  to_char(his_pay_period,'YYYYMM') period_yyyymm,
  his_pay_sum_val his_pay_sum_val_chf,
  hrm_itx.GET_PERS_CURR(d.hrm_employee_id,d.his_pay_period) currency,
  round(his_pay_sum_val/hrm_itx.GET_PERS_RATE(d.hrm_employee_id,d.his_pay_period),2) his_pay_sum_val_dev,
  elr_root_name gs
  from
  hrm_elements a,
  hrm_elements_root b,
  hrm_elements_root_descr c,
  hrm_history_detail d,
  hrm_person e
  where
  a.hrm_elements_id=b.hrm_elements_id
  and b.hrm_elements_root_id=c.hrm_elements_root_id
  and b.hrm_elements_id=d.hrm_elements_id
  and d.hrm_employee_id=e.hrm_person_id
  and ele_code in ('CemBasTauxBloqué','DivEURTaux','DivUSDTaux','DivGBPTaux','DivJPYTaux','DivCNYTaux',
  'CemEURTauxBloqué','CemUSDTauxBloqué','CemGBPTauxBloqué','CemJPYTauxBloqué','CemCNYTauxBloqué',
  'CemBasDiffTauxBloqué','CemMontantPaye','CemMontantPayeAffich')
  and c.pc_lang_id=1
  and to_char(his_pay_period,'YYYYMM')=vPeriod
  and (per_search_name like upper(SearchName||'%')
      or SearchName is null);
end ind_c9_ctrl_taux_bloque;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_DOC_INVOICE_LIST" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     date
, PROCPARAM_1 in     date
--, PROCPARAM_2 in  pcs.pc_lang.lanid%type
)

is
/**
* Procédure stockée utilisée pour le rapport DOC_INVOICE_LIST (Liste des factures)
*
* @author RGU
* @lastUpdate
* @param PROCPARAM_0    Date document de
* @param PROCPARAM_1    Date docuemnt à
* @param PROCPARAM_2    Langue (PC_LANG_ID)
*/

 vDateFrom date;
 vDateTo date;
 vLang pcs.pc_lang.lanid%type;

begin

vDateFrom:=PROCPARAM_0;
vDateTo:=PROCPARAM_1;
vLang:=1;

open aRefCursor for
      select
      dmt.dmt_number,
      dmt.dmt_date_document,
      dmt.C_DOCUMENT_STATUS,
      com_functions.GetDescodeDescr('C_DOCUMENT_STATUS', dmt.C_DOCUMENT_STATUS, vLang) C_DOCUMENT_STATUS_DESCR,
      gau.gau_describe,
      gau.DIC_GAUGE_GROUP_ID,
      com_dic_functions.GetDicoDescr('DIC_GAUGE_GROUP',gau.DIC_GAUGE_GROUP_ID,vLang) DIC_GAUGE_GROUP_DESCR,
      gst.C_GAUGE_TITLE,
      com_functions.GetDescodeDescr('C_GAUGE_TITLE', gst.C_GAUGE_TITLE, vLang) C_GAUGE_TITLE_DESCR,
      per.per_short_name,
      per.per_name,
      (select lanid
       from pcs.pc_lang lan
       where dmt.pc_lang_id=lan.pc_lang_id) lanid,
      (select currency
       from acs_financial_currency fcur, pcs.pc_curr cur
       where dmt.acs_financial_currency_id=fcur.acs_financial_currency_id
       and fcur.pc_curr_id=cur.pc_curr_id) currency,
      dmt.DMT_RATE_OF_EXCHANGE,
      (select acc_number
       from acs_account acc
       where acc.acs_account_id=dmt.acs_financial_account_id) doc_acc_num,
      (select des_description_summary
       from acs_description des
       where des.acs_account_id=dmt.acs_financial_account_id
       and des.pc_lang_id=vLang) doc_acc_descr,
      (select acc_number
       from acs_account div
       where div.acs_account_id=dmt.acs_division_account_id) doc_div_num,
      (select des_description_summary
       from acs_description des
       where des.acs_account_id=dmt.acs_division_account_id
       and des.pc_lang_id=vLang) doc_div_descr,
      COM_VFIELDS_4_PRNT.GetVF2Value_char('DOC_DOCUMENT','VFLD_DOC_EXTRACT_ID',dmt.doc_document_id) VFLD_DOC_EXTRACT_ID,
      COM_VFIELDS_4_PRNT.GetVF2Value_char('DOC_DOCUMENT','VFLD_DOC_OE_NUMBER',dmt.doc_document_id) VFLD_DOC_OE_NUMBER,
      COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',dmt.doc_document_id) VFLD_DOC_DATE_FROM,
      COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_TO',dmt.doc_document_id) VFLD_DOC_DATE_TO,
      pos.c_gauge_type_pos,
      goo.goo_major_reference,
      (select DES_SHORT_DESCRIPTION
       from gco_description des
       where des.gco_good_id=pos.gco_good_id
       and des.pc_lang_id=vLang) DES_SHORT_DESCRIPTION,
      (select DES_LONG_DESCRIPTION
       from gco_description des
       where des.gco_good_id=pos.gco_good_id
       and des.pc_lang_id=vLang) DES_LONG_DESCRIPTION,
      DECODE (gst.C_GAUGE_TITLE,'9',(pos.POS_NET_VALUE_EXCL * -1),pos.POS_NET_VALUE_EXCL) POS_NET_VALUE_EXCL,
      DECODE (gst.C_GAUGE_TITLE,'9',(pos.POS_NET_VALUE_INCL * -1),pos.POS_NET_VALUE_INCL) POS_NET_VALUE_INCL,
      DECODE (gst.C_GAUGE_TITLE,'9',(pos.POS_NET_VALUE_EXCL_B * -1),pos.POS_NET_VALUE_EXCL_B) POS_NET_VALUE_EXCL_B,
      DECODE (gst.C_GAUGE_TITLE,'9',(pos.POS_NET_VALUE_INCL_B * -1),pos.POS_NET_VALUE_INCL_B) POS_NET_VALUE_INCL_B,
      (select acc_number
       from acs_account acc
       where acc.acs_account_id=pos.acs_financial_account_id) pos_acc_num,
      (select des_description_summary
       from acs_description des
       where des.acs_account_id=pos.acs_financial_account_id
       and des.pc_lang_id=vLang) pos_acc_descr,
      (select acc_number
       from acs_account div
       where div.acs_account_id=pos.acs_division_account_id) pos_div_num,
      (select des_description_summary
       from acs_description des
       where des.acs_account_id=pos.acs_division_account_id
       and des.pc_lang_id=vLang) pos_div_descr,
      foo.FOO_DOCUMENT_TOTAL_AMOUNT,
      foo.FOO_DOCUMENT_TOT_AMOUNT_B,
      (select min(PAD_PAYMENT_DATE)
       from DOC_PAYMENT_DATE pay
       where foo.doc_foot_id=pay.doc_foot_id) PAD_PAYMENT_DATE,
      dmt.doc_document_id,
      dmt.doc_gauge_id,
      dmt.pac_third_id,
      dmt.acs_financial_account_id doc_financial_account_id,
      dmt.acs_division_account_id doc_division_account_id,
      pos.acs_financial_account_id pos_financial_account_id,
      pos.acs_division_account_id pos_division_account_id,
      dmt.pc_lang_id,
      pos.gco_good_id
      from
      doc_document dmt,
      doc_position pos,
      pac_person per,
      doc_gauge gau,
      doc_gauge_structured gst,
      gco_good goo,
      doc_foot foo
      where
      dmt.doc_document_id=pos.doc_document_id(+)
      and dmt.pac_third_id=per.pac_person_id
      and dmt.doc_gauge_id=gau.doc_gauge_id
      and gau.doc_gauge_id=gst.doc_gauge_id
      and pos.gco_good_id=goo.gco_good_id(+)
      and dmt.doc_document_id=foo.doc_document_id(+)
      and gau.c_admin_domain='2'
      and pos.c_gauge_type_pos in ('1','5')
      and dmt.dmt_date_document >= vDateFrom
      and dmt.dmt_date_document <= vDateTo
        ;
end IND_C9_DOC_INVOICE_LIST;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_DOC_RECAP_SEM_QUARTER" (aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp, PROCPARAM_0 in date, PROCPARAM_1 in date)

is
/**
* Procédure stockée utilisée dans un rapport
*
* @author
* @lastUpdate
* @version
* @public
* @param PROCPARAM_0   Date de
*        PROCPARAM_1   Date à
*/
begin

--pcs.pc_init_session.setLanId (procuser_lanid);

open aRefCursor for
select
*
from
(
-- FACTURES
SELECT
'PRODUIT' DOMAINE,
  CUR.CURRENCY,
  NVL (RCO_TITLE,' ') RCO_TITLE,
  PER_NAME,
  ACC_NUMBER DIV_NUMBER,
  ACD.DES_DESCRIPTION_SUMMARY PER_FULLNAME,
  TO_CHAR (DOC.DMT_DATE_DOCUMENT,'YYYYMM') PERIOD,
  DOC.DMT_DATE_DOCUMENT,
  DMT_NUMBER,
  DIC_GAUGE_GROUP_ID,
  NVL (GOO.GOO_MAJOR_REFERENCE,' ') GOO_MAJOR_REFERENCE,
  DES_SHORT_DESCRIPTION,
  DES_LONG_DESCRIPTION,
  gca.GCO_CATEGORY_CODE,
  gca.GCO_GOOD_CATEGORY_WORDING,
  DECODE (DGS.C_GAUGE_TITLE,'9',(POS_NET_VALUE_EXCL * -1),'8',POS_NET_VALUE_EXCL,'30',POS_NET_VALUE_EXCL,0) POS_NET_VALUE_INCL,
  DECODE (DGS.C_GAUGE_TITLE,'9',(POS_NET_VALUE_EXCL_B * -1),'8',POS_NET_VALUE_EXCL_B,'30',POS_NET_VALUE_EXCL_B,0) POS_NET_VALUE_INCL_B,
  case
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '01' and '03' then '1'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '04' and '06' then '2'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '07' and '09' then '3'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '10' and '12' then '4'
  end trimestre,
  nvl(pac_itx.GetCusLangId(per.pac_person_id),1) pc_lang_id,
  (select lanid from pcs.pc_lang where pc_lang_id=nvl(pac_itx.GetCusLangId(per.pac_person_id),1)) lanid
FROM
  DOC_POSITION POS,
  DOC_GAUGE_STRUCTURED DGS,
  DOC_RECORD DRE,
  GCO_GOOD GOO,
  PAC_CUSTOM_PARTNER PAC,
  PAC_THIRD THI,
  PAC_PERSON PER,
  DOC_DOCUMENT DOC,
  ACS_DIVISION_ACCOUNT DIV,
  ACS_ACCOUNT ACC,
  ACS_FINANCIAL_CURRENCY FCUR,
  PCS.PC_CURR CUR,
  ACS_DESCRIPTION ACD,
  GCO_DESCRIPTION GOD,
  DOC_GAUGE GAU,
  GCO_GOOD_CATEGORY gca
WHERE
  POS.ACS_DIVISION_ACCOUNT_ID=DIV.ACS_DIVISION_ACCOUNT_ID (+) AND
  DIV.ACS_DIVISION_ACCOUNT_ID=ACD.ACS_ACCOUNT_ID (+) AND
  (ACD.PC_LANG_ID=1 OR
  ACD.PC_LANG_ID IS NULL) AND
  GOO.GCO_GOOD_ID=GOD.GCO_GOOD_ID AND
  GOD.PC_LANG_ID=pac_itx.GetCusLangId(per.pac_person_id) AND
  DIV.ACS_DIVISION_ACCOUNT_ID=ACC.ACS_ACCOUNT_ID (+) AND
  DOC.ACS_FINANCIAL_CURRENCY_ID=FCUR.ACS_FINANCIAL_CURRENCY_ID AND
  FCUR.PC_CURR_ID=CUR.PC_CURR_ID AND
  DOC.DOC_GAUGE_ID=DGS.DOC_GAUGE_ID AND
  (DGS.C_GAUGE_TITLE = '8' OR
  DGS.C_GAUGE_TITLE = '9' OR
  DGS.C_GAUGE_TITLE = '30' ) AND
  (DOC.DMT_DATE_DOCUMENT >=PROCPARAM_0 AND
  DOC.DMT_DATE_DOCUMENT <=PROCPARAM_1 ) AND
  POS.DOC_RECORD_ID = DRE.DOC_RECORD_ID (+)  AND
  DOC.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID AND
  ( POS.POS_FINAL_QUANTITY <> 0 OR
  POS.POS_NET_VALUE_EXCL <> 0) AND
  POS.C_DOC_POS_STATUS <> '05' AND
  (POS.C_GAUGE_TYPE_POS='1' OR
  POS.C_GAUGE_TYPE_POS='5' OR
  POS.C_GAUGE_TYPE_POS='7' OR
  POS.C_GAUGE_TYPE_POS='8' OR
  POS.C_GAUGE_TYPE_POS='91' OR
  POS.C_GAUGE_TYPE_POS='10') AND
  PER.PAC_PERSON_ID = DOC.PAC_THIRD_ID AND
  PER.PAC_PERSON_ID=THI.PAC_THIRD_ID AND
  THI.PAC_THIRD_ID=PAC.PAC_CUSTOM_PARTNER_ID AND
  POS.GCO_GOOD_ID = GOO.GCO_GOOD_ID (+) AND
  DOC.DOC_GAUGE_ID=GAU.DOC_GAUGE_ID
  and DIC_GAUGE_GROUP_ID in ('MAP','RECAP')
  and goo.GCO_GOOD_CATEGORY_ID=gca.GCO_GOOD_CATEGORY_ID
UNION ALL
-- COMPTA (CHARGES)
select
'CHARGE' DOMAINE,
(select currency
 from acs_financial_currency fcur, pcs.pc_curr cur
 where imp.acs_financial_currency_id=fcur.acs_financial_currency_id
 and fcur.pc_curr_id=cur.pc_curr_id) currency,
(select rco_title from doc_record rec where imp.doc_record_id=rec.doc_record_id) rco_title,
per.per_name,
(SELECT DIV.ACC_NUMBER FROM ACS_ACCOUNT DIV WHERE DIV.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER,
(select des_description_summary from acs_description des where IMP.IMF_ACS_DIVISION_ACCOUNT_ID=des.acs_account_id and des.pc_lang_id=1) div_description,
to_char(IMF_TRANSACTION_DATE,'YYYYMM') period,
IMF_TRANSACTION_DATE,
(SELECT DOC.DOC_NUMBER FROM ACT_DOCUMENT DOC WHERE DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID) DOC_NUMBER,
acc_number,
fac.DIC_FIN_ACC_CODE_6_ID,
DES_SHORT_DESCRIPTION,
DES_LONG_DESCRIPTION,
gca.GCO_CATEGORY_CODE,
gca.GCO_GOOD_CATEGORY_WORDING,
nvl(IMF_AMOUNT_FC_D,IMF_AMOUNT_LC_D)-nvl(IMF_AMOUNT_FC_C,IMF_AMOUNT_LC_C) amount_me,
IMF_AMOUNT_LC_D-IMF_AMOUNT_LC_C amount_mb,
case
 when to_char(IMF_TRANSACTION_DATE,'MM') between '01' and '03' then '1'
 when to_char(IMF_TRANSACTION_DATE,'MM') between '04' and '06' then '2'
 when to_char(IMF_TRANSACTION_DATE,'MM') between '07' and '09' then '3'
 when to_char(IMF_TRANSACTION_DATE,'MM') between '10' and '12' then '4'
end trimestre,
nvl(pac_itx.GetCusLangId(per.pac_person_id),1) pc_lang_id,
(select lanid from pcs.pc_lang where pc_lang_id=nvl(pac_itx.GetCusLangId(per.pac_person_id),1)) lanid
from
act_financial_imputation imp,
acs_account acc,
acs_financial_account fac,
gco_good goo,
gco_description god,
(select doc_record_id, rco_title, pac_person_id, per_short_name, per_name
 from doc_record a, pac_person b
 where a.rco_title=b.per_short_name) per,
GCO_GOOD_CATEGORY GCA
where
imp.acs_financial_account_id=fac.acs_financial_account_id
and fac.acs_financial_account_id=acc.acs_account_id
and IMF_TRANSACTION_DATE>=PROCPARAM_0
and IMF_TRANSACTION_DATE<=PROCPARAM_1
and fac.DIC_FIN_ACC_CODE_6_ID=goo.goo_major_reference
and goo.gco_good_id=god.gco_good_id
and god.pc_lang_id=pac_itx.GetCusLangId(per.pac_person_id)
and imp.doc_record_id=per.doc_record_id
and goo.GCO_GOOD_CATEGORY_ID=gca.GCO_GOOD_CATEGORY_ID
UNION ALL
-- FRAIS DE GESTION
SELECT
'CHARGE' DOMAINE,
  CUR.CURRENCY,
  NVL (RCO_TITLE,' ') RCO_TITLE,
  PER_NAME,
  ACC_NUMBER DIV_NUMBER,
  ACD.DES_DESCRIPTION_SUMMARY PER_FULLNAME,
  max(TO_CHAR (DOC.DMT_DATE_DOCUMENT,'YYYYMM')) PERIOD,
  max(DOC.DMT_DATE_DOCUMENT),
  'FG' DMT_NUMBER,
  max(DIC_GAUGE_GROUP_ID),
  max(NVL (GOO.GOO_MAJOR_REFERENCE,' ')) GOO_MAJOR_REFERENCE,
  max(DES_SHORT_DESCRIPTION),
  max(DES_LONG_DESCRIPTION),
  max(gca.GCO_CATEGORY_CODE),
  max(gca.GCO_GOOD_CATEGORY_WORDING),
  ind_doc_billing.GetFGAmount(ACC_NUMBER, RCO_TITLE, PROCPARAM_0, PROCPARAM_1) POS_NET_VALUE_INCL,
  ind_doc_billing.GetFGAmount(ACC_NUMBER, RCO_TITLE, PROCPARAM_0, PROCPARAM_1) POS_NET_VALUE_INCL_B,
  max(case
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '01' and '03' then '1'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '04' and '06' then '2'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '07' and '09' then '3'
   when to_char(nvl(COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',doc.doc_document_id),DOC.DMT_DATE_DOCUMENT),'MM') between '10' and '12' then '4'
  end) trimestre,
  nvl(pac_itx.GetCusLangId(per.pac_person_id),1) pc_lang_id,
  --(select lanid from pcs.pc_lang where pc_lang_id=nvl(pac_itx.GetCusLangId(per.pac_person_id),1)) lanid
  lan.lanid
FROM
  DOC_POSITION POS,
  DOC_GAUGE_STRUCTURED DGS,
  DOC_RECORD DRE,
  GCO_GOOD GOO,
  PAC_CUSTOM_PARTNER PAC,
  PAC_THIRD THI,
  PAC_PERSON PER,
  DOC_DOCUMENT DOC,
  ACS_DIVISION_ACCOUNT DIV,
  ACS_ACCOUNT ACC,
  ACS_FINANCIAL_CURRENCY FCUR,
  PCS.PC_CURR CUR,
  ACS_DESCRIPTION ACD,
  GCO_DESCRIPTION GOD,
  DOC_GAUGE GAU,
  GCO_GOOD_CATEGORY gca,
  pcs.pc_lang lan
WHERE
  POS.ACS_DIVISION_ACCOUNT_ID=DIV.ACS_DIVISION_ACCOUNT_ID (+) AND
  DIV.ACS_DIVISION_ACCOUNT_ID=ACD.ACS_ACCOUNT_ID (+) AND
  (ACD.PC_LANG_ID=1 OR
  ACD.PC_LANG_ID IS NULL) AND
  GOO.GCO_GOOD_ID=GOD.GCO_GOOD_ID AND
  GOD.PC_LANG_ID=pac_itx.GetCusLangId(per.pac_person_id) AND
  DIV.ACS_DIVISION_ACCOUNT_ID=ACC.ACS_ACCOUNT_ID (+) AND
  DOC.ACS_FINANCIAL_CURRENCY_ID=FCUR.ACS_FINANCIAL_CURRENCY_ID AND
  FCUR.PC_CURR_ID=CUR.PC_CURR_ID AND
  DOC.DOC_GAUGE_ID=DGS.DOC_GAUGE_ID AND
  (DGS.C_GAUGE_TITLE = '8' OR
  DGS.C_GAUGE_TITLE = '9' OR
  DGS.C_GAUGE_TITLE = '30' ) AND
  (DOC.DMT_DATE_DOCUMENT >=PROCPARAM_0 AND
  DOC.DMT_DATE_DOCUMENT <=PROCPARAM_1 ) AND
  POS.DOC_RECORD_ID = DRE.DOC_RECORD_ID (+)  AND
  DOC.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID AND
  ( POS.POS_FINAL_QUANTITY <> 0 OR
  POS.POS_NET_VALUE_EXCL <> 0) AND
  POS.C_DOC_POS_STATUS <> '05' AND
  (POS.C_GAUGE_TYPE_POS='1' OR
  POS.C_GAUGE_TYPE_POS='5' OR
  POS.C_GAUGE_TYPE_POS='7' OR
  POS.C_GAUGE_TYPE_POS='8' OR
  POS.C_GAUGE_TYPE_POS='91' OR
  POS.C_GAUGE_TYPE_POS='10') AND
  PER.PAC_PERSON_ID = DOC.PAC_THIRD_ID AND
  PER.PAC_PERSON_ID=THI.PAC_THIRD_ID AND
  THI.PAC_THIRD_ID=PAC.PAC_CUSTOM_PARTNER_ID AND
  POS.GCO_GOOD_ID = GOO.GCO_GOOD_ID (+) AND
  DOC.DOC_GAUGE_ID=GAU.DOC_GAUGE_ID
  and DIC_GAUGE_GROUP_ID in ('MAP','RECAP')
  and goo.GCO_GOOD_CATEGORY_ID=gca.GCO_GOOD_CATEGORY_ID
  and gca.GCO_GOOD_CATEGORY_WORDING='FRAIS DE GESTION'
  and nvl(pac_itx.GetCusLangId(per.pac_person_id),1)=lan.pc_lang_id
  group by CUR.CURRENCY,
  NVL (RCO_TITLE,' '),
  PER_NAME,
  ACC_NUMBER,
  ACD.DES_DESCRIPTION_SUMMARY,
  ind_doc_billing.GetFGAmount(ACC_NUMBER, RCO_TITLE, PROCPARAM_0, PROCPARAM_1),
  nvl(pac_itx.GetCusLangId(per.pac_person_id),1),
  lan.lanid
) pri
where
exists (select 1
        from doc_position a, doc_record b, acs_account c, doc_document d, doc_gauge e
        where a.doc_record_id=b.doc_record_id
        and a.acs_division_account_id=c.acs_account_id
        and a.doc_document_id=d.doc_document_id
        and d.doc_gauge_id=e.doc_gauge_id
        --and COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_FROM',a.doc_document_id)=PROCPARAM_0
        and COM_VFIELDS_4_PRNT.GetVF2Value_date('DOC_DOCUMENT','VFLD_DOC_DATE_TO',a.doc_document_id)=PROCPARAM_1
        --and b.rco_title=pri.rco_title
        and c.acc_number=pri.div_number
        and e.DIC_GAUGE_GROUP_ID='RECAP')
;

end IND_C9_DOC_RECAP_SEM_QUARTER;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_PAY_NB" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,PROCPARAM0 varchar2)
 -- Procédure C9 pour rapport Crystal
 is
 vPeriod varchar2(6);

 begin
  vPeriod:=PROCPARAM0;

  open aRefCursor for
  select
pay.hrm_employee_id,
per.per_search_name,
per.emp_number,
pay.pay_period,
to_char(pay.pay_period,'YYYYMM') period,
(select currency
 from ACS_FINANCIAL_CURRENCY a, pcs.pc_curr b
 where a.pc_curr_id=b.pc_curr_id
 and a.ACS_FINANCIAL_CURRENCY_ID=pay.ACS_FINANCIAL_CURRENCY_id) currency,
pay.pay_amount,
(select case
         when min(to_char(ino_in,'YYYYMM'))=vPeriod then '1. Entrée dans le mois'
         when max(trunc(ino_out,'MM'))=add_months(to_date(vPeriod,'YYYYMM'),-1) then '2. Sortie mois précédent'
         else '3. Présent'
        end
from hrm_in_out ino
 where ino.hrm_employee_id=per.hrm_person_id
 and ino_in <= last_day(to_date(vPeriod,'YYYYMM'))
 and (ino_out >= add_months(to_date(vPeriod,'YYYYMM'),-1)
     or ino_out is null)
 ) presence,
(select min(ino_in)
 from hrm_in_out ino
 where ino.hrm_employee_id=per.hrm_person_id
 and ino_in <= last_day(to_date(vPeriod,'YYYYMM'))
 and (ino_out >= add_months(to_date(vPeriod,'YYYYMM'),-1)
     or ino_out is null)
 ) ino_in,
(select max(ino_out)
 from hrm_in_out ino
 where ino.hrm_employee_id=per.hrm_person_id
 and ino_in <= last_day(to_date(vPeriod,'YYYYMM'))
 and (ino_out >= add_months(to_date(vPeriod,'YYYYMM'),-1)
     or ino_out is null)
 ) ino_out,
(select max(dic_salary_number_id)
 from hrm_contract con
 where con.hrm_employee_id=per.hrm_person_id
 and con_begin <= last_day(to_date(vPeriod,'YYYYMM'))
 and (con_end >= add_months(to_date(vPeriod,'YYYYMM'),-1)
     or con_end is null)
 ) dic_salary_number_id
from
hrm_pay_log pay,
hrm_person per
where
pay.hrm_employee_id=per.hrm_person_id
and pay_period <= last_day(to_date(vPeriod,'YYYYMM'))
and pay_period >= add_months(to_date(vPeriod,'YYYYMM'),-1);

 end ind_c9_pay_nb;




  CREATE OR REPLACE PROCEDURE "C_ITX"."IND_C9_WEB_USER_LETTER" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp)
 -- Procédure pour rapport Crystal HRM_AVS_CTRL
 is
 --vPeriodFrom varchar2(6);
 --vPeriodTo varchar2(6)

 begin
  --vPeriodFrom:=PROCPARAM0;
  --vPeriodTo:=PROCPARAM1;

  -- Ouverture du curseur
  OPEN AREFCURSOR FOR
  select
  w.WEB_USER_ID,
  w.WEU_LOGIN_NAME,
  w.WEU_PASSWORD_VALUE,
  w.WEU_FIRST_NAME,
  w.WEU_LAST_NAME,
  p.Per_mail_add_selected,
  w.WEU_EMAIL,
  w.WEU_CONFIRM_VALUE,
  w.WEU_LAST_LOGIN,
  w.WEU_DISABLED,
  w.WEU_PASSWORD_CHANGED,
  w.HRM_PERSON_ID,
  w.A_DATECRE,
  trunc(w.A_DATECRE) trunc_datecre,
  w.A_DATEMOD,
  w.A_IDCRE,
  w.A_IDMOD,
  w.PC_LANG_ID,
  (select lanid
   from pcs.pc_lang lan
   where lan.pc_lang_id=w.pc_lang_id) lanid,
  p.per_search_name,
  p.per_last_name,
  p.per_first_name,
  p.per_title,
  COM_DIC_FUNCTIONS.GETDICODESCR('DIC_PERSON_POLITNESS',p.per_title,w.pc_lang_id) politness,
  p.emp_number,
  p.emp_secondary_key,
  p.per_web_page,
  p.emp_marriage_place,
  HRM_ITX.get_last_pays_affect(p.hrm_person_id) DIC_SALARY_NUMBER_ID   -- MBA 2013.02.20
--  c.DIC_SALARY_NUMBER_ID
  from
  web_user w,
  hrm_person p
--  HRM_CONTRACT c
  where
  p.emp_status = 'ACT' and
  w.hrm_person_id=p.hrm_person_id(+) --and
--  c.hrm_employee_id=p.hrm_person_id
  order by DIC_SALARY_NUMBER_ID;

 end ind_c9_web_user_letter;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACB_BUDGET" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, procparam_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
*Description

 Used for report ACB_BUDGET
*@created JLIU 02.JUNE.2009
* @lastUpdate VHA 26 JUNE 2013
*@public
*@PARAM parameter_0    BUDGET VERSION ID
*@procparam_0        Division_ID (List)  NULL = All or ACS_DIVISION_ACCOUNT_ID list
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
begin

  if parameter_0 is not null then
      PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
      PCS.PC_I_LIB_SESSION.setUserId(pc_user_id);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open arefcursor for
    select BGT.BUD_DESCR
         , BGT.BUD_COMMENT
         , BGV.ACB_BUDGET_VERSION_ID
         , BGV.C_BUDGET_STATUS
         , BGV.VER_NUMBER
         , BGV.VER_COMMENT
         , BGV.VER_DEFAULT
         , GLB.GLO_DESCR
         , GLB.GLO_AMOUNT_D
         , GLB.GLO_AMOUNT_C
         , GLB.GLO_QTY_D
         , GLB.GLO_QTY_C
         , ACC.ACC_NUMBER
         , CDA.ACC_NUMBER CDA_NUMBER
         , CPN.ACC_NUMBER CPN_NUMBER
         , DIV.ACC_NUMBER DIV_NUMBER
         , FIN.ACC_NUMBER FIN_NUMBER
         , APF.ACC_NUMBER APF_NUMBER
         , APJ.ACC_NUMBER APJ_NUMBER
         , QTY.ACC_NUMBER QTY_NUMBER
         , YEA.FYE_NO_EXERCICE
      from ACB_BUDGET BGT
         , ACB_BUDGET_VERSION BGV
         , ACB_GLOBAL_BUDGET GLB
         , ACS_ACCOUNT ACC
         , ACS_ACCOUNT CDA
         , ACS_ACCOUNT CPN
         , ACS_ACCOUNT DIV
         , ACS_ACCOUNT FIN
         , ACS_ACCOUNT APF
         , ACS_ACCOUNT APJ
         , ACS_ACCOUNT QTY
         , ACS_FINANCIAL_YEAR YEA
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_0) ) AUT
     where BGV.ACB_BUDGET_VERSION_ID = parameter_0
       and BGT.ACB_BUDGET_ID = BGV.ACB_BUDGET_ID
       and BGV.ACB_BUDGET_VERSION_ID = GLB.ACB_BUDGET_VERSION_ID
       and GLB.ACS_BUDGET_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and GLB.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and GLB.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_ACCOUNT_ID(+)
       and GLB.ACS_CPN_ACCOUNT_ID = CPN.ACS_ACCOUNT_ID(+)
       and GLB.ACS_PF_ACCOUNT_ID = APF.ACS_ACCOUNT_ID(+)
       and GLB.ACS_CDA_ACCOUNT_ID = CDA.ACS_ACCOUNT_ID(+)
       and GLB.ACS_PJ_ACCOUNT_ID = APJ.ACS_ACCOUNT_ID(+)
       and GLB.ACS_QTY_UNIT_ID = QTY.ACS_ACCOUNT_ID(+)
       and BGT.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
       and GLB.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = GLB.ACS_DIVISION_ACCOUNT_ID;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open arefcursor for
    select BGT.BUD_DESCR
         , BGT.BUD_COMMENT
         , BGV.ACB_BUDGET_VERSION_ID
         , BGV.C_BUDGET_STATUS
         , BGV.VER_NUMBER
         , BGV.VER_COMMENT
         , BGV.VER_DEFAULT
         , GLB.GLO_DESCR
         , GLB.GLO_AMOUNT_D
         , GLB.GLO_AMOUNT_C
         , GLB.GLO_QTY_D
         , GLB.GLO_QTY_C
         , ACC.ACC_NUMBER
         , CDA.ACC_NUMBER CDA_NUMBER
         , CPN.ACC_NUMBER CPN_NUMBER
         , DIV.ACC_NUMBER DIV_NUMBER
         , FIN.ACC_NUMBER FIN_NUMBER
         , APF.ACC_NUMBER APF_NUMBER
         , APJ.ACC_NUMBER APJ_NUMBER
         , QTY.ACC_NUMBER QTY_NUMBER
         , YEA.FYE_NO_EXERCICE
      from ACB_BUDGET BGT
         , ACB_BUDGET_VERSION BGV
         , ACB_GLOBAL_BUDGET GLB
         , ACS_ACCOUNT ACC
         , ACS_ACCOUNT CDA
         , ACS_ACCOUNT CPN
         , ACS_ACCOUNT DIV
         , ACS_ACCOUNT FIN
         , ACS_ACCOUNT APF
         , ACS_ACCOUNT APJ
         , ACS_ACCOUNT QTY
         , ACS_FINANCIAL_YEAR YEA
     where BGV.ACB_BUDGET_VERSION_ID = parameter_0
       and BGT.ACB_BUDGET_ID = BGV.ACB_BUDGET_ID
       and BGV.ACB_BUDGET_VERSION_ID = GLB.ACB_BUDGET_VERSION_ID
       and GLB.ACS_BUDGET_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and GLB.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and GLB.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_ACCOUNT_ID(+)
       and GLB.ACS_CPN_ACCOUNT_ID = CPN.ACS_ACCOUNT_ID(+)
       and GLB.ACS_PF_ACCOUNT_ID = APF.ACS_ACCOUNT_ID(+)
       and GLB.ACS_CDA_ACCOUNT_ID = CDA.ACS_ACCOUNT_ID(+)
       and GLB.ACS_PJ_ACCOUNT_ID = APJ.ACS_ACCOUNT_ID(+)
       and GLB.ACS_QTY_UNIT_ID = QTY.ACS_ACCOUNT_ID(+)
       and BGT.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID;
end if;
end RPT_ACB_BUDGET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACI_DOCUMENT_STATUS" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*DESCRIPTION
USED FOR REPORT ACI_DOCUMENT_STATUS
*author JLI
*lastUpdate 2009-7-29
*public
*@param PARAMETER_0:  USE_NAME(FROM)
*@param PARAMETER_1:  USE_NAME(TO)
*@param PARAMETER_2:  TYP_DESCRIPTION(FROM)
*@param PARAMETER_3:  TYP_DESCRIPTION(TO)
*@param PARAMETER_4:  DATE FROM
*@param PARAMETER_5:  DATE TO
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT doc.doc_number doc_number_aci, doc.doc_total_amount_dc,
             doc.doc_document_date, doc.c_status_document,
             doc.doc_integration_date, doc.a_datecre, doc.a_idcre,
             doc.c_fail_reason, cat.cat_description, typ.typ_description,
             atd.doc_number doc_number_act, acj.job_description,
             cur.currency, usr.use_name, usr.use_descr
        FROM aci_document doc,
             aci_document_status stu,
             acj_catalogue_document cat,
             acj_job_type typ,
             acj_job_type_s_catalogue tsc,
             acs_financial_currency fur,
             act_document atd,
             act_job acj,
             pcs.pc_curr cur,
             pcs.pc_user usr
       WHERE doc.aci_document_id = stu.aci_document_id
         AND doc.acj_job_type_s_catalogue_id = tsc.acj_job_type_s_catalogue_id
         AND tsc.acj_job_type_id = typ.acj_job_type_id(+)
         AND tsc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND doc.act_document_id = atd.act_document_id(+)
         AND atd.act_job_id = acj.act_job_id(+)
         AND doc.acs_financial_currency_id = fur.acs_financial_currency_id
         AND fur.pc_curr_id = cur.pc_curr_id
         AND doc.a_idcre = usr.use_ini(+)
         AND (   (parameter_0 = '0' AND parameter_1 = '0')
              OR (    parameter_0 = '0'
                  AND parameter_1 <> '0'
                  AND usr.use_name <= parameter_1
                 )
              OR (    parameter_1 = '0'
                  AND parameter_0 <> '0'
                  AND usr.use_name >= parameter_0
                 )
              OR (    parameter_1 <> '0'
                  AND parameter_0 <> '0'
                  AND usr.use_name >= parameter_0
                  AND usr.use_name <= parameter_1
                 )
             )
         AND (   (parameter_2 = '0' AND parameter_3 = '0')
              OR (    parameter_2 = '0'
                  AND parameter_3 <> '0'
                  AND typ.typ_description <= parameter_3
                 )
              OR (    parameter_3 = '0'
                  AND parameter_2 <> '0'
                  AND typ.typ_description >= parameter_2
                 )
              OR (    parameter_2 <> '0'
                  AND parameter_3 <> '0'
                  AND typ.typ_description >= parameter_2
                  AND typ.typ_description <= parameter_3
                 )
             )
         AND (    TO_CHAR (doc.a_datecre, 'YYYYMMDD') >=
                        SUBSTR (parameter_4, 1, 4)
                     || SUBSTR (parameter_4, 6, 2)
                     || SUBSTR (parameter_4, 9, 2)
              AND TO_CHAR (doc.a_datecre, 'YYYYMMDD') <=
                        SUBSTR (parameter_5, 1, 4)
                     || SUBSTR (parameter_5, 6, 2)
                     || SUBSTR (parameter_5, 9, 2)
             );
END rpt_aci_document_status;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACJ_CATALOGUE_TYPE" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0 in     varchar2
, PARAMETER_1 in     varchar2
, PARAMETER_2 in     varchar2
, PARAMETER_3 in     varchar2
, PARAMETER_4 in     varchar2
, PARAMETER_5 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* description used for report ACJ_CATALOGE_TYPE

* @author JLIU
* @lastupdate 1 Sep 2009
* @public
* @param PARAMETER_0    Modèle de (MOD_DESCR)
* @param PARAMETER_1    Modèle à  (MOD_DESCR)
* @param PARAMETER_2    Sélection : 0 = Aucune, 1 = Création, 2 = Modification
* @param PARAMETER_3    Date du : (ACJ_CATALOGUE_TYPE.A_DATECRE ou  ACJ_CATALOGUE_TYPE.A_DATEMOD)
* @param PARAMETER_4    Date au : (ACJ_CATALOGUE_TYPE.A_DATECRE ou ACJ_CATALOGUE_TYPE.A_DATEMOD)
* @param PARAMETER_5    Initiales User : (ACJ_CATALOGUE_TYPE.A_IDCRE ou ACJ_CATALOGUE_TYPE.A_IDMOD)
*/

begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);

open aRefCursor for

 SELECT
 acj.acj_catalogue_type_id,
 acj.mod_key,
 acj.mod_descr,
 acj.c_type_catalogue,
 acj.c_model_typ,
 acj.acs_financial_currency_id,
 cur.pc_curr_id,
 acj.c_round_type,
 acj.mod_rounded_amount,
 acj.a_datecre,
 acj.a_datemod,
 acj.a_idcre,
 acj.a_idmod
 FROM
 acs_financial_currency cur,
 acj_catalogue_type acj
 WHERE
 acj.acs_financial_currency_id = cur.acs_financial_currency_id
 AND (acj.MOD_DESCR >= NVL(PARAMETER_0,'A') AND acj.MOD_DESCR <= NVL(PARAMETER_1,'z'))
 AND (PARAMETER_2='0'
      OR
      (PARAMETER_2 = '1' AND (PARAMETER_3 = '0' OR TRUNC(acj.A_DATECRE) >= TO_DATE(PARAMETER_3,'YYYYMMDD'))
                         AND (PARAMETER_4 = '0' OR TRUNC(acj.A_DATECRE) <= TO_DATE(PARAMETER_4,'YYYYMMDD'))
                         AND (PARAMETER_5 IS NULL OR ACJ.A_IDCRE = PARAMETER_5))
      OR
      (PARAMETER_2 = '2' AND (PARAMETER_3 = '0' OR TRUNC(acj.A_DATEMOD) >= TO_DATE(PARAMETER_3,'YYYYMMDD'))
                         AND (PARAMETER_4 = '0' OR TRUNC(acj.A_DATEMOD) <= TO_DATE(PARAMETER_4,'YYYYMMDD'))
                         AND (PARAMETER_5 IS NULL OR ACJ.A_IDMOD = PARAMETER_5))
      )


 ;


END RPT_ACJ_CATALOGUE_TYPE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACJ_CATALOGUE_TYPE_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2
)
IS

/**
*DESCRIPTION
Used for report the subreport of ACJ_CATALOGUE_TYPE
*author MZHU
*lastUpdate 18 Nov. 2009
*public
*@param PARAMETER_0:  ACJ_CATALOGUE_TYPE_ID
*/


BEGIN


OPEN arefcursor FOR

SELECT
imt.acj_catalogue_type_id, imt.acj_imputation_type_id,
          imt.pac_custom_partner_id,
          pac_functions.getnamesandcity
                                      (imt.pac_custom_partner_id)
                                                                 cus_per_name,
          imt.pac_supplier_partner_id,
          pac_functions.getnamesandcity
                                    (imt.pac_supplier_partner_id)
                                                                 sup_per_name,
          imt.imt_bvr_ref, imt.imt_primary, imt.imt_sequence,
          imt.imt_description, imt.acs_financial_account_id,
          acs_function.getaccountnumber
                                    (imt.acs_financial_account_id)
                                                                  fin_account,
          imt.acs_division_account_id,
          acs_function.getaccountnumber
                                     (imt.acs_division_account_id)
                                                                  div_account,
          imt.acs_tax_code_id,
          acs_function.getaccountnumber (imt.acs_tax_code_id) tax_code,
          imt.acs_cpn_account_id,
          acs_function.getaccountnumber (imt.acs_cpn_account_id) cpn_account,
          imt.acs_cda_account_id,
          acs_function.getaccountnumber (imt.acs_cda_account_id) cda_account,
          imt.acs_pf_account_id,
          acs_function.getaccountnumber (imt.acs_pf_account_id) pf_account,
          imt.acs_pj_account_id,
          acs_function.getaccountnumber (imt.acs_pj_account_id) pj_account,
          imt.imt_value_d, imt.imt_value_c
     FROM acj_imputation_type imt
     WHERE imt.acj_catalogue_type_id = TO_NUMBER(PARAMETER_0);

END RPT_ACJ_CATALOGUE_TYPE_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACJ_TRANSACTION_SELECT_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2
)
IS

/**
*DESCRIPTION
Used for report ACJ_TRANSACTION_SELECT,the subreport of ACJ_CATALOGUE_TYPE
*author JLI
*lastUpdate 2009-7-29
*public
*@param PARAMETER_0:  ACJ_CATALOGUE_TYPE_ID
*/


BEGIN


OPEN arefcursor FOR

SELECT
CAT.CAT_DESCRIPTION,
CAT.CAT_KEY,
CTP.ACJ_CATALOGUE_TYPE_ID,
JTP.TYP_DESCRIPTION,
JTP.TYP_KEY
FROM
ACJ_CATALOGUE_DOCUMENT CAT,
ACJ_CATALOGUE_TYPE_SET CTP,
ACJ_JOB_TYPE JTP,
ACJ_JOB_TYPE_S_CATALOGUE TSC
WHERE
CTP.ACJ_CATALOGUE_TYPE_ID = parameter_0
AND CTP.ACJ_JOB_TYPE_S_CATALOGUE_ID = TSC.ACJ_JOB_TYPE_S_CATALOGUE_ID
AND TSC.ACJ_JOB_TYPE_ID = JTP.ACJ_JOB_TYPE_ID
AND TSC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
;
END RPT_ACJ_TRANSACTION_SELECT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_BALANCE" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procparam_0    in     number
, procparam_1    in     number
, procparam_2    in     number
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     varchar2
, parameter_5    in     varchar2
, parameter_7    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report ACR_ACC_BALANCE (Balance CG avec période ou dates, avec sélection de comptes)

* @author SDO 2003
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0  Exercice    (FYE_NO_EXERCICE)
* @param procparam_1    Période du    (PER_NO_PERIOD)
* @param procparam_2    Période au    (PER_NO_PERIOD)
* @param procparam_3    Date début    (IMF_TRANSACTION_DATE / IMF_VALUE_DATE)
* @param procparam_4    Date fin    (IMF_TRANSACTION_DATE / IMF_VALUE_DATE)
* @param procparam_5    Compte du    (ACC_NUMBER)
* @param procparam_6    Compte au    (ACC_NUMBER)
* @param parameter_5    Division_ID (List) # = All  or ACS_DIVISION_ACCOUNT_ID list
* @param parameter_7    Date type (0 = IMF_VALUE_DATE / 1 = IMF_TRANSACTION_DATE)
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if procparam_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id                   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := PCS.PC_I_LIB_SESSION.getConliId;
    vlstdivisions := parameter_5;
  end if;

  if (parameter_5 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := parameter_5;
  end if;

  select decode(min(acs_sub_set_id), null, 0, 1)
    into tmp
    from acs_sub_set
   where c_type_sub_set = 'DIVI';

  acr_functions.exist_division  := tmp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  if     (procparam_3 is null)
     and (procparam_4 is null) then
    open arefcursor for
      select TOT.ACS_PERIOD_ID ACS_PERIOD_ID
           , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
           , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
           , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
           , ACC.ACC_NUMBER ACC_NUMBER_FIN
           , (select DEF.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DEF
               where TOT.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                 and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
           , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
           , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
           , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
           , (select ACD.ACC_NUMBER
                from ACS_ACCOUNT ACD
               where TOT.ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
           , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , (select CUR.CURRENCY
                from PCS.PC_CURR CUR
                   , ACS_FINANCIAL_CURRENCY CUL
               where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                 and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
           , TOT.TOT_DEBIT_LC AMOUNT_LC_D
           , TOT.TOT_CREDIT_LC AMOUNT_LC_C
           , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUE.CURRENCY
                from PCS.PC_CURR CUE
                   , ACS_FINANCIAL_CURRENCY CFE
               where CFE.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
           , TOT.TOT_DEBIT_FC AMOUNT_FC_D
           , TOT.TOT_CREDIT_FC AMOUNT_FC_C
           , 0 C_ETAT_JOURNAL
        from ACS_FINANCIAL_YEAR FYE
           , ACS_PERIOD PER
           , ACS_ACCOUNT ACC
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_TOTAL_BY_PERIOD TOT
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
       where TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and FYE.FYE_NO_EXERCICE = procparam_0
         and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
         and PER.PER_NO_PERIOD >= procparam_1
         and PER.PER_NO_PERIOD <= procparam_2
         and PER.ACS_PERIOD_ID = tot.acs_period_id
         and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
         and ACC.ACC_NUMBER >= procparam_5
         and ACC.ACC_NUMBER <= procparam_6
         and TOT.ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
  else
    open arefcursor for
      select   IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where IMF.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where IMF.IMF_ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMF
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD <> '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
           and IMF.IMF_ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = IMF.IMF_ACS_DIVISION_ACCOUNT_ID
      group by IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC')
      union all
      select   IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where IMF.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where IMF.IMF_ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMF
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and nvl(ACS_FUNCTION.getstatepreviousfinancialyear(FYE.ACS_FINANCIAL_YEAR_ID), 'CLO') = 'CLO'
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
           and IMF.IMF_ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = IMF.IMF_ACS_DIVISION_ACCOUNT_ID
      group by IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC')
      union all
      select   TOT.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where TOT.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from acs_account acd
                 where TOT.ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(TOT.TOT_DEBIT_LC) AMOUNT_LC_D
             , sum(TOT.TOT_CREDIT_LC) AMOUNT_LC_C
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(TOT.TOT_DEBIT_FC) AMOUNT_FC_D
             , sum(TOT.TOT_CREDIT_FC) AMOUNT_FC_C
             , 0 C_ETAT_JOURNAL
          from ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_TOTAL_BY_PERIOD TOT
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and FYE.FYE_NO_EXERCICE = procparam_0
           and ACS_FUNCTION.getstatepreviousfinancialyear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT'
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(PER.PER_START_DATE) >= trunc(to_date(procparam_3, 'YYYYMMDD') )
           and trunc(PER.PER_END_DATE) <= trunc(to_date(procparam_4, 'YYYYMMDD') )
           and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
           and (    (ACS_DIVISION_ACCOUNT_ID is not null)
                or (    ACS_DIVISION_ACCOUNT_ID is null
                    and ACR_FUNCTIONS.existdivision = 0) )
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
           and TOT.ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID
      group by TOT.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , TOT.ACS_FINANCIAL_CURRENCY_ID
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
             , 0;
  end if;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  if     (procparam_3 is null)
     and (procparam_4 is null) then
    open arefcursor for
      select TOT.ACS_PERIOD_ID ACS_PERIOD_ID
           , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
           , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
           , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
           , ACC.ACC_NUMBER ACC_NUMBER_FIN
           , (select DEF.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DEF
               where TOT.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                 and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
           , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
           , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
           , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
           , (select ACD.ACC_NUMBER
                from ACS_ACCOUNT ACD
               where TOT.ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
           , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , (select CUR.CURRENCY
                from PCS.PC_CURR CUR
                   , ACS_FINANCIAL_CURRENCY CUL
               where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                 and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
           , TOT.TOT_DEBIT_LC AMOUNT_LC_D
           , TOT.TOT_CREDIT_LC AMOUNT_LC_C
           , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUE.CURRENCY
                from PCS.PC_CURR CUE
                   , ACS_FINANCIAL_CURRENCY CFE
               where CFE.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
           , TOT.TOT_DEBIT_FC AMOUNT_FC_D
           , TOT.TOT_CREDIT_FC AMOUNT_FC_C
           , 0 C_ETAT_JOURNAL
        from ACS_FINANCIAL_YEAR FYE
           , ACS_PERIOD PER
           , ACS_ACCOUNT ACC
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_TOTAL_BY_PERIOD TOT
       where TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and FYE.FYE_NO_EXERCICE = procparam_0
         and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
         and PER.PER_NO_PERIOD >= procparam_1
         and PER.PER_NO_PERIOD <= procparam_2
         and PER.ACS_PERIOD_ID = tot.acs_period_id
         and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
         and ACC.ACC_NUMBER >= procparam_5
         and ACC.ACC_NUMBER <= procparam_6;
  else
    open arefcursor for
      select   IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where IMF.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where IMF.IMF_ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMF
         where IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD <> '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
      group by IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC')
      union all
      select   IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where IMF.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where IMF.IMF_ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMF
         where IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and nvl(ACS_FUNCTION.getstatepreviousfinancialyear(FYE.ACS_FINANCIAL_YEAR_ID), 'CLO') = 'CLO'
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
      group by IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GETBROSTATE(DOC.ACT_JOURNAL_ID, 'ACC')
      union all
      select   TOT.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , (select DEF.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DEF
                 where TOT.ACS_FINANCIAL_ACCOUNT_ID = DEF.ACS_ACCOUNT_ID
                   and DEF.PC_LANG_ID = VPC_LANG_ID) ACCOUNT_FIN_DESCR
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from acs_account acd
                 where TOT.ACS_DIVISION_ACCOUNT_ID = ACD.ACS_ACCOUNT_ID) ACC_NUMBER_DIV
             , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , (select CUR.CURRENCY
                  from PCS.PC_CURR CUR
                     , ACS_FINANCIAL_CURRENCY CUL
                 where CUL.PC_CURR_ID = CUR.PC_CURR_ID
                   and CUL.FIN_LOCAL_CURRENCY = '1') LOCAL_CURRENCY_NAME
             , sum(TOT.TOT_DEBIT_LC) AMOUNT_LC_D
             , sum(TOT.TOT_CREDIT_LC) AMOUNT_LC_C
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUE.CURRENCY
                  from PCS.PC_CURR CUE
                     , ACS_FINANCIAL_CURRENCY CFE
                 where CFE.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUE.PC_CURR_ID = CFE.PC_CURR_ID) CURRENCY_ME
             , sum(TOT.TOT_DEBIT_FC) AMOUNT_FC_D
             , sum(TOT.TOT_CREDIT_FC) AMOUNT_FC_C
             , 0 C_ETAT_JOURNAL
          from ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_TOTAL_BY_PERIOD TOT
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
         where TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and FYE.FYE_NO_EXERCICE = procparam_0
           and ACS_FUNCTION.getstatepreviousfinancialyear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT'
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(PER.PER_START_DATE) >= trunc(to_date(procparam_3, 'YYYYMMDD') )
           and trunc(PER.PER_END_DATE) <= trunc(to_date(procparam_4, 'YYYYMMDD') )
           and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
           and (    (ACS_DIVISION_ACCOUNT_ID is not null)
                or (    ACS_DIVISION_ACCOUNT_ID is null
                    and ACR_FUNCTIONS.existdivision = 0) )
           and ACC.ACC_NUMBER >= procparam_5
           and ACC.ACC_NUMBER <= procparam_6
      group by TOT.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_SHEET_PROFIT_LOSS
             , FIN.C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , TOT.ACS_FINANCIAL_CURRENCY_ID
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
             , 0;
  end if;
end if;
end RPT_ACR_ACC_BALANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_BALANCE_PER" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     number
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, parameter_5    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     pcs.pc_user.pc_user_id%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report ACR_ACC_BALANCE_PER (Balance CG à une période, avec sélection de comptes

* @author SDO 2003
* @lastUpdate VHA 26 JUNE MAY 2013
* @public
* @param procparam_0    Exercice    (FYE_NO_EXERCICE)
* @param procparam_1    Compte du   (ACC_NUMBER)
* @param procparam_2    Compte au   (ACC_NUMBER)
* @param parameter_5    Division_ID (List) # = All  or ACS_DIVISION_ACCOUNT_ID list

*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if procparam_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := PCS.PC_I_LIB_SESSION.getuserlangid;
      vpc_user_id                   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  if (parameter_5 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := parameter_5;
  end if;

  select decode(min(acs_sub_set_id), null, 0, 1)
    into tmp
    from acs_sub_set
   where c_type_sub_set = 'DIVI';

  acr_functions.exist_division  := tmp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select TOT.ACS_PERIOD_ID ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL C_tYPE_CUMUL
         , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
         , ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACCOUNT_FIN_DESCR
         , ACC.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
         , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
         , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , FIN.PC_CURR_ID PC_CURR_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB
         , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
         , TOT.TOT_DEBIT_LC AMOUNT_LC_D
         , TOT.TOT_CREDIT_LC AMOUNT_LC_C
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC AMOUNT_FC_D
         , TOT.TOT_CREDIT_FC AMOUNT_FC_C
         , PER.PER_NO_PERIOD PER_NO_PERIOD
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_DIVISION_ACCOUNT DIV
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FIN
         , ACT_TOTAL_BY_PERIOD TOT
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
     where TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID(+)
       and FYE.FYE_NO_EXERCICE = procparam_0
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
       and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
       and ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) >= procparam_1
       and ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) <= procparam_2
       and TOT.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select TOT.ACS_PERIOD_ID ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL C_tYPE_CUMUL
         , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
         , ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACCOUNT_FIN_DESCR
         , ACC.C_BALANCE_SHEET_PROFIT_LOSS C_BALANCE_SHEET_PROFIT_LOSS
         , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
         , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , FIN.PC_CURR_ID PC_CURR_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB
         , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
         , TOT.TOT_DEBIT_LC AMOUNT_LC_D
         , TOT.TOT_CREDIT_LC AMOUNT_LC_C
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC AMOUNT_FC_D
         , TOT.TOT_CREDIT_FC AMOUNT_FC_C
         , PER.PER_NO_PERIOD PER_NO_PERIOD
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_DIVISION_ACCOUNT DIV
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FIN
         , ACT_TOTAL_BY_PERIOD TOT
     where TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID(+)
       and FYE.FYE_NO_EXERCICE = procparam_0
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
       and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
       and ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) >= procparam_1
       and ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) <= procparam_2;
end if;
end RPT_ACR_ACC_BALANCE_PER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_BALANCE_PER_STR" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     number
, procparam_1    in     varchar2
, parameter_5    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report ACR_ACC_BALANCE_PER_STR (Balance CG à une période, avec classification

* @author SDO 2003
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0    Exercice        (FYE_NO_EXERCICE)
* @param procparam_1    Classification  (ClASSIFICATION_ID)
* @param parameter_5    Division_ID (List) # = All  or ACS_DIVISION_ACCOUNT_ID list
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if procparam_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := PCS.PC_I_LIB_SESSION.getuserlangid;
      vpc_user_id                   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  if (parameter_5 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := parameter_5;
  end if;

  select decode(min(acs_sub_set_id), null, 0, 1)
    into tmp
    from acs_sub_set
   where c_type_sub_set = 'DIVI';

  acr_functions.exist_division  := tmp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select trim(CFL.LEAF_DESCR) LEAF_DESCR
         , CFL.NODE01 NODE01
         , CFL.NODE02 NODE02
         , CFL.NODE03 NODE03
         , CFL.NODE04 NODE04
         , CFL.NODE05 NODE05
         , CFL.NODE06 NODE06
         , CFL.NODE07 NODE07
         , CFL.NODE08 NODE08
         , CFL.NODE09 NODE09
         , CFL.NODE10 NODE10
         , TOT.ACS_PERIOd_ID ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL C_tYPE_CUMUL
         , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
         , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
         , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
         , TOT.TOT_DEBIT_LC AMOUNT_LC_D
         , TOT.TOT_CREDIT_LC AMOUNT_LC_C
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC AMOUNT_FC_D
         , TOT.TOT_CREDIT_FC AMOUNT_FC_C
         , PER.PER_NO_PERIOD PER_NO_PERIOD
         , CFL.PC_LANG_ID
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_DIVISION_ACCOUNT DIV
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FIN
         , ACT_TOTAL_BY_PERIOD TOT
         , CLASSIF_FLAT CFL
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
     where CFL.CLASSIFICATION_ID = procparam_1
       and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID(+)
       and FYE.FYE_NO_EXERCICE = procparam_0
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
       and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
       and TOT.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select trim(CFL.LEAF_DESCR) LEAF_DESCR
         , CFL.NODE01 NODE01
         , CFL.NODE02 NODE02
         , CFL.NODE03 NODE03
         , CFL.NODE04 NODE04
         , CFL.NODE05 NODE05
         , CFL.NODE06 NODE06
         , CFL.NODE07 NODE07
         , CFL.NODE08 NODE08
         , CFL.NODE09 NODE09
         , CFL.NODE10 NODE10
         , TOT.ACS_PERIOd_ID ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL C_tYPE_CUMUL
         , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
         , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , ACS_FUNCTION.GetAccountNumber(TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
         , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
         , TOT.TOT_DEBIT_LC AMOUNT_LC_D
         , TOT.TOT_CREDIT_LC AMOUNT_LC_C
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC AMOUNT_FC_D
         , TOT.TOT_CREDIT_FC AMOUNT_FC_C
         , PER.PER_NO_PERIOD PER_NO_PERIOD
         , CFL.PC_LANG_ID
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_DIVISION_ACCOUNT DIV
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FIN
         , ACT_TOTAL_BY_PERIOD TOT
         , CLASSIF_FLAT CFL
     where CFL.CLASSIFICATION_ID = procparam_1
       and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID(+)
       and FYE.FYE_NO_EXERCICE = procparam_0
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
       and TOT.ACS_AUXILIARY_ACCOUNT_ID is null;
end if;
end RPT_ACR_ACC_BALANCE_PER_STR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_BALANCE_STR" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     number
, procparam_1    in     number
, procparam_2    in     number
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, parameter_5    in     varchar2
, parameter_7    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report  ACR_ACC_BALANCE_STR (Balance CG avec période ou dates, avec classification

* @author SDO 2003
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0    Exercice        (FYE_NO_EXERCICE)
* @param procparam_1    Période du      (PER_NO_PERIOD)
* @param procparam_2    Période au      (PER_NO_PERIOD)
* @param procparam_3    Date début      (IMF_TRANSACTION_DATE / IMF_VALUE_DATE)
* @param procparam_4    Date fin        (IMF_TRANSACTION_DATE / IMF_VALUE_DATE)
* @param procparam_5    Classification  (ClASSIFICATION_ID)
* @param parameter_5    Division_ID (List) # = All  or ACS_DIVISION_ACCOUNT_ID list
* @param parameter_7    Date type (0 = IMF_VALUE_DATE / 1 = IMF_TRANSACTION_DATE)
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if procparam_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := pcs.PC_I_LIB_SESSION.getuserlangid;
      vpc_user_id                   := pcs.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := pcs.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := pcs.PC_I_LIB_SESSION.getConliId;
  end if;

  if (parameter_5 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := parameter_5;
  end if;

  select decode(min(acs_sub_set_id), null, 0, 1)
    into tmp
    from acs_sub_set
   where c_type_sub_set = 'DIVI';

  acr_functions.exist_division  := tmp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  if     (procparam_3 is null)
     and (procparam_4 is null) then
    open aRefCursor for
      select trim(CFL.LEAF_DESCR) LEAF_DESCR
           , CFL.NODE01 NODE01
           , CFL.NODE02 NODE02
           , CFL.NODE03 NODE03
           , CFL.NODE04 NODE04
           , CFL.NODE05 NODE05
           , CFL.NODE06 NODE06
           , CFL.NODE07 NODE07
           , CFL.NODE08 NODE08
           , CFL.NODE09 NODE09
           , CFL.NODE10 NODE10
           , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
           , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
           , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
           , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
           , ACC.ACC_NUMBER ACC_NUMBER_FIN
           , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
           , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
           , (select ACC.ACC_NUMBER
                from ACS_ACCOUNT ACC
               where ACC.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
           , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
           , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
           , TOT.TOT_DEBIT_LC AMOUNT_LC_D
           , TOT.TOT_CREDIT_LC AMOUNT_LC_C
           , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CU1.CURRENCY
                from PCS.PC_CURR CU1
                   , ACS_FINANCIAL_CURRENCY CF1
               where CF1.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
           , TOT.TOT_DEBIT_FC AMOUNT_FC_D
           , TOT.TOT_CREDIT_FC AMOUNT_FC_C
           , 0 C_ETAT_JOURNAL
           , CFL.PC_LANG_ID PC_LANG_ID
        from ACS_FINANCIAL_YEAR FYE
           , ACS_PERIOD PER
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACS_ACCOUNT ACC
           , ACS_FINANCIAL_CURRENCY CUR
           , ACT_TOTAL_BY_PERIOD TOT
           , CLASSIF_FLAT CFL
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
       where CFL.CLASSIFICATION_ID = procparam_5
         and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
         and TOT.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
         and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and FYE.FYE_NO_EXERCICE = procparam_0
         and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
         and PER.PER_NO_PERIOD >= procparam_1
         and PER.PER_NO_PERIOD <= procparam_2
         and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
         and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
         and (parameter_5 is not null)
         and TOT.ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
  else
    open aRefCursor for
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = IMF.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACS_FINANCIAL_CURRENCY CUR
             , ACT_FINANCIAL_IMPUTATION IMF
             , CLASSIF_FLAT CFL
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = IMF.ACS_FINANCIAL_ACCOUNT_ID
           and IMF.ACS_ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD <> '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and (parameter_5 is not null)
           and IMF.IMF_ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = IMF.IMF_ACS_DIVISION_ACCOUNT_ID
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC')
             , CFL.PC_LANG_ID
      union all
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = IMF.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACS_FINANCIAL_CURRENCY CUR
             , ACT_FINANCIAL_IMPUTATION IMF
             , CLASSIF_FLAT CFL
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = IMF.ACS_FINANCIAL_ACCOUNT_ID
           and IMF.ACS_ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and nvl(ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID), 'CLO') = 'CLO'
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and (parameter_5 is not null)
           and IMF.IMF_ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = IMF.IMF_ACS_DIVISION_ACCOUNT_ID
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC')
             , CFL.PC_LANG_ID
      union all
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(TOT.TOT_DEBIT_LC) AMOUNT_LC_D
             , sum(TOT.TOT_CREDIT_LC) AMOUNT_LC_C
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(TOT.TOT_DEBIT_FC) AMOUNT_FC_D
             , sum(TOT.TOT_CREDIT_FC) AMOUNT_FC_C
             , 0 C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACS_FINANCIAL_CURRENCY CUR
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_TOTAL_BY_PERIOD TOT
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , CLASSIF_FLAT CFL
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
           and TOT.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and FYE.FYE_NO_EXERCICE = procparam_0
           and ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT'
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(PER.PER_START_DATE) >= trunc(to_date(procparam_3, 'YYYYMMDD') )
           and trunc(PER.PER_END_DATE) <= trunc(to_date(procparam_4, 'YYYYMMDD') )
           and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
           and (    (TOT.ACS_DIVISION_ACCOUNT_ID is not null)
                or (    TOT.ACS_DIVISION_ACCOUNT_ID is null
                    and ACR_FUNCTIONS.ExistDivision = 0) )
           and (parameter_5 is not null)
           and TOT.ACS_DIVISION_ACCOUNT_ID is not null
           and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , TOT.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , TOT.ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
             , '  '
             , CFL.PC_LANG_ID;
  end if;
else    -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  if     (procparam_3 is null)
     and (procparam_4 is null) then
    open aRefCursor for
      select trim(CFL.LEAF_DESCR) LEAF_DESCR
           , CFL.NODE01 NODE01
           , CFL.NODE02 NODE02
           , CFL.NODE03 NODE03
           , CFL.NODE04 NODE04
           , CFL.NODE05 NODE05
           , CFL.NODE06 NODE06
           , CFL.NODE07 NODE07
           , CFL.NODE08 NODE08
           , CFL.NODE09 NODE09
           , CFL.NODE10 NODE10
           , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
           , TOT.C_TYPE_PERIOD C_TYPE_PERIOD
           , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
           , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
           , ACC.ACC_NUMBER ACC_NUMBER_FIN
           , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
           , TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
           , (select ACC.ACC_NUMBER
                from ACS_ACCOUNT ACC
               where ACC.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
           , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
           , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
           , TOT.TOT_DEBIT_LC AMOUNT_LC_D
           , TOT.TOT_CREDIT_LC AMOUNT_LC_C
           , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CU1.CURRENCY
                from PCS.PC_CURR CU1
                   , ACS_FINANCIAL_CURRENCY CF1
               where CF1.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
           , TOT.TOT_DEBIT_FC AMOUNT_FC_D
           , TOT.TOT_CREDIT_FC AMOUNT_FC_C
           , 0 C_ETAT_JOURNAL
           , CFL.PC_LANG_ID PC_LANG_ID
        from ACS_FINANCIAL_YEAR FYE
           , ACS_PERIOD PER
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACS_ACCOUNT ACC
           , ACS_FINANCIAL_CURRENCY CUR
           , ACT_TOTAL_BY_PERIOD TOT
           , CLASSIF_FLAT CFL
       where CFL.CLASSIFICATION_ID = procparam_5
         and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
         and TOT.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
         and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and FYE.FYE_NO_EXERCICE = procparam_0
         and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
         and PER.PER_NO_PERIOD >= procparam_1
         and PER.PER_NO_PERIOD <= procparam_2
         and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
         and TOT.ACS_AUXILIARY_ACCOUNT_ID is null;
  else
    open aRefCursor for
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = IMF.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACS_FINANCIAL_CURRENCY CUR
             , ACT_FINANCIAL_IMPUTATION IMF
             , CLASSIF_FLAT CFL
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = IMF.ACS_FINANCIAL_ACCOUNT_ID
           and IMF.ACS_ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD <> '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC')
             , CFL.PC_LANG_ID
      union all
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , IMF.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = IMF.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(IMF.IMF_AMOUNT_LC_D) AMOUNT_LC_D
             , sum(IMF.IMF_AMOUNT_LC_C) AMOUNT_LC_C
             , IMF.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = IMF.ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(IMF.IMF_AMOUNT_FC_D) AMOUNT_FC_D
             , sum(IMF.IMF_AMOUNT_FC_C) AMOUNT_FC_C
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC') C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACJ_SUB_SET_CAT SUB
             , ACT_DOCUMENT DOC
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACS_FINANCIAL_CURRENCY CUR
             , ACT_FINANCIAL_IMPUTATION IMF
             , CLASSIF_FLAT CFL
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = IMF.ACS_FINANCIAL_ACCOUNT_ID
           and IMF.ACS_ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and IMF.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'ACC'
           and FYE.FYE_NO_EXERCICE = procparam_0
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and nvl(ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID), 'CLO') = 'CLO'
           and PER.ACS_PERIOD_ID = IMF.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(to_date(procparam_3, 'YYYYMMDD') ) <=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
           and trunc(to_date(procparam_4, 'YYYYMMDD') ) >=(case parameter_7
                                                             when '0' then trunc(IMF.IMF_VALUE_DATE)
                                                             else trunc(IMF.IMF_TRANSACTION_DATE)
                                                           end)
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , IMF.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , SUB.C_TYPE_CUMUL
             , IMF.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , IMF.IMF_ACS_DIVISION_ACCOUNT_ID
             , IMF.ACS_ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , IMF.ACS_FINANCIAL_CURRENCY_ID
             , ACT_FUNCTIONS.GetBROState(DOC.ACT_JOURNAL_ID, 'ACC')
             , CFL.PC_LANG_ID
      union all
      select   trim(CFL.LEAF_DESCR) LEAF_DESCR
             , CFL.NODE01 NODE01
             , CFL.NODE02 NODE02
             , CFL.NODE03 NODE03
             , CFL.NODE04 NODE04
             , CFL.NODE05 NODE05
             , CFL.NODE06 NODE06
             , CFL.NODE07 NODE07
             , CFL.NODE08 NODE08
             , CFL.NODE09 NODE09
             , CFL.NODE10 NODE10
             , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER ACC_NUMBER_FIN
             , FIN.C_BALANCE_DISPLAY C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , (select ACC.ACC_NUMBER
                  from ACS_ACCOUNT ACC
                 where ACC.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName LOCAL_CURRENCY_NAME
             , sum(TOT.TOT_DEBIT_LC) AMOUNT_LC_D
             , sum(TOT.TOT_CREDIT_LC) AMOUNT_LC_C
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CU1.CURRENCY
                  from PCS.PC_CURR CU1
                     , ACS_FINANCIAL_CURRENCY CF1
                 where CF1.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CU1.PC_CURR_ID = CF1.PC_CURR_ID) CURRENCY_ME
             , sum(TOT.TOT_DEBIT_FC) AMOUNT_FC_D
             , sum(TOT.TOT_CREDIT_FC) AMOUNT_FC_C
             , 0 C_ETAT_JOURNAL
             , CFL.PC_LANG_ID PC_LANG_ID
          from ACS_FINANCIAL_CURRENCY CUR
             , ACS_ACCOUNT ACC
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_TOTAL_BY_PERIOD TOT
             , ACS_FINANCIAL_YEAR FYE
             , ACS_PERIOD PER
             , CLASSIF_FLAT CFL
         where CFL.CLASSIFICATION_ID = procparam_5
           and CFL.CLASSIF_LEAF_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
           and TOT.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
           and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and FYE.FYE_NO_EXERCICE = procparam_0
           and ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT'
           and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
           and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
           and PER.C_TYPE_PERIOD = '1'
           and trunc(PER.PER_START_DATE) >= trunc(to_date(procparam_3, 'YYYYMMDD') )
           and trunc(PER.PER_END_DATE) <= trunc(to_date(procparam_4, 'YYYYMMDD') )
           and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
           and (    (TOT.ACS_DIVISION_ACCOUNT_ID is not null)
                or (    TOT.ACS_DIVISION_ACCOUNT_ID is null
                    and ACR_FUNCTIONS.ExistDivision = 0) )
      group by CFL.LEAF_DESCR
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , TOT.ACS_PERIOD_ID
             , PER.C_TYPE_PERIOD
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_FINANCIAL_ACCOUNT_ID
             , ACC.ACC_NUMBER
             , FIN.C_BALANCE_DISPLAY
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , TOT.ACS_FINANCIAL_CURRENCY_ID
             , ACS_FUNCTION.GetLocalCurrencyName
             , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
             , '  '
             , CFL.PC_LANG_ID;
  end if;
  end if;
end RPT_ACR_ACC_BALANCE_STR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_IMPUTATION_DET" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_13   in     varchar2
, parameter_15   in     varchar2
, parameter_16   in     varchar2
, parameter_17   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_ACC_IMPUTATION_DET
  (Grand livre standard et grand livre pour les communes bernoises)
* @author SDO 2003
* @lastUpdate VHA 10 April 2014
* @public
* @param procparam_0: FYE_NO_EXERCICE
* @param procparam_1: ACC_NUMBER
* @param procparam_2: ACC_NUMBER
* @param procparam_3: Divisions (# = All  / null = selection (COM_LIST))
* @param procparam_4: Job ID (COM_LIST)
* @param parameter_0: DATE_FROM
* @param parameter_1: DATE_TO
* @param parameter_2: JOURNAL_STATUS (ACC)
* @param parameter_3: JOURNAL_STATUS (PROV)
* @param parameter_4: JOURNAL_STATUS (DEF)
* @param parameter_5: C_TYPE_CUMUL (EXT)
* @param parameter_6: C_TYPE_CUMUL (INT)
* @param parameter_7: C_TYPE_CUMUL (PRE)
* @param parameter_8: C_TYPE_CUMUL (ENG)
* @param parameter_11: Classification
* @param parameter_12: REPORT Yes/No
* @param parameter_13: ONLY TRANSACTION WITH VAT CODE
* @param parameter_15: Budget print
* @param parameter_16: Print account without movement : 0 = No, 1 = Yes
* @param parameter_17: Group by division : 0 = No / 1 = Yes
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  if (procuser_lanid is not null) then
      pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  open aRefCursor for
    select 1 pseudo
         , IMP_TOT.INFO
         , IMP_TOT.ACT_FINANCIAL_IMPUTATION_ID
         , IMP_TOT.ACS_FINANCIAL_ACCOUNT_ID
         , IMP_TOT.FIN_NUMBER
         , IMP_TOT.FIN_DESCR
         , IMP_TOT.FIN_LARGE_DESCR
         , IMP_TOT.ACC_NUMBER_CE
         , IMP_TOT.IMF_TRANSACTION_DATE
         , IMP_TOT.IMF_VALUE_DATE
         , IMP_TOT.IMF_DESCRIPTION
         , IMP_TOT.ACS_DIVISION_ACCOUNT_ID
         , IMP_TOT.DIV_NUMBER
         , IMP_TOT.DIV_DESCR
         , IMP_TOT.ACS_TAX_CODE_ID
         , IMP_TOT.TAX_NUMBER
         , IMP_TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , IMP_TOT.CURRENCY_MB
         , IMP_TOT.ACS_FINANCIAL_CURRENCY_ID
         , IMP_TOT.CURRENCY_ME
         , IMP_TOT.IMF_EXCHANGE_RATE
         , IMP_TOT.IMF_AMOUNT_LC_D
         , IMP_TOT.IMF_AMOUNT_LC_C
         , IMP_TOT.IMF_AMOUNT_FC_D
         , IMP_TOT.IMF_AMOUNT_FC_C
         , IMP_TOT.ACS_PERIOD_ID
         , IMP_TOT.IMF_TYPE
         , IMP_TOT.ACS_AUXILIARY_ACCOUNT_ID
         , IMP_TOT.AUX_NUMBER
         , IMP_TOT.AUX_SHORT_DESCR
         , IMP_TOT.DIC_IMP_FREE1_ID
         , IMP_TOT.DIC_IMP_FREE2_ID
         , IMP_TOT.DIC_IMP_FREE3_ID
         , IMP_TOT.DIC_IMP_FREE4_ID
         , IMP_TOT.DIC_IMP_FREE5_ID
         , IMP_TOT.DOC_RECORD_ID
         , IMP_TOT.FAM_FIXED_ASSETS_ID
         , IMP_TOT.GCO_GOOD_ID
         , IMP_TOT.PAC_PERSON_ID
         , IMP_TOT.HRM_PERSON_ID
         , IMP_TOT.IMF_NUMBER
         , IMP_TOT.IMF_NUMBER2
         , IMP_TOT.IMF_NUMBER3
         , IMP_TOT.IMF_NUMBER4
         , IMP_TOT.IMF_NUMBER5
         , IMP_TOT.IMF_TEXT1
         , IMP_TOT.IMF_TEXT2
         , IMP_TOT.IMF_TEXT3
         , IMP_TOT.IMF_TEXT4
         , IMP_TOT.IMF_TEXT5
         , IMP_TOT.ACT_DOCUMENT_ID
         , IMP_TOT.DOC_NUMBER
         , IMP_TOT.DOC_DATE_DELIVERY
         , IMP_TOT.ACT_ACT_JOURNAL_ID
         , IMP_TOT.ACT_JOURNAL_ID
         , IMP_TOT.JOU_NUMBER
         , IMP_TOT.JOU_DESCRIPTION
         , IMP_TOT.C_ETAT_JOURNAL
         , IMP_TOT.C_TYPE_CUMUL
         , IMP_TOT.ACC_DETAIL_PRINTING
         , IMP_TOT.C_TYPE_JOURNAL
         , IMP_TOT.PER_AMOUNT_D
         , IMP_TOT.PER_AMOUNT_C
         , IMP_TOT.ACB_BUDGET_ID
         , IMP_TOT.ACB_BUDGET_VERSION_ID
         , IMP_TOT.ACB_GLOBAL_BUDGET_ID
         , CYN.CURRENCY_NO
      from (select 'REEL' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , ETA.C_ETAT_JOURNAL C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACT_ETAT_JOURNAL ETA
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and ETA.C_SUB_SET = 'ACC'
               and (    (     (parameter_2 = '1')
                         and (ETA.C_ETAT_JOURNAL = 'BRO') )
                    or (     (parameter_3 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'PROV') )
                    or (     (parameter_4 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'DEF') )
                   )
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REEL_M' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , ETA.C_ETAT_JOURNAL C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACT_ETAT_JOURNAL ETA
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and ETA.C_SUB_SET = 'ACC'
               and (    (     (parameter_2 = '1')
                         and (ETA.C_ETAT_JOURNAL = 'BRO') )
                    or (     (parameter_3 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'PROV') )
                    or (     (parameter_4 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'DEF') )
                   )
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REEL_D' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , (select ETA.C_ETAT_JOURNAL
                      from ACT_ETAT_JOURNAL ETA
                     where ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                       and ETA.C_SUB_SET = 'ACC'
                       and (    (     (parameter_2 = '1')
                                 and (ETA.C_ETAT_JOURNAL = 'BRO') )
                            or (     (parameter_3 = '1')
                                and (ETA.C_ETAT_JOURNAL = 'PROV') )
                            or (     (parameter_4 = '1')
                                and (ETA.C_ETAT_JOURNAL = 'DEF') )
                           ) ) C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and parameter_17 = '1'
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REPORT' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and parameter_3 = '1'
               and parameter_12 = '1'
            union all
            select 'RPT_M' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and DES.PC_LANG_ID = vpc_lang_id
               and parameter_3 = '1'
               and parameter_12 = '1'
            union all
            select 'RPT_D' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and parameter_3 = '1'
               and parameter_17 = '1'
               and parameter_12 = '1'
            union all
            select 'BUDGET' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , null IMF_DESCRIPTION
                 , GLO.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = GLO.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = GLO.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = GLO.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , 0 ACS_FINANCIAL_CURRENCY_ID
                 , null CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , 0 IMF_AMOUNT_LC_D
                 , 0 IMF_AMOUNT_LC_C
                 , 0 IMF_AMOUNT_FC_D
                 , 0 IMF_AMOUNT_FC_C
                 , PERB.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , GLO.DIC_IMP_FREE1_ID
                 , GLO.DIC_IMP_FREE2_ID
                 , GLO.DIC_IMP_FREE3_ID
                 , GLO.DIC_IMP_FREE4_ID
                 , GLO.DIC_IMP_FREE5_ID
                 , GLO.DOC_RECORD_ID
                 , GLO.FAM_FIXED_ASSETS_ID
                 , GLO.GCO_GOOD_ID
                 , GLO.PAC_PERSON_ID
                 , GLO.HRM_PERSON_ID
                 , GLO.IMF_NUMBER
                 , GLO.IMF_NUMBER2
                 , GLO.IMF_NUMBER3
                 , GLO.IMF_NUMBER4
                 , GLO.IMF_NUMBER5
                 , GLO.IMF_TEXT1
                 , GLO.IMF_TEXT2
                 , GLO.IMF_TEXT3
                 , GLO.IMF_TEXT4
                 , GLO.IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , null C_ETAT_JOURNAL
                 , null C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , null C_TYPE_JOURNAL
                 , PERB.PER_AMOUNT_D PER_AMOUNT_D
                 , PERB.PER_AMOUNT_C PER_AMOUNT_C
                 , VER.ACB_BUDGET_ID ACB_BUDGET_ID
                 , VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID
                 , GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
              from ACB_GLOBAL_BUDGET GLO
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACB_PERIOD_AMOUNT PERB
                 , ACS_PERIOD PER
                 , ACB_BUDGET_VERSION VER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACB_GLOBAL_BUDGET_ID') LIS
             where GLO.ACB_GLOBAL_BUDGET_ID = LIS.LIS_ID_1
               and VER.ACB_BUDGET_VERSION_ID = GLO.ACB_BUDGET_VERSION_ID
               and PERB.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID
               and PER.ACS_PERIOD_ID = PERB.ACS_PERIOD_ID
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and parameter_15 = '1'
               and PER.PER_START_DATE >= to_date(parameter_0, 'YYYYMMDD')
               and PER.PER_END_DATE <= to_date(parameter_1, 'YYYYMMDD')
            union all
            select 'VIDE' INFO
                 , null ACT_FINANCIAL_IMPUTATION_ID
                 , FIN.ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , null IMF_TRANSACTION_DATE
                 , null IMF_VALUE_DATE
                 , null IMF_DESCRIPTION
                 , 0 ACS_DIVISION_ACCOUNT_ID
                 , null DIV_NUMBER
                 , null DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , null ACS_ACS_FINANCIAL_CURRENCY_ID
                 , null CURRENCY_MB
                 , null ACS_FINANCIAL_CURRENCY_ID
                 , (select max(CUB.CURRENCY)
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                         , ACT_FINANCIAL_IMPUTATION IMP
                     where IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                       and CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , 0 IMF_AMOUNT_LC_D
                 , 0 IMF_AMOUNT_LC_C
                 , 0 IMF_AMOUNT_FC_D
                 , 0 IMF_AMOUNT_FC_C
                 , 0 ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , null C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , null C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACS_FINANCIAL_ACCOUNT_ID') LIS
             where FIN.ACS_FINANCIAL_ACCOUNT_ID = LIS.LIS_ID_1
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and (     (parameter_16 = '1')
                    and FIN.ACS_FINANCIAL_ACCOUNT_ID not in(
                          select TOT.ACS_FINANCIAL_ACCOUNT_ID
                            from ACT_TOTAL_BY_PERIOD TOT
                               , ACS_PERIOD PER
                               , (select LIS_ID_1
                                    from COM_LIST
                                   where LIS_JOB_ID = to_number(procparam_4)
                                     and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
                           where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
                             and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                             and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
                             and PER.C_TYPE_PERIOD = '1'
                             and parameter_3 = '1'
                             and parameter_12 = '1'))
           ) IMP_TOT
         , (select distinct FIN_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from (select 'REEL' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                                  , (select SCA.C_TYPE_CUMUL
                                       from ACJ_SUB_SET_CAT SCA
                                      where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                                        and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                               from ACT_FINANCIAL_IMPUTATION IMP
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , ACT_JOURNAL JOU
                                  , ACT_DOCUMENT DOC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
                              where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                                and IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                                and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                             union all
                             select 'REPORT' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                                  , TOT.C_TYPE_CUMUL
                               from ACT_TOTAL_BY_PERIOD TOT
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
                              where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                                and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                             union all
                             select 'BUDGET' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                                  , null C_TYPE_CUMUL
                               from ACB_GLOBAL_BUDGET GLO
                                  , ACB_PERIOD_AMOUNT PERB
                                  , ACB_BUDGET_VERSION VER
                                  , ACS_ACCOUNT ACC
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACB_GLOBAL_BUDGET_ID') LIS
                              where GLO.ACB_GLOBAL_BUDGET_ID = LIS.LIS_ID_1
                                and VER.ACB_BUDGET_VERSION_ID = GLO.ACB_BUDGET_VERSION_ID
                                and PERB.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
                                and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                and parameter_15 = '1'
                             union all
                             select 'VIDE' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , null ACS_FINANCIAL_CURRENCY_ID
                                  , null C_TYPE_CUMUL
                               from ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACS_FINANCIAL_ACCOUNT_ID') LIS
                              where FIN.ACS_FINANCIAL_ACCOUNT_ID = LIS.LIS_ID_1
                                and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                and (        (parameter_16 = '0')
                                        and (    not exists(
                                                   select 1
                                                     from ACS_FINANCIAL_YEAR FYE
                                                        , ACS_PERIOD PER
                                                        , ACT_FINANCIAL_IMPUTATION IMP
                                                    where FYE.FYE_NO_EXERCICE = to_number(procparam_0)
                                                      and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                                                      and IMP.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                                                      and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                                      and (    (    parameter_12 = 0
                                                                and PER.C_TYPE_PERIOD <> 1)
                                                           or parameter_12 = 1) )
                                             and not exists(
                                                   select 1
                                                     from ACS_FINANCIAL_YEAR FYE
                                                        , ACS_PERIOD PER
                                                        , ACT_TOTAL_BY_PERIOD TOT
                                                    where FYE.FYE_NO_EXERCICE = to_number(procparam_0)
                                                      and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                                                      and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                                                      and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                                      and (    (    parameter_12 = 0
                                                                and PER.C_TYPE_PERIOD <> 1)
                                                           or parameter_12 = 1) )
                                            )
                                     or (parameter_16 = '1')
                                    ) ) IMP_TOT
                      where (    (    parameter_5 = '1'
                                  and C_TYPE_CUMUL = 'EXT')
                             or (    parameter_6 = '1'
                                 and C_TYPE_CUMUL = 'INT')
                             or (    parameter_7 = '1'
                                 and C_TYPE_CUMUL = 'PRE')
                             or (    parameter_8 = '1'
                                 and C_TYPE_CUMUL = 'ENG')
                             or (C_TYPE_CUMUL is null)
                            )
                   group by FIN_NUMBER) CYN
     where IMP_TOT.FIN_NUMBER = CYN.FIN_NUMBER
       and (    (     (parameter_11 is null)
                 and (     (IMP_TOT.FIN_NUMBER >= procparam_1)
                      and (IMP_TOT.FIN_NUMBER <= procparam_2) ) )
            or (     (parameter_11 is not null)
                and (ACS_FUNCTION.IsFinAccInClassif(IMP_TOT.ACS_FINANCIAL_ACCOUNT_ID, parameter_11) = '1') )
           )
       and (    (     (parameter_5 = '1')
                 and (C_TYPE_CUMUL = 'EXT') )
            or (     (parameter_6 = '1')
                and (C_TYPE_CUMUL = 'INT') )
            or (     (parameter_7 = '1')
                and (C_TYPE_CUMUL = 'PRE') )
            or (     (parameter_8 = '1')
                and (C_TYPE_CUMUL = 'ENG') )
            or (C_TYPE_CUMUL is null)
           )
       and (    (     (parameter_13 = '1')
                 and (IMP_TOT.ACS_TAX_CODE_ID is null)
                 and ( (IMP_TOT.IMF_TYPE) <> 'VAT') )
            or (parameter_13 = '0') );
end RPT_ACR_ACC_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_IMPUTATION_DETMCH1" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_13   in     varchar2
, parameter_15   in     varchar2
, parameter_16   in     varchar2
, parameter_17   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_ACC_IMPUTATION_DET
  (Grand livre standard et grand livre pour les communes bernoises)
* @author SDO 2003
* @lastUpdate VHA 10 April 2014
* @public
* @param procparam_0: FYE_NO_EXERCICE
* @param procparam_1: ACC_NUMBER
* @param procparam_2: ACC_NUMBER
* @param procparam_3: Divisions (# = All  / null = selection (COM_LIST))
* @param procparam_4: Job ID (COM_LIST)
* @param parameter_0: DATE_FROM
* @param parameter_1: DATE_TO
* @param parameter_2: JOURNAL_STATUS (ACC)
* @param parameter_3: JOURNAL_STATUS (PROV)
* @param parameter_4: JOURNAL_STATUS (DEF)
* @param parameter_5: C_TYPE_CUMUL (EXT)
* @param parameter_6: C_TYPE_CUMUL (INT)
* @param parameter_7: C_TYPE_CUMUL (PRE)
* @param parameter_8: C_TYPE_CUMUL (ENG)
* @param parameter_11: Classification
* @param parameter_12: REPORT Yes/No
* @param parameter_13: ONLY TRANSACTION WITH VAT CODE
* @param parameter_15: Budget print
* @param parameter_16: Print account without movement : 0 = No, 1 = Yes
* @param parameter_17: Group by division : 0 = No / 1 = Yes
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  if (procuser_lanid is not null) then
    pcs.pc_init_session.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_INIT_SESSION.GetUserLangId;
  end if;

  open aRefCursor for
    select 1 pseudo
         , IMP_TOT.INFO
         , IMP_TOT.ACT_FINANCIAL_IMPUTATION_ID
         , IMP_TOT.ACS_FINANCIAL_ACCOUNT_ID
         , IMP_TOT.FIN_NUMBER
         , IMP_TOT.FIN_DESCR
         , IMP_TOT.FIN_LARGE_DESCR
         , IMP_TOT.ACC_NUMBER_CE
         , IMP_TOT.IMF_TRANSACTION_DATE
         , IMP_TOT.IMF_VALUE_DATE
         , IMP_TOT.IMF_DESCRIPTION
         , IMP_TOT.ACS_DIVISION_ACCOUNT_ID
         , IMP_TOT.DIV_NUMBER
         , IMP_TOT.DIV_DESCR
         , IMP_TOT.ACS_TAX_CODE_ID
         , IMP_TOT.TAX_NUMBER
         , IMP_TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , IMP_TOT.CURRENCY_MB
         , IMP_TOT.ACS_FINANCIAL_CURRENCY_ID
         , IMP_TOT.CURRENCY_ME
         , IMP_TOT.IMF_EXCHANGE_RATE
         , IMP_TOT.IMF_AMOUNT_LC_D
         , IMP_TOT.IMF_AMOUNT_LC_C
         , IMP_TOT.IMF_AMOUNT_FC_D
         , IMP_TOT.IMF_AMOUNT_FC_C
         , IMP_TOT.ACS_PERIOD_ID
         , IMP_TOT.IMF_TYPE
         , IMP_TOT.ACS_AUXILIARY_ACCOUNT_ID
         , IMP_TOT.AUX_NUMBER
         , IMP_TOT.AUX_SHORT_DESCR
         , IMP_TOT.DIC_IMP_FREE1_ID
         , IMP_TOT.DIC_IMP_FREE2_ID
         , IMP_TOT.DIC_IMP_FREE3_ID
         , IMP_TOT.DIC_IMP_FREE4_ID
         , IMP_TOT.DIC_IMP_FREE5_ID
         , IMP_TOT.DOC_RECORD_ID
         , IMP_TOT.FAM_FIXED_ASSETS_ID
         , IMP_TOT.GCO_GOOD_ID
         , IMP_TOT.PAC_PERSON_ID
         , IMP_TOT.HRM_PERSON_ID
         , IMP_TOT.IMF_NUMBER
         , IMP_TOT.IMF_NUMBER2
         , IMP_TOT.IMF_NUMBER3
         , IMP_TOT.IMF_NUMBER4
         , IMP_TOT.IMF_NUMBER5
         , IMP_TOT.IMF_TEXT1
         , IMP_TOT.IMF_TEXT2
         , IMP_TOT.IMF_TEXT3
         , IMP_TOT.IMF_TEXT4
         , IMP_TOT.IMF_TEXT5
         , IMP_TOT.ACT_DOCUMENT_ID
         , IMP_TOT.DOC_NUMBER
         , IMP_TOT.DOC_DATE_DELIVERY
         , IMP_TOT.ACT_ACT_JOURNAL_ID
         , IMP_TOT.ACT_JOURNAL_ID
         , IMP_TOT.JOU_NUMBER
         , IMP_TOT.JOU_DESCRIPTION
         , IMP_TOT.C_ETAT_JOURNAL
         , IMP_TOT.C_TYPE_CUMUL
         , IMP_TOT.ACC_DETAIL_PRINTING
         , IMP_TOT.C_TYPE_JOURNAL
         , IMP_TOT.PER_AMOUNT_D
         , IMP_TOT.PER_AMOUNT_C
         , IMP_TOT.ACB_BUDGET_ID
         , IMP_TOT.ACB_BUDGET_VERSION_ID
         , IMP_TOT.ACB_GLOBAL_BUDGET_ID
         , CYN.CURRENCY_NO
      from (select 'REEL' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , ETA.C_ETAT_JOURNAL C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACT_ETAT_JOURNAL ETA
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and ETA.C_SUB_SET = 'ACC'
               and (    (     (parameter_2 = '1')
                         and (ETA.C_ETAT_JOURNAL = 'BRO') )
                    or (     (parameter_3 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'PROV') )
                    or (     (parameter_4 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'DEF') )
                   )
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REEL_M' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , ETA.C_ETAT_JOURNAL C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACT_ETAT_JOURNAL ETA
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and ETA.C_SUB_SET = 'ACC'
               and (    (     (parameter_2 = '1')
                         and (ETA.C_ETAT_JOURNAL = 'BRO') )
                    or (     (parameter_3 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'PROV') )
                    or (     (parameter_4 = '1')
                        and (ETA.C_ETAT_JOURNAL = 'DEF') )
                   )
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REEL_D' INFO
                 , IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
                 , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , (select ACC.ACC_NUMBER
                      from ACS_ACCOUNT ACC
                         , ACT_FINANCIAL_IMPUTATION IMC
                     where IMC.ACT_FINANCIAL_IMPUTATION_ID = ACR_FUNCTIONS.GetFinancialImputationId(IMP.ACT_FINANCIAL_IMPUTATION_ID)
                       and IMC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID) ACC_NUMBER_CE
                 , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
                 , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
                 , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
                 , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
                 , (select ACV.ACC_NUMBER
                      from ACS_ACCOUNT ACV
                     where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
                 , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
                 , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
                 , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
                 , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
                 , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
                 , IMP.ACS_PERIOD_ID ACS_PERIOD_ID
                 , IMP.IMF_TYPE IMF_TYPE
                 , ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID
                 , ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_NUMBER
                 , ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ) AUX_SHORT_DESCR
                 , IMP.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID
                 , IMP.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID
                 , IMP.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID
                 , IMP.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID
                 , IMP.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID
                 , IMP.DOC_RECORD_ID DOC_RECORD_ID
                 , IMP.FAM_FIXED_ASSETS_ID FAM_FIXED_ASSETS_ID
                 , IMP.GCO_GOOD_ID GCO_GOOD_ID
                 , IMP.PAC_PERSON_ID PAC_PERSON_ID
                 , IMP.HRM_PERSON_ID HRM_PERSON_ID
                 , IMP.IMF_NUMBER IMF_NUMBER
                 , IMP.IMF_NUMBER2 IMF_NUMBER2
                 , IMP.IMF_NUMBER3 IMF_NUMBER3
                 , IMP.IMF_NUMBER4 IMF_NUMBER4
                 , IMP.IMF_NUMBER5 IMF_NUMBER5
                 , IMP.IMF_TEXT1 IMF_TEXT1
                 , IMP.IMF_TEXT2 IMF_TEXT2
                 , IMP.IMF_TEXT3 IMF_TEXT3
                 , IMP.IMF_TEXT4 IMF_TEXT4
                 , IMP.IMF_TEXT5 IMF_TEXT5
                 , DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
                 , DOC.DOC_NUMBER DOC_NUMBER
                 , (select PAR.DOC_DATE_DELIVERY
                      from ACT_PART_IMPUTATION PAR
                     where PAR.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID) DOC_DATE_DELIVERY
                 , DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID
                 , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
                 , JOU.JOU_NUMBER JOU_NUMBER
                 , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
                 , (select ETA.C_ETAT_JOURNAL
                      from ACT_ETAT_JOURNAL ETA
                     where ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                       and ETA.C_SUB_SET = 'ACC'
                       and (    (     (parameter_2 = '1')
                                 and (ETA.C_ETAT_JOURNAL = 'BRO') )
                            or (     (parameter_3 = '1')
                                and (ETA.C_ETAT_JOURNAL = 'PROV') )
                            or (     (parameter_4 = '1')
                                and (ETA.C_ETAT_JOURNAL = 'DEF') )
                           ) ) C_ETAT_JOURNAL
                 , (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_FINANCIAL_IMPUTATION IMP
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACT_DOCUMENT DOC
                 , ACT_JOURNAL JOU
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
             where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
               and DOC.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
               and JOU.ACT_JOURNAL_ID = DOC.ACT_JOURNAL_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = IMP.ACS_PERIOD_ID
               and C_TYPE_PERIOD <> '1'
               and parameter_17 = '1'
               and (    (     (parameter_12 = '0')
                         and (     (IMP.IMF_TRANSACTION_DATE >= to_date(parameter_0, 'YYYYMMDD') )
                              and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') )
                             )
                        )
                    or (     (parameter_12 = '1')
                        and (IMP.IMF_TRANSACTION_DATE <= to_date(parameter_1, 'YYYYMMDD') ) )
                   )
            union all
            select 'REPORT' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and parameter_3 = '1'
               and parameter_12 = '1'
            union all
            select 'RPT_M' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and DES.PC_LANG_ID = vpc_lang_id
               and parameter_3 = '1'
               and parameter_12 = '1'
            union all
            select 'RPT_D' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , 'Report' IMF_DESCRIPTION
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = TOT.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
                 , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
                 , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
                 , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
                 , TOT.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , TOT.C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , 'OPB' C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACT_TOTAL_BY_PERIOD TOT
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_PERIOD PER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
             where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
               and DES.PC_LANG_ID = vpc_lang_id
               and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
               and PER.C_TYPE_PERIOD = '1'
               and parameter_3 = '1'
               and parameter_17 = '1'
               and parameter_12 = '1'
            union all
            select 'BUDGET' INFO
                 , 0 ACT_FINANCIAL_IMPUTATION_ID
                 , GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_TRANSACTION_DATE
                 , to_date(procparam_0 || '0101', 'YYYYMMDD') IMF_VALUE_DATE
                 , null IMF_DESCRIPTION
                 , GLO.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
                 , (select ACD.ACC_NUMBER
                      from ACS_ACCOUNT ACD
                     where ACD.ACS_ACCOUNT_ID = GLO.ACS_DIVISION_ACCOUNT_ID) DIV_NUMBER
                 , (select DED.DES_DESCRIPTION_SUMMARY
                      from ACS_DESCRIPTION DED
                     where DED.ACS_ACCOUNT_ID = GLO.ACS_DIVISION_ACCOUNT_ID
                       and DED.PC_LANG_ID = vpc_lang_id) DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                 , (select CUB.CURRENCY
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                     where CFB.ACS_FINANCIAL_CURRENCY_ID = GLO.ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
                 , 0 ACS_FINANCIAL_CURRENCY_ID
                 , null CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , 0 IMF_AMOUNT_LC_D
                 , 0 IMF_AMOUNT_LC_C
                 , 0 IMF_AMOUNT_FC_D
                 , 0 IMF_AMOUNT_FC_C
                 , PERB.ACS_PERIOD_ID ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , GLO.DIC_IMP_FREE1_ID
                 , GLO.DIC_IMP_FREE2_ID
                 , GLO.DIC_IMP_FREE3_ID
                 , GLO.DIC_IMP_FREE4_ID
                 , GLO.DIC_IMP_FREE5_ID
                 , GLO.DOC_RECORD_ID
                 , GLO.FAM_FIXED_ASSETS_ID
                 , GLO.GCO_GOOD_ID
                 , GLO.PAC_PERSON_ID
                 , GLO.HRM_PERSON_ID
                 , GLO.IMF_NUMBER
                 , GLO.IMF_NUMBER2
                 , GLO.IMF_NUMBER3
                 , GLO.IMF_NUMBER4
                 , GLO.IMF_NUMBER5
                 , GLO.IMF_TEXT1
                 , GLO.IMF_TEXT2
                 , GLO.IMF_TEXT3
                 , GLO.IMF_TEXT4
                 , GLO.IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , null C_ETAT_JOURNAL
                 , null C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , null C_TYPE_JOURNAL
                 , PERB.PER_AMOUNT_D PER_AMOUNT_D
                 , PERB.PER_AMOUNT_C PER_AMOUNT_C
                 , VER.ACB_BUDGET_ID ACB_BUDGET_ID
                 , VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID
                 , GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
              from ACB_GLOBAL_BUDGET GLO
                 , ACS_FINANCIAL_ACCOUNT FIN
                 , ACB_PERIOD_AMOUNT PERB
                 , ACS_PERIOD PER
                 , ACB_BUDGET_VERSION VER
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACB_GLOBAL_BUDGET_ID') LIS
             where GLO.ACB_GLOBAL_BUDGET_ID = LIS.LIS_ID_1
               and VER.ACB_BUDGET_VERSION_ID = GLO.ACB_BUDGET_VERSION_ID
               and PERB.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID
               and PER.ACS_PERIOD_ID = PERB.ACS_PERIOD_ID
               and FIN.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and DES.ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and parameter_15 = '1'
               and PER.PER_START_DATE >= to_date(parameter_0, 'YYYYMMDD')
               and PER.PER_END_DATE <= to_date(parameter_1, 'YYYYMMDD')
            union all
            select 'VIDE' INFO
                 , null ACT_FINANCIAL_IMPUTATION_ID
                 , FIN.ACS_FINANCIAL_ACCOUNT_ID
                 , ACC.ACC_NUMBER FIN_NUMBER
                 , DES.DES_DESCRIPTION_SUMMARY FIN_DESCR
                 , DES.DES_DESCRIPTION_LARGE FIN_LARGE_DESCR
                 , null ACC_NUMBER_CE
                 , null IMF_TRANSACTION_DATE
                 , null IMF_VALUE_DATE
                 , null IMF_DESCRIPTION
                 , 0 ACS_DIVISION_ACCOUNT_ID
                 , null DIV_NUMBER
                 , null DIV_DESCR
                 , 0 ACS_TAX_CODE_ID
                 , null TAX_NUMBER
                 , null ACS_ACS_FINANCIAL_CURRENCY_ID
                 , null CURRENCY_MB
                 , null ACS_FINANCIAL_CURRENCY_ID
                 , (select max(CUB.CURRENCY)
                      from PCS.PC_CURR CUB
                         , ACS_FINANCIAL_CURRENCY CFB
                         , ACT_FINANCIAL_IMPUTATION IMP
                     where IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                       and CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                       and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
                 , 0 IMF_EXCHANGE_RATE
                 , 0 IMF_AMOUNT_LC_D
                 , 0 IMF_AMOUNT_LC_C
                 , 0 IMF_AMOUNT_FC_D
                 , 0 IMF_AMOUNT_FC_C
                 , 0 ACS_PERIOD_ID
                 , 'MAN' IMF_TYPE
                 , 0 ACS_AUXILIARY_ACCOUNT_ID
                 , null AUX_NUMBER
                 , null AUX_SHORT_DESCR
                 , null DIC_IMP_FREE1_ID
                 , null DIC_IMP_FREE2_ID
                 , null DIC_IMP_FREE3_ID
                 , null DIC_IMP_FREE4_ID
                 , null DIC_IMP_FREE5_ID
                 , null DOC_RECORD_ID
                 , null FAM_FIXED_ASSETS_ID
                 , null GCO_GOOD_ID
                 , null PAC_PERSON_ID
                 , null HRM_PERSON_ID
                 , null IMF_NUMBER
                 , null IMF_NUMBER2
                 , null IMF_NUMBER3
                 , null IMF_NUMBER4
                 , null IMF_NUMBER5
                 , null IMF_TEXT1
                 , null IMF_TEXT2
                 , null IMF_TEXT3
                 , null IMF_TEXT4
                 , null IMF_TEXT5
                 , 0 ACT_DOCUMENT_ID
                 , null DOC_NUMBER
                 , null DOC_DATE_DELIVERY
                 , 0 ACT_ACT_JOURNAL_ID
                 , 0 ACT_JOURNAL_ID
                 , null JOU_NUMBER
                 , null JOU_DESCRIPTION
                 , 'PROV' C_ETAT_JOURNAL
                 , null C_TYPE_CUMUL
                 , ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                 , null C_TYPE_JOURNAL
                 , 0 PER_AMOUNT_D
                 , 0 PER_AMOUNT_C
                 , 0 ACB_BUDGET_ID
                 , 0 ACB_BUDGET_VERSION_ID
                 , 0 ACB_GLOBAL_BUDGET_ID
              from ACS_FINANCIAL_ACCOUNT FIN
                 , ACS_ACCOUNT ACC
                 , ACS_DESCRIPTION DES
                 , (select LIS_ID_1
                      from COM_LIST
                     where LIS_JOB_ID = to_number(procparam_4)
                       and LIS_CODE = 'ACS_FINANCIAL_ACCOUNT_ID') LIS
             where FIN.ACS_FINANCIAL_ACCOUNT_ID = LIS.LIS_ID_1
               and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
               and ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id
               and (     (parameter_16 = '1')
                    and FIN.ACS_FINANCIAL_ACCOUNT_ID not in(
                          select TOT.ACS_FINANCIAL_ACCOUNT_ID
                            from ACT_TOTAL_BY_PERIOD TOT
                               , ACS_PERIOD PER
                               , (select LIS_ID_1
                                    from COM_LIST
                                   where LIS_JOB_ID = to_number(procparam_4)
                                     and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
                           where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
                             and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                             and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
                             and PER.C_TYPE_PERIOD = '1'
                             and parameter_3 = '1'
                             and parameter_12 = '1')
                   ) ) IMP_TOT
         , (select distinct FIN_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from (select 'REEL' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
                                  , (select SCA.C_TYPE_CUMUL
                                       from ACJ_SUB_SET_CAT SCA
                                      where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                                        and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
                               from ACT_FINANCIAL_IMPUTATION IMP
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , ACT_JOURNAL JOU
                                  , ACT_DOCUMENT DOC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACT_FINANCIAL_IMPUTATION_ID') LIS
                              where IMP.ACT_FINANCIAL_IMPUTATION_ID = LIS.LIS_ID_1
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                                and IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                                and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                             union all
                             select 'REPORT' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                                  , TOT.C_TYPE_CUMUL
                               from ACT_TOTAL_BY_PERIOD TOT
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACT_TOTAL_BY_PERIOD_ID') LIS
                              where TOT.ACT_TOTAL_BY_PERIOD_ID = LIS.LIS_ID_1
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                                and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                             union all
                             select 'BUDGET' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
                                  , null C_TYPE_CUMUL
                               from ACB_GLOBAL_BUDGET GLO
                                  , ACB_PERIOD_AMOUNT PERB
                                  , ACB_BUDGET_VERSION VER
                                  , ACS_ACCOUNT ACC
                                  , ACS_FINANCIAL_ACCOUNT FIN
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACB_GLOBAL_BUDGET_ID') LIS
                              where GLO.ACB_GLOBAL_BUDGET_ID = LIS.LIS_ID_1
                                and VER.ACB_BUDGET_VERSION_ID = GLO.ACB_BUDGET_VERSION_ID
                                and PERB.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID
                                and FIN.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
                                and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                and parameter_15 = '1'
                             union all
                             select 'VIDE' INFO
                                  , ACC.ACC_NUMBER FIN_NUMBER
                                  , null ACS_FINANCIAL_CURRENCY_ID
                                  , null C_TYPE_CUMUL
                               from ACS_FINANCIAL_ACCOUNT FIN
                                  , ACS_ACCOUNT ACC
                                  , (select LIS_ID_1
                                       from COM_LIST
                                      where LIS_JOB_ID = to_number(procparam_4)
                                        and LIS_CODE = 'ACS_FINANCIAL_ACCOUNT_ID') LIS
                              where FIN.ACS_FINANCIAL_ACCOUNT_ID = LIS.LIS_ID_1
                                and ACC.ACS_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                and (        (parameter_16 = '0')
                                        and (    not exists(
                                                   select 1
                                                     from ACS_FINANCIAL_YEAR FYE
                                                        , ACS_PERIOD PER
                                                        , ACT_FINANCIAL_IMPUTATION IMP
                                                    where FYE.FYE_NO_EXERCICE = to_number(procparam_0)
                                                      and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                                                      and IMP.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                                                      and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                                      and (    (    parameter_12 = 0
                                                                and PER.C_TYPE_PERIOD <> 1)
                                                           or parameter_12 = 1) )
                                             and not exists(
                                                   select 1
                                                     from ACS_FINANCIAL_YEAR FYE
                                                        , ACS_PERIOD PER
                                                        , ACT_TOTAL_BY_PERIOD TOT
                                                    where FYE.FYE_NO_EXERCICE = to_number(procparam_0)
                                                      and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                                                      and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                                                      and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
                                                      and (    (    parameter_12 = 0
                                                                and PER.C_TYPE_PERIOD <> 1)
                                                           or parameter_12 = 1) )
                                            )
                                     or (parameter_16 = '1')
                                    ) ) IMP_TOT
                      where (    (    parameter_5 = '1'
                                  and C_TYPE_CUMUL = 'EXT')
                             or (    parameter_6 = '1'
                                 and C_TYPE_CUMUL = 'INT')
                             or (    parameter_7 = '1'
                                 and C_TYPE_CUMUL = 'PRE')
                             or (    parameter_8 = '1'
                                 and C_TYPE_CUMUL = 'ENG')
                             or (C_TYPE_CUMUL is null)
                            )
                   group by FIN_NUMBER) CYN
     where IMP_TOT.FIN_NUMBER = CYN.FIN_NUMBER
       and (    (     (parameter_11 is null)
                 and (     (IMP_TOT.FIN_NUMBER >= procparam_1)
                      and (IMP_TOT.FIN_NUMBER <= procparam_2) ) )
            or (     (parameter_11 is not null)
                and (ACS_FUNCTION.IsFinAccInClassif(IMP_TOT.ACS_FINANCIAL_ACCOUNT_ID, parameter_11) = '1') )
           )
       and (    (     (parameter_5 = '1')
                 and (C_TYPE_CUMUL = 'EXT') )
            or (     (parameter_6 = '1')
                and (C_TYPE_CUMUL = 'INT') )
            or (     (parameter_7 = '1')
                and (C_TYPE_CUMUL = 'PRE') )
            or (     (parameter_8 = '1')
                and (C_TYPE_CUMUL = 'ENG') )
            or (C_TYPE_CUMUL is null)
           )
       and (    (     (parameter_13 = '1')
                 and (IMP_TOT.ACS_TAX_CODE_ID is null)
                 and ( (IMP_TOT.IMF_TYPE) <> 'VAT') )
            or (parameter_13 = '0') );
end RPT_ACR_ACC_IMPUTATION_DETMCH1;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_IMP_COMPARE" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     varchar2
, procparam_7    in     varchar2
, procparam_8    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_9    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
* description used for report ACR_ACC_IMPUTATION_COMPARE

* @author jliu 18 nov 2008
* @lastUpdate SMA 19.03.2014
* @public
* @param procparam_0    ACS_FINANCIAL_YEAR_ID
* @param procparam_1    ACC_NUMBER from
* @param procparam_2    ACC_NUMBER to
* @param procparam_3    Division_ID (List) NULL = All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_4    Date from (yyyyMMdd)
* @param procparam_5    Date to (yyyyMMdd)
* @param procparam_6    Journal status = BRO : 1=Yes / 0=No
* @param procparam_7    Journal status = PROV : 1=Yes / 0=No
* @param procparam_8    Journal status = DEF : 1=Yes / 0=No

* @param parameter_2    Compare code : '0'=all / '1'=compared / '2'=not compared
* @param parameter_3    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param parameter_4    C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param parameter_5    C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param parameter_6    C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
* @param parameter_9    Only transaction without VAT
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
begin
  if (procuser_lanid is not null) and (pc_user_id is not null)  then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if     (procparam_0 is not null)
     and (length(trim(procparam_0) ) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID  := procparam_0;
  end if;

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;

  if     (procparam_1 is not null)
     and (length(trim(procparam_1) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1  := procparam_1;
  else
    ACR_FUNCTIONS.ACC_NUMBER1  := '';
  end if;

  if     (procparam_2 is not null)
     and (length(trim(procparam_2) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2  := procparam_2;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select (case
              when(V_IMP.IMF_COMPARE_DATE is not null)
                    and (V_IMP.ACT_JOURNAL_ID is not null) then 'COMPARED'
              when CAT.CAT_DESCRIPTION <> '7' then
                    case
                        when   (V_IMP.IMF_COMPARE_DATE is null)
                            and (V_IMP.ACT_JOURNAL_ID is not null)
                            and (JOU.C_TYPE_JOURNAL <> 'OPB') then 'NOT_COMPARED'
                        else ''
                    end
              else ''
            end
           ) INFO
         , FYR.ACS_FINANCIAL_YEAR_ID
         , ACS_FUNCTION.REPORTAMOUNT(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, FYR.ACS_FINANCIAL_YEAR_ID, 'EXT', 1, 0) REPORT_AMOUNT
         , V_ACC.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , ACS_FUNCTION.isFinAccountInME(V_ACC.ACS_FINANCIAL_ACCOUNT_ID) isFinAccountInME
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.ACT_DOCUMENT_ID V_ACT_DOCUMENT_ID
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID V_ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_TYPE IMF_TYPE
         , V_IMP.IMF_DESCRIPTION IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE IMF_VALUE_DATE
         , V_IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
         , V_IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID ACS_AUXILIARY_ACCOUNT_ID
         , DES_AUX.DES_DESCRIPTION_SUMMARY AUX_DESCRIPTION_SUMMARY
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.DOC_DATE_DELIVERY DOC_DATE_DELIVERY
         , V_IMP.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER DIV_NUMBER
         , DES_DIV.DES_DESCRIPTION_SUMMARY DIV_DES_DESCRIPTION_SUMMARY
         , V_IMP.C_ETAT_JOURNAL C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL C_TYPE_CUMUL
         , V_IMP.IMF_COMPARE_DATE IMF_COMPARE_DATE
         , V_IMP.IMF_COMPARE_TEXT IMF_COMPARE_TEXT
         , V_IMP.IMF_COMPARE_USE_INI IMF_COMPARE_USE_INI
         , CAT.C_TYPE_CATALOGUE C_TYPE_CATALOGUE
         , CAT.CAT_DESCRIPTION CAT_DESCRIPTION
         , AUX.ACC_NUMBER AUX_ACC_NUMBER
         , FIN.ACC_NUMBER FIN_ACC_NUMBER
         , VAT.ACS_ACCOUNT_ID VAT_ACS_ACCOUNT_ID
         , VAT.ACC_NUMBER VAT_ACC_NUMBER
         , FUR.PC_CURR_ID FUR_PC_CURR_ID
         , FUR_LC.PC_CURR_ID FUR_PC_CURR_ID_LC
         , TDO.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
         , TDO.DOC_NUMBER DOC_NUMBER
         , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
         , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
         , JOU.JOU_NUMBER JOU_NUMBER
         , CUR.PC_CURR_ID CUR_PC_CURR_ID
         , CUR_LC.PC_CURR_ID CUR_PC_CURR_ID_LC
         , CUR.CURRENCY CUR_CURRENCY
         , CUR_LC.CURRENCY CUR_CURRENCY_LC
         , LAN.LANID LANID
         , PRD.C_TYPE_PERIOD C_TYPE_PERIOD
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 1) RPT_COMPARED_AMOUNT
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 1) RPT_COMPARED_AMOUNT_DIV
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 0) RPT_NOT_COMPARED_AMOUNT
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 0) RPT_NOT_COMPARED_AMOUNT_DIV
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 1, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_COMPARED_AMOUNT_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 1, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_COMPARED_AMOUNT_DIV_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 0, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_NOT_COMPARED_AMOUNT_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 0, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_NOT_COMPARED_AMOUNT_DIV_ME
         , BAL.TOTAL_LC_D
         , BAL.TOTAL_LC_C
         , BAL.TOTAL_FC_D
         , BAL.TOTAL_FC_C
         , BAL.CURRENCY_MB
         , cast(rpt_functions.getCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID) as varchar2(5)) CURRENCY_ME
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
         , V_ACT_ACC_IMP_REPORT V_IMP
         , (select ACS_ACCOUNT_ID
                 , DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION
             where PC_LANG_ID = VPC_LANG_ID) DES_DIV
         , (select ACS_ACCOUNT_ID
                 , DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION
             where PC_LANG_ID = VPC_LANG_ID) DES_AUX
         , ACS_PERIOD PRD
         , ACS_FINANCIAL_YEAR FYR
         , ACT_DOCUMENT TDO
         , ACJ_CATALOGUE_DOCUMENT CAT
         , ACT_JOURNAL JOU
         , ACS_ACCOUNT AUX
         , ACS_ACCOUNT FIN
         , ACS_ACCOUNT VAT
         , ACS_FINANCIAL_CURRENCY FUR
         , ACS_FINANCIAL_CURRENCY FUR_LC
         , ACT_FINANCIAL_IMPUTATION IMP
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR_LC
         , PCS.PC_LANG LAN
         , (select ACS_FINANCIAL_ACCOUNT_ID
                   , sum(TOTAL_LC_D) TOTAL_LC_D
                   , sum(TOTAL_LC_C) TOTAL_LC_C
                   , sum(TOTAL_FC_D) TOTAL_FC_D
                   , sum(TOTAL_FC_C) TOTAL_FC_C
                   , CURRENCY_MB
            from
              (select   FIN.ACS_FINANCIAL_ACCOUNT_ID
                       , sum(TOT.TOT_DEBIT_LC) TOTAL_LC_D
                       , sum(TOT.TOT_CREDIT_LC) TOTAL_LC_C
                       , sum(TOT.TOT_DEBIT_FC) TOTAL_FC_D
                       , sum(TOT.TOT_CREDIT_FC) TOTAL_FC_C
                       , CUB.CURRENCY CURRENCY_MB
                    from ACS_FINANCIAL_YEAR FYE
                       , ACS_PERIOD PER
                       , ACS_FINANCIAL_ACCOUNT FIN
                       , ACT_TOTAL_BY_PERIOD TOT
                       , PCS.PC_CURR CUB
                       , ACS_FINANCIAL_CURRENCY CFB
                       , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_3) ) AUT
                   where FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                     and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                     and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                     and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
                     and PER.C_TYPE_PERIOD = '1'
                     and CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                     and CUB.PC_CURR_ID = CFB.PC_CURR_ID
                     and (    (TOT.ACS_DIVISION_ACCOUNT_ID is not null)
                          or (    TOT.ACS_DIVISION_ACCOUNT_ID is null
                              and ACR_FUNCTIONS.ExistDivision = 0) )
                     and TOT.ACS_DIVISION_ACCOUNT_ID is not null
                     and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID
                     and to_date(procparam_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
                     and procparam_7 = 1
                     and decode(TOT.C_TYPE_CUMUL
                              , 'INT', decode(parameter_3, '1', 1, 0)
                              , 'EXT', decode(parameter_4, '1', 1, 0)
                              , 'PRE', decode(parameter_5, '1', 1, 0)
                              , 'ENG', decode(parameter_6, '1', 1, 0)
                              , 0
                               ) = 1
                group by FIN.ACS_FINANCIAL_ACCOUNT_ID
                       , CUB.CURRENCY
                union all
                select   IMP.ACS_FINANCIAL_ACCOUNT_ID
                       , sum(IMP.IMF_AMOUNT_LC_D) TOTAL_LC_D
                       , sum(IMP.IMF_AMOUNT_LC_C) TOTAL_LC_C
                       , sum(IMP.IMF_AMOUNT_FC_D) TOTAL_FC_D
                       , sum(IMP.IMF_AMOUNT_FC_C) TOTAL_FC_C
                       , CUB.CURRENCY CURRENCY_MB
                    from ACT_JOURNAL JOU
                       , ACT_DOCUMENT DOC
                       , ACS_PERIOD PER
                       , ACS_FINANCIAL_YEAR FYE
                       , ACT_FINANCIAL_IMPUTATION IMP
                       , PCS.PC_CURR CUB
                       , ACS_FINANCIAL_CURRENCY CFB
                       , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_3) ) AUT
                   where FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                     and IMP.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                     and IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                     and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                     and CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                     and CUB.PC_CURR_ID = CFB.PC_CURR_ID
                     and IMP.IMF_TRANSACTION_DATE < to_date(procparam_4, 'yyyyMMdd')
                     and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
                     and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                     and to_date(procparam_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
                     and decode( (select C_ETAT_JOURNAL
                                    from ACT_ETAT_JOURNAL
                                   where ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                                     and C_SUB_SET = 'ACC')
                              , null, 1
                              , 'BRO', decode(procparam_6, '1', 1, 0)
                              , 'PROV', decode(procparam_7, '1', 1, 0)
                              , 'DEF', decode(procparam_8, '1', 1, 0)
                              , 0
                               ) = 1
                     and decode( (select SCA.C_TYPE_CUMUL
                                    from ACJ_SUB_SET_CAT SCA
                                   where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                                     and SCA.C_SUB_SET = 'ACC')
                              , 'INT', decode(parameter_3, '1', 1, 0)
                              , 'EXT', decode(parameter_4, '1', 1, 0)
                              , 'PRE', decode(parameter_5, '1', 1, 0)
                              , 'ENG', decode(parameter_6, '1', 1, 0)
                              , 0
                               ) = 1
                     and decode(parameter_9, 1, decode(IMP.IMF_TYPE, 'VAT', 0, decode(IMP.ACS_TAX_CODE_ID, null, 1, 0) ), 1) = 1
                group by IMP.ACS_FINANCIAL_ACCOUNT_ID
                       , CUB.CURRENCY)
            group by ACS_FINANCIAL_ACCOUNT_ID
                   , CURRENCY_MB) BAL
          , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_3) ) AUT
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID(+)
       and PRD.ACS_FINANCIAL_YEAR_ID = FYR.ACS_FINANCIAL_YEAR_ID(+)
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = DES_DIV.ACS_ACCOUNT_ID(+)
       and V_IMP.ACT_DOCUMENT_ID = TDO.ACT_DOCUMENT_ID(+)
       and TDO.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and TDO.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_TAX_CODE_ID = VAT.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_ACCOUNT_ID(+)
       and AUX.ACS_ACCOUNT_ID = DES_AUX.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID(+)
       and V_IMP.ACT_FINANCIAL_IMPUTATION_ID = IMP.ACT_FINANCIAL_IMPUTATION_ID(+)
       and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and V_ACC.PC_LANG_ID(+) = VPC_LANG_ID
       and LAN.PC_LANG_ID(+) = VPC_LANG_ID
       and BAL.ACS_FINANCIAL_ACCOUNT_ID(+) = V_ACC.ACS_FINANCIAL_ACCOUNT_ID
       and AUT.column_value = V_IMP.ACS_DIVISION_ACCOUNT_ID
       and ( (case parameter_2
                when '0' then 1
                when '1' then case
                               when(V_IMP.IMF_COMPARE_DATE is not null)
                                   and (V_IMP.ACT_JOURNAL_ID is not null)
                                   and (JOU.C_TYPE_JOURNAL <> 'OPB') then 1
                               else 0
                             end
                when '2' then case
                               when CAT.CAT_DESCRIPTION <> '7' then
                                    case
                                         when   (V_IMP.IMF_COMPARE_DATE is null)
                                             and (V_IMP.ACT_JOURNAL_ID is not null)
                                             and (JOU.C_TYPE_JOURNAL <> 'OPB') then 1
                                         else 0
                                    end
                               else 0
                             end
                else 0
              end
             ) = 1
           )
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(procparam_5, 'yyyyMMdd')
       and decode(V_IMP.C_ETAT_JOURNAL
                , null, 1
                , 'BRO', decode(procparam_6, '1', 1, 0)
                , 'PROV', decode(procparam_7, '1', 1, 0)
                , 'DEF', decode(procparam_8, '1', 1, 0)
                , 0
                 ) = 1
       and decode(V_IMP.C_TYPE_CUMUL
                , 'INT', decode(parameter_3, '1', 1, 0)
                , 'EXT', decode(parameter_4, '1', 1, 0)
                , 'PRE', decode(parameter_5, '1', 1, 0)
                , 'ENG', decode(parameter_6, '1', 1, 0)
                , 0
                 ) = 1
       and decode(parameter_9, 1, decode(V_IMP.IMF_TYPE, 'VAT', 0, decode(V_IMP.ACS_TAX_CODE_ID, null, 1, 0) ), 1) = 1
    union all
    select null INFO
         , null ACS_FINANCIAL_YEAR_ID
         , null REPORT_AMOUNT
         , V_ACC.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , ACS_FUNCTION.isFinAccountInME(V_ACC.ACS_FINANCIAL_ACCOUNT_ID) isFinAccountInME
         , null ACT_FINANCIAL_IMPUTATION_ID
         , null V_ACT_DOCUMENT_ID
         , null V_ACS_FINANCIAL_ACCOUNT_ID
         , 'COM' IMF_TYPE
         , null IMF_DESCRIPTION
         , null IMF_AMOUNT_LC_D
         , null IMF_AMOUNT_LC_C
         , null IMF_EXCHANGE_RATE
         , null IMF_AMOUNT_FC_D
         , null IMF_AMOUNT_FC_C
         , null IMF_VALUE_DATE
         , null ACS_TAX_CODE_ID
         , null IMF_TRANSACTION_DATE
         , null ACS_FINANCIAL_CURRENCY_ID
         , null ACS_AUXILIARY_ACCOUNT_ID
         , null AUX_DESCRIPTION_SUMMARY
         , null ACS_ACS_FINANCIAL_CURRENCY_ID
         , null DOC_DATE_DELIVERY
         , null ACS_DIVISION_ACCOUNT_ID
         , null DIV_NUMBER
         , null DIV_DES_DESCRIPTION_SUMMARY
         , null C_ETAT_JOURNAL
         , null C_TYPE_CUMUL
         , null IMF_COMPARE_DATE
         , null IMF_COMPARE_TEXT
         , null IMF_COMPARE_USE_INI
         , null C_TYPE_CATALOGUE
         , null CAT_DESCRIPTION
         , null AUX_ACC_NUMBER
         , null FIN_ACC_NUMBER
         , null VAT_ACS_ACCOUNT_ID
         , null VAT_ACC_NUMBER
         , null FUR_PC_CURR_ID
         , null FUR_PC_CURR_ID_LC
         , null ACT_DOCUMENT_ID
         , null DOC_NUMBER
         , null JOU_DESCRIPTION
         , null C_TYPE_JOURNAL
         , null JOU_NUMBER
         , null CUR_PC_CURR_ID
         , null CUR_PC_CURR_ID_LC
         , null CUR_CURRENCY
         , null CUR_CURRENCY_LC
         , null LANID
         , null C_TYPE_PERIOD
         , null RPT_COMPARED_AMOUNT
         , null RPT_COMPARED_AMOUNT_DIV
         , null RPT_NOT_COMPARED_AMOUNT
         , null RPT_NOT_COMPARED_AMOUNT_DIV
         , null RPT_COMPARED_AMOUNT_ME
         , null RPT_COMPARED_AMOUNT_DIV_ME
         , null RPT_NOT_COMPARED_AMOUNT_ME
         , null RPT_NOT_COMPARED_AMOUNT_DIV_ME
         , null TOTAL_LC_D
         , null TOTAL_LC_C
         , null TOTAL_FC_D
         , null TOTAL_FC_C
         , null CURRENCY_MB
         , null CURRENCY_ME
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID not in(select V_IMP.ACS_FINANCIAL_ACCOUNT_ID
                                                                                 from V_ACT_ACC_IMP_REPORT V_IMP)
       and V_ACC.ACC_NUMBER >= ACR_FUNCTIONS.GetAccNumber(1)
       and V_ACC.ACC_NUMBER <= ACR_FUNCTIONS.GetAccNumber(0)
       and V_ACC.PC_LANG_ID = VPC_LANG_ID;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select (case
              when(V_IMP.IMF_COMPARE_DATE is not null)
                  and (V_IMP.ACT_JOURNAL_ID is not null)
                  and (JOU.C_TYPE_JOURNAL <> 'OPB') then 'COMPARED'
              when CAT.CAT_DESCRIPTION <> '7' then case
                                                    when (V_IMP.IMF_COMPARE_DATE is null)
                                                        and    (V_IMP.ACT_JOURNAL_ID is not null)
                                                        and    (JOU.C_TYPE_JOURNAL <> 'OPB') then 'NOT_COMPARED'
                                                    else ''
                                                  end
              else ''
            end
           ) INFO
         , FYR.ACS_FINANCIAL_YEAR_ID
         , ACS_FUNCTION.REPORTAMOUNT(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, FYR.ACS_FINANCIAL_YEAR_ID, 'EXT', 1, 0) REPORT_AMOUNT
         , V_ACC.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , ACS_FUNCTION.isFinAccountInME(V_ACC.ACS_FINANCIAL_ACCOUNT_ID) isFinAccountInME
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.ACT_DOCUMENT_ID V_ACT_DOCUMENT_ID
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID V_ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_TYPE IMF_TYPE
         , V_IMP.IMF_DESCRIPTION IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE IMF_VALUE_DATE
         , V_IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
         , V_IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID ACS_AUXILIARY_ACCOUNT_ID
         , DES_AUX.DES_DESCRIPTION_SUMMARY AUX_DESCRIPTION_SUMMARY
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.DOC_DATE_DELIVERY DOC_DATE_DELIVERY
         , V_IMP.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER DIV_NUMBER
         , DES_DIV.DES_DESCRIPTION_SUMMARY DIV_DES_DESCRIPTION_SUMMARY
         , V_IMP.C_ETAT_JOURNAL C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL C_TYPE_CUMUL
         , V_IMP.IMF_COMPARE_DATE IMF_COMPARE_DATE
         , V_IMP.IMF_COMPARE_TEXT IMF_COMPARE_TEXT
         , V_IMP.IMF_COMPARE_USE_INI IMF_COMPARE_USE_INI
         , CAT.C_TYPE_CATALOGUE C_TYPE_CATALOGUE
         , CAT.CAT_DESCRIPTION CAT_DESCRIPTION
         , AUX.ACC_NUMBER AUX_ACC_NUMBER
         , FIN.ACC_NUMBER FIN_ACC_NUMBER
         , VAT.ACS_ACCOUNT_ID VAT_ACS_ACCOUNT_ID
         , VAT.ACC_NUMBER VAT_ACC_NUMBER
         , FUR.PC_CURR_ID FUR_PC_CURR_ID
         , FUR_LC.PC_CURR_ID FUR_PC_CURR_ID_LC
         , TDO.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
         , TDO.DOC_NUMBER DOC_NUMBER
         , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
         , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
         , JOU.JOU_NUMBER JOU_NUMBER
         , CUR.PC_CURR_ID CUR_PC_CURR_ID
         , CUR_LC.PC_CURR_ID CUR_PC_CURR_ID_LC
         , CUR.CURRENCY CUR_CURRENCY
         , CUR_LC.CURRENCY CUR_CURRENCY_LC
         , LAN.LANID LANID
         , PRD.C_TYPE_PERIOD C_TYPE_PERIOD
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 1) RPT_COMPARED_AMOUNT
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 1) RPT_COMPARED_AMOUNT_DIV
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 0) RPT_NOT_COMPARED_AMOUNT
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 0) RPT_NOT_COMPARED_AMOUNT_DIV
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 1, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_COMPARED_AMOUNT_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 1, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_COMPARED_AMOUNT_DIV_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, null, to_date(procparam_4, 'yyyyMMdd') -1, 0, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_NOT_COMPARED_AMOUNT_ME
         , ACR_FUNCTIONS.GetReportAmountCompared(V_ACC.ACS_FINANCIAL_ACCOUNT_ID, V_IMP.ACS_DIVISION_ACCOUNT_ID, to_date(procparam_4, 'yyyyMMdd') -1, 0, rpt_functions.getFinancialCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID)) RPT_NOT_COMPARED_AMOUNT_DIV_ME
         , BAL.TOTAL_LC_D
         , BAL.TOTAL_LC_C
         , BAL.TOTAL_FC_D
         , BAL.TOTAL_FC_C
         , BAL.CURRENCY_MB
         , cast(rpt_functions.getCurrencyId(V_IMP.ACS_FINANCIAL_ACCOUNT_ID) as varchar2(5)) CURRENCY_ME
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
         , V_ACT_ACC_IMP_REPORT V_IMP
         , (select ACS_ACCOUNT_ID
                 , DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION
             where PC_LANG_ID = VPC_LANG_ID) DES_DIV
         , (select ACS_ACCOUNT_ID
                 , DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION
             where PC_LANG_ID = VPC_LANG_ID) DES_AUX
         , ACS_PERIOD PRD
         , ACS_FINANCIAL_YEAR FYR
         , ACT_DOCUMENT TDO
         , ACJ_CATALOGUE_DOCUMENT CAT
         , ACT_JOURNAL JOU
         , ACS_ACCOUNT AUX
         , ACS_ACCOUNT FIN
         , ACS_ACCOUNT VAT
         , ACS_FINANCIAL_CURRENCY FUR
         , ACS_FINANCIAL_CURRENCY FUR_LC
         , ACT_FINANCIAL_IMPUTATION IMP
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR_LC
         , PCS.PC_LANG LAN
         , (select ACS_FINANCIAL_ACCOUNT_ID
                   , sum(TOTAL_LC_D) TOTAL_LC_D
                   , sum(TOTAL_LC_C) TOTAL_LC_C
                   , sum(TOTAL_FC_D) TOTAL_FC_D
                   , sum(TOTAL_FC_C) TOTAL_FC_C
                   , CURRENCY_MB
            from
              (select   FIN.ACS_FINANCIAL_ACCOUNT_ID
                     , sum(TOT.TOT_DEBIT_LC) TOTAL_LC_D
                     , sum(TOT.TOT_CREDIT_LC) TOTAL_LC_C
                     , sum(TOT.TOT_DEBIT_FC) TOTAL_FC_D
                     , sum(TOT.TOT_CREDIT_FC) TOTAL_FC_C
                     , CUB.CURRENCY CURRENCY_MB
                  from ACS_FINANCIAL_YEAR FYE
                     , ACS_PERIOD PER
                     , ACS_FINANCIAL_ACCOUNT FIN
                     , ACT_TOTAL_BY_PERIOD TOT
                     , PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                   and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                   and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                   and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
                   and PER.C_TYPE_PERIOD = '1'
                   and CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID
                   and (    (TOT.ACS_DIVISION_ACCOUNT_ID is not null)
                        or (    TOT.ACS_DIVISION_ACCOUNT_ID is null
                            and ACR_FUNCTIONS.ExistDivision = 0) )
                   and to_date(procparam_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
                   and procparam_7 = 1
                   and decode(TOT.C_TYPE_CUMUL
                            , 'INT', decode(parameter_3, '1', 1, 0)
                            , 'EXT', decode(parameter_4, '1', 1, 0)
                            , 'PRE', decode(parameter_5, '1', 1, 0)
                            , 'ENG', decode(parameter_6, '1', 1, 0)
                            , 0
                             ) = 1
              group by FIN.ACS_FINANCIAL_ACCOUNT_ID
                     , CUB.CURRENCY
              union all
              select   IMP.ACS_FINANCIAL_ACCOUNT_ID
                     , sum(IMP.IMF_AMOUNT_LC_D) TOTAL_LC_D
                     , sum(IMP.IMF_AMOUNT_LC_C) TOTAL_LC_C
                     , sum(IMP.IMF_AMOUNT_FC_D) TOTAL_FC_D
                     , sum(IMP.IMF_AMOUNT_FC_C) TOTAL_FC_C
                     , CUB.CURRENCY CURRENCY_MB
                  from ACT_JOURNAL JOU
                     , ACT_DOCUMENT DOC
                     , ACS_PERIOD PER
                     , ACS_FINANCIAL_YEAR FYE
                     , ACT_FINANCIAL_IMPUTATION IMP
                     , PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
                   and IMP.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                   and IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                   and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                   and CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID
                   and IMP.IMF_TRANSACTION_DATE < to_date(procparam_4, 'yyyyMMdd')
                   and to_date(procparam_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
                   and decode( (select C_ETAT_JOURNAL
                                  from ACT_ETAT_JOURNAL
                                 where ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                                   and C_SUB_SET = 'ACC')
                            , null, 1
                            , 'BRO', decode(procparam_6, '1', 1, 0)
                            , 'PROV', decode(procparam_7, '1', 1, 0)
                            , 'DEF', decode(procparam_8, '1', 1, 0)
                            , 0
                             ) = 1
                   and decode( (select SCA.C_TYPE_CUMUL
                                  from ACJ_SUB_SET_CAT SCA
                                 where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                                   and SCA.C_SUB_SET = 'ACC')
                            , 'INT', decode(parameter_3, '1', 1, 0)
                            , 'EXT', decode(parameter_4, '1', 1, 0)
                            , 'PRE', decode(parameter_5, '1', 1, 0)
                            , 'ENG', decode(parameter_6, '1', 1, 0)
                            , 0
                             ) = 1
                   and decode(parameter_9, 1, decode(IMP.IMF_TYPE, 'VAT', 0, decode(IMP.ACS_TAX_CODE_ID, null, 1, 0) ), 1) = 1
              group by IMP.ACS_FINANCIAL_ACCOUNT_ID
                     , CUB.CURRENCY)
            group by ACS_FINANCIAL_ACCOUNT_ID
                   , CURRENCY_MB) BAL
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID(+)
       and PRD.ACS_FINANCIAL_YEAR_ID = FYR.ACS_FINANCIAL_YEAR_ID(+)
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = DES_DIV.ACS_ACCOUNT_ID(+)
       and V_IMP.ACT_DOCUMENT_ID = TDO.ACT_DOCUMENT_ID(+)
       and TDO.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and TDO.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_TAX_CODE_ID = VAT.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_ACCOUNT_ID(+)
       and AUX.ACS_ACCOUNT_ID = DES_AUX.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID(+)
       and V_IMP.ACT_FINANCIAL_IMPUTATION_ID = IMP.ACT_FINANCIAL_IMPUTATION_ID(+)
       and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and V_ACC.PC_LANG_ID(+) = VPC_LANG_ID
       and LAN.PC_LANG_ID(+) = VPC_LANG_ID
       and BAL.ACS_FINANCIAL_ACCOUNT_ID(+) = V_ACC.ACS_FINANCIAL_ACCOUNT_ID
       and ( (case parameter_2
                when '0' then 1
                when '1' then case
                               when(V_IMP.IMF_COMPARE_DATE is not null)
                                   and (V_IMP.ACT_JOURNAL_ID is not null)
                                   and (JOU.C_TYPE_JOURNAL <> 'OPB') then 1
                               else 0
                             end
                when '2' then case
                               when CAT.CAT_DESCRIPTION <> '7' then case
                                                                     when (V_IMP.IMF_COMPARE_DATE is null)
                                                                         and   (V_IMP.ACT_JOURNAL_ID is not null)
                                                                         and   (JOU.C_TYPE_JOURNAL <> 'OPB') then 1
                                                                     else 0
                                                                   end
                               else 0
                             end
                else 0
              end
             ) = 1
           )
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(procparam_5, 'yyyyMMdd')
       and decode(V_IMP.C_ETAT_JOURNAL
                , null, 1
                , 'BRO', decode(procparam_6, '1', 1, 0)
                , 'PROV', decode(procparam_7, '1', 1, 0)
                , 'DEF', decode(procparam_8, '1', 1, 0)
                , 0
                 ) = 1
       and decode(V_IMP.C_TYPE_CUMUL
                , 'INT', decode(parameter_3, '1', 1, 0)
                , 'EXT', decode(parameter_4, '1', 1, 0)
                , 'PRE', decode(parameter_5, '1', 1, 0)
                , 'ENG', decode(parameter_6, '1', 1, 0)
                , 0
                 ) = 1
       and decode(parameter_9, 1, decode(V_IMP.IMF_TYPE, 'VAT', 0, decode(V_IMP.ACS_TAX_CODE_ID, null, 1, 0) ), 1) = 1
    union all
    select null INFO
         , null ACS_FINANCIAL_YEAR_ID
         , null REPORT_AMOUNT
         , V_ACC.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , ACS_FUNCTION.isFinAccountInME(V_ACC.ACS_FINANCIAL_ACCOUNT_ID) isFinAccountInME
         , null ACT_FINANCIAL_IMPUTATION_ID
         , null V_ACT_DOCUMENT_ID
         , null V_ACS_FINANCIAL_ACCOUNT_ID
         , 'COM' IMF_TYPE
         , null IMF_DESCRIPTION
         , null IMF_AMOUNT_LC_D
         , null IMF_AMOUNT_LC_C
         , null IMF_EXCHANGE_RATE
         , null IMF_AMOUNT_FC_D
         , null IMF_AMOUNT_FC_C
         , null IMF_VALUE_DATE
         , null ACS_TAX_CODE_ID
         , null IMF_TRANSACTION_DATE
         , null ACS_FINANCIAL_CURRENCY_ID
         , null ACS_AUXILIARY_ACCOUNT_ID
         , null AUX_DESCRIPTION_SUMMARY
         , null ACS_ACS_FINANCIAL_CURRENCY_ID
         , null DOC_DATE_DELIVERY
         , null ACS_DIVISION_ACCOUNT_ID
         , null DIV_NUMBER
         , null DIV_DES_DESCRIPTION_SUMMARY
         , null C_ETAT_JOURNAL
         , null C_TYPE_CUMUL
         , null IMF_COMPARE_DATE
         , null IMF_COMPARE_TEXT
         , null IMF_COMPARE_USE_INI
         , null C_TYPE_CATALOGUE
         , null CAT_DESCRIPTION
         , null AUX_ACC_NUMBER
         , null FIN_ACC_NUMBER
         , null VAT_ACS_ACCOUNT_ID
         , null VAT_ACC_NUMBER
         , null FUR_PC_CURR_ID
         , null FUR_PC_CURR_ID_LC
         , null ACT_DOCUMENT_ID
         , null DOC_NUMBER
         , null JOU_DESCRIPTION
         , null C_TYPE_JOURNAL
         , null JOU_NUMBER
         , null CUR_PC_CURR_ID
         , null CUR_PC_CURR_ID_LC
         , null CUR_CURRENCY
         , null CUR_CURRENCY_LC
         , null LANID
         , null C_TYPE_PERIOD
         , null RPT_COMPARED_AMOUNT
         , null RPT_COMPARED_AMOUNT_DIV
         , null RPT_NOT_COMPARED_AMOUNT
         , null RPT_NOT_COMPARED_AMOUNT_DIV
         , null RPT_COMPARED_AMOUNT_ME
         , null RPT_COMPARED_AMOUNT_DIV_ME
         , null RPT_NOT_COMPARED_AMOUNT_ME
         , null RPT_NOT_COMPARED_AMOUNT_DIV_ME
         , null TOTAL_LC_D
         , null TOTAL_LC_C
         , null TOTAL_FC_D
         , null TOTAL_FC_C
         , null CURRENCY_MB
         , null CURRENCY_ME
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID not in(select V_IMP.ACS_FINANCIAL_ACCOUNT_ID
                                                   from V_ACT_ACC_IMP_REPORT V_IMP)
       and V_ACC.ACC_NUMBER >= ACR_FUNCTIONS.GetAccNumber(1)
       and V_ACC.ACC_NUMBER <= ACR_FUNCTIONS.GetAccNumber(0)
       and V_ACC.PC_LANG_ID = VPC_LANG_ID;
end if;
end RPT_ACR_ACC_IMP_COMPARE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_ACC_IMP_LET" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_8    in     varchar2
, parameter_9    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_14   in     varchar2
, parameter_16   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
is
/**
* description used for report ACR_ACC_IMPUTATION_LETTERING

* @author jliu 18 nov 2008
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0    ACC_NUMBER_From
* @param procparam_1    ACC_NUMBER_To
* @param procparam_2    ACS_FINANCIAL_YEAR_ID
* @param parameter_1    Date from/YYYY
* @param parameter_2    Date from/MM
* @param parameter_3    Date from/DD
* @param parameter_4    Date to/YYYY
* @param parameter_5    Date to/MM
* @param parameter_6    Date to/DD
* @param parameter_8    Only transaction without VAT
* @param parameter_9    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param parameter_10   Journal status = BRO : 1=Yes / 0=No
* @param parameter_11   Journal status = PROV : 1=Yes / 0=No
* @param parameter_12   Journal status = DEF : 1=Yes / 0=No
* @param parameter_14   Division_ID (List) # = All  or ACS_DIVISION_ACCOUNT_ID list
* @param parameter_16   Compare code : '0'=all / '1'= Matching / '2'= Unmatched
* @param parameter_18   C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param parameter_19   C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param parameter_20   C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
*/
  TMP         number;
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
  PARAM5      varchar2(10);
  PARAM6      varchar2(10);
  vlstdivisions varchar2(4000);
begin
  if (procuser_lanid is not null) and (pc_user_id is not null)  then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (parameter_14 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := parameter_14;
  end if;

  if     (procparam_0 is not null)
     and (length(trim(procparam_0) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1  := procparam_0;
  else
    ACR_FUNCTIONS.ACC_NUMBER1  := '';
  end if;

  if     (procparam_1 is not null)
     and (length(trim(procparam_1) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2  := procparam_1;
  end if;

  if     (procparam_2 is not null)
     and (length(trim(procparam_2) ) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID  := procparam_2;
  end if;

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;

  if length(parameter_5) = 1 then
    PARAM5  := '0' || parameter_5;
  else
    PARAM5  := parameter_5;
  end if;

  if length(parameter_6) = 1 then
    PARAM6  := '0' || parameter_6;
  else
    PARAM6  := parameter_6;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_TYPE IMF_TYPE
         , V_IMP.IMF_DESCRIPTION IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
         , V_IMP.IMF_VALUE_DATE IMF_VALUE_DATE
         , V_IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
         , V_IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.DOC_DATE_DELIVERY DOC_DATE_DELIVERY
         , V_IMP.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER DIV_NUMBER
         , V_IMP.C_ETAT_JOURNAL C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL C_TYPE_CUMUL
         , CAT.C_TYPE_CATALOGUE C_TYPE_CATALOGUE
         , AUX.ACC_NUMBER ACC_NUMBER_AUX
         , FIN.ACC_NUMBER ACC_NUMBER_FIN
         , VAT.ACS_ACCOUNT_ID VAT_ACS_ACCOUNT_ID
         , VAT.ACC_NUMBER ACC_NUMBER_VAT
         , FYR.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID
         , ATD.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
         , ATD.DOC_NUMBER DOC_NUMBER
         , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
         , JOU.JOU_NUMBER JOU_NUMBER
         , CUR.CURRENCY CURRENCY
         , CUR_LC.CURRENCY CURRENCY_LC
         , LAN.LANID LANID
         , DES_AUX.DES_DESCRIPTION_SUMMARY AUX_DES_DESCRIPTION_SUMMARY
         , DES_DIV.DES_DESCRIPTION_SUMMARY DIV_DES_DESCRIPTION_SUMMARY
         , round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2) LET_AMNT_LD
         , round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2) LET_AMNT_LC
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
         , V_ACT_ACC_IMP_REPORT V_IMP
         , PCS.PC_LANG LAN
         , ACS_PERIOD PRD
         , ACS_FINANCIAL_YEAR FYR
         , ACT_DOCUMENT ATD
         , ACJ_CATALOGUE_DOCUMENT CAT
         , ACT_JOURNAL JOU
         , ACS_ACCOUNT VAT
         , ACS_ACCOUNT AUX
         , ACS_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY FUR
         , PCS.PC_CURR CUR
         , ACS_FINANCIAL_CURRENCY FUR_LC
         , PCS.PC_CURR CUR_LC
         , ACT_FINANCIAL_IMPUTATION IMP
         , ACS_DESCRIPTION DES_AUX
         , ACS_DESCRIPTION DES_DIV
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID
       and V_ACC.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID(+)
       and PRD.ACS_FINANCIAL_YEAR_ID = FYR.ACS_FINANCIAL_YEAR_ID(+)
       and V_IMP.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID(+)
       and ATD.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and ATD.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_TAX_CODE_ID = VAT.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID(+)
       and V_IMP.ACT_FINANCIAL_IMPUTATION_ID = IMP.ACT_FINANCIAL_IMPUTATION_ID(+)
       and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and LAN.PC_LANG_ID(+) = vpc_lang_id
       and AUX.ACS_ACCOUNT_ID = DES_AUX.ACS_ACCOUNT_ID(+)
       and DES_AUX.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = DES_DIV.ACS_ACCOUNT_ID(+)
       and DES_DIV.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || PARAM5 || PARAM6, 'yyyyMMdd')
       and (    (    parameter_10 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_11 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_12 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = V_IMP.ACS_DIVISION_ACCOUNT_ID
       and (   parameter_16 = '0'
            or (    parameter_16 = '1'
                and round(V_IMP.IMF_AMOUNT_LC_D, 2) = round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2)
                and round(V_IMP.IMF_AMOUNT_LC_C, 2) = round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2)
                and (   V_IMP.IMF_AMOUNT_LC_D <> 0
                     or V_IMP.IMF_AMOUNT_LC_C <> 0)
               )
            or (    parameter_16 = '1'
                and (   round(V_IMP.IMF_AMOUNT_LC_D, 2) <> round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2)
                     or round(V_IMP.IMF_AMOUNT_LC_C, 2) <> round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2)
                     or (    V_IMP.IMF_AMOUNT_LC_D = 0
                         and V_IMP.IMF_AMOUNT_LC_C = 0)
                    )
                and (    (    round(V_IMP.IMF_AMOUNT_LC_D, 2) <> 0
                          and round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2) <> 0
                         )
                     or (    round(V_IMP.IMF_AMOUNT_LC_C, 2) <> 0
                         and round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2) <> 0
                        )
                    )
               )
            or (    parameter_16 = '2'
                and CAT.C_TYPE_CATALOGUE is not null
                and CAT.C_TYPE_CATALOGUE <> '7'
                and (   V_IMP.IMF_AMOUNT_LC_D <> ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null)
                     or V_IMP.IMF_AMOUNT_LC_C <> ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null)
                    )
               )
           )
       and (    (    parameter_8 = '1'
                 and V_IMP.IMF_TYPE <> 'VAT'
                 and V_IMP.ACS_TAX_CODE_ID is null)
            or (    parameter_8 <> '1'
                and V_IMP.IMF_TYPE is not null) )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_9 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
    union all
    select distinct V_ACC.ACC_NUMBER ACC_NUMBER
                  , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                  , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
                  , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
                  , null ACT_FINANCIAL_IMPUTATION_ID
                  , null ACS_FINANCIAL_ACCOUNT_ID
                  , null IMF_TYPE
                  , null IMF_DESCRIPTION
                  , null IMF_AMOUNT_LC_D
                  , null IMF_AMOUNT_LC_C
                  , null IMF_VALUE_DATE
                  , null ACS_TAX_CODE_ID
                  , null IMF_TRANSACTION_DATE
                  , null ACS_AUXILIARY_ACCOUNT_ID
                  , null DOC_DATE_DELIVERY
                  , null ACS_DIVISION_ACCOUNT_ID
                  , null DIV_NUMBER
                  , null C_ETAT_JOURNAL
                  , null C_TYPE_CUMUL
                  , null C_TYPE_CATALOGUE
                  , null ACC_NUMBER_AUX
                  , null ACC_NUMBER_FIN
                  , null VAT_ACS_ACCOUNT_ID
                  , null ACC_NUMBER_VAT
                  , null ACS_FINANCIAL_YEAR_ID
                  , null ACT_DOCUMENT_ID
                  , null DOC_NUMBER
                  , null JOU_DESCRIPTION
                  , null JOU_NUMBER
                  , null CURRENCY
                  , null CURRENCY_LC
                  , null LANID
                  , null AUX_DES_DESCRIPTION_SUMMARY
                  , null DIV_DES_DESCRIPTION_SUMMARY
                  , null LET_AMNT_LD
                  , null LET_AMNT_LC
               from V_ACS_FINANCIAL_ACCOUNT V_ACC
              where V_ACC.ACS_FINANCIAL_ACCOUNT_ID not in(select V_IMP.ACS_FINANCIAL_ACCOUNT_ID
                                                            from V_ACT_ACC_IMP_REPORT V_IMP)
                and V_ACC.ACC_NUMBER >= ACR_FUNCTIONS.GetAccNumber(1)
                and V_ACC.ACC_NUMBER <= ACR_FUNCTIONS.GetAccNumber(0)
                and V_ACC.PC_LANG_ID = vpc_lang_id;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select V_ACC.ACC_NUMBER ACC_NUMBER
         , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
         , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
         , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_TYPE IMF_TYPE
         , V_IMP.IMF_DESCRIPTION IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
         , V_IMP.IMF_VALUE_DATE IMF_VALUE_DATE
         , V_IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
         , V_IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.DOC_DATE_DELIVERY DOC_DATE_DELIVERY
         , V_IMP.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER DIV_NUMBER
         , V_IMP.C_ETAT_JOURNAL C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL C_TYPE_CUMUL
         , CAT.C_TYPE_CATALOGUE C_TYPE_CATALOGUE
         , AUX.ACC_NUMBER ACC_NUMBER_AUX
         , FIN.ACC_NUMBER ACC_NUMBER_FIN
         , VAT.ACS_ACCOUNT_ID VAT_ACS_ACCOUNT_ID
         , VAT.ACC_NUMBER ACC_NUMBER_VAT
         , FYR.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID
         , ATD.ACT_DOCUMENT_ID ACT_DOCUMENT_ID
         , ATD.DOC_NUMBER DOC_NUMBER
         , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
         , JOU.JOU_NUMBER JOU_NUMBER
         , CUR.CURRENCY CURRENCY
         , CUR_LC.CURRENCY CURRENCY_LC
         , LAN.LANID LANID
         , DES_AUX.DES_DESCRIPTION_SUMMARY AUX_DES_DESCRIPTION_SUMMARY
         , DES_DIV.DES_DESCRIPTION_SUMMARY DIV_DES_DESCRIPTION_SUMMARY
         , round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2) LET_AMNT_LD
         , round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2) LET_AMNT_LC
      from V_ACS_FINANCIAL_ACCOUNT V_ACC
         , V_ACT_ACC_IMP_REPORT V_IMP
         , PCS.PC_LANG LAN
         , ACS_PERIOD PRD
         , ACS_FINANCIAL_YEAR FYR
         , ACT_DOCUMENT ATD
         , ACJ_CATALOGUE_DOCUMENT CAT
         , ACT_JOURNAL JOU
         , ACS_ACCOUNT VAT
         , ACS_ACCOUNT AUX
         , ACS_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY FUR
         , PCS.PC_CURR CUR
         , ACS_FINANCIAL_CURRENCY FUR_LC
         , PCS.PC_CURR CUR_LC
         , ACT_FINANCIAL_IMPUTATION IMP
         , ACS_DESCRIPTION DES_AUX
         , ACS_DESCRIPTION DES_DIV
     where V_ACC.ACS_FINANCIAL_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID
       and V_ACC.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID(+)
       and PRD.ACS_FINANCIAL_YEAR_ID = FYR.ACS_FINANCIAL_YEAR_ID(+)
       and V_IMP.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID(+)
       and ATD.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and ATD.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_TAX_CODE_ID = VAT.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_ACCOUNT_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID(+)
       and V_IMP.ACT_FINANCIAL_IMPUTATION_ID = IMP.ACT_FINANCIAL_IMPUTATION_ID(+)
       and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and LAN.PC_LANG_ID(+) = vpc_lang_id
       and AUX.ACS_ACCOUNT_ID = DES_AUX.ACS_ACCOUNT_ID(+)
       and DES_AUX.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = DES_DIV.ACS_ACCOUNT_ID(+)
       and DES_DIV.PC_LANG_ID(+) = vpc_lang_id
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || PARAM5 || PARAM6, 'yyyyMMdd')
       and (    (    parameter_10 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_11 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_12 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (   parameter_16 = '0'
            or (    parameter_16 = '1'
                and round(V_IMP.IMF_AMOUNT_LC_D, 2) = round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2)
                and round(V_IMP.IMF_AMOUNT_LC_C, 2) = round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2)
                and (   V_IMP.IMF_AMOUNT_LC_D <> 0
                     or V_IMP.IMF_AMOUNT_LC_C <> 0)
               )
            or (    parameter_16 = '1'
                and (   round(V_IMP.IMF_AMOUNT_LC_D, 2) <> round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2)
                     or round(V_IMP.IMF_AMOUNT_LC_C, 2) <> round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2)
                     or (    V_IMP.IMF_AMOUNT_LC_D = 0
                         and V_IMP.IMF_AMOUNT_LC_C = 0)
                    )
                and (    (    round(V_IMP.IMF_AMOUNT_LC_D, 2) <> 0
                          and round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null), 2) <> 0
                         )
                     or (    round(V_IMP.IMF_AMOUNT_LC_C, 2) <> 0
                         and round(ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null), 2) <> 0
                        )
                    )
               )
            or (    parameter_16 = '2'
                and CAT.C_TYPE_CATALOGUE is not null
                and CAT.C_TYPE_CATALOGUE <> '7'
                and (   V_IMP.IMF_AMOUNT_LC_D <> ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'D', null)
                     or V_IMP.IMF_AMOUNT_LC_C <> ACR_FUNCTIONS.TOTAL_LETTERING_AMOUNT_IMPUT(V_IMP.ACT_FINANCIAL_IMPUTATION_ID, 'C', null)
                    )
               )
           )
       and (    (    parameter_8 = '1'
                 and V_IMP.IMF_TYPE <> 'VAT'
                 and V_IMP.ACS_TAX_CODE_ID is null)
            or (    parameter_8 <> '1'
                and V_IMP.IMF_TYPE is not null) )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_9 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
    union all
    select distinct V_ACC.ACC_NUMBER ACC_NUMBER
                  , V_ACC.ACC_DETAIL_PRINTING ACC_DETAIL_PRINTING
                  , V_ACC.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY
                  , V_ACC.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE
                  , null ACT_FINANCIAL_IMPUTATION_ID
                  , null ACS_FINANCIAL_ACCOUNT_ID
                  , null IMF_TYPE
                  , null IMF_DESCRIPTION
                  , null IMF_AMOUNT_LC_D
                  , null IMF_AMOUNT_LC_C
                  , null IMF_VALUE_DATE
                  , null ACS_TAX_CODE_ID
                  , null IMF_TRANSACTION_DATE
                  , null ACS_AUXILIARY_ACCOUNT_ID
                  , null DOC_DATE_DELIVERY
                  , null ACS_DIVISION_ACCOUNT_ID
                  , null DIV_NUMBER
                  , null C_ETAT_JOURNAL
                  , null C_TYPE_CUMUL
                  , null C_TYPE_CATALOGUE
                  , null ACC_NUMBER_AUX
                  , null ACC_NUMBER_FIN
                  , null VAT_ACS_ACCOUNT_ID
                  , null ACC_NUMBER_VAT
                  , null ACS_FINANCIAL_YEAR_ID
                  , null ACT_DOCUMENT_ID
                  , null DOC_NUMBER
                  , null JOU_DESCRIPTION
                  , null JOU_NUMBER
                  , null CURRENCY
                  , null CURRENCY_LC
                  , null LANID
                  , null AUX_DES_DESCRIPTION_SUMMARY
                  , null DIV_DES_DESCRIPTION_SUMMARY
                  , null LET_AMNT_LD
                  , null LET_AMNT_LC
               from V_ACS_FINANCIAL_ACCOUNT V_ACC
              where V_ACC.ACS_FINANCIAL_ACCOUNT_ID not in(select V_IMP.ACS_FINANCIAL_ACCOUNT_ID
                                                            from V_ACT_ACC_IMP_REPORT V_IMP)
                and V_ACC.ACC_NUMBER >= ACR_FUNCTIONS.GetAccNumber(1)
                and V_ACC.ACC_NUMBER <= ACR_FUNCTIONS.GetAccNumber(0)
                and V_ACC.PC_LANG_ID = vpc_lang_id;
end if;
end RPT_ACR_ACC_IMP_LET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_AGED_CUSTOMER" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     varchar2
, procparam_7    in     varchar2
, parameter_13   in     varchar2
, parameter_14   in     varchar2
, parameter_15   in     varchar2
, parameter_16   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
is
/**
* description used for report ACR_AGED_CUSTOMER (Echéanciers clients)

* @author SDO 2003
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0: Acs_sub_set_ID       ACS_SUB_SET_ID
* @param procparam_1: Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2: Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_3: Date référence       Date pour le calcul des escomptes et des réévaluations
* @param procparam_4: Division_ID (List) NULL = All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5: Collectiv_ID (List)  '' = All sinon liste des ID
* @param procparam_6: Type de cours        1 : Cours du jour (par défaut)
                                                                  2 : Cours d'évaluation
                                                                  3 : Cours d'inventaire
                                                                  4 : Cours de bouclement
                                                                  5 : Cours de facturation
* @param procparam_7: Currency_ID List)   '' = All sinon liste des ID   (ACS_FINANCIAL_CURRENCY_ID)
* @param parameter_13    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param parameter_14    C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param parameter_15    C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param parameter_16    C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
begin
  if (procuser_lanid is not null) and (pc_user_id is not null)  then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  if (procparam_3 is null) then
    open arefcursor for
      select par.par_document
           , par.par_blocked_document
           , par.acs_acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
           , par.acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_me
           , doc.doc_number
           , cat.c_type_catalogue
           , sub.c_type_cumul
           , exp.act_expiry_id
           , exp.act_document_id
           , exp.act_part_imputation_id
           , exp.c_status_expiry
           , exp.exp_adapted
           , to_char(exp.exp_adapted, 'YYYY-IW') week_year
           , to_char(exp.exp_adapted, 'YYYY-MM') month_year
           , to_char(exp.exp_adapted, 'YYYY') year
           , exp.exp_calculated
           , exp.exp_amount_lc
           , exp.exp_amount_fc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) discount_lc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 0) discount_fc
           , act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 1) det_paied_lc
           , act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0) det_paied_fc
           , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 1) solde_exp_lc
           , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0) solde_exp_fc
           , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0)
                                                    , par.acs_financial_currency_id
                                                    , par.acs_acs_financial_currency_id
                                                    , sysdate
                                                    , procparam_6
                                                     ) solde_reeval_lc
           , exp.exp_slice
           , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
           , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
           , exp.acs_fin_acc_s_payment_id
           , pmm.acs_payment_method_id
           , (select pme.c_method_category
                from acs_payment_method pme
               where pme.acs_payment_method_id = pmm.acs_payment_method_id) c_method_category
           , (select de4.des_description_summary
                from acs_description de4
               where de4.acs_payment_method_id = pmm.acs_payment_method_id
                 and de4.pc_lang_id = vpc_lang_id) payment_method_descr
           , imp.acs_period_id
           , imp.imf_transaction_date
           , imp.imf_value_date
           , imp.imf_description
           , imp.acs_financial_account_id
           , (select acf.acc_number
                from acs_account acf
               where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
           , (select de1.des_description_summary
                from acs_description de1
               where de1.acs_account_id = imp.acs_financial_account_id
                 and de1.pc_lang_id = vpc_lang_id) account_fin_descr
           , jou.jou_number
           , ejo.c_etat_journal
           , imp.imf_acs_division_account_id
           , cus.pac_custom_partner_id
           , cus.acs_auxiliary_account_id
           , cus.c_partner_category
           , acc.acc_number acc_number_aux
           , (select de2.des_description_summary
                from acs_description de2
               where de2.acs_account_id = cus.acs_auxiliary_account_id
                 and de2.pc_lang_id = vpc_lang_id) account_aux_descr
           , acc.acs_sub_set_id
           , (select de3.des_description_summary
                from acs_description de3
               where de3.acs_sub_set_id = acc.acs_sub_set_id
                 and de3.pc_lang_id = vpc_lang_id) sub_set_descr
           , aux.c_type_account
           , per.per_name
           , per.per_forename
           , per.per_short_name
           , per.per_activity
           , per.per_key1
           , (select adr.add_format
                from pac_address adr
               where adr.pac_person_id = cus.pac_custom_partner_id
                 and adr.add_principal = '1') add_format
        from pac_person per
           , acs_auxiliary_account aux
           , pac_custom_partner cus
           , acs_financial_account fin
           , act_financial_imputation imp
           , act_etat_journal ejo
           , act_journal jou
           , acs_fin_acc_s_payment pmm
           , act_expiry exp
           , acj_catalogue_document cat
           , act_document doc
           , act_part_imputation par
           , acs_account acc
           , acj_sub_set_cat sub
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
       where par.act_document_id = doc.act_document_id
         and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
         and cat.c_type_catalogue <> '8'
         and   -- Transaction de relance
             par.act_part_imputation_id = exp.act_part_imputation_id
         and exp_calc_net + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, sysdate) = 1
         and exp.acs_fin_acc_s_payment_id = pmm.acs_fin_acc_s_payment_id(+)
         and doc.act_journal_id = jou.act_journal_id
         and doc.act_journal_id = ejo.act_journal_id
         and ejo.c_sub_set = 'REC'
         and exp.act_part_imputation_id = imp.act_part_imputation_id
         and imp.act_det_payment_id is null
         and imp.acs_auxiliary_account_id is not null
         and imp.acs_financial_account_id = fin.acs_financial_account_id
         and exp.c_status_expiry = 0
         and fin.fin_collective = 1
         and acc.acc_number >= procparam_1
         and acc.acc_number <= procparam_2
         and (   acc.acs_sub_set_id = procparam_0
              or procparam_0 is null)
         and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
         and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || par.acs_financial_currency_id || ',') ) > 0
              or procparam_7 is null)
         and par.pac_custom_partner_id = cus.pac_custom_partner_id
         and cus.acs_auxiliary_account_id = acc.acs_account_id
         and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
         and cus.pac_custom_partner_id = per.pac_person_id
         and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
         and sub.c_sub_set = 'REC'
         and decode(sub.C_TYPE_CUMUL
                  , 'INT', decode(parameter_13, '1', 1, 0)
                  , 'EXT', decode(parameter_14, '1', 1, 0)
                  , 'PRE', decode(parameter_15, '1', 1, 0)
                  , 'ENG', decode(parameter_16, '1', 1, 0)
                  , 0
                   ) = 1;
  else
    open arefcursor for
      select par.par_document
           , par.par_blocked_document
           , par.acs_acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
           , par.acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_me
           , doc.doc_number
           , cat.c_type_catalogue
           , sub.c_type_cumul
           , exp.act_expiry_id
           , exp.act_document_id
           , exp.act_part_imputation_id
           , exp.c_status_expiry
           , exp.exp_adapted
           , to_char(exp.exp_adapted, 'YYYY-IW') week_year
           , to_char(exp.exp_adapted, 'YYYY-MM') month_year
           , to_char(exp.exp_adapted, 'YYYY') year
           , exp.exp_calculated
           , exp.exp_amount_lc
           , exp.exp_amount_fc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, to_date(procparam_3, 'YYYYMMDD'), 1) discount_lc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, to_date(procparam_3, 'YYYYMMDD'), 0) discount_fc
           , act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 1) det_paied_lc
           , act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0) det_paied_fc
           , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 1) solde_exp_lc
           , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0) solde_exp_fc
           , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0)
                                                    , par.acs_financial_currency_id
                                                    , par.acs_acs_financial_currency_id
                                                    , to_date(procparam_3, 'YYYYMMDD')
                                                    , procparam_6
                                                     ) solde_reeval_lc
           , exp.exp_slice
           , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
           , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
           , exp.acs_fin_acc_s_payment_id
           , pmm.acs_payment_method_id
           , (select pme.c_method_category
                from acs_payment_method pme
               where pme.acs_payment_method_id = pmm.acs_payment_method_id) c_method_category
           , (select de4.des_description_summary
                from acs_description de4
               where de4.acs_payment_method_id = pmm.acs_payment_method_id
                 and de4.pc_lang_id = vpc_lang_id) payment_method_descr
           , imp.acs_period_id
           , imp.imf_transaction_date
           , imp.imf_value_date
           , imp.imf_description
           , imp.acs_financial_account_id
           , (select acf.acc_number
                from acs_account acf
               where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
           , (select de1.des_description_summary
                from acs_description de1
               where de1.acs_account_id = imp.acs_financial_account_id
                 and de1.pc_lang_id = vpc_lang_id) account_fin_descr
           , jou.jou_number
           , ejo.c_etat_journal
           , imp.imf_acs_division_account_id
           , cus.pac_custom_partner_id
           , cus.acs_auxiliary_account_id
           , cus.c_partner_category
           , acc.acc_number acc_number_aux
           , (select de2.des_description_summary
                from acs_description de2
               where de2.acs_account_id = cus.acs_auxiliary_account_id
                 and de2.pc_lang_id = vpc_lang_id) account_aux_descr
           , acc.acs_sub_set_id
           , (select de3.des_description_summary
                from acs_description de3
               where de3.acs_sub_set_id = acc.acs_sub_set_id
                 and de3.pc_lang_id = vpc_lang_id) sub_set_descr
           , aux.c_type_account
           , per.per_name
           , per.per_forename
           , per.per_short_name
           , per.per_activity
           , per.per_key1
           , (select adr.add_format
                from pac_address adr
               where adr.pac_person_id = cus.pac_custom_partner_id
                 and adr.add_principal = '1') add_format
        from pac_person per
           , acs_auxiliary_account aux
           , pac_custom_partner cus
           , acs_financial_account fin
           , act_financial_imputation imp
           , act_etat_journal ejo
           , act_journal jou
           , acs_fin_acc_s_payment pmm
           , act_expiry exp
           , acj_catalogue_document cat
           , act_document doc
           , act_part_imputation par
           , acs_account acc
           , acj_sub_set_cat sub
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
       where par.act_document_id = doc.act_document_id
         and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
         and cat.c_type_catalogue <> '8'
         and   -- Transaction de relance
             par.act_part_imputation_id = exp.act_part_imputation_id
         and exp_calc_net + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD') ) = 1
         and exp.acs_fin_acc_s_payment_id = pmm.acs_fin_acc_s_payment_id(+)
         and doc.act_journal_id = jou.act_journal_id
         and doc.act_journal_id = ejo.act_journal_id
         and ejo.c_sub_set = 'REC'
         and exp.act_part_imputation_id = imp.act_part_imputation_id
         and imp.act_det_payment_id is null
         and imp.acs_auxiliary_account_id is not null
         and imp.acs_financial_account_id = fin.acs_financial_account_id
         and (   imp.imf_transaction_date <= to_date(procparam_3, 'YYYYMMDD')
              or procparam_3 is null)
         and fin.fin_collective = 1
         and acc.acc_number >= procparam_1
         and acc.acc_number <= procparam_2
         and (   acc.acs_sub_set_id = procparam_0
              or procparam_0 is null)
         and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
         and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || par.acs_financial_currency_id || ',') ) > 0
              or procparam_7 is null)
         and par.pac_custom_partner_id = cus.pac_custom_partner_id
         and cus.acs_auxiliary_account_id = acc.acs_account_id
         and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
         and cus.pac_custom_partner_id = per.pac_person_id
         and sub.acj_catalogue_document_id = doc.acj_catalogue_document_id
         and sub.c_sub_set = 'REC'
         and decode(sub.C_TYPE_CUMUL
                  , 'INT', decode(parameter_13, '1', 1, 0)
                  , 'EXT', decode(parameter_14, '1', 1, 0)
                  , 'PRE', decode(parameter_15, '1', 1, 0)
                  , 'ENG', decode(parameter_16, '1', 1, 0)
                  , 0
                   ) = 1;
  end if;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
 if (procparam_3 is null) then
    open arefcursor for
      select par.par_document
           , par.par_blocked_document
           , par.acs_acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
           , par.acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_me
           , doc.doc_number
           , cat.c_type_catalogue
           , sub.c_type_cumul
           , exp.act_expiry_id
           , exp.act_document_id
           , exp.act_part_imputation_id
           , exp.c_status_expiry
           , exp.exp_adapted
           , to_char(exp.exp_adapted, 'YYYY-IW') week_year
           , to_char(exp.exp_adapted, 'YYYY-MM') month_year
           , to_char(exp.exp_adapted, 'YYYY') year
           , exp.exp_calculated
           , exp.exp_amount_lc
           , exp.exp_amount_fc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) discount_lc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 0) discount_fc
           , act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 1) det_paied_lc
           , act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0) det_paied_fc
           , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 1) solde_exp_lc
           , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0) solde_exp_fc
           , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, sysdate, 0)
                                                    , par.acs_financial_currency_id
                                                    , par.acs_acs_financial_currency_id
                                                    , sysdate
                                                    , procparam_6
                                                     ) solde_reeval_lc
           , exp.exp_slice
           , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
           , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
           , exp.acs_fin_acc_s_payment_id
           , pmm.acs_payment_method_id
           , (select pme.c_method_category
                from acs_payment_method pme
               where pme.acs_payment_method_id = pmm.acs_payment_method_id) c_method_category
           , (select de4.des_description_summary
                from acs_description de4
               where de4.acs_payment_method_id = pmm.acs_payment_method_id
                 and de4.pc_lang_id = vpc_lang_id) payment_method_descr
           , imp.acs_period_id
           , imp.imf_transaction_date
           , imp.imf_value_date
           , imp.imf_description
           , imp.acs_financial_account_id
           , (select acf.acc_number
                from acs_account acf
               where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
           , (select de1.des_description_summary
                from acs_description de1
               where de1.acs_account_id = imp.acs_financial_account_id
                 and de1.pc_lang_id = vpc_lang_id) account_fin_descr
           , jou.jou_number
           , ejo.c_etat_journal
           , imp.imf_acs_division_account_id
           , cus.pac_custom_partner_id
           , cus.acs_auxiliary_account_id
           , cus.c_partner_category
           , acc.acc_number acc_number_aux
           , (select de2.des_description_summary
                from acs_description de2
               where de2.acs_account_id = cus.acs_auxiliary_account_id
                 and de2.pc_lang_id = vpc_lang_id) account_aux_descr
           , acc.acs_sub_set_id
           , (select de3.des_description_summary
                from acs_description de3
               where de3.acs_sub_set_id = acc.acs_sub_set_id
                 and de3.pc_lang_id = vpc_lang_id) sub_set_descr
           , aux.c_type_account
           , per.per_name
           , per.per_forename
           , per.per_short_name
           , per.per_activity
           , per.per_key1
           , (select adr.add_format
                from pac_address adr
               where adr.pac_person_id = cus.pac_custom_partner_id
                 and adr.add_principal = '1') add_format
        from pac_person per
           , acs_auxiliary_account aux
           , pac_custom_partner cus
           , acs_financial_account fin
           , act_financial_imputation imp
           , act_etat_journal ejo
           , act_journal jou
           , acs_fin_acc_s_payment pmm
           , act_expiry exp
           , acj_catalogue_document cat
           , act_document doc
           , act_part_imputation par
           , acs_account acc
           , acj_sub_set_cat sub
       where par.act_document_id = doc.act_document_id
         and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
         and cat.c_type_catalogue <> '8'
         and   -- Transaction de relance
             par.act_part_imputation_id = exp.act_part_imputation_id
         and exp_calc_net + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, sysdate) = 1
         and exp.acs_fin_acc_s_payment_id = pmm.acs_fin_acc_s_payment_id(+)
         and doc.act_journal_id = jou.act_journal_id
         and doc.act_journal_id = ejo.act_journal_id
         and ejo.c_sub_set = 'REC'
         and exp.act_part_imputation_id = imp.act_part_imputation_id
         and imp.act_det_payment_id is null
         and imp.acs_auxiliary_account_id is not null
         and imp.acs_financial_account_id = fin.acs_financial_account_id
         and exp.c_status_expiry = 0
         and fin.fin_collective = 1
         and acc.acc_number >= procparam_1
         and acc.acc_number <= procparam_2
         and (   acc.acs_sub_set_id = procparam_0
              or procparam_0 is null)
         and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || par.acs_financial_currency_id || ',') ) > 0
              or procparam_7 is null)
         and par.pac_custom_partner_id = cus.pac_custom_partner_id
         and cus.acs_auxiliary_account_id = acc.acs_account_id
         and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
         and cus.pac_custom_partner_id = per.pac_person_id
         and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
         and sub.c_sub_set = 'REC'
         and decode(sub.C_TYPE_CUMUL
                  , 'INT', decode(parameter_13, '1', 1, 0)
                  , 'EXT', decode(parameter_14, '1', 1, 0)
                  , 'PRE', decode(parameter_15, '1', 1, 0)
                  , 'ENG', decode(parameter_16, '1', 1, 0)
                  , 0
                   ) = 1;
  else
    open arefcursor for
      select par.par_document
           , par.par_blocked_document
           , par.acs_acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
           , par.acs_financial_currency_id
           , (select cub.currency
                from pcs.pc_curr cub
                   , acs_financial_currency cfb
               where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                 and cub.pc_curr_id = cfb.pc_curr_id) currency_me
           , doc.doc_number
           , cat.c_type_catalogue
           , sub.c_type_cumul
           , exp.act_expiry_id
           , exp.act_document_id
           , exp.act_part_imputation_id
           , exp.c_status_expiry
           , exp.exp_adapted
           , to_char(exp.exp_adapted, 'YYYY-IW') week_year
           , to_char(exp.exp_adapted, 'YYYY-MM') month_year
           , to_char(exp.exp_adapted, 'YYYY') year
           , exp.exp_calculated
           , exp.exp_amount_lc
           , exp.exp_amount_fc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, to_date(procparam_3, 'YYYYMMDD'), 1) discount_lc
           , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, to_date(procparam_3, 'YYYYMMDD'), 0) discount_fc
           , act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 1) det_paied_lc
           , act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0) det_paied_fc
           , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 1) solde_exp_lc
           , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0) solde_exp_fc
           , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD'), 0)
                                                    , par.acs_financial_currency_id
                                                    , par.acs_acs_financial_currency_id
                                                    , to_date(procparam_3, 'YYYYMMDD')
                                                    , procparam_6
                                                     ) solde_reeval_lc
           , exp.exp_slice
           , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
           , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
           , exp.acs_fin_acc_s_payment_id
           , pmm.acs_payment_method_id
           , (select pme.c_method_category
                from acs_payment_method pme
               where pme.acs_payment_method_id = pmm.acs_payment_method_id) c_method_category
           , (select de4.des_description_summary
                from acs_description de4
               where de4.acs_payment_method_id = pmm.acs_payment_method_id
                 and de4.pc_lang_id = vpc_lang_id) payment_method_descr
           , imp.acs_period_id
           , imp.imf_transaction_date
           , imp.imf_value_date
           , imp.imf_description
           , imp.acs_financial_account_id
           , (select acf.acc_number
                from acs_account acf
               where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
           , (select de1.des_description_summary
                from acs_description de1
               where de1.acs_account_id = imp.acs_financial_account_id
                 and de1.pc_lang_id = vpc_lang_id) account_fin_descr
           , jou.jou_number
           , ejo.c_etat_journal
           , imp.imf_acs_division_account_id
           , cus.pac_custom_partner_id
           , cus.acs_auxiliary_account_id
           , cus.c_partner_category
           , acc.acc_number acc_number_aux
           , (select de2.des_description_summary
                from acs_description de2
               where de2.acs_account_id = cus.acs_auxiliary_account_id
                 and de2.pc_lang_id = vpc_lang_id) account_aux_descr
           , acc.acs_sub_set_id
           , (select de3.des_description_summary
                from acs_description de3
               where de3.acs_sub_set_id = acc.acs_sub_set_id
                 and de3.pc_lang_id = vpc_lang_id) sub_set_descr
           , aux.c_type_account
           , per.per_name
           , per.per_forename
           , per.per_short_name
           , per.per_activity
           , per.per_key1
           , (select adr.add_format
                from pac_address adr
               where adr.pac_person_id = cus.pac_custom_partner_id
                 and adr.add_principal = '1') add_format
        from pac_person per
           , acs_auxiliary_account aux
           , pac_custom_partner cus
           , acs_financial_account fin
           , act_financial_imputation imp
           , act_etat_journal ejo
           , act_journal jou
           , acs_fin_acc_s_payment pmm
           , act_expiry exp
           , acj_catalogue_document cat
           , act_document doc
           , act_part_imputation par
           , acs_account acc
           , acj_sub_set_cat sub
       where par.act_document_id = doc.act_document_id
         and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
         and cat.c_type_catalogue <> '8'
         and   -- Transaction de relance
             par.act_part_imputation_id = exp.act_part_imputation_id
         and exp_calc_net + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, to_date(procparam_3, 'YYYYMMDD') ) = 1
         and exp.acs_fin_acc_s_payment_id = pmm.acs_fin_acc_s_payment_id(+)
         and doc.act_journal_id = jou.act_journal_id
         and doc.act_journal_id = ejo.act_journal_id
         and ejo.c_sub_set = 'REC'
         and exp.act_part_imputation_id = imp.act_part_imputation_id
         and imp.act_det_payment_id is null
         and imp.acs_auxiliary_account_id is not null
         and imp.acs_financial_account_id = fin.acs_financial_account_id
         and (   imp.imf_transaction_date <= to_date(procparam_3, 'YYYYMMDD')
              or procparam_3 is null)
         and fin.fin_collective = 1
         and acc.acc_number >= procparam_1
         and acc.acc_number <= procparam_2
         and (   acc.acs_sub_set_id = procparam_0
              or procparam_0 is null)
         and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || par.acs_financial_currency_id || ',') ) > 0
              or procparam_7 is null)
         and par.pac_custom_partner_id = cus.pac_custom_partner_id
         and cus.acs_auxiliary_account_id = acc.acs_account_id
         and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
         and cus.pac_custom_partner_id = per.pac_person_id
         and sub.acj_catalogue_document_id = doc.acj_catalogue_document_id
         and sub.c_sub_set = 'REC'
         and decode(sub.C_TYPE_CUMUL
                  , 'INT', decode(parameter_13, '1', 1, 0)
                  , 'EXT', decode(parameter_14, '1', 1, 0)
                  , 'PRE', decode(parameter_15, '1', 1, 0)
                  , 'ENG', decode(parameter_16, '1', 1, 0)
                  , 0
                   ) = 1;
  end if;
  end if;
end RPT_ACR_AGED_CUSTOMER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_AGED_SUPPLIER" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
* description used for report ACR_AGED_SUPPLIER (Ech¡§|anciers fournisseurs)

* @author SDO 2003
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param procparam_0    Acs_sub_set_ID       ACS_SUB_SET_ID
* @param procparam_1    Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2    Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_3    Date r¡§|f¡§|rence       Date pour le calcul des escomptes et des r¡§|¡§|valuations
* @param procparam_4    Division_ID (List) NULL = All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5    Collectiv_ID (List)  '' = All sinon liste des ID
* @param procparam_6    Type de cours        1 : Cours du jour (par d¡§|faut)
                                            2 : Cours d'¡§|valuation
                                            3 : Cours d'inventaire
                                            4 : Cours de bouclement
                                            5 : Cours de facturation
* @param procparam_7    Currency_ID List)   '' = All sinon liste des ID   (ACS_FINANCIAL_CURRENCY_ID)
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
begin
  if (procuser_lanid is not null) and (pc_user_id is not null)  then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  if (procparam_3 is null) then
    open aRefCursor for
      select PAR.PAR_DOCUMENT
           , PAR.PAR_BLOCKED_DOCUMENT
           , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , PAR.ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
           , DOC.DOC_NUMBER
           , CAT.C_TYPE_CATALOGUE
           , (select sub.c_type_cumul
                from acj_sub_set_cat sub
               where doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
                 and sub.c_sub_set = 'PAY') C_TYPE_CUMUL
           , exp.ACT_EXPIRY_ID
           , exp.ACT_DOCUMENT_ID
           , exp.ACT_PART_IMPUTATION_ID
           , exp.C_STATUS_EXPIRY
           , exp.EXP_ADAPTED
           , to_char(exp.EXP_ADAPTED, 'YYYY-IW') WEEK_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY-MM') MONTH_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY') year
           , exp.EXP_CALCULATED
           , exp.EXP_AMOUNT_LC
           , exp.EXP_AMOUNT_FC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) DISCOUNT_LC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 0) DISCOUNT_FC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
           , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
           , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
           , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0)
                                                    , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                    , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                    , sysdate
                                                    , procparam_6
                                                     ) SOLDE_REEVAL_LC
           , exp.EXP_SLICE
           , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
           , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
           , exp.ACS_FIN_ACC_S_PAYMENT_ID
           , PMM.ACS_PAYMENT_METHOD_ID
           , (select PME.C_METHOD_CATEGORY
                from ACS_PAYMENT_METHOD PME
               where PME.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID) C_METHOD_CATEGORY
           , (select DE4.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE4
               where DE4.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID
                 and DE4.PC_LANG_ID = vpc_lang_id) PAYMENT_METHOD_DESCR
           , IMP.ACS_PERIOD_ID
           , IMP.IMF_TRANSACTION_DATE
           , IMP.IMF_VALUE_DATE
           , IMP.IMF_DESCRIPTION
           , IMP.ACS_FINANCIAL_ACCOUNT_ID
           , (select ACF.ACC_NUMBER
                from ACS_ACCOUNT ACF
               where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
           , (select DE1.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE1
               where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                 and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
           , JOU.JOU_NUMBER
           , EJO.C_ETAT_JOURNAL
           , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           , SUP.PAC_SUPPLIER_PARTNER_ID
           , SUP.ACS_AUXILIARY_ACCOUNT_ID
           , SUP.C_PARTNER_CATEGORY
           , ACC.ACC_NUMBER ACC_NUMBER_AUX
           , (select DE2.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE2
               where DE2.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                 and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
           , ACC.ACS_SUB_SET_ID
           , (select DE3.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE3
               where DE3.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                 and DE3.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
           , AUX.C_TYPE_ACCOUNT
           , PER.PER_NAME
           , PER.PER_FORENAME
           , PER.PER_SHORT_NAME
           , PER.PER_ACTIVITY
           , PER.PER_KEY1
           , (select ADR.ADD_FORMAT
                from PAC_ADDRESS ADR
               where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                 and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
        from PAC_PERSON PER
           , ACS_AUXILIARY_ACCOUNT AUX
           , PAC_SUPPLIER_PARTNER SUP
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_FINANCIAL_IMPUTATION IMP
           , ACT_ETAT_JOURNAL EJO
           , ACT_JOURNAL JOU
           , ACS_FIN_ACC_S_PAYMENT PMM
           , ACT_EXPIRY exp
           , ACJ_CATALOGUE_DOCUMENT CAT
           , ACT_DOCUMENT DOC
           , ACT_PART_IMPUTATION PAR
           , ACS_ACCOUNT ACC
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
      where  PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
         and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
         and CAT.C_TYPE_CATALOGUE <> '8'
         and   -- Transaction de relance
             PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
         and EXP_CALC_NET + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, sysdate) = 1
         and exp.ACS_FIN_ACC_S_PAYMENT_ID = PMM.ACS_FIN_ACC_S_PAYMENT_ID(+)
         and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
         and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
         and EJO.C_SUB_SET = 'PAY'
         and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
         and IMP.ACT_DET_PAYMENT_ID is null
         and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
         and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and exp.C_STATUS_EXPIRY = 0
         and FIN.FIN_COLLECTIVE = 1
         and ACC.ACC_NUMBER >= procparam_1
         and ACC.ACC_NUMBER <= procparam_2
         and (   ACC.ACS_SUB_SET_ID = procparam_0
              or procparam_0 is null)
         and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
         and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || PAR.ACS_FINANCIAL_CURRENCY_ID || ',') ) > 0
              or procparam_7 is null)
         and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
         and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID;
  else
    open aRefCursor for
      select PAR.PAR_DOCUMENT
           , PAR.PAR_BLOCKED_DOCUMENT
           , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , PAR.ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
           , DOC.DOC_NUMBER
           , CAT.C_TYPE_CATALOGUE
           , (select sub.c_type_cumul
                from acj_sub_set_cat sub
               where doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
                 and sub.c_sub_set = 'PAY') C_TYPE_CUMUL
           , exp.ACT_EXPIRY_ID
           , exp.ACT_DOCUMENT_ID
           , exp.ACT_PART_IMPUTATION_ID
           , exp.C_STATUS_EXPIRY
           , exp.EXP_ADAPTED
           , to_char(exp.EXP_ADAPTED, 'YYYY-IW') WEEK_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY-MM') MONTH_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY') year
           , exp.EXP_CALCULATED
           , exp.EXP_AMOUNT_LC
           , exp.EXP_AMOUNT_FC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, to_date(procparam_3, 'YYYYMMDD'), 1) DISCOUNT_LC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, to_date(procparam_3, 'YYYYMMDD'), 0) DISCOUNT_FC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 1) DET_PAIED_LC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0) DET_PAIED_FC
           , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 1) SOLDE_EXP_LC
           , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0) SOLDE_EXP_FC
           , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0)
                                                    , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                    , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                    , to_date(procparam_3, 'YYYYMMDD')
                                                    , procparam_6
                                                     ) SOLDE_REEVAL_LC
           , exp.EXP_SLICE
           , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
           , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
           , exp.ACS_FIN_ACC_S_PAYMENT_ID
           , PMM.ACS_PAYMENT_METHOD_ID
           , (select PME.C_METHOD_CATEGORY
                from ACS_PAYMENT_METHOD PME
               where PME.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID) C_METHOD_CATEGORY
           , (select DE4.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE4
               where DE4.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID
                 and DE4.PC_LANG_ID = vpc_lang_id) PAYMENT_METHOD_DESCR
           , IMP.ACS_PERIOD_ID
           , IMP.IMF_TRANSACTION_DATE
           , IMP.IMF_VALUE_DATE
           , IMP.IMF_DESCRIPTION
           , IMP.ACS_FINANCIAL_ACCOUNT_ID
           , (select ACF.ACC_NUMBER
                from ACS_ACCOUNT ACF
               where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
           , (select DE1.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE1
               where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                 and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
           , JOU.JOU_NUMBER
           , EJO.C_ETAT_JOURNAL
           , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           , SUP.PAC_SUPPLIER_PARTNER_ID
           , SUP.ACS_AUXILIARY_ACCOUNT_ID
           , SUP.C_PARTNER_CATEGORY
           , ACC.ACC_NUMBER ACC_NUMBER_AUX
           , (select DE2.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE2
               where DE2.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                 and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
           , ACC.ACS_SUB_SET_ID
           , (select DE3.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE3
               where DE3.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                 and DE3.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
           , AUX.C_TYPE_ACCOUNT
           , PER.PER_NAME
           , PER.PER_FORENAME
           , PER.PER_SHORT_NAME
           , PER.PER_ACTIVITY
           , PER.PER_KEY1
           , (select ADR.ADD_FORMAT
                from PAC_ADDRESS ADR
               where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                 and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
        from PAC_PERSON PER
           , ACS_AUXILIARY_ACCOUNT AUX
           , PAC_SUPPLIER_PARTNER SUP
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_FINANCIAL_IMPUTATION IMP
           , ACT_ETAT_JOURNAL EJO
           , ACT_JOURNAL JOU
           , ACS_FIN_ACC_S_PAYMENT PMM
           , ACT_EXPIRY exp
           , ACJ_CATALOGUE_DOCUMENT CAT
           , ACT_DOCUMENT DOC
           , ACT_PART_IMPUTATION PAR
           , ACS_ACCOUNT ACC
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
      where  PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
         and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
         and CAT.C_TYPE_CATALOGUE <> '8'
         and   -- Transaction de relance
             PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
         and EXP_CALC_NET + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD') ) = 1
         and exp.ACS_FIN_ACC_S_PAYMENT_ID = PMM.ACS_FIN_ACC_S_PAYMENT_ID(+)
         and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
         and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
         and EJO.C_SUB_SET = 'PAY'
         and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
         and IMP.ACT_DET_PAYMENT_ID is null
         and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
         and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and (   IMP.IMF_TRANSACTION_DATE <= to_date(procparam_3, 'YYYYMMDD')
              or procparam_3 is null)
         and FIN.FIN_COLLECTIVE = 1
         and ACC.ACC_NUMBER >= procparam_1
         and ACC.ACC_NUMBER <= procparam_2
         and (   ACC.ACS_SUB_SET_ID = procparam_0
              or procparam_0 is null)
         and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
         and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
         and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || PAR.ACS_FINANCIAL_CURRENCY_ID || ',') ) > 0
              or procparam_7 is null)
         and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
         and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID;
  end if;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  if (procparam_3 is null) then
    open aRefCursor for
      select PAR.PAR_DOCUMENT
           , PAR.PAR_BLOCKED_DOCUMENT
           , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , PAR.ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
           , DOC.DOC_NUMBER
           , CAT.C_TYPE_CATALOGUE
           , (select sub.c_type_cumul
                from acj_sub_set_cat sub
               where doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
                 and sub.c_sub_set = 'PAY') C_TYPE_CUMUL
           , exp.ACT_EXPIRY_ID
           , exp.ACT_DOCUMENT_ID
           , exp.ACT_PART_IMPUTATION_ID
           , exp.C_STATUS_EXPIRY
           , exp.EXP_ADAPTED
           , to_char(exp.EXP_ADAPTED, 'YYYY-IW') WEEK_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY-MM') MONTH_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY') year
           , exp.EXP_CALCULATED
           , exp.EXP_AMOUNT_LC
           , exp.EXP_AMOUNT_FC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) DISCOUNT_LC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 0) DISCOUNT_FC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
           , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
           , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
           , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0)
                                                    , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                    , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                    , sysdate
                                                    , procparam_6
                                                     ) SOLDE_REEVAL_LC
           , exp.EXP_SLICE
           , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
           , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
           , exp.ACS_FIN_ACC_S_PAYMENT_ID
           , PMM.ACS_PAYMENT_METHOD_ID
           , (select PME.C_METHOD_CATEGORY
                from ACS_PAYMENT_METHOD PME
               where PME.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID) C_METHOD_CATEGORY
           , (select DE4.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE4
               where DE4.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID
                 and DE4.PC_LANG_ID = vpc_lang_id) PAYMENT_METHOD_DESCR
           , IMP.ACS_PERIOD_ID
           , IMP.IMF_TRANSACTION_DATE
           , IMP.IMF_VALUE_DATE
           , IMP.IMF_DESCRIPTION
           , IMP.ACS_FINANCIAL_ACCOUNT_ID
           , (select ACF.ACC_NUMBER
                from ACS_ACCOUNT ACF
               where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
           , (select DE1.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE1
               where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                 and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
           , JOU.JOU_NUMBER
           , EJO.C_ETAT_JOURNAL
           , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           , SUP.PAC_SUPPLIER_PARTNER_ID
           , SUP.ACS_AUXILIARY_ACCOUNT_ID
           , SUP.C_PARTNER_CATEGORY
           , ACC.ACC_NUMBER ACC_NUMBER_AUX
           , (select DE2.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE2
               where DE2.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                 and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
           , ACC.ACS_SUB_SET_ID
           , (select DE3.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE3
               where DE3.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                 and DE3.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
           , AUX.C_TYPE_ACCOUNT
           , PER.PER_NAME
           , PER.PER_FORENAME
           , PER.PER_SHORT_NAME
           , PER.PER_ACTIVITY
           , PER.PER_KEY1
           , (select ADR.ADD_FORMAT
                from PAC_ADDRESS ADR
               where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                 and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
        from PAC_PERSON PER
           , ACS_AUXILIARY_ACCOUNT AUX
           , PAC_SUPPLIER_PARTNER SUP
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_FINANCIAL_IMPUTATION IMP
           , ACT_ETAT_JOURNAL EJO
           , ACT_JOURNAL JOU
           , ACS_FIN_ACC_S_PAYMENT PMM
           , ACT_EXPIRY exp
           , ACJ_CATALOGUE_DOCUMENT CAT
           , ACT_DOCUMENT DOC
           , ACT_PART_IMPUTATION PAR
           , ACS_ACCOUNT ACC
       --ACJ_SUB_SET_CAT            SUB
      where  PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
         and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
         and CAT.C_TYPE_CATALOGUE <> '8'
         and   -- Transaction de relance
             PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
         and EXP_CALC_NET + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, sysdate) = 1
         and exp.ACS_FIN_ACC_S_PAYMENT_ID = PMM.ACS_FIN_ACC_S_PAYMENT_ID(+)
         and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
         and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
         and EJO.C_SUB_SET = 'PAY'
         and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
         and IMP.ACT_DET_PAYMENT_ID is null
         and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
         and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and exp.C_STATUS_EXPIRY = 0
         and FIN.FIN_COLLECTIVE = 1
         and ACC.ACC_NUMBER >= procparam_1
         and ACC.ACC_NUMBER <= procparam_2
         and (   ACC.ACS_SUB_SET_ID = procparam_0
              or procparam_0 is null)
         and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || PAR.ACS_FINANCIAL_CURRENCY_ID || ',') ) > 0
              or procparam_7 is null)
         and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
         and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID;
  else
    open aRefCursor for
      select PAR.PAR_DOCUMENT
           , PAR.PAR_BLOCKED_DOCUMENT
           , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
           , PAR.ACS_FINANCIAL_CURRENCY_ID
           , (select CUB.CURRENCY
                from PCS.PC_CURR CUB
                   , ACS_FINANCIAL_CURRENCY CFB
               where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                 and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
           , DOC.DOC_NUMBER
           , CAT.C_TYPE_CATALOGUE
           , (select sub.c_type_cumul
                from acj_sub_set_cat sub
               where doc.acj_catalogue_document_id = sub.acj_catalogue_document_id
                 and sub.c_sub_set = 'PAY') C_TYPE_CUMUL
           , exp.ACT_EXPIRY_ID
           , exp.ACT_DOCUMENT_ID
           , exp.ACT_PART_IMPUTATION_ID
           , exp.C_STATUS_EXPIRY
           , exp.EXP_ADAPTED
           , to_char(exp.EXP_ADAPTED, 'YYYY-IW') WEEK_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY-MM') MONTH_YEAR
           , to_char(exp.EXP_ADAPTED, 'YYYY') year
           , exp.EXP_CALCULATED
           , exp.EXP_AMOUNT_LC
           , exp.EXP_AMOUNT_FC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, to_date(procparam_3, 'YYYYMMDD'), 1) DISCOUNT_LC
           , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, to_date(procparam_3, 'YYYYMMDD'), 0) DISCOUNT_FC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 1) DET_PAIED_LC
           , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0) DET_PAIED_FC
           , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 1) SOLDE_EXP_LC
           , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0) SOLDE_EXP_FC
           , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD'), 0)
                                                    , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                    , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                    , to_date(procparam_3, 'YYYYMMDD')
                                                    , procparam_6
                                                     ) SOLDE_REEVAL_LC
           , exp.EXP_SLICE
           , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
           , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
           , exp.ACS_FIN_ACC_S_PAYMENT_ID
           , PMM.ACS_PAYMENT_METHOD_ID
           , (select PME.C_METHOD_CATEGORY
                from ACS_PAYMENT_METHOD PME
               where PME.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID) C_METHOD_CATEGORY
           , (select DE4.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE4
               where DE4.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID
                 and DE4.PC_LANG_ID = vpc_lang_id) PAYMENT_METHOD_DESCR
           , IMP.ACS_PERIOD_ID
           , IMP.IMF_TRANSACTION_DATE
           , IMP.IMF_VALUE_DATE
           , IMP.IMF_DESCRIPTION
           , IMP.ACS_FINANCIAL_ACCOUNT_ID
           , (select ACF.ACC_NUMBER
                from ACS_ACCOUNT ACF
               where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
           , (select DE1.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE1
               where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                 and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
           , JOU.JOU_NUMBER
           , EJO.C_ETAT_JOURNAL
           , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           , SUP.PAC_SUPPLIER_PARTNER_ID
           , SUP.ACS_AUXILIARY_ACCOUNT_ID
           , SUP.C_PARTNER_CATEGORY
           , ACC.ACC_NUMBER ACC_NUMBER_AUX
           , (select DE2.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE2
               where DE2.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                 and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
           , ACC.ACS_SUB_SET_ID
           , (select DE3.DES_DESCRIPTION_SUMMARY
                from ACS_DESCRIPTION DE3
               where DE3.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                 and DE3.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
           , AUX.C_TYPE_ACCOUNT
           , PER.PER_NAME
           , PER.PER_FORENAME
           , PER.PER_SHORT_NAME
           , PER.PER_ACTIVITY
           , PER.PER_KEY1
           , (select ADR.ADD_FORMAT
                from PAC_ADDRESS ADR
               where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                 and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
        from PAC_PERSON PER
           , ACS_AUXILIARY_ACCOUNT AUX
           , PAC_SUPPLIER_PARTNER SUP
           , ACS_FINANCIAL_ACCOUNT FIN
           , ACT_FINANCIAL_IMPUTATION IMP
           , ACT_ETAT_JOURNAL EJO
           , ACT_JOURNAL JOU
           , ACS_FIN_ACC_S_PAYMENT PMM
           , ACT_EXPIRY exp
           , ACJ_CATALOGUE_DOCUMENT CAT
           , ACT_DOCUMENT DOC
           , ACT_PART_IMPUTATION PAR
           , ACS_ACCOUNT ACC
      where  PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
         and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
         and CAT.C_TYPE_CATALOGUE <> '8'
         and   -- Transaction de relance
             PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
         and EXP_CALC_NET + 0 = 1
         and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, to_date(procparam_3, 'YYYYMMDD') ) = 1
         and exp.ACS_FIN_ACC_S_PAYMENT_ID = PMM.ACS_FIN_ACC_S_PAYMENT_ID(+)
         and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
         and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
         and EJO.C_SUB_SET = 'PAY'
         and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
         and IMP.ACT_DET_PAYMENT_ID is null
         and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
         and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
         and (   IMP.IMF_TRANSACTION_DATE <= to_date(procparam_3, 'YYYYMMDD')
              or procparam_3 is null)
         and FIN.FIN_COLLECTIVE = 1
         and ACC.ACC_NUMBER >= procparam_1
         and ACC.ACC_NUMBER <= procparam_2
         and (   ACC.ACS_SUB_SET_ID = procparam_0
              or procparam_0 is null)
         and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
              or procparam_5 is null)
         and (   instr(',' || procparam_7 || ',', to_char(',' || PAR.ACS_FINANCIAL_CURRENCY_ID || ',') ) > 0
              or procparam_7 is null)
         and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
         and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
         and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID;
  end if;
  end if;
end RPT_ACR_AGED_SUPPLIER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     varchar2
, parameter_1    in     number
, parameter_4    in     number
, parameter_5    in     number
, parameter_8    in     number
, parameter_9    in     number
, parameter_12   in     number
, parameter_14   in     varchar2
, parameter_24   in     varchar2
, parameter_29   in     varchar2
, parameter_30   in     varchar2
, parameter_31   in     varchar2
, parameter_32   in     varchar2
, parameter_33   in     varchar2
, pc_user_id     in     pcs.pc_user.pc_user_id%type
, pc_comp_id     in     pcs.pc_comp.pc_comp_id%type
, pc_conli_id    in     pcs.pc_conli.pc_conli_id%type
)
/**
* description used for report ACR_BALANCE_THREE_COL_RPT (Ech???¡ì?|anciers fournisseurs)

*@CREATED MZHU 17.09.2007
*@lastUpdate SMA 22.08.2013
*@PUBLIC
*@param parameter_0:  Classification ID       CLASSIFICATION_ID
*@param parameter_1:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param parameter_4:  Budget version id       ACB_BUDGET_VERSION_ID
*@param parameter_5:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param parameter_8:  Budget version id       ACB_BUDGET_VERSION_ID
*@param parameter_9:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param parameter_12: Budget version id       ACB_BUDGET_VERSION_ID
*@param parameter_14: Budget version id       Division-ID R?¡ì|f (list) / # = all
*@param parameter_24: Budget version id       Division-ID Comp1 (list) / # = all
*@param parameter_29: Budget version id       Division-ID Comp2 (list) / # = all
*@param parameter_30  Count division
*@param parameter_31  Count division
*@param parameter_32  Count division
*@param parameter_33  Impression soldes à 0   CHECK_NULL_BALANCE
*/
is
  vpc_lang_id         PCS.PC_LANG.PC_LANG_ID%type     := null;
  vpc_user_id         PCS.PC_USER.PC_USER_ID%type     := null;
  vpc_comp_id         PCS.PC_COMP.PC_COMP_ID%type     := null;
  vpc_conli_id        PCS.PC_CONLI.PC_CONLI_ID%type   := null;
  v_fye_no_exercice   number(9);
  v_fye_no_exercice_1 number(9);
  v_fye_no_exercice_2 number(9);
  c_fye_no_exercice   number(2);
  c_fye_no_exercice_1 number(2);
  c_fye_no_exercice_2 number(2);
  v_currency          varchar2(5 char);
  v_ver_number        varchar2(30 char);
  v_ver_number_1      varchar2(30 char);
  v_ver_number_2      varchar2(30 char);
  c_ver_number        number(2);
  c_ver_number_1      number(2);
  c_ver_number_2      number(2);
  v_div_ref           varchar2(4000 char);
  v_div_comp1         varchar2(4000 char);
  v_div_comp2         varchar2(4000 char);
begin
  if parameter_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
    vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
    vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
    vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
    vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  v_fye_no_exercice    := rpt_functions.getfinancialyearno(parameter_1);
  v_fye_no_exercice_1  := rpt_functions.getfinancialyearno(parameter_5);
  v_fye_no_exercice_2  := rpt_functions.getfinancialyearno(parameter_9);

  select CUR.CURRENCY
    into v_currency
    from ACS_FINANCIAL_CURRENCY ACS
       , PCS.PC_CURR CUR
   where ACS.PC_CURR_ID = CUR.PC_CURR_ID
     and ACS.FIN_LOCAL_CURRENCY = 1;

  v_ver_number         := RPT_FUNCTIONS.getbudgetversion(parameter_4);
  v_ver_number_1       := RPT_FUNCTIONS.getbudgetversion(parameter_8);
  v_ver_number_2       := RPT_FUNCTIONS.getbudgetversion(parameter_12);

  if parameter_30 = '1' then
    v_div_ref  := RPT_FUNCTIONS.getaccountnumberlist(parameter_14);
  end if;

  if parameter_31 = '1' then
    v_div_comp1  := RPT_FUNCTIONS.getaccountnumberlist(parameter_24);
  end if;

  if parameter_32 = '1' then
    v_div_comp2  := RPT_FUNCTIONS.getaccountnumberlist(parameter_29);
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if (upper(PCS.PC_CONFIG.GetConfig('ACJ_USER_DIV_REPORTING') ) = 'TRUE') then
      open arefcursor for
        select VER.ACB_BUDGET_VERSION_ID
             , PAM.PER_AMOUNT_D
             , PAM.PER_AMOUNT_C
             , ACC.ACS_ACCOUNT_ID
             , ACC.ACC_NUMBER DIVISION_ACC_NUMBER
             , PER.ACS_FINANCIAL_YEAR_ID
             , PER.PER_NO_PERIOD
             , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
             , TOT.TOT_DEBIT_LC
             , TOT.TOT_CREDIT_LC
             , TOT.ACS_AUXILIARY_ACCOUNT_ID
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , VAC.ACS_FINANCIAL_ACCOUNT_ID
             , VAC.ISFINACCOUNTINME
             , CLA.CLA_DESCR
             , V_DIV_REF DIV_REF
             , V_DIV_COMP1 DIV_COMP1
             , V_DIV_COMP2 DIV_COMP2
             , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
             , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
             , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
             , V_CURRENCY CURRENCY
             , V_VER_NUMBER VER_NUMBER
             , V_VER_NUMBER_1 VER_NUMBER_1
             , V_VER_NUMBER_2 VER_NUMBER_2
          from ACB_BUDGET_VERSION VER
             , ACB_GLOBAL_BUDGET GLO
             , ACB_PERIOD_AMOUNT PAM
             , ACS_ACCOUNT ACC
             , ACS_PERIOD PER
             , ACS_PERIOD PER_BUD
             , ACT_TOTAL_BY_PERIOD TOT
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                     , TOT.ACS_DIVISION_ACCOUNT_ID
                     , TOT.ACT_TOTAL_BY_PERIOD_ID id
                     , 'TOT' TYP
                     , PER.ACS_FINANCIAL_YEAR_ID
                     , 0 ACB_BUDGET_VERSION_ID
                  from ACS_FINANCIAL_ACCOUNT ACC
                     , ACT_TOTAL_BY_PERIOD TOT
                     , ACS_PERIOD PER
                 where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                   and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                   and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                union all
                select ACC.ACS_FINANCIAL_ACCOUNT_ID
                     , GLO.ACS_DIVISION_ACCOUNT_ID
                     , AMO.ACB_PERIOD_AMOUNT_ID id
                     , 'BUD' TYP
                     , PER.ACS_FINANCIAL_YEAR_ID
                     , GLO.ACB_BUDGET_VERSION_ID
                  from ACS_FINANCIAL_ACCOUNT ACC
                     , ACB_PERIOD_AMOUNT AMO
                     , ACB_GLOBAL_BUDGET GLO
                     , ACS_PERIOD PER
                     , ACS_FINANCIAL_CURRENCY CUR
                 where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
                   and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
                   and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
                   and CUR.FIN_LOCAL_CURRENCY = 1
                   and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, null) ) AUT
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
           and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
           and VBA.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID(+)
           and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
           and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
           and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
           and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
           and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
           and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and VBA.ACS_FINANCIAL_YEAR_ID in(parameter_1, parameter_5, parameter_9)
           and VBA.ACB_BUDGET_VERSION_ID in(parameter_4, parameter_8, parameter_12)
           and (    (     (    ACC.ACS_ACCOUNT_ID is not null
                           and AUT.column_value is not null)
                     and (ACC.ACS_ACCOUNT_ID = AUT.column_value) )
                or (    ACC.ACS_ACCOUNT_ID is null
                    and AUT.column_value is null
                    and TYP = 'BUD')
               )
        union all
        select 0 ACB_BUDGET_VERSION_ID
             , 0 PER_AMOUNT_D
             , 0 PER_AMOUNT_C
             , null ACS_ACCOUNT_ID
             , null DIVISION_ACC_NUMBER
             , 0 ACS_FINANCIAL_YEAR_ID
             , 0 PER_NO_PERIOD
             , 0 BUD_PER_NO_PERIOD
             , 0 TOT_DEBIT_LC
             , 0 TOT_CREDIT_LC
             , 0 ACS_AUXILIARY_ACCOUNT_ID
             , '' C_TYPE_CUMUL
             , 0 ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , VAC.ACS_FINANCIAL_ACCOUNT_ID
             , VAC.ISFINACCOUNTINME
             , CLA.CLA_DESCR
             , V_DIV_REF DIV_REF
             , V_DIV_COMP1 DIV_COMP1
             , V_DIV_COMP2 DIV_COMP2
             , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
             , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
             , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
             , V_CURRENCY CURRENCY
             , V_VER_NUMBER VER_NUMBER
             , V_VER_NUMBER_1 VER_NUMBER_1
             , V_VER_NUMBER_2 VER_NUMBER_2
          from ACS_ACCOUNT ACC
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and parameter_33 = '1';
    else   -- Config('ACJ_USER_DIV_REPORTING') = 'FALSE'
      open arefcursor for
        select VER.ACB_BUDGET_VERSION_ID
             , PAM.PER_AMOUNT_D
             , PAM.PER_AMOUNT_C
             , ACC.ACS_ACCOUNT_ID
             , ACC.ACC_NUMBER DIVISION_ACC_NUMBER
             , PER.ACS_FINANCIAL_YEAR_ID
             , PER.PER_NO_PERIOD
             , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
             , TOT.TOT_DEBIT_LC
             , TOT.TOT_CREDIT_LC
             , TOT.ACS_AUXILIARY_ACCOUNT_ID
             , TOT.C_TYPE_CUMUL
             , TOT.ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , VAC.ACS_FINANCIAL_ACCOUNT_ID
             , VAC.ISFINACCOUNTINME
             , CLA.CLA_DESCR
             , V_DIV_REF DIV_REF
             , V_DIV_COMP1 DIV_COMP1
             , V_DIV_COMP2 DIV_COMP2
             , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
             , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
             , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
             , V_CURRENCY CURRENCY
             , V_VER_NUMBER VER_NUMBER
             , V_VER_NUMBER_1 VER_NUMBER_1
             , V_VER_NUMBER_2 VER_NUMBER_2
          from ACB_BUDGET_VERSION VER
             , ACB_GLOBAL_BUDGET GLO
             , ACB_PERIOD_AMOUNT PAM
             , ACS_ACCOUNT ACC
             , ACS_PERIOD PER
             , ACS_PERIOD PER_BUD
             , ACT_TOTAL_BY_PERIOD TOT
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                     , TOT.ACS_DIVISION_ACCOUNT_ID
                     , TOT.ACT_TOTAL_BY_PERIOD_ID id
                     , 'TOT' TYP
                     , PER.ACS_FINANCIAL_YEAR_ID
                     , 0 ACB_BUDGET_VERSION_ID
                  from ACS_FINANCIAL_ACCOUNT ACC
                     , ACT_TOTAL_BY_PERIOD TOT
                     , ACS_PERIOD PER
                 where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                   and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                   and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
                union all
                select ACC.ACS_FINANCIAL_ACCOUNT_ID
                     , GLO.ACS_DIVISION_ACCOUNT_ID
                     , AMO.ACB_PERIOD_AMOUNT_ID id
                     , 'BUD' TYP
                     , PER.ACS_FINANCIAL_YEAR_ID
                     , GLO.ACB_BUDGET_VERSION_ID
                  from ACS_FINANCIAL_ACCOUNT ACC
                     , ACB_PERIOD_AMOUNT AMO
                     , ACB_GLOBAL_BUDGET GLO
                     , ACS_PERIOD PER
                     , ACS_FINANCIAL_CURRENCY CUR
                 where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
                   and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
                   and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
                   and CUR.FIN_LOCAL_CURRENCY = 1
                   and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
           and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
           and VBA.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID(+)
           and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
           and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
           and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
           and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
           and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
           and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and VBA.ACS_FINANCIAL_YEAR_ID in(parameter_1, parameter_5, parameter_9)
           and VBA.ACB_BUDGET_VERSION_ID in(parameter_4, parameter_8, parameter_12)
           and (    (    ACC.ACS_ACCOUNT_ID is null
                     and TYP = 'BUD')
                or (ACC.ACS_ACCOUNT_ID is not null) )
        union all
        select 0 ACB_BUDGET_VERSION_ID
             , 0 PER_AMOUNT_D
             , 0 PER_AMOUNT_C
             , null ACS_ACCOUNT_ID
             , null DIVISION_ACC_NUMBER
             , 0 ACS_FINANCIAL_YEAR_ID
             , 0 PER_NO_PERIOD
             , 0 BUD_PER_NO_PERIOD
             , 0 TOT_DEBIT_LC
             , 0 TOT_CREDIT_LC
             , 0 ACS_AUXILIARY_ACCOUNT_ID
             , '' C_TYPE_CUMUL
             , 0 ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , VAC.ACS_FINANCIAL_ACCOUNT_ID
             , VAC.ISFINACCOUNTINME
             , CLA.CLA_DESCR
             , V_DIV_REF DIV_REF
             , V_DIV_COMP1 DIV_COMP1
             , V_DIV_COMP2 DIV_COMP2
             , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
             , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
             , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
             , V_CURRENCY CURRENCY
             , V_VER_NUMBER VER_NUMBER
             , V_VER_NUMBER_1 VER_NUMBER_1
             , V_VER_NUMBER_2 VER_NUMBER_2
          from ACS_ACCOUNT ACC
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and parameter_33 = '1';
    end if;
  else   -- ExistDIVI = 0
    open arefcursor for
      select VER.ACB_BUDGET_VERSION_ID
           , PAM.PER_AMOUNT_D
           , PAM.PER_AMOUNT_C
           , ACC.ACS_ACCOUNT_ID
           , ACC.ACC_NUMBER DIVISION_ACC_NUMBER
           , PER.ACS_FINANCIAL_YEAR_ID
           , PER.PER_NO_PERIOD
           , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
           , TOT.TOT_DEBIT_LC
           , TOT.TOT_CREDIT_LC
           , TOT.ACS_AUXILIARY_ACCOUNT_ID
           , TOT.C_TYPE_CUMUL
           , TOT.ACS_DIVISION_ACCOUNT_ID
           , CFL.NODE01
           , CFL.NODE02
           , CFL.NODE03
           , CFL.NODE04
           , CFL.NODE05
           , CFL.NODE06
           , CFL.NODE07
           , CFL.NODE08
           , CFL.NODE09
           , CFL.NODE10
           , CFL.CLASSIF_LEAF_ID
           , CFL.LEAF_DESCR
           , VAC.ACC_NUMBER
           , VAC.DES_DESCRIPTION_SUMMARY
           , VAC.ACS_FINANCIAL_ACCOUNT_ID
           , VAC.ISFINACCOUNTINME
           , CLA.CLA_DESCR
           , V_DIV_REF DIV_REF
           , V_DIV_COMP1 DIV_COMP1
           , V_DIV_COMP2 DIV_COMP2
           , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
           , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
           , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
           , V_CURRENCY CURRENCY
           , V_VER_NUMBER VER_NUMBER
           , V_VER_NUMBER_1 VER_NUMBER_1
           , V_VER_NUMBER_2 VER_NUMBER_2
        from ACB_BUDGET_VERSION VER
           , ACB_GLOBAL_BUDGET GLO
           , ACB_PERIOD_AMOUNT PAM
           , ACS_ACCOUNT ACC
           , ACS_PERIOD PER
           , ACS_PERIOD PER_BUD
           , ACT_TOTAL_BY_PERIOD TOT
           , CLASSIF_FLAT CFL
           , CLASSIFICATION CLA
           , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                   , TOT.ACS_DIVISION_ACCOUNT_ID
                   , TOT.ACT_TOTAL_BY_PERIOD_ID id
                   , 'TOT' TYP
                   , PER.ACS_FINANCIAL_YEAR_ID
                   , 0 ACB_BUDGET_VERSION_ID
                from ACS_FINANCIAL_ACCOUNT ACC
                   , ACT_TOTAL_BY_PERIOD TOT
                   , ACS_PERIOD PER
               where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
                 and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
                 and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
              union all
              select ACC.ACS_FINANCIAL_ACCOUNT_ID
                   , GLO.ACS_DIVISION_ACCOUNT_ID
                   , AMO.ACB_PERIOD_AMOUNT_ID id
                   , 'BUD' TYP
                   , PER.ACS_FINANCIAL_YEAR_ID
                   , GLO.ACB_BUDGET_VERSION_ID
                from ACS_FINANCIAL_ACCOUNT ACC
                   , ACB_PERIOD_AMOUNT AMO
                   , ACB_GLOBAL_BUDGET GLO
                   , ACS_PERIOD PER
                   , ACS_FINANCIAL_CURRENCY CUR
               where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
                 and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
                 and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
                 and CUR.FIN_LOCAL_CURRENCY = 1
                 and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
           , (select CLA.CLASSIFICATION_ID
                from CLASSIFICATION CLA
                   , CLASSIF_TABLES TAB
               where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                 and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
           , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                   , ACS_ACCOUNT.ACC_NUMBER
                   , ACS_DESCRIPTION.PC_LANG_ID
                   , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                   , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                from ACS_DESCRIPTION
                   , ACS_ACCOUNT
                   , ACS_FINANCIAL_ACCOUNT
                   , ACS_SUB_SET
               where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                 and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
       where VAC.PC_LANG_ID = vpc_lang_id
         and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
         and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
         and CFL.PC_LANG_ID = vpc_lang_id
         and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
         and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
         and VBA.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID(+)
         and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
         and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
         and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
         and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
         and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
         and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
         and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
         and VCL.CLASSIFICATION_ID = to_number(parameter_0)
         and VBA.ACS_FINANCIAL_YEAR_ID in(parameter_1, parameter_5, parameter_9)
         and VBA.ACB_BUDGET_VERSION_ID in(parameter_4, parameter_8, parameter_12)
      union all
      select 0 ACB_BUDGET_VERSION_ID
           , 0 PER_AMOUNT_D
           , 0 PER_AMOUNT_C
           , null ACS_ACCOUNT_ID
           , null DIVISION_ACC_NUMBER
           , 0 ACS_FINANCIAL_YEAR_ID
           , 0 PER_NO_PERIOD
           , 0 BUD_PER_NO_PERIOD
           , 0 TOT_DEBIT_LC
           , 0 TOT_CREDIT_LC
           , 0 ACS_AUXILIARY_ACCOUNT_ID
           , '' C_TYPE_CUMUL
           , 0 ACS_DIVISION_ACCOUNT_ID
           , CFL.NODE01
           , CFL.NODE02
           , CFL.NODE03
           , CFL.NODE04
           , CFL.NODE05
           , CFL.NODE06
           , CFL.NODE07
           , CFL.NODE08
           , CFL.NODE09
           , CFL.NODE10
           , CFL.CLASSIF_LEAF_ID
           , CFL.LEAF_DESCR
           , VAC.ACC_NUMBER
           , VAC.DES_DESCRIPTION_SUMMARY
           , VAC.ACS_FINANCIAL_ACCOUNT_ID
           , VAC.ISFINACCOUNTINME
           , CLA.CLA_DESCR
           , V_DIV_REF DIV_REF
           , V_DIV_COMP1 DIV_COMP1
           , V_DIV_COMP2 DIV_COMP2
           , V_FYE_NO_EXERCICE FYE_NO_EXERCICE
           , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
           , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
           , V_CURRENCY CURRENCY
           , V_VER_NUMBER VER_NUMBER
           , V_VER_NUMBER_1 VER_NUMBER_1
           , V_VER_NUMBER_2 VER_NUMBER_2
        from ACS_ACCOUNT ACC
           , CLASSIF_FLAT CFL
           , CLASSIFICATION CLA
           , (select CLA.CLASSIFICATION_ID
                from CLASSIFICATION CLA
                   , CLASSIF_TABLES TAB
               where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                 and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
           , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                   , ACS_ACCOUNT.ACC_NUMBER
                   , ACS_DESCRIPTION.PC_LANG_ID
                   , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                   , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                from ACS_DESCRIPTION
                   , ACS_ACCOUNT
                   , ACS_FINANCIAL_ACCOUNT
                   , ACS_SUB_SET
               where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                 and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
       where VAC.PC_LANG_ID = vpc_lang_id
         and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
         and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
         and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
         and CFL.PC_LANG_ID = vpc_lang_id
         and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
         and VCL.CLASSIFICATION_ID = to_number(parameter_0)
         and parameter_33 = '1';
  end if;
end RPT_ACR_BALANCE_3_COL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL_BE" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     number
, parameter_4    in     number
, parameter_5    in     number
, parameter_8    in     number
, parameter_9    in     number
, parameter_12   in     number
, parameter_33   in     varchar2
, account_from   in     varchar2
, account_to     in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
*Description used for report ACR_BALANCE_THREE_COL_BE / ACR_BALANCE_THREE_COL_BE_RECAP /ACR_BUDGET_BE / ACR_BUDGET_RECAP_BE
*replace procedure ACR_BALANCE_3_COL_BE_RPT
*@created MZHU 06.06.2007 -- PYB dec 2008 (ajout des param 1-12)
*@lastUpdate SMA 22.08.2013
*@public
*@param parameter_0:  Classification ID      (CLASSIFICATION_ID)
*@param parameter_1:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param parameter_4:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param parameter_5:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param parameter_8:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param parameter_9:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param parameter_12: Budget version id      (ACB_BUDGET_VERSION_ID)
*@param parameter_33  Impression soldes à 0   CHECK_NULL_BALANCE
*@param ACCOUNT_FROM: Minimum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,3)
*@param ACCOUNT_TO:   Maximum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,3)
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type   := null;
begin
  if parameter_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
    vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if (upper(PCS.PC_CONFIG.GetConfig('ACJ_USER_DIV_REPORTING') ) = 'TRUE') then
      open arefcursor for
        select ver.acb_budget_version_id
             , pam.per_amount_d
             , pam.per_amount_c
             , acc.acs_account_id
             , acc.acc_number division_acc_number
             , per.acs_financial_year_id
             , per.per_no_period
             , per_bud.per_no_period bud_per_no_period
             , tot.tot_debit_lc
             , tot.tot_credit_lc
             , tot.acs_auxiliary_account_id
             , tot.c_type_cumul
             , tot.acs_division_account_id
             , cfl.node01
             , cfl.node02
             , cfl.node03
             , cfl.node04
             , cfl.node05
             , cfl.node06
             , cfl.node07
             , cfl.node08
             , cfl.node09
             , cfl.node10
             , cfl.classif_leaf_id
             , cfl.leaf_descr
             , vac.acc_number
             , vac.des_description_summary
             , cla.cla_descr
          from acb_budget_version ver
             , acb_global_budget glo
             , acb_period_amount pam
             , acs_account acc
             , acs_period per
             , acs_period per_bud
             , act_total_by_period tot
             , classif_flat cfl
             , classification cla
             , (select acc.acs_financial_account_id
                     , tot.acs_division_account_id
                     , tot.act_total_by_period_id id
                     , 'TOT' typ
                     , per.acs_financial_year_id
                     , 0 acb_budget_version_id
                  from acs_financial_account acc
                     , act_total_by_period tot
                     , acs_period per
                 where acc.acs_financial_account_id = tot.acs_financial_account_id
                   and tot.acs_period_id = per.acs_period_id
                   and tot.acs_auxiliary_account_id is null
                union all
                select acc.acs_financial_account_id
                     , glo.acs_division_account_id
                     , amo.acb_period_amount_id id
                     , 'BUD' typ
                     , per.acs_financial_year_id
                     , glo.acb_budget_version_id
                  from acs_financial_account acc
                     , acb_period_amount amo
                     , acb_global_budget glo
                     , acs_period per
                     , acs_financial_currency cur
                 where acc.acs_financial_account_id = glo.acs_financial_account_id
                   and glo.acb_global_budget_id = amo.acb_global_budget_id
                   and glo.acs_financial_currency_id = cur.acs_financial_currency_id
                   and cur.fin_local_currency = 1
                   and amo.acs_period_id = per.acs_period_id) vba
             , (select cla.classification_id
                  from classification cla
                     , classif_tables tab
                 where cla.classification_id = tab.classification_id
                   and tab.cta_tablename = 'ACS_ACCOUNT') vcl
             , (select acs_financial_account.acs_financial_account_id
                     , acs_account.acc_number
                     , acs_description.pc_lang_id
                     , acs_description.des_description_summary
                  from acs_description
                     , acs_account
                     , acs_financial_account
                     , acs_sub_set
                 where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
                   and acs_account.acs_account_id = acs_description.acs_account_id
                   and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                   and acs_sub_set.c_sub_set = 'ACC') vac
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, null) ) AUT
         where vac.pc_lang_id = vpc_lang_id
           and vac.acs_financial_account_id = cfl.classif_leaf_id
           and cfl.classification_id = vcl.classification_id
           and cfl.pc_lang_id = vpc_lang_id
           and vac.acs_financial_account_id = vba.acs_financial_account_id
           and vba.id = tot.act_total_by_period_id(+)
           and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
           and tot.acs_period_id = per.acs_period_id(+)
           and vba.acs_division_account_id = acc.acs_account_id(+)
           and vba.id = pam.acb_period_amount_id(+)
           and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
           and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
           and pam.acs_period_id = per_bud.acs_period_id(+)
           and vcl.classification_id = cla.classification_id(+)
           and vcl.classification_id = to_number(parameter_0)
           and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
           and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
           and (substr(ltrim(cfl.leaf_descr), 1, 3) between account_from and account_to)
           and (    (     (    ACC.ACS_ACCOUNT_ID is not null
                           and AUT.column_value is not null)
                     and (ACC.ACS_ACCOUNT_ID = AUT.column_value) )
                or (    ACC.ACS_ACCOUNT_ID is null
                    and AUT.column_value is null
                    and TYP = 'BUD')
               )
        union all
        select 0 ACB_BUDGET_VERSION_ID
             , 0 PER_AMOUNT_D
             , 0 PER_AMOUNT_C
             , null ACS_ACCOUNT_ID
             , null DIVISION_ACC_NUMBER
             , 0 ACS_FINANCIAL_YEAR_ID
             , 0 PER_NO_PERIOD
             , 0 BUD_PER_NO_PERIOD
             , 0 TOT_DEBIT_LC
             , 0 TOT_CREDIT_LC
             , 0 ACS_AUXILIARY_ACCOUNT_ID
             , '' C_TYPE_CUMUL
             , 0 ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , CLA.CLA_DESCR
          from ACS_ACCOUNT ACC
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and parameter_33 = '1';
    else   --Config('ACJ_USER_DIV_REPORTING') ) = 'FALSE'
      open arefcursor for
        select ver.acb_budget_version_id
             , pam.per_amount_d
             , pam.per_amount_c
             , acc.acs_account_id
             , acc.acc_number division_acc_number
             , per.acs_financial_year_id
             , per.per_no_period
             , per_bud.per_no_period bud_per_no_period
             , tot.tot_debit_lc
             , tot.tot_credit_lc
             , tot.acs_auxiliary_account_id
             , tot.c_type_cumul
             , tot.acs_division_account_id
             , cfl.node01
             , cfl.node02
             , cfl.node03
             , cfl.node04
             , cfl.node05
             , cfl.node06
             , cfl.node07
             , cfl.node08
             , cfl.node09
             , cfl.node10
             , cfl.classif_leaf_id
             , cfl.leaf_descr
             , vac.acc_number
             , vac.des_description_summary
             , cla.cla_descr
          from acb_budget_version ver
             , acb_global_budget glo
             , acb_period_amount pam
             , acs_account acc
             , acs_period per
             , acs_period per_bud
             , act_total_by_period tot
             , classif_flat cfl
             , classification cla
             , (select acc.acs_financial_account_id
                     , tot.acs_division_account_id
                     , tot.act_total_by_period_id id
                     , 'TOT' typ
                     , per.acs_financial_year_id
                     , 0 acb_budget_version_id
                  from acs_financial_account acc
                     , act_total_by_period tot
                     , acs_period per
                 where acc.acs_financial_account_id = tot.acs_financial_account_id
                   and tot.acs_period_id = per.acs_period_id
                   and tot.acs_auxiliary_account_id is null
                union all
                select acc.acs_financial_account_id
                     , glo.acs_division_account_id
                     , amo.acb_period_amount_id id
                     , 'BUD' typ
                     , per.acs_financial_year_id
                     , glo.acb_budget_version_id
                  from acs_financial_account acc
                     , acb_period_amount amo
                     , acb_global_budget glo
                     , acs_period per
                     , acs_financial_currency cur
                 where acc.acs_financial_account_id = glo.acs_financial_account_id
                   and glo.acb_global_budget_id = amo.acb_global_budget_id
                   and glo.acs_financial_currency_id = cur.acs_financial_currency_id
                   and cur.fin_local_currency = 1
                   and amo.acs_period_id = per.acs_period_id) vba
             , (select cla.classification_id
                  from classification cla
                     , classif_tables tab
                 where cla.classification_id = tab.classification_id
                   and tab.cta_tablename = 'ACS_ACCOUNT') vcl
             , (select acs_financial_account.acs_financial_account_id
                     , acs_account.acc_number
                     , acs_description.pc_lang_id
                     , acs_description.des_description_summary
                  from acs_description
                     , acs_account
                     , acs_financial_account
                     , acs_sub_set
                 where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
                   and acs_account.acs_account_id = acs_description.acs_account_id
                   and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                   and acs_sub_set.c_sub_set = 'ACC') vac
         where vac.pc_lang_id = vpc_lang_id
           and vac.acs_financial_account_id = cfl.classif_leaf_id
           and cfl.classification_id = vcl.classification_id
           and cfl.pc_lang_id = vpc_lang_id
           and vac.acs_financial_account_id = vba.acs_financial_account_id
           and vba.id = tot.act_total_by_period_id(+)
           and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
           and tot.acs_period_id = per.acs_period_id(+)
           and vba.acs_division_account_id = acc.acs_account_id(+)
           and vba.id = pam.acb_period_amount_id(+)
           and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
           and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
           and pam.acs_period_id = per_bud.acs_period_id(+)
           and vcl.classification_id = cla.classification_id(+)
           and vcl.classification_id = to_number(parameter_0)
           and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
           and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
           and (substr(ltrim(cfl.leaf_descr), 1, 3) between account_from and account_to)
           and (    (    ACC.ACS_ACCOUNT_ID is null
                     and TYP = 'BUD')
                or (ACC.ACS_ACCOUNT_ID is not null) )
        union all
        select 0 ACB_BUDGET_VERSION_ID
             , 0 PER_AMOUNT_D
             , 0 PER_AMOUNT_C
             , null ACS_ACCOUNT_ID
             , null DIVISION_ACC_NUMBER
             , 0 ACS_FINANCIAL_YEAR_ID
             , 0 PER_NO_PERIOD
             , 0 BUD_PER_NO_PERIOD
             , 0 TOT_DEBIT_LC
             , 0 TOT_CREDIT_LC
             , 0 ACS_AUXILIARY_ACCOUNT_ID
             , '' C_TYPE_CUMUL
             , 0 ACS_DIVISION_ACCOUNT_ID
             , CFL.NODE01
             , CFL.NODE02
             , CFL.NODE03
             , CFL.NODE04
             , CFL.NODE05
             , CFL.NODE06
             , CFL.NODE07
             , CFL.NODE08
             , CFL.NODE09
             , CFL.NODE10
             , CFL.CLASSIF_LEAF_ID
             , CFL.LEAF_DESCR
             , VAC.ACC_NUMBER
             , VAC.DES_DESCRIPTION_SUMMARY
             , CLA.CLA_DESCR
          from ACS_ACCOUNT ACC
             , CLASSIF_FLAT CFL
             , CLASSIFICATION CLA
             , (select CLA.CLASSIFICATION_ID
                  from CLASSIFICATION CLA
                     , CLASSIF_TABLES TAB
                 where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                   and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
             , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                     , ACS_ACCOUNT.ACC_NUMBER
                     , ACS_DESCRIPTION.PC_LANG_ID
                     , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                     , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                  from ACS_DESCRIPTION
                     , ACS_ACCOUNT
                     , ACS_FINANCIAL_ACCOUNT
                     , ACS_SUB_SET
                 where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                   and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                   and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         where VAC.PC_LANG_ID = vpc_lang_id
           and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
           and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
           and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
           and CFL.PC_LANG_ID = vpc_lang_id
           and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
           and VCL.CLASSIFICATION_ID = to_number(parameter_0)
           and parameter_33 = '1';
    end if;
  else   --ExistDIVI = 0
    open arefcursor for
      select ver.acb_budget_version_id
           , pam.per_amount_d
           , pam.per_amount_c
           , acc.acs_account_id
           , acc.acc_number division_acc_number
           , per.acs_financial_year_id
           , per.per_no_period
           , per_bud.per_no_period bud_per_no_period
           , tot.tot_debit_lc
           , tot.tot_credit_lc
           , tot.acs_auxiliary_account_id
           , tot.c_type_cumul
           , tot.acs_division_account_id
           , cfl.node01
           , cfl.node02
           , cfl.node03
           , cfl.node04
           , cfl.node05
           , cfl.node06
           , cfl.node07
           , cfl.node08
           , cfl.node09
           , cfl.node10
           , cfl.classif_leaf_id
           , cfl.leaf_descr
           , vac.acc_number
           , vac.des_description_summary
           , cla.cla_descr
        from acb_budget_version ver
           , acb_global_budget glo
           , acb_period_amount pam
           , acs_account acc
           , acs_period per
           , acs_period per_bud
           , act_total_by_period tot
           , classif_flat cfl
           , classification cla
           , (select acc.acs_financial_account_id
                   , tot.acs_division_account_id
                   , tot.act_total_by_period_id id
                   , 'TOT' typ
                   , per.acs_financial_year_id
                   , 0 acb_budget_version_id
                from acs_financial_account acc
                   , act_total_by_period tot
                   , acs_period per
               where acc.acs_financial_account_id = tot.acs_financial_account_id
                 and tot.acs_period_id = per.acs_period_id
                 and tot.acs_auxiliary_account_id is null
              union all
              select acc.acs_financial_account_id
                   , glo.acs_division_account_id
                   , amo.acb_period_amount_id id
                   , 'BUD' typ
                   , per.acs_financial_year_id
                   , glo.acb_budget_version_id
                from acs_financial_account acc
                   , acb_period_amount amo
                   , acb_global_budget glo
                   , acs_period per
                   , acs_financial_currency cur
               where acc.acs_financial_account_id = glo.acs_financial_account_id
                 and glo.acb_global_budget_id = amo.acb_global_budget_id
                 and glo.acs_financial_currency_id = cur.acs_financial_currency_id
                 and cur.fin_local_currency = 1
                 and amo.acs_period_id = per.acs_period_id) vba
           , (select cla.classification_id
                from classification cla
                   , classif_tables tab
               where cla.classification_id = tab.classification_id
                 and tab.cta_tablename = 'ACS_ACCOUNT') vcl
           , (select acs_financial_account.acs_financial_account_id
                   , acs_account.acc_number
                   , acs_description.pc_lang_id
                   , acs_description.des_description_summary
                from acs_description
                   , acs_account
                   , acs_financial_account
                   , acs_sub_set
               where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
                 and acs_account.acs_account_id = acs_description.acs_account_id
                 and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                 and acs_sub_set.c_sub_set = 'ACC') vac
       where vac.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = cfl.classif_leaf_id
         and cfl.classification_id = vcl.classification_id
         and cfl.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = vba.acs_financial_account_id
         and vba.id = tot.act_total_by_period_id(+)
         and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
         and tot.acs_period_id = per.acs_period_id(+)
         and vba.acs_division_account_id = acc.acs_account_id(+)
         and vba.id = pam.acb_period_amount_id(+)
         and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
         and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
         and pam.acs_period_id = per_bud.acs_period_id(+)
         and vcl.classification_id = cla.classification_id(+)
         and vcl.classification_id = to_number(parameter_0)
         and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
         and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
         and (substr(ltrim(cfl.leaf_descr), 1, 3) between account_from and account_to)
      union all
      select 0 ACB_BUDGET_VERSION_ID
           , 0 PER_AMOUNT_D
           , 0 PER_AMOUNT_C
           , null ACS_ACCOUNT_ID
           , null DIVISION_ACC_NUMBER
           , 0 ACS_FINANCIAL_YEAR_ID
           , 0 PER_NO_PERIOD
           , 0 BUD_PER_NO_PERIOD
           , 0 TOT_DEBIT_LC
           , 0 TOT_CREDIT_LC
           , 0 ACS_AUXILIARY_ACCOUNT_ID
           , '' C_TYPE_CUMUL
           , 0 ACS_DIVISION_ACCOUNT_ID
           , CFL.NODE01
           , CFL.NODE02
           , CFL.NODE03
           , CFL.NODE04
           , CFL.NODE05
           , CFL.NODE06
           , CFL.NODE07
           , CFL.NODE08
           , CFL.NODE09
           , CFL.NODE10
           , CFL.CLASSIF_LEAF_ID
           , CFL.LEAF_DESCR
           , VAC.ACC_NUMBER
           , VAC.DES_DESCRIPTION_SUMMARY
           , CLA.CLA_DESCR
        from ACS_ACCOUNT ACC
           , CLASSIF_FLAT CFL
           , CLASSIFICATION CLA
           , (select CLA.CLASSIFICATION_ID
                from CLASSIFICATION CLA
                   , CLASSIF_TABLES TAB
               where CLA.CLASSIFICATION_ID = TAB.CLASSIFICATION_ID
                 and TAB.CTA_TABLENAME = 'ACS_ACCOUNT') VCL
           , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                   , ACS_ACCOUNT.ACC_NUMBER
                   , ACS_DESCRIPTION.PC_LANG_ID
                   , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                   , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
                from ACS_DESCRIPTION
                   , ACS_ACCOUNT
                   , ACS_FINANCIAL_ACCOUNT
                   , ACS_SUB_SET
               where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
                 and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
                 and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
       where VAC.PC_LANG_ID = vpc_lang_id
         and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
         and ACC.ACS_ACCOUNT_ID = VAC.ACS_FINANCIAL_ACCOUNT_ID
         and CFL.CLASSIFICATION_ID = VCL.CLASSIFICATION_ID
         and CFL.PC_LANG_ID = vpc_lang_id
         and VCL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID(+)
         and VCL.CLASSIFICATION_ID = to_number(parameter_0)
         and parameter_33 = '1';
  end if;
end RPT_ACR_BALANCE_3_COL_BE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL_BEM2_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     varchar2
, parameter_1    in     number
, parameter_4    in     number
, parameter_5    in     number
, parameter_8    in     number
, parameter_9    in     number
, parameter_12   in     number
, account_from   in     varchar2
, account_to     in     varchar2
)
is
/**
*Description
Used for SUB-report ACR_BALANCE_THREE_COL_BE_MCH2 / ACR_BALANCE_THREE_COL_BE_RECAP_MCH2 / ACR_BUDGET_BE_MCH2.RPT / ACR_BUDGET_RECAP_BE_MCH2
*@ replace procedure ACR_BALANCE_3_COL_BE_SUB_RPT
*@created MZHU 06.06.2007
*@lastUpdate
*                   EHO 31.01.2014 :  création de la procédure sur la base de RPT_ACR_BALANCE_3_COL_BE_SUB, pour gérer les n° de divisions (voir paramètres) sur 4 positions MCH2
*@public
*@param PARAMETER_0:  Classification ID      (CLASSIFICATION_ID)
*@param PARAMETER_1:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_4:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param PARAMETER_5:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_8:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param PARAMETER_9:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_12: Budget version id      (ACB_BUDGET_VERSION_ID)
*@param ACCOUNT_FROM: Minimum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,4)
*@param ACCOUNT_TO:   Maximum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,4)
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.pc_init_session.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.pc_init_session.getuserlangid;

  open arefcursor for
    select ver.acb_budget_version_id
         , pam.per_amount_d
         , pam.per_amount_c
         , acc.acs_account_id
         , acc.acc_number division_acc_number
         , per.acs_financial_year_id
         , per.per_no_period
         , per_bud.per_no_period bud_per_no_period
         , tot.tot_debit_lc
         , tot.tot_credit_lc
         , tot.acs_auxiliary_account_id
         , tot.c_type_cumul
         , tot.acs_division_account_id
         , cfl.node01
         , cfl.node02
         , cfl.leaf_descr
         , vac.acs_financial_account_id
         , cla.cla_descr
      from acb_budget_version ver
         , acb_global_budget glo
         , acb_period_amount pam
         , acs_account acc
         , acs_period per
         , acs_period per_bud
         , act_total_by_period tot
         , classif_flat cfl
         , classification cla
         , (select acc.acs_financial_account_id
                 , tot.acs_division_account_id
                 , tot.act_total_by_period_id id
                 , 'TOT' typ
                 , per.acs_financial_year_id
                 , 0 acb_budget_version_id
              from acs_financial_account acc
                 , act_total_by_period tot
                 , acs_period per
             where acc.acs_financial_account_id = tot.acs_financial_account_id
               and tot.acs_period_id = per.acs_period_id
               and tot.acs_auxiliary_account_id is null
            union all
            select acc.acs_financial_account_id
                 , glo.acs_division_account_id
                 , amo.acb_period_amount_id id
                 , 'BUD' typ
                 , per.acs_financial_year_id
                 , glo.acb_budget_version_id
              from acs_financial_account acc
                 , acb_period_amount amo
                 , acb_global_budget glo
                 , acs_period per
                 , acs_financial_currency cur
             where acc.acs_financial_account_id = glo.acs_financial_account_id
               and glo.acb_global_budget_id = amo.acb_global_budget_id
               and glo.acs_financial_currency_id = cur.acs_financial_currency_id
               and cur.fin_local_currency = 1
               and amo.acs_period_id = per.acs_period_id) vba
         , (select cla.classification_id
              from classification cla
                 , classif_tables tab
             where cla.classification_id = tab.classification_id
               and tab.cta_tablename = 'ACS_ACCOUNT') vcl
         , (select acs_financial_account.acs_financial_account_id
                 , acs_account.acc_number
                 , acs_description.pc_lang_id
                 , acs_description.des_description_summary
              from acs_description
                 , acs_account
                 , acs_financial_account
                 , acs_sub_set
             where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
               and acs_account.acs_account_id = acs_description.acs_account_id
               and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
               and acs_sub_set.c_sub_set = 'ACC') vac
     where vac.pc_lang_id = vpc_lang_id
       and vac.acs_financial_account_id = cfl.classif_leaf_id
       and cfl.classification_id = vcl.classification_id
       and cfl.pc_lang_id = vpc_lang_id
       and vac.acs_financial_account_id = vba.acs_financial_account_id
       and vba.id = tot.act_total_by_period_id(+)
       and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
       and tot.acs_period_id = per.acs_period_id(+)
       and vba.acs_division_account_id = acc.acs_account_id(+)
       and vba.id = pam.acb_period_amount_id(+)
       and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
       and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
       and pam.acs_period_id = per_bud.acs_period_id(+)
       and vcl.classification_id = cla.classification_id(+)
       and vcl.classification_id = to_number(parameter_0)
       and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
       and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
       and (substr(ltrim(cfl.leaf_descr), 1, 4) between account_from and account_to);
end RPT_ACR_BALANCE_3_COL_BEM2_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL_BEMCH2" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     number
, parameter_4    in     number
, parameter_5    in     number
, parameter_8    in     number
, parameter_9    in     number
, parameter_12   in     number
, account_from   in     varchar2
, account_to     in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
*Description used for report ACR_BALANCE_THREE_COL_BE_MCH2 / ACR_BALANCE_THREE_COL_BE_RECAP2 /ACR_BUDGET_BE_MCH2 / ACR_BUDGET_RECAP_BE_MCH2
*replace procedure ACR_BALANCE_3_COL_BE_RPT
*@created MZHU 06.06.2007 -- PYB dec 2008 (ajout des param 1-12)
* @lastUpdate
* EHO 31.01.2014 : création de la procédure sur la base de RPT_ACR_BALANCE_3_COL_BE, pour gérer les n° de divisions (voir paramètres) sur 4 positions MCH2
*@public
*@param parameter_0: Classification ID (CLASSIFICATION_ID)
*@param parameter_1: Financial year id (ACS_FINANCIAL_YEAR_ID)
*@param parameter_4: Budget version id (ACB_BUDGET_VERSION_ID)
*@param parameter_5: Financial year id (ACS_FINANCIAL_YEAR_ID)
*@param parameter_8: Budget version id (ACB_BUDGET_VERSION_ID)
*@param parameter_9: Financial year id (ACS_FINANCIAL_YEAR_ID)
*@param parameter_12: Budget version id (ACB_BUDGET_VERSION_ID)
*@param ACCOUNT_FROM: Minimum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,4)
*@param ACCOUNT_TO: Maximum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,4)
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type;
begin
  PCS.PC_INIT_SESSION.setLanId(procuser_lanid);
  PCS.PC_INIT_SESSION.setUserId(pc_user_id);
  vpc_lang_id  := PCS.PC_INIT_SESSION.getUserlangId;
  vpc_user_id  := PCS.PC_INIT_SESSION.getUserId;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    open arefcursor for
      select ver.acb_budget_version_id
           , pam.per_amount_d
           , pam.per_amount_c
           , acc.acs_account_id
           , acc.acc_number division_acc_number
           , per.acs_financial_year_id
           , per.per_no_period
           , per_bud.per_no_period bud_per_no_period
           , tot.tot_debit_lc
           , tot.tot_credit_lc
           , tot.acs_auxiliary_account_id
           , tot.c_type_cumul
           , tot.acs_division_account_id
           , cfl.node01
           , cfl.node02
           , cfl.node03
           , cfl.node04
           , cfl.node05
           , cfl.node06
           , cfl.node07
           , cfl.node08
           , cfl.node09
           , cfl.node10
           , cfl.classif_leaf_id
           , cfl.leaf_descr
           , vac.acc_number
           , vac.des_description_summary
           , cla.cla_descr
        from acb_budget_version ver
           , acb_global_budget glo
           , acb_period_amount pam
           , acs_account acc
           , acs_period per
           , acs_period per_bud
           , act_total_by_period tot
           , classif_flat cfl
           , classification cla
           , (select acc.acs_financial_account_id
                   , tot.acs_division_account_id
                   , tot.act_total_by_period_id id
                   , 'TOT' typ
                   , per.acs_financial_year_id
                   , 0 acb_budget_version_id
                from acs_financial_account acc
                   , act_total_by_period tot
                   , acs_period per
               where acc.acs_financial_account_id = tot.acs_financial_account_id
                 and tot.acs_period_id = per.acs_period_id
                 and tot.acs_auxiliary_account_id is null
              union all
              select acc.acs_financial_account_id
                   , glo.acs_division_account_id
                   , amo.acb_period_amount_id id
                   , 'BUD' typ
                   , per.acs_financial_year_id
                   , glo.acb_budget_version_id
                from acs_financial_account acc
                   , acb_period_amount amo
                   , acb_global_budget glo
                   , acs_period per
                   , acs_financial_currency cur
               where acc.acs_financial_account_id = glo.acs_financial_account_id
                 and glo.acb_global_budget_id = amo.acb_global_budget_id
                 and glo.acs_financial_currency_id = cur.acs_financial_currency_id
                 and cur.fin_local_currency = 1
                 and amo.acs_period_id = per.acs_period_id) vba
           , (select cla.classification_id
                from classification cla
                   , classif_tables tab
               where cla.classification_id = tab.classification_id
                 and tab.cta_tablename = 'ACS_ACCOUNT') vcl
           , (select acs_financial_account.acs_financial_account_id
                   , acs_account.acc_number
                   , acs_description.pc_lang_id
                   , acs_description.des_description_summary
                from acs_description
                   , acs_account
                   , acs_financial_account
                   , acs_sub_set
               where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
                 and acs_account.acs_account_id = acs_description.acs_account_id
                 and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                 and acs_sub_set.c_sub_set = 'ACC') vac
           , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, null) ) AUT
       where vac.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = cfl.classif_leaf_id
         and cfl.classification_id = vcl.classification_id
         and cfl.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = vba.acs_financial_account_id
         and vba.id = tot.act_total_by_period_id(+)
         and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
         and tot.acs_period_id = per.acs_period_id(+)
         and vba.acs_division_account_id = acc.acs_account_id(+)
         and vba.id = pam.acb_period_amount_id(+)
         and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
         and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
         and pam.acs_period_id = per_bud.acs_period_id(+)
         and vcl.classification_id = cla.classification_id(+)
         and vcl.classification_id = to_number(parameter_0)
         and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
         and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
         and (substr(ltrim(cfl.leaf_descr), 1, 4) between account_from and account_to)
         and ACC.ACS_ACCOUNT_ID is not null
         and AUT.column_value = ACC.ACS_ACCOUNT_ID;
  else   -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
    open arefcursor for
      select ver.acb_budget_version_id
           , pam.per_amount_d
           , pam.per_amount_c
           , acc.acs_account_id
           , acc.acc_number division_acc_number
           , per.acs_financial_year_id
           , per.per_no_period
           , per_bud.per_no_period bud_per_no_period
           , tot.tot_debit_lc
           , tot.tot_credit_lc
           , tot.acs_auxiliary_account_id
           , tot.c_type_cumul
           , tot.acs_division_account_id
           , cfl.node01
           , cfl.node02
           , cfl.node03
           , cfl.node04
           , cfl.node05
           , cfl.node06
           , cfl.node07
           , cfl.node08
           , cfl.node09
           , cfl.node10
           , cfl.classif_leaf_id
           , cfl.leaf_descr
           , vac.acc_number
           , vac.des_description_summary
           , cla.cla_descr
        from acb_budget_version ver
           , acb_global_budget glo
           , acb_period_amount pam
           , acs_account acc
           , acs_period per
           , acs_period per_bud
           , act_total_by_period tot
           , classif_flat cfl
           , classification cla
           , (select acc.acs_financial_account_id
                   , tot.acs_division_account_id
                   , tot.act_total_by_period_id id
                   , 'TOT' typ
                   , per.acs_financial_year_id
                   , 0 acb_budget_version_id
                from acs_financial_account acc
                   , act_total_by_period tot
                   , acs_period per
               where acc.acs_financial_account_id = tot.acs_financial_account_id
                 and tot.acs_period_id = per.acs_period_id
                 and tot.acs_auxiliary_account_id is null
              union all
              select acc.acs_financial_account_id
                   , glo.acs_division_account_id
                   , amo.acb_period_amount_id id
                   , 'BUD' typ
                   , per.acs_financial_year_id
                   , glo.acb_budget_version_id
                from acs_financial_account acc
                   , acb_period_amount amo
                   , acb_global_budget glo
                   , acs_period per
                   , acs_financial_currency cur
               where acc.acs_financial_account_id = glo.acs_financial_account_id
                 and glo.acb_global_budget_id = amo.acb_global_budget_id
                 and glo.acs_financial_currency_id = cur.acs_financial_currency_id
                 and cur.fin_local_currency = 1
                 and amo.acs_period_id = per.acs_period_id) vba
           , (select cla.classification_id
                from classification cla
                   , classif_tables tab
               where cla.classification_id = tab.classification_id
                 and tab.cta_tablename = 'ACS_ACCOUNT') vcl
           , (select acs_financial_account.acs_financial_account_id
                   , acs_account.acc_number
                   , acs_description.pc_lang_id
                   , acs_description.des_description_summary
                from acs_description
                   , acs_account
                   , acs_financial_account
                   , acs_sub_set
               where acs_financial_account.acs_financial_account_id = acs_account.acs_account_id
                 and acs_account.acs_account_id = acs_description.acs_account_id
                 and acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                 and acs_sub_set.c_sub_set = 'ACC') vac
       where vac.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = cfl.classif_leaf_id
         and cfl.classification_id = vcl.classification_id
         and cfl.pc_lang_id = vpc_lang_id
         and vac.acs_financial_account_id = vba.acs_financial_account_id
         and vba.id = tot.act_total_by_period_id(+)
         and vba.acs_financial_account_id = tot.acs_financial_account_id(+)
         and tot.acs_period_id = per.acs_period_id(+)
         and vba.acs_division_account_id = acc.acs_account_id(+)
         and vba.id = pam.acb_period_amount_id(+)
         and pam.acb_global_budget_id = glo.acb_global_budget_id(+)
         and glo.acb_budget_version_id = ver.acb_budget_version_id(+)
         and pam.acs_period_id = per_bud.acs_period_id(+)
         and vcl.classification_id = cla.classification_id(+)
         and vcl.classification_id = to_number(parameter_0)
         and vba.acs_financial_year_id in(parameter_1, parameter_5, parameter_9)
         and vba.acb_budget_version_id in(parameter_4, parameter_8, parameter_12)
         and (substr(ltrim(cfl.leaf_descr), 1, 4) between account_from and account_to);
  end if;
end RPT_ACR_BALANCE_3_COL_BEMCH2;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL_BE_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       NUMBER,
   parameter_4      IN       NUMBER,
   parameter_5      IN       NUMBER,
   parameter_8      IN       NUMBER,
   parameter_9      IN       NUMBER,
   parameter_12     IN       NUMBER,
   account_from     IN       VARCHAR2,
   account_to       IN       VARCHAR2
)
IS
/**
*Description
Used for SUB-report ACR_BALANCE_THREE_COL_BE / ACR_BALANCE_THREE_COL_BE_RECAP / ACR_BUDGET_BE.RPT / ACR_BUDGET_RECAP_BE
*@ replace procedure ACR_BALANCE_3_COL_BE_SUB_RPT
*@created MZHU 06.06.2007
*@lastUpdate VHA 22.11.2011
*@public
*@param PARAMETER_0:  Classification ID      (CLASSIFICATION_ID)
*@param PARAMETER_1:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_4:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param PARAMETER_5:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_8:  Budget version id      (ACB_BUDGET_VERSION_ID)
*@param PARAMETER_9:  Financial year id      (ACS_FINANCIAL_YEAR_ID)
*@param PARAMETER_12: Budget version id      (ACB_BUDGET_VERSION_ID)
*@param ACCOUNT_FROM: Minimum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,3)
*@param ACCOUNT_TO:   Maximum account number (SUBSTR(LTRIM(CFL.LEAF_DESCR),1,3)
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ver.acb_budget_version_id, pam.per_amount_d, pam.per_amount_c,
             acc.acs_account_id, acc.acc_number division_acc_number,
             per.acs_financial_year_id, per.per_no_period,
             per_bud.per_no_period bud_per_no_period, tot.tot_debit_lc,
             tot.tot_credit_lc, tot.acs_auxiliary_account_id,
             tot.c_type_cumul, tot.acs_division_account_id, cfl.node01,
             cfl.node02, cfl.leaf_descr, vac.acs_financial_account_id,
             cla.cla_descr
        FROM acb_budget_version ver,
             acb_global_budget glo,
             acb_period_amount pam,
             acs_account acc,
             acs_period per,
             acs_period per_bud,
             act_total_by_period tot,
             classif_flat cfl,
             classification cla,
             (SELECT acc.acs_financial_account_id,
                     tot.acs_division_account_id,
                     tot.act_total_by_period_id ID, 'TOT' typ,
                     per.acs_financial_year_id, 0 acb_budget_version_id
                FROM acs_financial_account acc,
                     act_total_by_period tot,
                     acs_period per
               WHERE acc.acs_financial_account_id =
                                                  tot.acs_financial_account_id
                 AND tot.acs_period_id = per.acs_period_id
                 AND tot.acs_auxiliary_account_id IS NULL
              UNION ALL
              SELECT acc.acs_financial_account_id,
                     glo.acs_division_account_id, amo.acb_period_amount_id ID,
                     'BUD' typ, per.acs_financial_year_id,
                     glo.acb_budget_version_id
                FROM acs_financial_account acc,
                     acb_period_amount amo,
                     acb_global_budget glo,
                     acs_period per,
                     acs_financial_currency cur
               WHERE acc.acs_financial_account_id =
                                                  glo.acs_financial_account_id
                 AND glo.acb_global_budget_id = amo.acb_global_budget_id
                 AND glo.acs_financial_currency_id =
                                                 cur.acs_financial_currency_id
                 AND cur.fin_local_currency = 1
                 AND amo.acs_period_id = per.acs_period_id) vba,
             (SELECT cla.classification_id
                FROM classification cla, classif_tables tab
               WHERE cla.classification_id = tab.classification_id
                 AND tab.cta_tablename = 'ACS_ACCOUNT') vcl,
             (SELECT acs_financial_account.acs_financial_account_id,
                     acs_account.acc_number, acs_description.pc_lang_id,
                     acs_description.des_description_summary
                FROM acs_description,
                     acs_account,
                     acs_financial_account,
                     acs_sub_set
               WHERE acs_financial_account.acs_financial_account_id =
                                                    acs_account.acs_account_id
                 AND acs_account.acs_account_id =
                                                acs_description.acs_account_id
                 AND acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                 AND acs_sub_set.c_sub_set = 'ACC') vac
       WHERE vac.pc_lang_id = vpc_lang_id
         AND vac.acs_financial_account_id = cfl.classif_leaf_id
         AND cfl.classification_id = vcl.classification_id
         AND cfl.pc_lang_id = vpc_lang_id
         AND vac.acs_financial_account_id = vba.acs_financial_account_id
         AND vba.ID = tot.act_total_by_period_id(+)
         AND vba.acs_financial_account_id = tot.acs_financial_account_id(+)
         AND tot.acs_period_id = per.acs_period_id(+)
         AND vba.acs_division_account_id = acc.acs_account_id(+)
         AND vba.ID = pam.acb_period_amount_id(+)
         AND pam.acb_global_budget_id = glo.acb_global_budget_id(+)
         AND glo.acb_budget_version_id = ver.acb_budget_version_id(+)
         AND pam.acs_period_id = per_bud.acs_period_id(+)
         AND vcl.classification_id = cla.classification_id(+)
         AND vcl.classification_id = TO_NUMBER (parameter_0)
         AND vba.acs_financial_year_id IN
                                      (parameter_1, parameter_5, parameter_9)
         AND vba.acb_budget_version_id IN
                                     (parameter_4, parameter_8, parameter_12)
         AND (SUBSTR (LTRIM (cfl.leaf_descr), 1, 3) BETWEEN account_from
                                                        AND account_to
             );
END RPT_ACR_BALANCE_3_COL_BE_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_3_COL_SUB" (
   arefcursor                       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid                   IN       pcs.pc_lang.lanid%TYPE,
   parameter_1                      IN       NUMBER,
   parameter_4                      IN       NUMBER,
   parameter_5                      IN       NUMBER,
   parameter_8                      IN       NUMBER,
   parameter_9                      IN       NUMBER,
   parameter_12                     IN       NUMBER,
   param_acs_financial_account_id   IN       NUMBER
)
/**
* description used for report ACR_BALANCE_THREE_COL_RPT (Ech??¡§?|anciers fournisseurs)

*@CREATED MZHU 17.09.2007
*@LASTUPDATE
*@PUBLIC
*@param PARAMETER_0:  Classification ID       CLASSIFICATION_ID
*@param PARAMETER_1:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param PARAMETER_4:  Budget version id       ACB_BUDGET_VERSION_ID
*@param PARAMETER_5:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param PARAMETER_8:  Budget version id       ACB_BUDGET_VERSION_ID
*@param PARAMETER_9:  Financial year id       ACS_FINANCIAL_YEAR_ID
*@param PARAMETER_12: Budget version id       ACB_BUDGET_VERSION_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --USER LANGUAGE ID
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ver.acb_budget_version_id, pam.per_amount_d, pam.per_amount_c,
             acc.acs_account_id, acs.fin_local_currency, cur.currency,
             per.acs_financial_year_id, per.per_no_period,
             per_bud.per_no_period bud_per_no_period, tot.tot_debit_lc,
             tot.tot_credit_lc, tot.tot_debit_fc, tot.tot_credit_fc,
             tot.acs_auxiliary_account_id, tot.c_type_cumul,
             tot.acs_division_account_id, vac.acc_number
        FROM acb_budget_version ver,
             acb_global_budget glo,
             acb_period_amount pam,
             acs_account acc,
             acs_financial_currency acs,
             acs_period per,
             acs_period per_bud,
             act_total_by_period tot,
             pcs.pc_curr cur,
             (SELECT acc.acs_financial_account_id,
                     tot.acs_division_account_id,
                     tot.act_total_by_period_id ID, 'TOT' typ,
                     per.acs_financial_year_id, 0 acb_budget_version_id
                FROM acs_financial_account acc,
                     act_total_by_period tot,
                     acs_period per
               WHERE acc.acs_financial_account_id =
                                                  tot.acs_financial_account_id
                 AND tot.acs_period_id = per.acs_period_id
                 AND tot.acs_auxiliary_account_id IS NULL
              UNION ALL
              SELECT acc.acs_financial_account_id,
                     glo.acs_division_account_id, amo.acb_period_amount_id ID,
                     'BUD' typ, per.acs_financial_year_id,
                     glo.acb_budget_version_id
                FROM acs_financial_account acc,
                     acb_period_amount amo,
                     acb_global_budget glo,
                     acs_period per,
                     acs_financial_currency cur
               WHERE acc.acs_financial_account_id =
                                                  glo.acs_financial_account_id
                 AND glo.acb_global_budget_id = amo.acb_global_budget_id
                 AND glo.acs_financial_currency_id =
                                                 cur.acs_financial_currency_id
                 AND cur.fin_local_currency = 1
                 AND amo.acs_period_id = per.acs_period_id) vba,
             (SELECT acs_financial_account.acs_financial_account_id,
                     acs_account.acc_number, acs_description.pc_lang_id,
                     acs_description.des_description_summary,
                     acs_function.isfinaccountinme
                        (acs_financial_account.acs_financial_account_id
                        ) isfinaccountinme
                FROM acs_description,
                     acs_account,
                     acs_financial_account,
                     acs_sub_set
               WHERE acs_financial_account.acs_financial_account_id =
                                                    acs_account.acs_account_id
                 AND acs_account.acs_account_id =
                                                acs_description.acs_account_id
                 AND acs_account.acs_sub_set_id = acs_sub_set.acs_sub_set_id
                 AND acs_sub_set.c_sub_set = 'ACC') vac
       WHERE vac.pc_lang_id = vpc_lang_id
         AND vac.acs_financial_account_id = vba.acs_financial_account_id
         AND vba.ID = tot.act_total_by_period_id(+)
         AND tot.acs_period_id = per.acs_period_id(+)
         AND tot.acs_acs_financial_currency_id = acs.acs_financial_currency_id(+)
         AND acs.pc_curr_id = cur.pc_curr_id(+)
         AND vba.acs_division_account_id = acc.acs_account_id(+)
         AND vba.ID = pam.acb_period_amount_id(+)
         AND pam.acb_global_budget_id = glo.acb_global_budget_id(+)
         AND glo.acb_budget_version_id = ver.acb_budget_version_id(+)
         AND pam.acs_period_id = per_bud.acs_period_id(+)
         AND vac.acs_financial_account_id = param_acs_financial_account_id
         AND vba.acs_financial_year_id IN
                                      (parameter_1, parameter_5, parameter_9)
         AND vba.acb_budget_version_id IN
                                     (parameter_4, parameter_8, parameter_12);
END rpt_acr_balance_3_col_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_CDA" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_14     IN       VARCHAR2,
   parameter_20     IN       VARCHAR2,
   parameter_21     IN       VARCHAR2,
   parameter_24     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACR_BALANCE_CPN

*@CREATED EQI 08.08.2009
*@LASTUPDATE EQI   03.09.2009
*@PUBLIC
*@param PARAMETER_00:   ID Classification
*@param PARAMETER_01:   ID Financial year Réf
*@param PARAMETER_04:   ID Version budget REF
*@param PARAMETER_10:   CDA Account from
*@param PARAMETER_11:   ID Financial year Comp1
*@param PARAMETER_14:   ID Version budget Comp1
*@param PARAMETER_20:   CDA Account to
*@param PARAMETER_21:   ID Financial year Comp2
*@param PARAMETER_24:   ID Version budget Comp2
*@param PARAMETER_25:   C_TYPE_CUMUL Comp2 = 'ENG' : 0=No / 1=Yes
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acb_budget_version.acb_budget_version_id acb_budget_version_id1,
             acb_period_amount.per_amount_d, acb_period_amount.per_amount_c,
             acs_account_cda.acc_number acc_number1,
             acs_account_cpn.acc_number acc_number2,
             acs_description.pc_lang_id,
             acs_description.des_description_summary,
             acs_period_bud.per_no_period per_no_period1,
             acs_period_tot.acs_financial_year_id acs_financial_year_id1,
             acs_period_tot.per_no_period per_no_period2,
             act_mgm_tot_by_period.mto_debit_lc,
             act_mgm_tot_by_period.mto_credit_lc,
             act_mgm_tot_by_period.c_type_cumul, classif_flat.node01,
             classif_flat.node02, classif_flat.node03, classif_flat.node04,
             classif_flat.node05, classif_flat.node06, classif_flat.node07,
             classif_flat.node08, classif_flat.node09, classif_flat.node10,
             classif_flat.leaf_descr, pc_lang.lanid,
             v_acr_balance_cda.acs_financial_year_id acs_financial_year_id2,
             v_acr_balance_cda.acb_budget_version_id acb_budget_version_id2,
             v_acs_account_classif.classification_id,
             acs_function.getlocalcurrencyname localcurrencyname
        FROM v_acr_balance_cda,
             classif_flat,
             acs_account acs_account_cpn,
             acs_account acs_account_cda,
             act_mgm_tot_by_period,
             acs_period acs_period_tot,
             acb_period_amount,
             acs_period acs_period_bud,
             acb_global_budget,
             acb_budget_version,
             acs_description,
             pcs.pc_lang pc_lang,
             v_acs_account_classif
       WHERE v_acr_balance_cda.acs_cpn_account_id =
                                                  classif_flat.classif_leaf_id
         AND v_acr_balance_cda.acs_cpn_account_id =
                                                acs_account_cpn.acs_account_id
         AND v_acr_balance_cda.acs_cda_account_id =
                                                acs_account_cda.acs_account_id
         AND v_acr_balance_cda.ID = act_mgm_tot_by_period.act_mgm_tot_by_period_id(+)
         AND act_mgm_tot_by_period.acs_period_id = acs_period_tot.acs_period_id(+)
         AND v_acr_balance_cda.ID = acb_period_amount.acb_period_amount_id(+)
         AND acb_period_amount.acs_period_id = acs_period_bud.acs_period_id(+)
         AND acb_period_amount.acb_global_budget_id = acb_global_budget.acb_global_budget_id(+)
         AND acb_global_budget.acb_budget_version_id = acb_budget_version.acb_budget_version_id(+)
         AND v_acr_balance_cda.acs_cda_account_id =
                                                acs_description.acs_account_id
         AND pc_lang.lanid = procuser_lanid
         AND acs_description.pc_lang_id = vpc_lang_id
         AND classif_flat.classification_id =
                                       v_acs_account_classif.classification_id
         AND classif_flat.pc_lang_id = pc_lang.pc_lang_id
         AND v_acs_account_classif.classification_id = parameter_00
         AND acs_account_cda.acc_number >= parameter_10
         AND acs_account_cda.acc_number <= parameter_20
         AND (   v_acr_balance_cda.acs_financial_year_id = parameter_01
              OR v_acr_balance_cda.acs_financial_year_id = parameter_11
              OR v_acr_balance_cda.acs_financial_year_id = parameter_21
             )
         AND (   v_acr_balance_cda.acb_budget_version_id = parameter_04
              OR v_acr_balance_cda.acb_budget_version_id = parameter_14
              OR v_acr_balance_cda.acb_budget_version_id = parameter_24
             );
END rpt_acr_balance_cda;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_CPN" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_13     IN       VARCHAR2,
   parameter_19     IN       VARCHAR2,
   parameter_22     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACR_BALANCE_CPN

*@CREATED EQI 08.08.2009
*@LASTUPDATE MZHU   03.09.2009
*@PUBLIC
*@param PARAMETER_00:   ID Classification
*@param PARAMETER_01:   ID Financial year
*@param PARAMETER_04:   ID Version budget
*@param PARAMETER_10:   ID Financial year Comp1
*@param PARAMETER_13:   ID Version budget Comp1
*@param PARAMETER_19:   ID Financial year Comp2
*@param PARAMETER_22:   ID Version budget Comp2
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT classif_flat.node01, v_acs_account_classif.classification_id,
             classif_flat.node02, classif_flat.node03, classif_flat.node04,
             classif_flat.node05, classif_flat.node06, classif_flat.node07,
             classif_flat.node08, classif_flat.node09, classif_flat.node10,
             acs_account_cpn.acc_number, acs_account_cpn.acs_account_id,
             classif_flat.leaf_descr,
             acs_period_tot.acs_financial_year_id acs_financial_year_id1,
             acs_period_tot.per_no_period per_no_period1,
             act_mgm_tot_by_period.mto_debit_lc,
             act_mgm_tot_by_period.mto_credit_lc,
             v_acr_balance_cpn.acs_financial_year_id acs_financial_year_id2,
             act_mgm_tot_by_period.c_type_cumul,
             acb_budget_version.acb_budget_version_id acb_budget_version_id1,
             acs_period_bud.per_no_period per_no_period2,
             acb_period_amount.per_amount_d, acb_period_amount.per_amount_c,
             v_acr_balance_cpn.acb_budget_version_id acb_budget_version_id2,
             classif_flat.pc_lang_id,
             acs_function.getlocalcurrencyname localcurrencyname
        FROM v_acr_balance_cpn,
             acb_period_amount,
             classif_flat,
             acs_account acs_account_cpn,
             act_mgm_tot_by_period,
             acs_period acs_period_tot,
             acb_global_budget,
             acs_period acs_period_bud,
             acb_budget_version,
             v_acs_account_classif
       WHERE v_acr_balance_cpn.ID = acb_period_amount.acb_period_amount_id(+)
         AND v_acr_balance_cpn.acs_cpn_account_id =
                                                  classif_flat.classif_leaf_id
         AND v_acr_balance_cpn.acs_cpn_account_id =
                                                acs_account_cpn.acs_account_id
         AND v_acr_balance_cpn.ID = act_mgm_tot_by_period.act_mgm_tot_by_period_id(+)
         AND act_mgm_tot_by_period.acs_period_id = acs_period_tot.acs_period_id(+)
         AND classif_flat.classification_id =
                                       v_acs_account_classif.classification_id
         AND acb_period_amount.acb_global_budget_id = acb_global_budget.acb_global_budget_id(+)
         AND acb_period_amount.acs_period_id = acs_period_bud.acs_period_id(+)
         AND acb_global_budget.acb_budget_version_id = acb_budget_version.acb_budget_version_id(+)
         AND classif_flat.pc_lang_id = vpc_lang_id
         AND v_acs_account_classif.classification_id = parameter_00
         AND (   v_acr_balance_cpn.acs_financial_year_id = parameter_01
              OR v_acr_balance_cpn.acs_financial_year_id = parameter_10
              OR v_acr_balance_cpn.acs_financial_year_id = parameter_19
             )
         AND (   v_acr_balance_cpn.acb_budget_version_id = parameter_04
              OR v_acr_balance_cpn.acb_budget_version_id = parameter_13
              OR v_acr_balance_cpn.acb_budget_version_id = parameter_22
             );
END rpt_acr_balance_cpn;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_DOC_RECORD_STR" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     varchar2
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCPARAM_3 in     number
, PROCPARAM_4 in     number
, PROCPARAM_5 in     number
, PROCPARAM_6 in     varchar2
, PROCPARAM_7 in     varchar2
, PROCCOMPANY_NAME in pcs.pc_comp.com_name%type
, PROCPC_USER_ID in pcs.pc_user.pc_user_id%type)

is
/**
* Procédure stockée utilisée pour le rapport ACR_BALANCE_DOC_RECORD_STR (Balance Dossier avec classification)
* Replace report ACR_BALANCE_DOC_RECORD_STR_RPT
*
* @author SDO
* @lastUpdate VHA 29 november 2013
* @version 2003
* @public
* @param PROCPARAM_0    Classification        (ClASSIFICATION_ID)
* @param PROCPARAM_1    Dossier du            (RCO_TITLE)
* @param PROCPARAM_2    Dossier au            (RCO_TITLE)
* @param PROCPARAM_3    Exercice              (FYE_NO_EXERCICE)
* @param PROCPARAM_4    Période de            (PER_NO_PERIOD)
* @param PROCPARAM_5    Période à             (PER_NO_PERIOD)
* @param PROCPARAM_6    Sous-dossiers         0 = No, 1 = Yes
* @param PROCPARAM_7    Categories_ID (List)  '' = All sinon liste des ID
*/

vUserName   pcs.pc_user.use_name%type := null;
VPC_LANG_ID pcs.pc_lang.pc_lang_id%type := null;
begin
  select max(USE_NAME)
    into vUserName
    from PCS.PC_USER USR
   where USR.PC_USER_ID = PROCPC_USER_ID;

  if PROCPARAM_0 is not null then
      pcs.PC_I_LIB_SESSION.initsession(PROCCOMPANY_NAME, vUserName);
      VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;
  end if;

IF PROCPARAM_6 = 0 THEN
  open aRefCursor for
    SELECT
      'REEL' INFO,
      CFL.LEAF_DESCR LEAF_DESCR,
      CFL.NODE01,
      CFL.NODE02,
      CFL.NODE03,
      CFL.NODE04,
      CFL.NODE05,
      CFL.NODE06,
      CFL.NODE07,
      CFL.NODE08,
      CFL.NODE09,
      CFL.NODE10,
      CFL.PC_LANG_ID,
      MTO.ACS_PERIOD_ID,
      MTO.C_TYPE_CUMUL,
      MTO.DOC_RECORD_ID,
      RCO.RCO_TITLE,
      RCO.RCO_DESCRIPTION,
      (SELECT RCY.RCY_KEY
       FROM   DOC_RECORD_CATEGORY RCY
       WHERE  RCY.DOC_RECORD_CATEGORY_ID = RCO.DOC_RECORD_CATEGORY_ID ) RCY_KEY,
      MTO.ACS_CPN_ACCOUNT_ID,
      (SELECT ACC.ACC_NUMBER
       FROM   ACS_ACCOUNT ACC
       WHERE  ACC.ACS_ACCOUNT_ID = MTO.ACS_CPN_ACCOUNT_ID) ACC_NUMBER_CPN,
      (SELECT DES.DES_DESCRIPTION_SUMMARY
       FROM   ACS_DESCRIPTION DES
       WHERE  DES.ACS_ACCOUNT_ID   = MTO.ACS_CPN_ACCOUNT_ID and
              DES.PC_LANG_ID       = VPC_LANG_ID) ACCOUNT_CPN_DESCR,
      MTO.ACS_FINANCIAL_CURRENCY_ID,
      (SELECT CUR.CURRENCY
       FROM   PCS.PC_CURR CUR,
              ACS_FINANCIAL_CURRENCY FIC
       WHERE  FIC.ACS_FINANCIAL_CURRENCY_ID = MTO.ACS_ACS_FINANCIAL_CURRENCY_ID and
              FIC.PC_CURR_ID                = CUR.PC_CURR_ID) CURRENCY,
      (SELECT CURRENCY FROM PCS.PC_CURR WHERE PC_CURR_ID = (SELECT PC_CURR_ID
                                                              FROM ACS_FINANCIAL_CURRENCY
                                                             WHERE FIN_LOCAL_CURRENCY = 1)) LOCAL_CURRENCY_NAME,
      case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND
             ((SELECT PER_END_DATE FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) <
              (SELECT PER_START_DATE FROM ACS_PERIOD WHERE PER_NO_PERIOD = PROCPARAM_4 AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID FROM ACS_FINANCIAL_YEAR WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
        then MTO.MTO_DEBIT_LC
		    else 0
	    end MTO_START_DEBIT_LC, --DEBIT AVANT
      case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND
             ((SELECT PER_END_DATE FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) <
              (SELECT PER_START_DATE FROM ACS_PERIOD WHERE PER_NO_PERIOD = PROCPARAM_4 AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID FROM ACS_FINANCIAL_YEAR WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
        then MTO.MTO_CREDIT_LC
        else 0
	    end MTO_START_CREDIT_LC, --CREDIT AVANT
	    case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND(PROCPARAM_5 > -1) AND
             ((SELECT PER_START_DATE FROM ACS_PERIOD
                WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) BETWEEN (SELECT PER_START_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_4
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3))
                                                             AND (SELECT PER_END_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_5
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
          and  (select C_TYPE_PERIOD
                   from ACS_PERIOD
                   where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID)  <>'1'
        then MTO.MTO_DEBIT_LC
        else 0
        end MTO_DEBIT_LC,
	    case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND(PROCPARAM_5 > -1) AND
             ((SELECT PER_START_DATE FROM ACS_PERIOD
                WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) BETWEEN (SELECT PER_START_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_4
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3))
                                                             AND (SELECT PER_END_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_5
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
          and  (select C_TYPE_PERIOD
                   from ACS_PERIOD
                   where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID)  <>'1'
        then MTO.MTO_CREDIT_LC
        else 0
        end MTO_CREDIT_LC,
      MTO.MTO_DEBIT_FC,
      MTO.MTO_CREDIT_FC,
        case  when (PROCPARAM_3 = -1)
                           and (PROCPARAM_4 = -1)
                           and (PROCPARAM_5 = -1)
                           and ( (select  C_TYPE_PERIOD from ACS_PERIOD where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) = '2')
                then MTO.MTO_DEBIT_LC
                else 0
        end MTO_END_DEBIT_LC, --TOTAL DEBIT
        case  when (PROCPARAM_3 = -1)
                           and (PROCPARAM_4 = -1)
                           and (PROCPARAM_5 = -1)
                           and ( (select C_TYPE_PERIOD from ACS_PERIOD where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) = '2')
                then MTO.MTO_CREDIT_LC
                else 0
        end MTO_END_CREDIT_LC, --TOTAL CREDIT
      (SELECT PER_NO_PERIOD FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) PER_NO_PERIOD,
      (SELECT C_TYPE_PERIOD FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) C_TYPE_PERIOD
      FROM DOC_RECORD            RCO,
           ACT_MGM_TOT_BY_PERIOD MTO,
           CLASSIF_FLAT          CFL
     WHERE CFL.CLASSIFICATION_ID       = PROCPARAM_0
       AND CFL.PC_LANG_ID              = VPC_LANG_ID
       AND CFL.CLASSIF_LEAF_ID         = MTO.ACS_CPN_ACCOUNT_ID
       AND RCO.RCO_TITLE              >= PROCPARAM_1
       AND RCO.RCO_TITLE              <= PROCPARAM_2
       AND MTO.DOC_RECORD_ID           = RCO.DOC_RECORD_ID
       AND (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||RCO.DOC_RECORD_CATEGORY_ID||',')) > 0 OR PROCPARAM_7 is null)
  UNION ALL
    SELECT
      'VIDE' INFO,
      NULL LEAF_DESCR,
      NULL NODE01,
      NULL NODE02,
      NULL NODE03,
      NULL NODE04,
      NULL NODE05,
      NULL NODE06,
      NULL NODE07,
      NULL NODE08,
      NULL NODE09,
      NULL NODE10,
      0 LANG_ID,
      0 ACS_PERIOD_ID,
      NULL C_TYPE_CUMUL,
      0 DOC_RECORD_ID,
      RCO.RCO_TITLE,
      RCO.RCO_DESCRIPTION,
      NULL RCY_KEY,
      0 ACS_CPN_ACCOUNT_ID,
      NULL ACC_NUMBER_CPN,
      NULL ACCOUNT_CPN_DESCR,
      0 ACS_FINANCIAL_CURRENCY_ID,
      NULL CURRENCY,
      (SELECT CURRENCY FROM PCS.PC_CURR WHERE PC_CURR_ID = (SELECT PC_CURR_ID
                                                              FROM ACS_FINANCIAL_CURRENCY
                                                             WHERE FIN_LOCAL_CURRENCY = 1)) LOCAL_CURRENCY_NAME,
      0 MTO_START_DEBIT_LC, --DEBIT AVANT
      0 MTO_START_CREDIT_LC, --CREDIT_AVANT
      0 MTO_DEBIT_LC,
      0 MTO_CREDIT_LC,
      0 MTO_DEBIT_FC,
      0 MTO_CREDIT_FC,
      0 MTO_END_DEBIT_LC, --TOTAL DEBIT
      0 MTO_END_CREDIT_LC, --TOTAL CREDIT
      0 PER_NO_PERIOD,
      NULL C_TYPE_PERIOD
      FROM DOC_RECORD RCO
     WHERE RCO.RCO_TITLE >= PROCPARAM_1
       AND RCO.RCO_TITLE <= PROCPARAM_2
       AND (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||RCO.DOC_RECORD_CATEGORY_ID||',')) > 0 OR PROCPARAM_7 is null);
ELSE
  open aRefCursor for
    SELECT
      'REEL' INFO,
      CFL.LEAF_DESCR LEAF_DESCR,
      CFL.NODE01,
      CFL.NODE02,
      CFL.NODE03,
      CFL.NODE04,
      CFL.NODE05,
      CFL.NODE06,
      CFL.NODE07,
      CFL.NODE08,
      CFL.NODE09,
      CFL.NODE10,
      CFL.PC_LANG_ID,
      MTO.ACS_PERIOD_ID,
      MTO.C_TYPE_CUMUL,
      MTO.DOC_RECORD_ID,
      RCO.RCO_TITLE,
      RCO.RCO_DESCRIPTION,
      (SELECT RCY.RCY_KEY
       FROM   DOC_RECORD_CATEGORY RCY
       WHERE  RCY.DOC_RECORD_CATEGORY_ID = RCO.DOC_RECORD_CATEGORY_ID ) RCY_KEY,
      MTO.ACS_CPN_ACCOUNT_ID,
      (SELECT ACC.ACC_NUMBER
       FROM   ACS_ACCOUNT ACC
       WHERE  ACC.ACS_ACCOUNT_ID = MTO.ACS_CPN_ACCOUNT_ID) ACC_NUMBER_CPN,
      (SELECT DES.DES_DESCRIPTION_SUMMARY
       FROM   ACS_DESCRIPTION DES
       WHERE  DES.ACS_ACCOUNT_ID   = MTO.ACS_CPN_ACCOUNT_ID and
              DES.PC_LANG_ID       = VPC_LANG_ID) ACCOUNT_CPN_DESCR,
      MTO.ACS_FINANCIAL_CURRENCY_ID,
      (SELECT CUR.CURRENCY
       FROM   PCS.PC_CURR CUR,
              ACS_FINANCIAL_CURRENCY FIC
       WHERE  FIC.ACS_FINANCIAL_CURRENCY_ID = MTO.ACS_ACS_FINANCIAL_CURRENCY_ID and
              FIC.PC_CURR_ID                = CUR.PC_CURR_ID) CURRENCY,
      (SELECT CURRENCY FROM PCS.PC_CURR WHERE PC_CURR_ID = (SELECT PC_CURR_ID
                                                              FROM ACS_FINANCIAL_CURRENCY
                                                             WHERE FIN_LOCAL_CURRENCY = 1)) LOCAL_CURRENCY_NAME,
      case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND
             ((SELECT PER_END_DATE FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) <
              (SELECT PER_START_DATE FROM ACS_PERIOD WHERE PER_NO_PERIOD = PROCPARAM_4 AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID FROM ACS_FINANCIAL_YEAR WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
        then MTO.MTO_DEBIT_LC
		    else 0
	    end MTO_START_DEBIT_LC, --DEBIT AVANT
      case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND
             ((SELECT PER_END_DATE FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) <
              (SELECT PER_START_DATE FROM ACS_PERIOD WHERE PER_NO_PERIOD = PROCPARAM_4 AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID FROM ACS_FINANCIAL_YEAR WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
        then MTO.MTO_CREDIT_LC
        else 0
	    end MTO_START_CREDIT_LC, --CREDIT AVANT
	    case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND(PROCPARAM_5 > -1) AND
             ((SELECT PER_START_DATE FROM ACS_PERIOD
                WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) BETWEEN (SELECT PER_START_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_4
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3))
                                                             AND (SELECT PER_END_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_5
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
          and  (select C_TYPE_PERIOD
                   from ACS_PERIOD
                   where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID)  <>'1'
        then MTO.MTO_DEBIT_LC
        else 0
        end MTO_DEBIT_LC,
	    case
	  	  when (PROCPARAM_3 > -1) AND (PROCPARAM_4 > -1) AND(PROCPARAM_5 > -1) AND
             ((SELECT PER_START_DATE FROM ACS_PERIOD
                WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) BETWEEN (SELECT PER_START_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_4
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3))
                                                             AND (SELECT PER_END_DATE
                                                                    FROM ACS_PERIOD
                                                                   WHERE PER_NO_PERIOD = PROCPARAM_5
                                                                     AND ACS_FINANCIAL_YEAR_ID = (SELECT ACS_FINANCIAL_YEAR_ID
                                                                                                    FROM ACS_FINANCIAL_YEAR
                                                                                                   WHERE FYE_NO_EXERCICE = PROCPARAM_3)))
          and  (select C_TYPE_PERIOD
                   from ACS_PERIOD
                   where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID)  <>'1'
        then MTO.MTO_CREDIT_LC
        else 0
        end MTO_CREDIT_LC,
      MTO.MTO_DEBIT_FC,
      MTO.MTO_CREDIT_FC,
        case  when (PROCPARAM_3 = -1)
                           and (PROCPARAM_4 = -1)
                           and (PROCPARAM_5 = -1)
                           and ( (select  C_TYPE_PERIOD from ACS_PERIOD where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) = '2')
                then MTO.MTO_DEBIT_LC
                else 0
        end MTO_END_DEBIT_LC, --TOTAL DEBIT
        case  when (PROCPARAM_3 = -1)
                           and (PROCPARAM_4 = -1)
                           and (PROCPARAM_5 = -1)
                           and ( (select C_TYPE_PERIOD from ACS_PERIOD where ACS_PERIOD_ID = MTO.ACS_PERIOD_ID)  = '2')
                then MTO.MTO_CREDIT_LC
                else 0
        end MTO_END_CREDIT_LC, --TOTAL CREDIT
      (SELECT PER_NO_PERIOD FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) PER_NO_PERIOD,
      (SELECT C_TYPE_PERIOD FROM ACS_PERIOD WHERE ACS_PERIOD_ID = MTO.ACS_PERIOD_ID) C_TYPE_PERIOD
      FROM  (SELECT CHILD_DOC_RECORD_ID,
                    DOC_RECORD_ID
               FROM (SELECT COLUMN_VALUE CHILD_DOC_RECORD_ID,
    	                      RCO1.DOC_RECORD_ID
                       FROM DOC_RECORD RCO1,
    		                    table(ACR_FUNCTIONS.GetChildrenLinkedDocRecord(RCO1.DOC_RECORD_ID, 20))
                      WHERE RCO1.RCO_TITLE >= PROCPARAM_1
                        AND RCO1.RCO_TITLE <= PROCPARAM_2
                        AND (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||RCO1.DOC_RECORD_CATEGORY_ID||',')) > 0 OR PROCPARAM_7 is null)
    	      )) CHI,
            ACT_MGM_TOT_BY_PERIOD MTO,
            DOC_RECORD RCO,
           CLASSIF_FLAT CFL
     WHERE CFL.CLASSIFICATION_ID  = PROCPARAM_0
       AND CFL.PC_LANG_ID         = VPC_LANG_ID
       AND CFL.CLASSIF_LEAF_ID    = MTO.ACS_CPN_ACCOUNT_ID
       AND MTO.DOC_RECORD_ID      = CHI.CHILD_DOC_RECORD_ID
       AND CHI.DOC_RECORD_ID      = RCO.DOC_RECORD_ID
  UNION ALL
    SELECT
      'VIDE' INFO,
      NULL LEAF_DESCR,
      NULL NODE01,
      NULL NODE02,
      NULL NODE03,
      NULL NODE04,
      NULL NODE05,
      NULL NODE06,
      NULL NODE07,
      NULL NODE08,
      NULL NODE09,
      NULL NODE10,
      0 LANG_ID,
      0 ACS_PERIOD_ID,
      NULL C_TYPE_CUMUL,
      0 DOC_RECORD_ID,
      RCO.RCO_TITLE,
      RCO.RCO_DESCRIPTION,
      NULL RCY_KEY,
      0 ACS_CPN_ACCOUNT_ID,
      NULL ACC_NUMBER_CPN,
      NULL ACCOUNT_CPN_DESCR,
      0 ACS_FINANCIAL_CURRENCY_ID,
      NULL CURRENCY,
      (SELECT CURRENCY FROM PCS.PC_CURR WHERE PC_CURR_ID = (SELECT PC_CURR_ID
                                                              FROM ACS_FINANCIAL_CURRENCY
                                                             WHERE FIN_LOCAL_CURRENCY = 1)) LOCAL_CURRENCY_NAME,
      0 MTO_START_DEBIT_LC, --DEBIT AVANT
      0 MTO_START_CREDIT_LC, --CREDIT_AVANT
      0 MTO_DEBIT_LC,
      0 MTO_CREDIT_LC,
      0 MTO_DEBIT_FC,
      0 MTO_CREDIT_FC,
      0 MTO_END_DEBIT_LC, --TOTAL DEBIT
      0 MTO_END_CREDIT_LC, --TOTAL CREDIT
      0 PER_NO_PERIOD,
      NULL C_TYPE_PERIOD
    FROM
      DOC_RECORD                    RCO
    WHERE (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||RCO.DOC_RECORD_CATEGORY_ID||',')) > 0 OR PROCPARAM_7 is null)
      AND RCO.RCO_TITLE >= PROCPARAM_1
      AND RCO.RCO_TITLE <= PROCPARAM_2;
  end if;
end RPT_ACR_BALANCE_DOC_RECORD_STR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_MASTER" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.DUALCURSORTYP
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_3    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
/**
* description used for report ACR_BALANCE and ACR_BALANCE_DC

*@CREATED JLIU 04.09.2009
*@lastUpdate VHA 16 JULY 2013
*@PUBLIC
*@param parameter_0:   CLASSIFICATION_ID
*@param parameter_1:   ACS_FINANCIAL_YEAR_ID
*@param parameter_3:   ACS_FINANCIAL_YEAR_ID
*@param parameter_10:  ACB_BUDGET_VERSION_ID
*@param parameter_11:  ACB_BUDGET_VERSION_ID
*/
is
  vpc_lang_id         PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id         PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id         PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id        PCS.PC_CONLI.PC_CONLI_ID%type := null;
  V_FYE_NO_EXERCICE_1 number(9);
  V_FYE_NO_EXERCICE_2 number(9);
  C_FYE_NO_EXERCICE_1 number(2);
  C_FYE_NO_EXERCICE_2 number(2);
  V_VER_NUMBER_1      varchar2(30 char);
  V_VER_NUMBER_2      varchar2(30 char);
  C_VER_NUMBER_1      number(2);
  C_VER_NUMBER_2      number(2);
begin
  if parameter_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getuserlangid;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  select count(FYE.FYE_NO_EXERCICE)
    into C_FYE_NO_EXERCICE_1
    from ACS_FINANCIAL_YEAR FYE
   where FYE.ACS_FINANCIAL_YEAR_ID = parameter_1;

  if C_FYE_NO_EXERCICE_1 = 0 then
    V_FYE_NO_EXERCICE_1  := null;
  else
    select FYE.FYE_NO_EXERCICE
      into V_FYE_NO_EXERCICE_1
      from ACS_FINANCIAL_YEAR FYE
     where FYE.ACS_FINANCIAL_YEAR_ID = parameter_1;
  end if;

  select count(FYE.FYE_NO_EXERCICE)
    into C_FYE_NO_EXERCICE_2
    from ACS_FINANCIAL_YEAR FYE
   where FYE.ACS_FINANCIAL_YEAR_ID = parameter_3;

  if C_FYE_NO_EXERCICE_2 = 0 then
    V_FYE_NO_EXERCICE_2  := null;
  else
    select FYE.FYE_NO_EXERCICE
      into V_FYE_NO_EXERCICE_2
      from ACS_FINANCIAL_YEAR FYE
     where FYE.ACS_FINANCIAL_YEAR_ID = parameter_3;
  end if;

  select count(VER.VER_NUMBER)
    into C_VER_NUMBER_1
    from ACB_BUDGET_VERSION VER
   where VER.ACB_BUDGET_VERSION_ID = parameter_11;

  if C_VER_NUMBER_1 = 0 then
    V_VER_NUMBER_1  := null;
  else
    select VER.VER_NUMBER
      into V_VER_NUMBER_1
      from ACB_BUDGET_VERSION VER
     where VER.ACB_BUDGET_VERSION_ID = parameter_11;
  end if;

  select count(VER.VER_NUMBER)
    into C_VER_NUMBER_2
    from ACB_BUDGET_VERSION VER
   where VER.ACB_BUDGET_VERSION_ID = parameter_10;

  if C_VER_NUMBER_2 = 0 then
    V_VER_NUMBER_2  := null;
  else
    select VER.VER_NUMBER
      into V_VER_NUMBER_2
      from ACB_BUDGET_VERSION VER
     where VER.ACB_BUDGET_VERSION_ID = parameter_10;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open AREFCURSOR for
    select VER.ACB_BUDGET_VERSION_ID
         , PAM.PER_AMOUNT_D
         , PAM.PER_AMOUNT_C
         , ACC.ACS_ACCOUNT_ID
         , PER.ACS_FINANCIAL_YEAR_ID
         , PER.PER_NO_PERIOD
         , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_AUXILIARY_ACCOUNT_ID
         , TOT.C_TYPE_CUMUL
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , CFL.NODE01
         , CFL.NODE02
         , CFL.NODE03
         , CFL.NODE04
         , CFL.NODE05
         , CFL.NODE06
         , CFL.NODE07
         , CFL.NODE08
         , CFL.NODE09
         , CFL.NODE10
         , CFL.CLASSIF_LEAF_ID
         , CFL.LEAF_DESCR
         , CLA.CLASSIFICATION_ID
         , VAC.ACS_FINANCIAL_ACCOUNT_ID
         , VAC.ACC_NUMBER
         , VAC.DES_DESCRIPTION_SUMMARY
         , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
         , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
         , V_VER_NUMBER_1 VER_NUMBER_1
         , V_VER_NUMBER_2 VER_NUMBER_2
      from ACB_BUDGET_VERSION VER
         , ACB_GLOBAL_BUDGET GLO
         , ACB_PERIOD_AMOUNT PAM
         , ACS_ACCOUNT ACC
         , ACS_PERIOD PER
         , ACS_PERIOD PER_BUD
         , ACT_TOTAL_BY_PERIOD TOT
         , CLASSIF_FLAT CFL
         , CLASSIFICATION CLA
         , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , TOT.ACT_TOTAL_BY_PERIOD_ID id
                 , 'TOT' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , 0 ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACT_TOTAL_BY_PERIOD TOT
                 , ACS_PERIOD PER
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and (   ACS_FINANCIAL_YEAR_ID = parameter_1
                    or ACS_FINANCIAL_YEAR_ID = parameter_3)
               and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
            union all
            select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , GLO.ACS_DIVISION_ACCOUNT_ID
                 , AMO.ACB_PERIOD_AMOUNT_ID id
                 , 'BUD' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , GLO.ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACB_PERIOD_AMOUNT AMO
                 , ACB_GLOBAL_BUDGET GLO
                 , ACS_PERIOD PER
                 , ACS_FINANCIAL_CURRENCY CUR
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
               and (   ACS_FINANCIAL_YEAR_ID = parameter_1
                    or ACS_FINANCIAL_YEAR_ID = parameter_3)
               and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
               and CUR.FIN_LOCAL_CURRENCY = 1
               and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
         , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                 , ACS_ACCOUNT.ACC_NUMBER
                 , ACS_DESCRIPTION.PC_LANG_ID
                 , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                 , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
              from ACS_DESCRIPTION
                 , ACS_ACCOUNT
                 , ACS_FINANCIAL_ACCOUNT
                 , ACS_SUB_SET
             where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
               and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, null) ) AUT
     where VAC.PC_LANG_ID = vpc_lang_id
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
       and CFL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID
       and CFL.PC_LANG_ID = vpc_lang_id
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
       and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
       and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
       and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
       and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
       and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
       and CLA.CLASSIFICATION_ID = to_number(parameter_0)
       and (    (     (    ACC.ACS_ACCOUNT_ID is not null
                       and AUT.column_value is not null)
                 and (ACC.ACS_ACCOUNT_ID = AUT.column_value) )
            or (    ACC.ACS_ACCOUNT_ID is null
                and AUT.column_value is null
                and TYP = 'BUD')
           );
else
  open AREFCURSOR for
    select VER.ACB_BUDGET_VERSION_ID
         , PAM.PER_AMOUNT_D
         , PAM.PER_AMOUNT_C
         , ACC.ACS_ACCOUNT_ID
         , PER.ACS_FINANCIAL_YEAR_ID
         , PER.PER_NO_PERIOD
         , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_AUXILIARY_ACCOUNT_ID
         , TOT.C_TYPE_CUMUL
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , CFL.NODE01
         , CFL.NODE02
         , CFL.NODE03
         , CFL.NODE04
         , CFL.NODE05
         , CFL.NODE06
         , CFL.NODE07
         , CFL.NODE08
         , CFL.NODE09
         , CFL.NODE10
         , CFL.CLASSIF_LEAF_ID
         , CFL.LEAF_DESCR
         , CLA.CLASSIFICATION_ID
         , VAC.ACS_FINANCIAL_ACCOUNT_ID
         , VAC.ACC_NUMBER
         , VAC.DES_DESCRIPTION_SUMMARY
         , V_FYE_NO_EXERCICE_1 FYE_NO_EXERCICE_1
         , V_FYE_NO_EXERCICE_2 FYE_NO_EXERCICE_2
         , V_VER_NUMBER_1 VER_NUMBER_1
         , V_VER_NUMBER_2 VER_NUMBER_2
      from ACB_BUDGET_VERSION VER
         , ACB_GLOBAL_BUDGET GLO
         , ACB_PERIOD_AMOUNT PAM
         , ACS_ACCOUNT ACC
         , ACS_PERIOD PER
         , ACS_PERIOD PER_BUD
         , ACT_TOTAL_BY_PERIOD TOT
         , CLASSIF_FLAT CFL
         , CLASSIFICATION CLA
         , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , TOT.ACT_TOTAL_BY_PERIOD_ID id
                 , 'TOT' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , 0 ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACT_TOTAL_BY_PERIOD TOT
                 , ACS_PERIOD PER
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and (   ACS_FINANCIAL_YEAR_ID = parameter_1
                    or ACS_FINANCIAL_YEAR_ID = parameter_3)
               and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
            union all
            select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , GLO.ACS_DIVISION_ACCOUNT_ID
                 , AMO.ACB_PERIOD_AMOUNT_ID id
                 , 'BUD' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , GLO.ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACB_PERIOD_AMOUNT AMO
                 , ACB_GLOBAL_BUDGET GLO
                 , ACS_PERIOD PER
                 , ACS_FINANCIAL_CURRENCY CUR
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
               and (   ACS_FINANCIAL_YEAR_ID = parameter_1
                    or ACS_FINANCIAL_YEAR_ID = parameter_3)
               and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
               and CUR.FIN_LOCAL_CURRENCY = 1
               and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
         , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                 , ACS_ACCOUNT.ACC_NUMBER
                 , ACS_DESCRIPTION.PC_LANG_ID
                 , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                 , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
              from ACS_DESCRIPTION
                 , ACS_ACCOUNT
                 , ACS_FINANCIAL_ACCOUNT
                 , ACS_SUB_SET
             where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
               and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
     where VAC.PC_LANG_ID = vpc_lang_id
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = CFL.CLASSIF_LEAF_ID
       and CFL.CLASSIFICATION_ID = CLA.CLASSIFICATION_ID
       and CFL.PC_LANG_ID = vpc_lang_id
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
       and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
       and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
       and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
       and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
       and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
       and CLA.CLASSIFICATION_ID = to_number(parameter_0);
end if;
end RPT_ACR_BALANCE_MASTER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_PF" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_14     IN       VARCHAR2,
   parameter_20     IN       VARCHAR2,
   parameter_21     IN       VARCHAR2,
   parameter_24     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACR_BALANCE_PF

*@CREATED EQI 08.08.2009
*@LASTUPDATE EQI   03.09.2009
*@PUBLIC
*@param PARAMETER_00:   ID Classification
*@param PARAMETER_01:   ID Financial year Réf
*@param PARAMETER_04:   ID Version budget REF
*@param PARAMETER_10:   PF Account from
*@param PARAMETER_11:   ID Financial year Comp1
*@param PARAMETER_14:   ID Version budget Comp1
*@param PARAMETER_20:   PF Account to
*@param PARAMETER_21:   ID Financial year Comp2
*@param PARAMETER_24:   ID Version budget Comp2
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acb_budget_version.acb_budget_version_id acb_budget_version_id1,
             acb_period_amount.per_amount_d, acb_period_amount.per_amount_c,
             acs_account_pf.acc_number acc_number1,
             acs_account_cpn.acc_number acc_number2,
             acs_description.pc_lang_id,
             acs_description.des_description_summary,
             acs_period_bud.per_no_period per_no_period1,
             acs_period_tot.acs_financial_year_id acs_financial_year_id1,
             acs_period_tot.per_no_period per_no_period2,
             act_mgm_tot_by_period.mto_debit_lc,
             act_mgm_tot_by_period.mto_credit_lc,
             act_mgm_tot_by_period.c_type_cumul, classif_flat.node01,
             classif_flat.node02, classif_flat.node03, classif_flat.node04,
             classif_flat.node05, classif_flat.node06, classif_flat.node07,
             classif_flat.node08, classif_flat.node09, classif_flat.node10,
             classif_flat.leaf_descr, pc_lang.lanid,
             v_acr_balance_pf.acs_financial_year_id acs_financial_year_id2,
             v_acr_balance_pf.acb_budget_version_id acb_budget_version_id2,
             v_acs_account_classif.classification_id,
             acs_function.getlocalcurrencyname localcurrencyname
        FROM v_acr_balance_pf,
             classif_flat,
             acs_account acs_account_cpn,
             acs_account acs_account_pf,
             act_mgm_tot_by_period,
             acs_period acs_period_tot,
             acb_period_amount,
             acs_period acs_period_bud,
             acb_global_budget,
             acb_budget_version,
             acs_description,
             pcs.pc_lang pc_lang,
             v_acs_account_classif
       WHERE v_acr_balance_pf.acs_cpn_account_id =
                                                  classif_flat.classif_leaf_id
         AND v_acr_balance_pf.acs_cpn_account_id =
                                                acs_account_cpn.acs_account_id
         AND v_acr_balance_pf.acs_pf_account_id =
                                                 acs_account_pf.acs_account_id
         AND v_acr_balance_pf.ID = act_mgm_tot_by_period.act_mgm_tot_by_period_id(+)
         AND act_mgm_tot_by_period.acs_period_id = acs_period_tot.acs_period_id(+)
         AND v_acr_balance_pf.ID = acb_period_amount.acb_period_amount_id(+)
         AND acb_period_amount.acs_period_id = acs_period_bud.acs_period_id(+)
         AND acb_period_amount.acb_global_budget_id = acb_global_budget.acb_global_budget_id(+)
         AND acb_global_budget.acb_budget_version_id = acb_budget_version.acb_budget_version_id(+)
         AND v_acr_balance_pf.acs_pf_account_id =
                                                acs_description.acs_account_id
         AND pc_lang.lanid = procuser_lanid
         AND acs_description.pc_lang_id = vpc_lang_id
         AND classif_flat.classification_id =
                                       v_acs_account_classif.classification_id
         AND classif_flat.pc_lang_id = pc_lang.pc_lang_id
         AND v_acs_account_classif.classification_id = parameter_00
         AND acs_account_pf.acc_number >= parameter_10
         AND acs_account_pf.acc_number <= parameter_20
         AND (   v_acr_balance_pf.acs_financial_year_id = parameter_01
              OR v_acr_balance_pf.acs_financial_year_id = parameter_11
              OR v_acr_balance_pf.acs_financial_year_id = parameter_21
             )
         AND (   v_acr_balance_pf.acb_budget_version_id = parameter_04
              OR v_acr_balance_pf.acb_budget_version_id = parameter_14
              OR v_acr_balance_pf.acb_budget_version_id = parameter_24
             );
END rpt_acr_balance_pf;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_PJ" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_14     IN       VARCHAR2,
   parameter_20     IN       VARCHAR2,
   parameter_21     IN       VARCHAR2,
   parameter_24     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACR_BALANCE_CPN

*@CREATED EQI 08.08.2009
*@LASTUPDATE EQI   03.09.2009
*@PUBLIC
*@param PARAMETER_00:   ID Classification
*@param PARAMETER_01:   ID Financial year Réf
*@param PARAMETER_04:   ID Version budget REF
*@param PARAMETER_10:   PJ Account from
*@param PARAMETER_11:   ID Financial year Comp1
*@param PARAMETER_20:   PJ Account to
*@param PARAMETER_21:   ID Financial year Comp2
*@param PARAMETER_24:   ID Version budget Comp2
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acb_budget_version.acb_budget_version_id acb_budget_version_id1,
             acb_period_amount.per_amount_d, acb_period_amount.per_amount_c,
             acs_account_pj.acc_number acc_number1,
             acs_account_cpn.acc_number acc_number2,
             acs_description.pc_lang_id,
             acs_description.des_description_summary,
             acs_period_bud.per_no_period per_no_period1,
             acs_period_tot.acs_financial_year_id acs_financial_year_id1,
             acs_period_tot.per_no_period per_no_period2,
             act_mgm_tot_by_period.mto_debit_lc,
             act_mgm_tot_by_period.mto_credit_lc,
             act_mgm_tot_by_period.c_type_cumul, classif_flat.node01,
             classif_flat.node02, classif_flat.node03, classif_flat.node04,
             classif_flat.node05, classif_flat.node06, classif_flat.node07,
             classif_flat.node08, classif_flat.node09, classif_flat.node10,
             classif_flat.leaf_descr, pc_lang.lanid,
             v_acr_balance_pj.acs_financial_year_id acs_financial_year_id2,
             v_acr_balance_pj.acb_budget_version_id acb_budget_version_id2,
             v_acs_account_classif.classification_id,
             acs_function.getlocalcurrencyname localcurrencyname
        FROM v_acr_balance_pj,
             classif_flat,
             acs_account acs_account_cpn,
             acs_account acs_account_pj,
             act_mgm_tot_by_period,
             acs_period acs_period_tot,
             acb_period_amount,
             acs_period acs_period_bud,
             acb_global_budget,
             acb_budget_version,
             acs_description,
             pcs.pc_lang pc_lang,
             v_acs_account_classif
       WHERE v_acr_balance_pj.acs_cpn_account_id =
                                                  classif_flat.classif_leaf_id
         AND v_acr_balance_pj.acs_cpn_account_id =
                                                acs_account_cpn.acs_account_id
         AND v_acr_balance_pj.acs_pj_account_id =
                                                 acs_account_pj.acs_account_id
         AND v_acr_balance_pj.ID = act_mgm_tot_by_period.act_mgm_tot_by_period_id(+)
         AND act_mgm_tot_by_period.acs_period_id = acs_period_tot.acs_period_id(+)
         AND v_acr_balance_pj.ID = acb_period_amount.acb_period_amount_id(+)
         AND acb_period_amount.acs_period_id = acs_period_bud.acs_period_id(+)
         AND acb_period_amount.acb_global_budget_id = acb_global_budget.acb_global_budget_id(+)
         AND acb_global_budget.acb_budget_version_id = acb_budget_version.acb_budget_version_id(+)
         AND v_acr_balance_pj.acs_pj_account_id =
                                                acs_description.acs_account_id
         AND pc_lang.lanid = procuser_lanid
         AND acs_description.pc_lang_id = vpc_lang_id
         AND classif_flat.classification_id =
                                       v_acs_account_classif.classification_id
         AND classif_flat.pc_lang_id = pc_lang.pc_lang_id
         AND v_acs_account_classif.classification_id = parameter_00
         AND acs_account_pj.acc_number >= parameter_10
         AND acs_account_pj.acc_number <= parameter_20
         AND (   v_acr_balance_pj.acs_financial_year_id = parameter_01
              OR v_acr_balance_pj.acs_financial_year_id = parameter_11
              OR v_acr_balance_pj.acs_financial_year_id = parameter_21
             )
         AND (   v_acr_balance_pj.acb_budget_version_id = parameter_04
              OR v_acr_balance_pj.acb_budget_version_id = parameter_14
              OR v_acr_balance_pj.acb_budget_version_id = parameter_24
             );
END rpt_acr_balance_pj;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_BALANCE_SUB_MASTER" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
/**
* description used for report ACR_BALANCE and ACR_BALANCE_DC

*@CREATED JLIU 04.09.2009
*@lastUpdate VHA 16 JULY 2013
*@PUBLIC
*@param PARAMETER_0:   CLASSIFICATION_ID
*@param PARAMETER_10:  ACB_BUDGET_VERSION_ID
*@param PARAMETER_11:  ACB_BUDGET_VERSION_ID
*/
is
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if parameter_0 is not null then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getuserlangid;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open arefcursor for
    select VER.ACB_BUDGET_VERSION_ID
         , PAM.PER_AMOUNT_D
         , PAM.PER_AMOUNT_C
         , ACC.ACS_ACCOUNT_ID
         , FUR.ACS_FINANCIAL_CURRENCY_ID
         , PER.ACS_FINANCIAL_YEAR_ID
         , PER.PER_NO_PERIOD
         , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_AUXILIARY_ACCOUNT_ID
         , TOT.C_TYPE_CUMUL
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , CUR.CURRENCY
         , VAC.ACS_FINANCIAL_ACCOUNT_ID
         , VAC.ACC_NUMBER
      from ACB_BUDGET_VERSION VER
         , ACB_GLOBAL_BUDGET GLO
         , ACB_PERIOD_AMOUNT PAM
         , ACS_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FUR
         , PCS.PC_CURR CUR
         , ACS_PERIOD PER
         , ACS_PERIOD PER_BUD
         , ACT_TOTAL_BY_PERIOD TOT
         , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , TOT.ACT_TOTAL_BY_PERIOD_ID id
                 , 'TOT' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , 0 ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACT_TOTAL_BY_PERIOD TOT
                 , ACS_PERIOD PER
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
            union all
            select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , GLO.ACS_DIVISION_ACCOUNT_ID
                 , AMO.ACB_PERIOD_AMOUNT_ID id
                 , 'BUD' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , GLO.ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACB_PERIOD_AMOUNT AMO
                 , ACB_GLOBAL_BUDGET GLO
                 , ACS_PERIOD PER
                 , ACS_FINANCIAL_CURRENCY CUR
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
               and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
               and CUR.FIN_LOCAL_CURRENCY = 1
               and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
         , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                 , ACS_ACCOUNT.ACC_NUMBER
                 , ACS_DESCRIPTION.PC_LANG_ID
                 , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                 , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
              from ACS_DESCRIPTION
                 , ACS_ACCOUNT
                 , ACS_FINANCIAL_ACCOUNT
                 , ACS_SUB_SET
             where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
               and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, null) ) AUT
     where VAC.ACS_FINANCIAL_ACCOUNT_ID = to_number(parameter_0)
       and VAC.PC_LANG_ID = VPC_LANG_ID
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
       and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
       and TOT.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.FIN_LOCAL_CURRENCY <> 1
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
       and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
       and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
       and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+)
       and (    (     (    ACC.ACS_ACCOUNT_ID is not null
                       and AUT.column_value is not null)
                 and (ACC.ACS_ACCOUNT_ID = AUT.column_value) )
            or (    ACC.ACS_ACCOUNT_ID is null
                and AUT.column_value is null
                and TYP = 'BUD')
           );
else
  open arefcursor for
    select VER.ACB_BUDGET_VERSION_ID
         , PAM.PER_AMOUNT_D
         , PAM.PER_AMOUNT_C
         , ACC.ACS_ACCOUNT_ID
         , FUR.ACS_FINANCIAL_CURRENCY_ID
         , PER.ACS_FINANCIAL_YEAR_ID
         , PER.PER_NO_PERIOD
         , PER_BUD.PER_NO_PERIOD BUD_PER_NO_PERIOD
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_AUXILIARY_ACCOUNT_ID
         , TOT.C_TYPE_CUMUL
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , CUR.CURRENCY
         , VAC.ACS_FINANCIAL_ACCOUNT_ID
         , VAC.ACC_NUMBER
      from ACB_BUDGET_VERSION VER
         , ACB_GLOBAL_BUDGET GLO
         , ACB_PERIOD_AMOUNT PAM
         , ACS_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY FUR
         , PCS.PC_CURR CUR
         , ACS_PERIOD PER
         , ACS_PERIOD PER_BUD
         , ACT_TOTAL_BY_PERIOD TOT
         , (select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , TOT.ACS_DIVISION_ACCOUNT_ID
                 , TOT.ACT_TOTAL_BY_PERIOD_ID id
                 , 'TOT' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , 0 ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACT_TOTAL_BY_PERIOD TOT
                 , ACS_PERIOD PER
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
               and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
               and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
            union all
            select ACC.ACS_FINANCIAL_ACCOUNT_ID
                 , GLO.ACS_DIVISION_ACCOUNT_ID
                 , AMO.ACB_PERIOD_AMOUNT_ID id
                 , 'BUD' TYP
                 , PER.ACS_FINANCIAL_YEAR_ID
                 , GLO.ACB_BUDGET_VERSION_ID
              from ACS_FINANCIAL_ACCOUNT ACC
                 , ACB_PERIOD_AMOUNT AMO
                 , ACB_GLOBAL_BUDGET GLO
                 , ACS_PERIOD PER
                 , ACS_FINANCIAL_CURRENCY CUR
             where ACC.ACS_FINANCIAL_ACCOUNT_ID = GLO.ACS_FINANCIAL_ACCOUNT_ID
               and GLO.ACB_GLOBAL_BUDGET_ID = AMO.ACB_GLOBAL_BUDGET_ID
               and GLO.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
               and CUR.FIN_LOCAL_CURRENCY = 1
               and AMO.ACS_PERIOD_ID = PER.ACS_PERIOD_ID) VBA
         , (select ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID
                 , ACS_ACCOUNT.ACC_NUMBER
                 , ACS_DESCRIPTION.PC_LANG_ID
                 , ACS_DESCRIPTION.DES_DESCRIPTION_SUMMARY
                 , ACS_FUNCTION.ISFINACCOUNTINME(ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID) ISFINACCOUNTINME
              from ACS_DESCRIPTION
                 , ACS_ACCOUNT
                 , ACS_FINANCIAL_ACCOUNT
                 , ACS_SUB_SET
             where ACS_FINANCIAL_ACCOUNT.ACS_FINANCIAL_ACCOUNT_ID = ACS_ACCOUNT.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_ACCOUNT_ID = ACS_DESCRIPTION.ACS_ACCOUNT_ID
               and ACS_ACCOUNT.ACS_SUB_SET_ID = ACS_SUB_SET.ACS_SUB_SET_ID
               and ACS_SUB_SET.C_SUB_SET = 'ACC') VAC
     where VAC.ACS_FINANCIAL_ACCOUNT_ID = to_number(parameter_0)
       and VAC.PC_LANG_ID = VPC_LANG_ID
       and VAC.ACS_FINANCIAL_ACCOUNT_ID = VBA.ACS_FINANCIAL_ACCOUNT_ID
       and VBA.id = TOT.ACT_TOTAL_BY_PERIOD_ID(+)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID(+)
       and TOT.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and FUR.FIN_LOCAL_CURRENCY <> 1
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and VBA.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID(+)
       and VBA.id = PAM.ACB_PERIOD_AMOUNT_ID(+)
       and PAM.ACB_GLOBAL_BUDGET_ID = GLO.ACB_GLOBAL_BUDGET_ID(+)
       and GLO.ACB_BUDGET_VERSION_ID = VER.ACB_BUDGET_VERSION_ID(+)
       and PAM.ACS_PERIOD_ID = PER_BUD.ACS_PERIOD_ID(+);
end if;
end rpt_acr_balance_sub_master;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_CDA_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* description used for report  ACR_CDA_IMPUTATION_DET AND ACR_CDA_IMPUTATION_DET_FC
* (Mouvements CDA sans et avec ME)

* @author SDO
* @lastUpdate 12 Feb 2009
* @public
* @param PROCPARAM_0    Exercice    (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Compte du   (ACC_NUMBER)
* @param PROCPARAM_2    Compte au   (ACC_NUMBER)
*/
begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);

open aRefCursor for
SELECT
    'REEL' INFO,
    MGM.ACT_MGM_IMPUTATION_ID ACT_MGM_IMPUTATION_ID,
    MGM.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID,
    MGM.IMM_TRANSACTION_DATE IMM_TRANSACTION_DATE,
    MGM.IMM_VALUE_DATE IMM_VALUE_DATE,
    MGM.IMM_DESCRIPTION IMM_DESCRIPTION,
    MGM.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    MGM.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CDA_ACCOUNT_ID) CDA_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',MGM.ACS_CDA_ACCOUNT_ID) CDA_LARGE_DESCR,
    MGM.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    DIS.ACT_MGM_DISTRIBUTION_ID ACT_MGM_DISTRIBUTION_ID,
    DIS.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(DIS.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    MGM.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    MGM.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    MGM.IMM_AMOUNT_LC_D IMM_AMOUNT_LC_D,
    MGM.IMM_AMOUNT_LC_C IMM_AMOUNT_LC_C,
    MGM.IMM_AMOUNT_FC_D IMM_AMOUNT_FC_D,
    MGM.IMM_AMOUNT_FC_C IMM_AMOUNT_FC_C,
    MGM.ACS_PERIOD_ID ACS_PERIOD_ID,
       MGM.DIC_IMP_FREE1_ID DIC_IMP_FREE1_ID,
    MGM.DIC_IMP_FREE2_ID DIC_IMP_FREE2_ID,
    MGM.DIC_IMP_FREE3_ID DIC_IMP_FREE3_ID,
    MGM.DIC_IMP_FREE4_ID DIC_IMP_FREE4_ID,
    MGM.DIC_IMP_FREE5_ID DIC_IMP_FREE5_ID,
    IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID,
    DOC.DOC_NUMBER DOC_NUMBER,
    DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID,
    JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID,
    JOU.JOU_NUMBER JOU_NUMBER,
    JOU.JOU_DESCRIPTION JOU_DESCRIPTION,
    (SELECT ETA.C_ETAT_JOURNAL
     FROM ACT_ETAT_JOURNAL ETA
     WHERE ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
           ETA.C_SUB_SET      = 'CPN') C_ETAT_JOURNAL,
    (SELECT SCA.C_TYPE_CUMUL
     FROM ACJ_SUB_SET_CAT SCA
     WHERE SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID AND
           SCA.C_SUB_SET                 = 'CPN') C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CDA.ACS_CDA_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL,
    PAR.ACT_PART_IMPUTATION_ID,
    PAR.PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACT_JOURNAL               JOU,
    ACT_DOCUMENT              DOC,
    ACS_PERIOD                PER,
    ACS_FINANCIAL_YEAR        FYE,
    ACT_FINANCIAL_IMPUTATION  IMP,
    ACT_PART_IMPUTATION       PAR,
    ACT_MGM_DISTRIBUTION      DIS,
    ACT_MGM_IMPUTATION        MGM,
    ACS_ACCOUNT               ACC,
    ACS_CDA_ACCOUNT           CDA
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    CDA.ACS_CDA_ACCOUNT_ID              = ACC.ACS_ACCOUNT_ID AND
    CDA.ACS_CDA_ACCOUNT_ID              = MGM.ACS_CDA_ACCOUNT_ID (+) AND
    MGM.ACT_FINANCIAL_IMPUTATION_ID     = IMP.ACT_FINANCIAL_IMPUTATION_ID (+) AND
    MGM.ACT_MGM_IMPUTATION_ID           = DIS.ACT_MGM_IMPUTATION_ID (+) AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    MGM.ACS_PERIOD_ID                   = PER.ACS_PERIOD_ID AND
    MGM.ACT_DOCUMENT_ID                 = DOC.ACT_DOCUMENT_ID AND
    DOC.ACT_ACT_JOURNAL_ID              = JOU.ACT_JOURNAL_ID AND
    IMP.ACT_PART_IMPUTATION_ID          = PAR.ACT_PART_IMPUTATION_ID(+)
UNION ALL
SELECT
    'REPORT' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    FYE.FYE_START_DATE IMM_TRANSACTION_DATE,
    FYE.FYE_START_DATE IMM_VALUE_DATE,
    'Report' IMM_DESCRIPTION,
    TOT.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    TOT.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CDA_ACCOUNT_ID) CDA_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',TOT.ACS_CDA_ACCOUNT_ID) CDA_LARGE_DESCR,
    TOT.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    TOT.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    TOT.MTO_DEBIT_LC IMM_AMOUNT_LC_D,
    TOT.MTO_CREDIT_LC IMM_AMOUNT_LC_C,
    TOT.MTO_DEBIT_FC IMM_AMOUNT_FC_D,
    TOT.MTO_CREDIT_FC IMM_AMOUNT_FC_C,
    TOT.ACS_PERIOD_ID ACS_PERIOD_ID,
    NULL DIC_IMP_FREE1_ID,
    NULL DIC_IMP_FREE2_ID,
    NULL DIC_IMP_FREE3_ID,
    NULL DIC_IMP_FREE4_ID,
    NULL DIC_IMP_FREE5_ID,
    TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    TOT.C_TYPE_CUMUL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CDA.ACS_CDA_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR FYE,
    ACS_PERIOD PER,
    ACS_CDA_ACCOUNT CDA,
    ACS_ACCOUNT ACC,
    ACT_MGM_TOT_BY_PERIOD TOT
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    CDA.ACS_CDA_ACCOUNT_ID              = ACC.ACS_ACCOUNT_ID AND
    CDA.ACS_CDA_ACCOUNT_ID              = TOT.ACS_CDA_ACCOUNT_ID AND
    ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT' AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    PER.ACS_PERIOD_ID                   = TOT.ACS_PERIOD_ID AND
    PER.C_TYPE_PERIOD                   = '1'
UNION ALL
SELECT
    'BUDGET' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    GLO.ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    GLO.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CDA_ACCOUNT_ID) CDA_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',GLO.ACS_CDA_ACCOUNT_ID) CDA_LARGE_DESCR,
    GLO.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    GLO.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(GLO.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    PERB.ACS_PERIOD_ID ACS_PERIOD_ID,
    NULL DIC_IMP_FREE1_ID,
    NULL DIC_IMP_FREE2_ID,
    NULL DIC_IMP_FREE3_ID,
    NULL DIC_IMP_FREE4_ID,
    NULL DIC_IMP_FREE5_ID,
    GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    NULL C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CDA.ACS_CDA_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    PERB.PER_AMOUNT_D PER_AMOUNT_D,
    PERB.PER_AMOUNT_C PER_AMOUNT_C,
    BUD.ACB_BUDGET_ID ACB_BUDGET_ID,
    VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID,
    GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR      FYE,
    ACS_PERIOD              PER,
    ACB_PERIOD_AMOUNT       PERB,
    ACB_GLOBAL_BUDGET       GLO,
    ACB_BUDGET_VERSION      VER,
    ACB_BUDGET              BUD,
    ACS_ACCOUNT             ACC,
    ACS_CDA_ACCOUNT         CDA
WHERE
    FYE.FYE_NO_EXERCICE       = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID = BUD.ACS_FINANCIAL_YEAR_ID AND
    BUD.ACB_BUDGET_ID         = VER.ACB_BUDGET_ID AND
    VER.VER_DEFAULT           = 1 AND
    VER.ACB_BUDGET_VERSION_ID = GLO.ACB_BUDGET_VERSION_ID AND
    ACC.ACC_NUMBER            >= PROCPARAM_1 AND
    ACC.ACC_NUMBER            <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID        = CDA.ACS_CDA_ACCOUNT_ID AND
    CDA.ACS_CDA_ACCOUNT_ID    = GLO.ACS_CDA_ACCOUNT_ID AND
    GLO.ACB_GLOBAL_BUDGET_ID  = PERB.ACB_GLOBAL_BUDGET_ID AND
    PERB.ACS_PERIOD_ID        = PER.ACS_PERIOD_ID AND
    PER.ACS_FINANCIAL_YEAR_ID = FYE.ACS_FINANCIAL_YEAR_ID
UNION ALL
SELECT
    'VIDE' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    0 ACS_CPN_ACCOUNT_ID,
    NULL CPN_NUMBER,
    NULL CPN_DESCR,
    0 ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(CDA.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(CDA.ACS_CDA_ACCOUNT_ID) CDA_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',CDA.ACS_CDA_ACCOUNT_ID) CDA_LARGE_DESCR,
    0 ACS_PF_ACCOUNT_ID,
    NULL PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    0 ACS_PJ_ACCOUNT_ID,
    NULL PJ_NUMBER,
    0 ACS_ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    0 ACS_PERIOD_ID,
    NULL DIC_IMP_FREE1_ID,
    NULL DIC_IMP_FREE2_ID,
    NULL DIC_IMP_FREE3_ID,
    NULL DIC_IMP_FREE4_ID,
    NULL DIC_IMP_FREE5_ID,
    0 ACS_FINANCIAL_ACCOUNT_ID,
    NULL FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    0 ACS_FINANCIAL_YEAR_ID,
    NULL PER_START_DATE,
    NULL PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CDA.ACS_CDA_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_CDA_ACCOUNT CDA,
    ACS_ACCOUNT     ACC
WHERE
    ACC.ACC_NUMBER      >= PROCPARAM_1 AND
    ACC.ACC_NUMBER      <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID   = CDA.ACS_CDA_ACCOUNT_ID AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR  FYE,
                    ACS_PERIOD          PER,
                    ACT_MGM_IMPUTATION  MGM
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        MGM.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        MGM.ACS_CDA_ACCOUNT_ID      = CDA.ACS_CDA_ACCOUNT_ID) AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR              FYE,
                    ACS_PERIOD                      PER,
                    ACT_MGM_TOT_BY_PERIOD            TOT
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        TOT.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        TOT.ACS_CDA_ACCOUNT_ID      = CDA.ACS_CDA_ACCOUNT_ID);
end RPT_ACR_CDA_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_CPN_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)
/**
* description used for report  ACR_CPN_IMPUTATION_DET AND  ACR_CPN_IMPUTATION_DET_FC
* (Mouvements CPN sans et avec ME)

* @author SDO
* @lastUpdate VHA 31 July 2012
* @public
* @param PROCPARAM_0    Exercice    (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Compte du   (ACC_NUMBER)
* @param PROCPARAM_2    Compte au   (ACC_NUMBER)
*/
is
    vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id

begin

    pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
    vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

open aRefCursor for
SELECT
    'REEL' INFO,
    MGM.ACT_MGM_IMPUTATION_ID ACT_MGM_IMPUTATION_ID,
    MGM.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID,
    MGM.IMM_TRANSACTION_DATE IMM_TRANSACTION_DATE,
    MGM.IMM_VALUE_DATE IMM_VALUE_DATE,
    MGM.IMM_DESCRIPTION IMM_DESCRIPTION,
    MGM.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CPN_ACCOUNT_ID) CPN_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',MGM.ACS_CPN_ACCOUNT_ID) CPN_LARGE_DESCR,
    MGM.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CDA_ACCOUNT_ID) CDA_DESCR,
    MGM.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_PF_ACCOUNT_ID) PF_DESCR,
    DIS.ACT_MGM_DISTRIBUTION_ID ACT_MGM_DISTRIBUTION_ID,
    DIS.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(DIS.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(DIS.ACS_PJ_ACCOUNT_ID) PJ_DESCR,
    MGM.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    MGM.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    MGM.IMM_AMOUNT_LC_D IMM_AMOUNT_LC_D,
    MGM.IMM_AMOUNT_LC_C IMM_AMOUNT_LC_C,
    MGM.IMM_AMOUNT_FC_D IMM_AMOUNT_FC_D,
    MGM.IMM_AMOUNT_FC_C IMM_AMOUNT_FC_C,
    MGM.ACS_PERIOD_ID ACS_PERIOD_ID,
    IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID,
    DOC.DOC_NUMBER DOC_NUMBER,
    MGM.DOC_RECORD_ID DOC_RECORD_ID,
    (select RCO_TITLE
       from DOC_RECORD
     where DOC_RECORD_ID = MGM.DOC_RECORD_ID) DOC_TITLE,
    (select RCO_DESCRIPTION
       from DOC_RECORD
     where DOC_RECORD_ID = MGM.DOC_RECORD_ID) DOC_DESCR,
    DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID,
    JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID,
    JOU.JOU_NUMBER JOU_NUMBER,
    JOU.JOU_DESCRIPTION JOU_DESCRIPTION,
    (SELECT ETA.C_ETAT_JOURNAL
     FROM ACT_ETAT_JOURNAL ETA
     WHERE ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
           ETA.C_SUB_SET      = 'CPN') C_ETAT_JOURNAL,
    (SELECT SCA.C_TYPE_CUMUL
     FROM ACJ_SUB_SET_CAT SCA
     WHERE SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID AND
           SCA.C_SUB_SET                 = 'CPN') C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CPN.ACS_CPN_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL,
    PAR.ACT_PART_IMPUTATION_ID,
    PAR.PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACT_JOURNAL              JOU,
    ACT_DOCUMENT             DOC,
    ACS_PERIOD               PER,
    ACS_FINANCIAL_YEAR       FYE,
    ACT_FINANCIAL_IMPUTATION IMP,
    ACT_PART_IMPUTATION      PAR,
    ACT_MGM_DISTRIBUTION     DIS,
    ACT_MGM_IMPUTATION       MGM,
    ACS_ACCOUNT              ACC,
    ACS_CPN_ACCOUNT          CPN
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    CPN.ACS_CPN_ACCOUNT_ID              = ACC.ACS_ACCOUNT_ID AND
    CPN.ACS_CPN_ACCOUNT_ID              = MGM.ACS_CPN_ACCOUNT_ID (+) AND
    MGM.ACT_FINANCIAL_IMPUTATION_ID     = IMP.ACT_FINANCIAL_IMPUTATION_ID (+) AND
    MGM.ACT_MGM_IMPUTATION_ID           = DIS.ACT_MGM_IMPUTATION_ID (+) AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    MGM.ACS_PERIOD_ID                   = PER.ACS_PERIOD_ID AND
    MGM.ACT_DOCUMENT_ID                 = DOC.ACT_DOCUMENT_ID AND
    DOC.ACT_ACT_JOURNAL_ID              = JOU.ACT_JOURNAL_ID AND
    IMP.ACT_PART_IMPUTATION_ID          = PAR.ACT_PART_IMPUTATION_ID(+)
UNION ALL
SELECT
    'REPORT' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    FYE.FYE_START_DATE IMM_TRANSACTION_DATE,
    FYE.FYE_START_DATE IMM_VALUE_DATE,
    'Report' IMM_DESCRIPTION,
    TOT.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CPN_ACCOUNT_ID) CPN_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',TOT.ACS_CPN_ACCOUNT_ID) CPN_LARGE_DESCR,
    TOT.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CDA_ACCOUNT_ID) CDA_DESCR,
    TOT.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_PF_ACCOUNT_ID) PF_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    TOT.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_PJ_ACCOUNT_ID) PJ_DESCR,
    TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    TOT.MTO_DEBIT_LC IMM_AMOUNT_LC_D,
    TOT.MTO_CREDIT_LC IMM_AMOUNT_LC_C,
    TOT.MTO_DEBIT_FC IMM_AMOUNT_FC_D,
    TOT.MTO_CREDIT_FC IMM_AMOUNT_FC_C,
    TOT.ACS_PERIOD_ID ACS_PERIOD_ID,
    TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    TOT.DOC_RECORD_ID DOC_RECORD_ID,
    (select RCO_TITLE
       from DOC_RECORD
     where DOC_RECORD_ID = TOT.DOC_RECORD_ID) DOC_TITLE,
    (select RCO_DESCRIPTION
       from DOC_RECORD
     where DOC_RECORD_ID = TOT.DOC_RECORD_ID) DOC_DESCR,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    TOT.C_TYPE_CUMUL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CPN.ACS_CPN_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR FYE,
    ACS_PERIOD PER,
    ACS_CPN_ACCOUNT CPN,
    ACS_ACCOUNT ACC,
    ACT_MGM_TOT_BY_PERIOD TOT
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    CPN.ACS_CPN_ACCOUNT_ID              = ACC.ACS_ACCOUNT_ID AND
    CPN.ACS_CPN_ACCOUNT_ID              = TOT.ACS_CPN_ACCOUNT_ID AND
    ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT' AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    PER.ACS_PERIOD_ID                   = TOT.ACS_PERIOD_ID AND
    PER.C_TYPE_PERIOD                   = '1'
UNION ALL
SELECT
    'BUDGET' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    GLO.ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CPN_ACCOUNT_ID) CPN_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',GLO.ACS_CPN_ACCOUNT_ID) CPN_LARGE_DESCR,
    GLO.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CDA_ACCOUNT_ID) CDA_DESCR,
    GLO.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_PF_ACCOUNT_ID) PF_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    GLO.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_PJ_ACCOUNT_ID) PJ_DESCR,
    GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(GLO.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    PERB.ACS_PERIOD_ID ACS_PERIOD_ID,
    GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    GLO.DOC_RECORD_ID DOC_RECORD_ID,
    (select RCO_TITLE
       from DOC_RECORD
     where DOC_RECORD_ID = GLO.DOC_RECORD_ID) DOC_TITLE,
    (select RCO_DESCRIPTION
       from DOC_RECORD
     where DOC_RECORD_ID = GLO.DOC_RECORD_ID) DOC_DESCR,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    NULL C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CPN.ACS_CPN_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    PERB.PER_AMOUNT_D PER_AMOUNT_D,
    PERB.PER_AMOUNT_C PER_AMOUNT_C,
    BUD.ACB_BUDGET_ID ACB_BUDGET_ID,
    VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID,
    GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR FYE,
    ACS_PERIOD PER,
    ACB_PERIOD_AMOUNT PERB,
    ACB_GLOBAL_BUDGET GLO,
    ACB_BUDGET_VERSION VER,
    ACB_BUDGET BUD,
    ACS_ACCOUNT ACC,
    ACS_CPN_ACCOUNT CPN
WHERE
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = BUD.ACS_FINANCIAL_YEAR_ID AND
    BUD.ACB_BUDGET_ID                   = VER.ACB_BUDGET_ID AND
    VER.VER_DEFAULT                     = 1 AND
    VER.ACB_BUDGET_VERSION_ID           = GLO.ACB_BUDGET_VERSION_ID AND
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID                  = CPN.ACS_CPN_ACCOUNT_ID AND
    CPN.ACS_CPN_ACCOUNT_ID              = GLO.ACS_CPN_ACCOUNT_ID AND
    GLO.ACB_GLOBAL_BUDGET_ID            = PERB.ACB_GLOBAL_BUDGET_ID AND
    PERB.ACS_PERIOD_ID                  = PER.ACS_PERIOD_ID AND
    PER.ACS_FINANCIAL_YEAR_ID           = FYE.ACS_FINANCIAL_YEAR_ID
UNION ALL
SELECT
    'VIDE' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    CPN.ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(CPN.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(CPN.ACS_CPN_ACCOUNT_ID) CPN_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',CPN.ACS_CPN_ACCOUNT_ID) CPN_LARGE_DESCR,
    0 ACS_CDA_ACCOUNT_ID,
    NULL CDA_NUMBER,
    NULL CDA_DESCR,
    0 ACS_PF_ACCOUNT_ID,
    NULL PF_NUMBER,
    NULL PF_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    0 ACS_PJ_ACCOUNT_ID,
    NULL PJ_NUMBER,
    NULL PJ_DESCR,
    0 ACS_ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    0 ACS_PERIOD_ID,
    0 ACS_FINANCIAL_ACCOUNT_ID,
    NULL FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    0 ACS_FINANCIAL_YEAR_ID,
    NULL PER_START_DATE,
    NULL PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 DOC_RECORD_ID,
    NULL DOC_TITLE,
    NULL DOC_DESCR,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = CPN.ACS_CPN_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_CPN_ACCOUNT CPN,
    ACS_ACCOUNT     ACC
WHERE
    ACC.ACC_NUMBER      >= PROCPARAM_1 AND
    ACC.ACC_NUMBER      <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID   = CPN.ACS_CPN_ACCOUNT_ID AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR  FYE,
                    ACS_PERIOD          PER,
                    ACT_MGM_IMPUTATION  MGM
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        MGM.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        MGM.ACS_CPN_ACCOUNT_ID      = CPN.ACS_CPN_ACCOUNT_ID) AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR              FYE,
                    ACS_PERIOD                      PER,
                    ACT_MGM_TOT_BY_PERIOD            TOT
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        TOT.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        TOT.ACS_CPN_ACCOUNT_ID      = CPN.ACS_CPN_ACCOUNT_ID);
end RPT_ACR_CPN_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_FIN_IMP_CUMUL_PAY" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, date_to        in     varchar2
, parameter_0    in     number
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_9    in     varchar2
, parameter_12   in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procparam_10   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_PAY_IMPUTATION_DET.

*author JLI 19 Dec.2007
*lastUpdate VHA 15 october 2013
*public
 @param date_to0                 IMF_TRANSACTION_DATE
 @param parameter_00             ACS_AUXILIARY_ACCOUNT_ID
 @param parameter_07             C_ETAT_JOURNAL
 @param parameter_08             C_ETAT_JOURNAL
 @param parameter_09             C_ETAT_JOURNAL
 @param parameter_012            MATCHING
 @param parameter_17             Divisions (# = All  / null = selection (COM_LIST))
 @param parameter_18             C_TYPE_CUMUL
 @param parameter_19             C_TYPE_CUMUL
 @param parameter_20             C_TYPE_CUMUL
 @param parameter_21             C_TYPE_CUMUL
 @param procparam_10            Job ID (COM_LIST)
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
begin
  if (procuser_lanid is not null) then
      PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , CUR.ACS_FINANCIAL_CURRENCY_ID
         , FIN.FIN_COLLECTIVE
         , CUR.FIN_LOCAL_CURRENCY
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_PAY_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , (select LIS_ID_1
              from COM_LIST
             where LIS_JOB_ID = to_number(procparam_10)
               and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and FIN.FIN_COLLECTIVE = 1
       and PRD.ACS_PERIOD_ID = V_IMP.ACS_PERIOD_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(date_to, 'yyyyMMdd')
       and V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and (    (parameter_12 = '1')
            or (     (parameter_12 <> '1')
                and (CAT.C_TYPE_CATALOGUE is null) )
            or (     (parameter_12 <> '1')
                and not(CAT.C_TYPE_CATALOGUE is null)
                and CAT.C_TYPE_CATALOGUE <> '9')
           )
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = parameter_0;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , CUR.ACS_FINANCIAL_CURRENCY_ID
         , FIN.FIN_COLLECTIVE
         , CUR.FIN_LOCAL_CURRENCY
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_PAY_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and FIN.FIN_COLLECTIVE = 1
       and PRD.ACS_PERIOD_ID = V_IMP.ACS_PERIOD_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(date_to, 'yyyyMMdd')
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and (    (parameter_12 = '1')
            or (     (parameter_12 <> '1')
                and (CAT.C_TYPE_CATALOGUE is null) )
            or (     (parameter_12 <> '1')
                and not(CAT.C_TYPE_CATALOGUE is null)
                and CAT.C_TYPE_CATALOGUE <> '9')
           )
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = parameter_0;
end if;
end RPT_ACR_FIN_IMP_CUMUL_PAY;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_FIN_IMP_CUMUL_REC" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, date_to        in     varchar2
, parameter_0    in     number
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_9    in     varchar2
, parameter_12   in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procparam_10   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_REC_IMPUTATION_DET

*author JLI  Dec.2007
*lastUpdate VHA 15 october 2013
*public
 @param date_to0                 IMF_TRANSACTION_DATE
 @param parameter_00             ACS_AUXILIARY_ACCOUNT_ID
 @param parameter_07             C_ETAT_JOURNAL
 @param parameter_08             C_ETAT_JOURNAL
 @param parameter_09             C_ETAT_JOURNAL
 @param parameter_012            MATCHING
 @param parameter_17             Divisions (# = All  / null = selection (COM_LIST))
 @param parameter_18             C_TYPE_CUMUL
 @param parameter_19             C_TYPE_CUMUL
 @param parameter_20             C_TYPE_CUMUL
 @param parameter_21             C_TYPE_CUMUL
 @param procparam_10            Job ID (COM_LIST)
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
begin
  if (procuser_lanid is not null) then
      PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , FIN.FIN_COLLECTIVE
         , CUR.FIN_LOCAL_CURRENCY
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_REC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX_S
         , (select LIS_ID_1
              from COM_LIST
             where LIS_JOB_ID = to_number(procparam_10)
               and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and FIN.FIN_COLLECTIVE = 1
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and AUX_S.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and AUX_S.ACS_FINANCIAL_CURRENCY_ID = V_IMP.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(date_to, 'yyyyMMdd')
       and V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and (    (parameter_12 = '1')
            or (     (parameter_12 <> '1')
                and (CAT.C_TYPE_CATALOGUE is null) )
            or (     (parameter_12 <> '1')
                and not(CAT.C_TYPE_CATALOGUE is null)
                and CAT.C_TYPE_CATALOGUE <> '9')
           )
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = parameter_0;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , FIN.FIN_COLLECTIVE
         , CUR.FIN_LOCAL_CURRENCY
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_REC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , ACS_AUX_ACCOUNT_S_FIN_CURR AUX_S
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and FIN.FIN_COLLECTIVE = 1
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and AUX_S.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and AUX_S.ACS_FINANCIAL_CURRENCY_ID = V_IMP.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(date_to, 'yyyyMMdd')
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and (    (parameter_12 = '1')
            or (     (parameter_12 <> '1')
                and (CAT.C_TYPE_CATALOGUE is null) )
            or (     (parameter_12 <> '1')
                and not(CAT.C_TYPE_CATALOGUE is null)
                and CAT.C_TYPE_CATALOGUE <> '9')
           )
       and V_IMP.ACS_AUXILIARY_ACCOUNT_ID = parameter_0;
end if;
end RPT_ACR_FIN_IMP_CUMUL_REC;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_PAY_BALANCE" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     number
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* Procédure stockée utilisée pour le rapport ACR_PAY_BALANCE (Balance PAY à une période, avec sélection de comptes
* Replace report ACR_PAY_BALANCE_RPT
* @author SDO
* @lastUpdate VHA 26 JUNE 2013
* @version 2003
* @public
* @param procparam_0    Sous-ensemble       (ACS_SUB_SET_ID)
* @param procparam_1    Exercice            (FYE_NO_EXERCICE)
* @param procparam_2    Compte du...        (ACC_NUMBER)
* @param procparam_3    Compte au...        (ACC_NUMBER)
* @param procparam_4    Division_ID (List)  NULL = All or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5    Collectiv_ID (List) '' = All sinon liste des ID
* @param procparam_6    Periode du...       (PER_NO_PERIOD)
* @param procparam_7    Période au...       (PER_NO_PERIOD)
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (procparam_1 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id                   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  select decode(min(ACS_SUB_SET_ID), null, 0, 1)
    into TMP
    from ACS_SUB_SET
   where C_TYPE_SUB_SET = 'DIVI';

  ACR_FUNCTIONS.EXIST_DIVISION  := tmp;
  pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  vpc_lang_id                   := pcs.PC_I_LIB_SESSION.GetUserLangId;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select AUX.ACS_AUXILIARY_ACCOUNT_ID
         , ACC.ACC_NUMBER AUX_NUMBER
         , (select DES.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DES
             where DES.ACS_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id) AUX_DESCR
         , ACS_FUNCTION.GetPer_short_Name(TOT.ACS_AUXILIARY_ACCOUNT_ID) PER_SHORT_NAME
         , TOT.ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CMB
             where CMB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CMB.PC_CURR_ID) CURRENCY_MB
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUE.CURRENCY
              from PCS.PC_CURR CUE
                 , ACS_FINANCIAL_CURRENCY CME
             where CME.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUE.PC_CURR_ID = CME.PC_CURR_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_FINANCIAL_ACCOUNT_ID
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIV
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , TOT.ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , (select DE1.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DE1
             where DE1.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
               and DE1.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
         , PER.PER_NO_PERIOD
         , FYE.ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_NO_EXERCICE
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_SUB_SET SUB
         , ACT_TOTAL_BY_PERIOD TOT
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_ACCOUNT ACC
         , ACS_AUXILIARY_ACCOUNT AUX
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
     where AUX.ACS_AUXILIARY_ACCOUNT_ID = TOT.ACS_AUXILIARY_ACCOUNT_ID
       and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
       and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and SUB.C_SUB_SET = 'PAY'
       and (   ACC.ACS_SUB_SET_ID = procparam_0
            or procparam_0 is null)
       and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
            or procparam_5 is null)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
       and PER.PER_NO_PERIOD >= procparam_6
       and PER.PER_NO_PERIOD <= procparam_7
       and PER.ACS_FINANCIAL_YEAR_ID = FYE.ACS_FINANCIAL_YEAR_ID
       and FYE.FYE_NO_EXERCICE = procparam_1
       and ACC.ACC_NUMBER >= procparam_2
       and ACC.ACC_NUMBER <= procparam_3
       and TOT.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select AUX.ACS_AUXILIARY_ACCOUNT_ID
         , ACC.ACC_NUMBER AUX_NUMBER
         , (select DES.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DES
             where DES.ACS_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id) AUX_DESCR
         , ACS_FUNCTION.GetPer_short_Name(TOT.ACS_AUXILIARY_ACCOUNT_ID) PER_SHORT_NAME
         , TOT.ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CMB
             where CMB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CMB.PC_CURR_ID) CURRENCY_MB
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUE.CURRENCY
              from PCS.PC_CURR CUE
                 , ACS_FINANCIAL_CURRENCY CME
             where CME.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUE.PC_CURR_ID = CME.PC_CURR_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_FINANCIAL_ACCOUNT_ID
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIV
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , TOT.ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , (select DE1.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DE1
             where DE1.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
               and DE1.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
         , PER.PER_NO_PERIOD
         , FYE.ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_NO_EXERCICE
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_SUB_SET SUB
         , ACT_TOTAL_BY_PERIOD TOT
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_ACCOUNT ACC
         , ACS_AUXILIARY_ACCOUNT AUX
     where AUX.ACS_AUXILIARY_ACCOUNT_ID = TOT.ACS_AUXILIARY_ACCOUNT_ID
       and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
       and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and SUB.C_SUB_SET = 'PAY'
       and (   ACC.ACS_SUB_SET_ID = procparam_0
            or procparam_0 is null)
       and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
            or procparam_5 is null)
       and TOT.ACS_DIVISION_ACCOUNT_ID is null
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
       and PER.PER_NO_PERIOD >= procparam_6
       and PER.PER_NO_PERIOD <= procparam_7
       and PER.ACS_FINANCIAL_YEAR_ID = FYE.ACS_FINANCIAL_YEAR_ID
       and FYE.FYE_NO_EXERCICE = procparam_1
       and ACC.ACC_NUMBER >= procparam_2
       and ACC.ACC_NUMBER <= procparam_3;
end if;
end RPT_ACR_PAY_BALANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_PAY_IMPUTATION_DET" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_9    in     varchar2
, parameter_10   in     varchar2
, parameter_12   in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, parameter_22   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
/**
* description used for report ACR_PAY_IMPUTATION_DET

* @author jliu 18 nov 2008
* @lastUpdate VHA 15 october 2013
* @public
* @param procparam_0: Account from
* @param procparam_1: Account to
* @param procparam_2: ACS_FINANCIAL_YEAR_ID
* @param procparam_3: Job ID (COM_LIST)
* @param parameter_4: IMF_TRANSACTION_DATE/DATE_TO/YEAR
* @param parameter_5: MF_TRANSACTION_DATE/DATE_TO/MONTH
* @param parameter_6: IMF_TRANSACTION_DATE/DATE_TO/DAY
* @param parameter_7: IC_ETAT_JOURNAL
* @param parameter_8: IC_ETAT_JOURNAL
* @param parameter_9: IC_ETAT_JOURNAL
* @param parameter_10: ACS_SUB_SET
* @param parameter_12: MATCHING
* @param parameter_17: Divisions (# = All  / null = selection (COM_LIST))
* @param parameter_18: C_TYPE_CUMUL
* @param parameter_19: C_TYPE_CUMUL
* @param parameter_20: C_TYPE_CUMUL
* @param parameter_21: C_TYPE_CUMUL
* @param parameter_22: ACS_FINANCIAL_ACCOUNT_ID (Collectiv_ID)
*/
is
  param5      varchar2(10);
  param6      varchar2(10);
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  if (procuser_lanid is not null) then
          PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
          vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  if     (procparam_0 is not null)
     and (length(trim(procparam_0) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1  := procparam_0;
  else
    ACR_FUNCTIONS.ACC_NUMBER1  := ' ';
  end if;

  if     (procparam_1 is not null)
     and (length(trim(procparam_1) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2  := procparam_1;
  end if;

  if     (procparam_2 is not null)
     and (length(trim(procparam_2) ) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID  := procparam_2;
  end if;

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;

  if length(parameter_5) = 1 then
    param5  := '0' || parameter_5;
  else
    param5  := parameter_5;
  end if;

  if length(parameter_6) = 1 then
    param6  := '0' || parameter_6;
  else
    param6  := parameter_6;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , ACC.FIN_COLLECTIVE
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIVE2
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , CRC.PC_CURR_ID
         , CRC2.PC_CURR_ID
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , PAY.ACT_DET_PAYMENT_ID
         , PAY.DET_PAIED_LC
         , PAY.DET_PAIED_FC
         , PAY.DET_CHARGES_LC
         , PAY.DET_CHARGES_FC
         , PAY.DET_DISCOUNT_LC
         , PAY.DET_DISCOUNT_FC
         , PAY.DET_DEDUCTION_LC
         , PAY.DET_DEDUCTION_FC
         , DOC.DOC_NUMBER
         , DOC.ACT_DOCUMENT_ID
         , IMP.ACT_PART_IMPUTATION_ID
         , IMP.PAR_DOCUMENT
         , IMP.DOC_DATE_DELIVERY
         , PER.PER_NAME
         , PER.PER_FORENAME
         , PER.PER_ACTIVITY
         , CUR.PC_CURR_ID
         , CUR.CURRENCY
         , CUR2.PC_CURR_ID
         , CUR2.CURRENCY
         , LAN.LANID
         , V_AUX.C_TYPE_ACCOUNT
         , V_AUX.ACC_NUMBER
         , V_AUX.DES_DESCRIPTION_SUMMARY
         , V_AUX.DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACT_DET_PAYMENT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_PART_IMPUTATION_ID
         , V_IMP.ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER
         , V_IMP.JOU_NUMBER
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL
         , V_IMP.MATCHING
         , PRD.C_TYPE_PERIOD
         , CNY.CURRENCY_NO
         , decode(nvl(IMP.ACT_PART_IMPUTATION_ID, 0)
                , 0, decode(nvl(IMP.ACT_DOCUMENT_ID, 0), 0, 0, 1)
                , decode(ACT_FUNCTIONS.GetAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1) -
                         ACT_FUNCTIONS.GetTotalAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1)
                       , 0, 1
                       , 0
                        )
                 ) ctrl_pmt_doc
         , ACS_FUNCTION.GetAuxAccOwnerName(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_NAME
         , ACS_FUNCTION.GetPer_short_Name(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_SHORT_NAME
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY CRC
         , ACS_FINANCIAL_CURRENCY CRC2
         , ACS_SUB_SET SUB
         , ACT_DET_PAYMENT PAY
         , ACT_DOCUMENT DOC
         , ACT_PART_IMPUTATION IMP
         , ACT_JOB JOB
         , PAC_PERSON PER
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR2
         , PCS.PC_LANG LAN
         , V_ACS_AUXILIARY_ACCOUNT V_AUX
         , V_ACT_PAY_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , (select distinct ACC_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from V_ACT_PAY_IMP_REPORT V_IMP
                      where ACS_FINANCIAL_CURRENCY_ID <> ACS_ACS_FINANCIAL_CURRENCY_ID
                        and (    (    parameter_18 = '1'
                                  and V_IMP.C_TYPE_CUMUL = 'EXT')
                             or (    parameter_19 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'INT')
                             or (    parameter_20 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'PRE')
                             or (    parameter_21 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'ENG')
                            )
                   group by ACC_NUMBER) CNY
         , (select LIS_ID_1
              from COM_LIST
             where LIS_JOB_ID = to_number(procparam_3)
               and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
     where V_AUX.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and V_AUX.ACC_NUMBER = CNY.ACC_NUMBER(+)
       and V_AUX.PC_LANG_ID = LAN.PC_LANG_ID
       and V_AUX.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CRC.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CRC2.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACT_DET_PAYMENT_ID = PAY.ACT_DET_PAYMENT_ID(+)
       and V_IMP.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID(+)
       and DOC.ACT_JOB_ID = JOB.ACT_JOB_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and CRC.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and CRC2.PC_CURR_ID = CUR2.PC_CURR_ID(+)
       and IMP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (   parameter_22 = '#'
            or instr(',' || parameter_22 || ',', ',' || ACC.ACS_FINANCIAL_ACCOUNT_ID || ',') > 0)
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and LAN.PC_LANG_ID = vpc_lang_id
       and ACC.FIN_COLLECTIVE = 1
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || param5 || param6, 'yyyyMMdd')
       and decode(parameter_10, 0, SUB.C_SUB_SET, SUB.ACS_SUB_SET_ID) = decode(parameter_10, 0, 'PAY', parameter_10)
       and (   parameter_12 = '1'
            or not(    parameter_12 = '0'
                   and V_IMP.MATCHING = 1) )
       and V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , ACC.FIN_COLLECTIVE
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIVE2
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , CRC.PC_CURR_ID
         , CRC2.PC_CURR_ID
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , PAY.ACT_DET_PAYMENT_ID
         , PAY.DET_PAIED_LC
         , PAY.DET_PAIED_FC
         , PAY.DET_CHARGES_LC
         , PAY.DET_CHARGES_FC
         , PAY.DET_DISCOUNT_LC
         , PAY.DET_DISCOUNT_FC
         , PAY.DET_DEDUCTION_LC
         , PAY.DET_DEDUCTION_FC
         , DOC.DOC_NUMBER
         , DOC.ACT_DOCUMENT_ID
         , IMP.ACT_PART_IMPUTATION_ID
         , IMP.PAR_DOCUMENT
         , IMP.DOC_DATE_DELIVERY
         , PER.PER_NAME
         , PER.PER_FORENAME
         , PER.PER_ACTIVITY
         , CUR.PC_CURR_ID
         , CUR.CURRENCY
         , CUR2.PC_CURR_ID
         , CUR2.CURRENCY
         , LAN.LANID
         , V_AUX.C_TYPE_ACCOUNT
         , V_AUX.ACC_NUMBER
         , V_AUX.DES_DESCRIPTION_SUMMARY
         , V_AUX.DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACT_DET_PAYMENT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_PART_IMPUTATION_ID
         , V_IMP.ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER
         , V_IMP.JOU_NUMBER
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL
         , V_IMP.MATCHING
         , PRD.C_TYPE_PERIOD
         , CNY.CURRENCY_NO
         , decode(nvl(IMP.ACT_PART_IMPUTATION_ID, 0)
                , 0, decode(nvl(IMP.ACT_DOCUMENT_ID, 0), 0, 0, 1)
                , decode(ACT_FUNCTIONS.GetAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1) -
                         ACT_FUNCTIONS.GetTotalAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1)
                       , 0, 1
                       , 0
                        )
                 ) ctrl_pmt_doc
         , ACS_FUNCTION.GetAuxAccOwnerName(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_NAME
         , ACS_FUNCTION.GetPer_short_Name(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_SHORT_NAME
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY CRC
         , ACS_FINANCIAL_CURRENCY CRC2
         , ACS_SUB_SET SUB
         , ACT_DET_PAYMENT PAY
         , ACT_DOCUMENT DOC
         , ACT_PART_IMPUTATION IMP
         , ACT_JOB JOB
         , PAC_PERSON PER
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR2
         , PCS.PC_LANG LAN
         , V_ACS_AUXILIARY_ACCOUNT V_AUX
         , V_ACT_PAY_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , (select distinct ACC_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from V_ACT_PAY_IMP_REPORT V_IMP
                      where ACS_FINANCIAL_CURRENCY_ID <> ACS_ACS_FINANCIAL_CURRENCY_ID
                        and (    (    parameter_18 = '1'
                                  and V_IMP.C_TYPE_CUMUL = 'EXT')
                             or (    parameter_19 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'INT')
                             or (    parameter_20 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'PRE')
                             or (    parameter_21 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'ENG')
                            )
                   group by ACC_NUMBER) CNY
     where V_AUX.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and V_AUX.ACC_NUMBER = CNY.ACC_NUMBER(+)
       and V_AUX.PC_LANG_ID = LAN.PC_LANG_ID
       and V_AUX.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CRC.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CRC2.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACT_DET_PAYMENT_ID = PAY.ACT_DET_PAYMENT_ID(+)
       and V_IMP.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID(+)
       and DOC.ACT_JOB_ID = JOB.ACT_JOB_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and CRC.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and CRC2.PC_CURR_ID = CUR2.PC_CURR_ID(+)
       and IMP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (   parameter_22 = '#'
            or instr(',' || parameter_22 || ',', ',' || ACC.ACS_FINANCIAL_ACCOUNT_ID || ',') > 0)
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and LAN.PC_LANG_ID = vpc_lang_id
       and ACC.FIN_COLLECTIVE = 1
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || param5 || param6, 'yyyyMMdd')
       and decode(parameter_10, 0, SUB.C_SUB_SET, SUB.ACS_SUB_SET_ID) = decode(parameter_10, 0, 'PAY', parameter_10)
       and (   parameter_12 = '1'
            or not(    parameter_12 = '0'
                   and V_IMP.MATCHING = 1) );
end if;
end RPT_ACR_PAY_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_PF_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* description used for report ACR_PF_IMPUTATION_DET AND ACR_PF_IMPUTATION_DET_FC
*                                 (Mouvements PF sans et avec ME)

* @author SDO
* @lastUpdate Feb 2009
* @public
* @param PROCPARAM_0    Exercice    (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Compte du   (ACC_NUMBER)
* @param PROCPARAM_2    Compte au   (ACC_NUMBER)
*/

begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);

open aRefCursor for
SELECT
    'REEL' INFO,
    MGM.ACT_MGM_IMPUTATION_ID ACT_MGM_IMPUTATION_ID,
    MGM.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID,
    MGM.IMM_TRANSACTION_DATE IMM_TRANSACTION_DATE,
    MGM.IMM_VALUE_DATE IMM_VALUE_DATE,
    MGM.IMM_DESCRIPTION IMM_DESCRIPTION,
    MGM.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    MGM.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    MGM.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_PF_ACCOUNT_ID) PF_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',MGM.ACS_PF_ACCOUNT_ID) PF_LARGE_DESCR,
    DIS.ACT_MGM_DISTRIBUTION_ID ACT_MGM_DISTRIBUTION_ID,
    DIS.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(DIS.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    MGM.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    MGM.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    MGM.IMM_AMOUNT_LC_D IMM_AMOUNT_LC_D,
    MGM.IMM_AMOUNT_LC_C IMM_AMOUNT_LC_C,
    MGM.IMM_AMOUNT_FC_D IMM_AMOUNT_FC_D,
    MGM.IMM_AMOUNT_FC_C IMM_AMOUNT_FC_C,
    MGM.ACS_PERIOD_ID ACS_PERIOD_ID,
    IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID,
    DOC.DOC_NUMBER DOC_NUMBER,
    DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID,
    JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID,
    JOU.JOU_NUMBER JOU_NUMBER,
    JOU.JOU_DESCRIPTION JOU_DESCRIPTION,
    (SELECT ETA.C_ETAT_JOURNAL
     FROM ACT_ETAT_JOURNAL ETA
     WHERE ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
           ETA.C_SUB_SET      = 'CPN') C_ETAT_JOURNAL,
    (SELECT SCA.C_TYPE_CUMUL
     FROM ACJ_SUB_SET_CAT SCA
     WHERE SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID AND
           SCA.C_SUB_SET                 = 'CPN') C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PF.ACS_PF_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL,
    PAR.ACT_PART_IMPUTATION_ID,
    PAR.PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACT_JOURNAL              JOU,
    ACT_DOCUMENT             DOC,
    ACS_PERIOD               PER,
    ACS_FINANCIAL_YEAR       FYE,
    ACT_FINANCIAL_IMPUTATION IMP,
    ACT_PART_IMPUTATION      PAR,
    ACT_MGM_DISTRIBUTION     DIS,
    ACT_MGM_IMPUTATION       MGM,
    ACS_ACCOUNT              ACC,
    ACS_PF_ACCOUNT           PF
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    PF.ACS_PF_ACCOUNT_ID                = ACC.ACS_ACCOUNT_ID AND
    PF.ACS_PF_ACCOUNT_ID                = MGM.ACS_PF_ACCOUNT_ID (+) AND
    MGM.ACT_FINANCIAL_IMPUTATION_ID     = IMP.ACT_FINANCIAL_IMPUTATION_ID (+) AND
    MGM.ACT_MGM_IMPUTATION_ID           = DIS.ACT_MGM_IMPUTATION_ID (+) AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    MGM.ACS_PERIOD_ID                   = PER.ACS_PERIOD_ID AND
    MGM.ACT_DOCUMENT_ID                 = DOC.ACT_DOCUMENT_ID AND
    DOC.ACT_ACT_JOURNAL_ID              = JOU.ACT_JOURNAL_ID AND
    IMP.ACT_PART_IMPUTATION_ID          = PAR.ACT_PART_IMPUTATION_ID(+)
UNION ALL
SELECT
    'REPORT' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    FYE.FYE_START_DATE IMM_TRANSACTION_DATE,
    FYE.FYE_START_DATE IMM_VALUE_DATE,
    'Report' IMM_DESCRIPTION,
    TOT.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    TOT.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    TOT.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_PF_ACCOUNT_ID) PF_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',TOT.ACS_PF_ACCOUNT_ID) PF_LARGE_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    TOT.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    TOT.MTO_DEBIT_LC IMM_AMOUNT_LC_D,
    TOT.MTO_CREDIT_LC IMM_AMOUNT_LC_C,
    TOT.MTO_DEBIT_FC IMM_AMOUNT_FC_D,
    TOT.MTO_CREDIT_FC IMM_AMOUNT_FC_C,
    TOT.ACS_PERIOD_ID ACS_PERIOD_ID,
    TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    TOT.C_TYPE_CUMUL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PF.ACS_PF_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR FYE,
    ACS_PERIOD PER,
    ACS_PF_ACCOUNT PF,
    ACS_ACCOUNT ACC,
    ACT_MGM_TOT_BY_PERIOD TOT
WHERE
    ACC.ACC_NUMBER                      >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                      <= PROCPARAM_2 AND
    PF.ACS_PF_ACCOUNT_ID                = ACC.ACS_ACCOUNT_ID AND
    PF.ACS_PF_ACCOUNT_ID                = TOT.ACS_PF_ACCOUNT_ID AND
    ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT' AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    PER.ACS_PERIOD_ID                   = TOT.ACS_PERIOD_ID AND
    PER.C_TYPE_PERIOD                   = '1'
UNION ALL
SELECT
    'BUDGET' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    GLO.ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    GLO.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    GLO.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_PF_ACCOUNT_ID) PF_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',GLO.ACS_PF_ACCOUNT_ID) PF_LARGE_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    GLO.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(GLO.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    PERB.ACS_PERIOD_ID ACS_PERIOD_ID,
    GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    NULL C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PF.ACS_PF_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    PERB.PER_AMOUNT_D PER_AMOUNT_D,
    PERB.PER_AMOUNT_C PER_AMOUNT_C,
    BUD.ACB_BUDGET_ID ACB_BUDGET_ID,
    VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID,
    GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR  FYE,
    ACS_PERIOD          PER,
    ACB_PERIOD_AMOUNT   PERB,
    ACB_GLOBAL_BUDGET   GLO,
    ACB_BUDGET_VERSION  VER,
    ACB_BUDGET          BUD,
    ACS_ACCOUNT         ACC,
    ACS_PF_ACCOUNT      PF
WHERE
    FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID   = BUD.ACS_FINANCIAL_YEAR_ID AND
    BUD.ACB_BUDGET_ID           = VER.ACB_BUDGET_ID AND
    VER.VER_DEFAULT             = 1 AND
    VER.ACB_BUDGET_VERSION_ID   = GLO.ACB_BUDGET_VERSION_ID AND
    ACC.ACC_NUMBER              >= PROCPARAM_1 AND
    ACC.ACC_NUMBER              <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID          = PF.ACS_PF_ACCOUNT_ID AND
    PF.ACS_PF_ACCOUNT_ID        = GLO.ACS_PF_ACCOUNT_ID AND
    GLO.ACB_GLOBAL_BUDGET_ID    = PERB.ACB_GLOBAL_BUDGET_ID AND
    PERB.ACS_PERIOD_ID          = PER.ACS_PERIOD_ID AND
    PER.ACS_FINANCIAL_YEAR_ID   = FYE.ACS_FINANCIAL_YEAR_ID
UNION ALL
SELECT
    'VIDE' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    0 ACS_CPN_ACCOUNT_ID,
    NULL CPN_NUMBER,
    NULL CPN_DESCR,
    0 ACS_CDA_ACCOUNT_ID,
    NULL CDA_NUMBER,
    0 ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(PF.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(PF.ACS_PF_ACCOUNT_ID) PF_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',PF.ACS_PF_ACCOUNT_ID) PF_LARGE_DESCR,
    0 ACT_MGM_DISTRIBUTION_ID,
    0 ACS_PJ_ACCOUNT_ID,
    NULL PJ_NUMBER,
    0 ACS_ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    0 ACS_PERIOD_ID,
    0 ACS_FINANCIAL_ACCOUNT_ID,
    NULL FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    0 ACS_FINANCIAL_YEAR_ID,
    NULL PER_START_DATE,
    NULL PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PF.ACS_PF_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_PF_ACCOUNT  PF,
    ACS_ACCOUNT     ACC
WHERE
    ACC.ACC_NUMBER      >= PROCPARAM_1 AND
    ACC.ACC_NUMBER      <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID   = PF.ACS_PF_ACCOUNT_ID AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR  FYE,
                    ACS_PERIOD          PER,
                    ACT_MGM_IMPUTATION  MGM
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        MGM.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        MGM.ACS_PF_ACCOUNT_ID       = PF.ACS_PF_ACCOUNT_ID)AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR              FYE,
                    ACS_PERIOD                      PER,
                    ACT_MGM_TOT_BY_PERIOD            TOT
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        TOT.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        TOT.ACS_PF_ACCOUNT_ID       = PF.ACS_PF_ACCOUNT_ID);
end RPT_ACR_PF_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_PJ_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* description used for report ACR_PJ_IMPUTATION_DET AND ACR_PJ_IMPUTATION_DET_FC
*                                 (Mouvements PJ sans et avec ME)

* @author SDO
* @lastUpdate Feb 2009
* @public
* @param PROCPARAM_0    Exercice    (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Compte du   (ACC_NUMBER)
* @param PROCPARAM_2    Compte au   (ACC_NUMBER)
*/
begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);

open aRefCursor for
SELECT
    'REEL' INFO,
    MGM.ACT_MGM_IMPUTATION_ID ACT_MGM_IMPUTATION_ID,
    MGM.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID,
    MGM.IMM_TRANSACTION_DATE IMM_TRANSACTION_DATE,
    MGM.IMM_VALUE_DATE IMM_VALUE_DATE,
    MGM.IMM_DESCRIPTION IMM_DESCRIPTION,
    MGM.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(MGM.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    MGM.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    MGM.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(MGM.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    DIS.ACT_MGM_DISTRIBUTION_ID ACT_MGM_DISTRIBUTION_ID,
    DIS.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(DIS.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(DIS.ACS_PJ_ACCOUNT_ID) PJ_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',DIS.ACS_PJ_ACCOUNT_ID) PJ_LARGE_DESCR,
    MGM.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    MGM.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(MGM.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    DIS.MGM_AMOUNT_LC_D MGM_AMOUNT_LC_D,
    DIS.MGM_AMOUNT_LC_C MGM_AMOUNT_LC_C,
    DIS.MGM_AMOUNT_FC_D MGM_AMOUNT_FC_D,
    DIS.MGM_AMOUNT_FC_C MGM_AMOUNT_FC_C,
    MGM.ACS_PERIOD_ID ACS_PERIOD_ID,
    IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(ACT_FUNCTIONS.AuxAccountFromImputation(IMP.ACT_FINANCIAL_IMPUTATION_ID)) AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID,
    DOC.DOC_NUMBER DOC_NUMBER,
    DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID,
    JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID,
    JOU.JOU_NUMBER JOU_NUMBER,
    JOU.JOU_DESCRIPTION JOU_DESCRIPTION,
    (SELECT ETA.C_ETAT_JOURNAL
     FROM ACT_ETAT_JOURNAL ETA
     WHERE ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
           ETA.C_SUB_SET      = 'CPN') C_ETAT_JOURNAL,
    (SELECT SCA.C_TYPE_CUMUL
     FROM ACJ_SUB_SET_CAT SCA
     WHERE SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID AND
           SCA.C_SUB_SET                 = 'CPN') C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PJ.ACS_PJ_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL,
    PAR.ACT_PART_IMPUTATION_ID,
    PAR.PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACT_JOURNAL              JOU,
    ACT_DOCUMENT             DOC,
    ACS_PERIOD               PER,
    ACS_FINANCIAL_YEAR       FYE,
    ACT_FINANCIAL_IMPUTATION IMP,
    ACT_PART_IMPUTATION      PAR,
    ACT_MGM_DISTRIBUTION     DIS,
    ACT_MGM_IMPUTATION       MGM,
    ACS_ACCOUNT              ACC,
    ACS_PJ_ACCOUNT           PJ
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    PJ.ACS_PJ_ACCOUNT_ID                = ACC.ACS_ACCOUNT_ID AND
    PJ.ACS_PJ_ACCOUNT_ID                = DIS.ACS_PJ_ACCOUNT_ID AND
    MGM.ACT_FINANCIAL_IMPUTATION_ID     = IMP.ACT_FINANCIAL_IMPUTATION_ID (+) AND
    MGM.ACT_MGM_IMPUTATION_ID           = DIS.ACT_MGM_IMPUTATION_ID (+) AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    MGM.ACS_PERIOD_ID                   = PER.ACS_PERIOD_ID AND
    MGM.ACT_DOCUMENT_ID                 = DOC.ACT_DOCUMENT_ID AND
    DOC.ACT_ACT_JOURNAL_ID              = JOU.ACT_JOURNAL_ID AND
    IMP.ACT_PART_IMPUTATION_ID          = PAR.ACT_PART_IMPUTATION_ID(+)
UNION ALL
SELECT
    'REPORT' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    FYE.FYE_START_DATE IMM_TRANSACTION_DATE,
    FYE.FYE_START_DATE IMM_VALUE_DATE,
    'Report' IMM_DESCRIPTION,
    TOT.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    TOT.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    TOT.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    TOT.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(TOT.ACS_PJ_ACCOUNT_ID) PJ_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',TOT.ACS_PJ_ACCOUNT_ID) PJ_LARGE_DESCR,
    TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(TOT.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_ME,
    TOT.MTO_DEBIT_LC MGM_AMOUNT_LC_D,
    TOT.MTO_CREDIT_LC MGM_AMOUNT_LC_C,
    TOT.MTO_DEBIT_FC MGM_AMOUNT_FC_D,
    TOT.MTO_CREDIT_FC MGM_AMOUNT_FC_C,
    TOT.ACS_PERIOD_ID ACS_PERIOD_ID,
    TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    TOT.C_TYPE_CUMUL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PJ.ACS_PJ_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR FYE,
    ACS_PERIOD PER,
    ACS_PJ_ACCOUNT PJ,
    ACS_ACCOUNT ACC,
    ACT_MGM_TOT_BY_PERIOD TOT
WHERE
    ACC.ACC_NUMBER                     >= PROCPARAM_1 AND
    ACC.ACC_NUMBER                     <= PROCPARAM_2 AND
    PJ.ACS_PJ_ACCOUNT_ID                = ACC.ACS_ACCOUNT_ID AND
    PJ.ACS_PJ_ACCOUNT_ID                = TOT.ACS_PJ_ACCOUNT_ID AND
    ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT' AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = PER.ACS_FINANCIAL_YEAR_ID AND
    PER.ACS_PERIOD_ID                   = TOT.ACS_PERIOD_ID AND
    PER.C_TYPE_PERIOD                   = '1'
UNION ALL
SELECT
    'BUDGET' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    GLO.ACS_CPN_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CPN_ACCOUNT_ID) CPN_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_CPN_ACCOUNT_ID) CPN_DESCR,
    GLO.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_CDA_ACCOUNT_ID) CDA_NUMBER,
    GLO.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PF_ACCOUNT_ID) PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    GLO.ACS_PJ_ACCOUNT_ID ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(GLO.ACS_PJ_ACCOUNT_ID) PJ_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',GLO.ACS_PJ_ACCOUNT_ID) PJ_LARGE_DESCR,
    GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    ACS_FUNCTION.GetCurrencyName(GLO.ACS_FINANCIAL_CURRENCY_ID) CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 MGM_AMOUNT_LC_D,
    0 MGM_AMOUNT_LC_C,
    0 MGM_AMOUNT_FC_D,
    0 MGM_AMOUNT_FC_C,
    PERB.ACS_PERIOD_ID ACS_PERIOD_ID,
    GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(GLO.ACS_FINANCIAL_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    NULL C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PJ.ACS_PJ_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    PERB.PER_AMOUNT_D PER_AMOUNT_D,
    PERB.PER_AMOUNT_C PER_AMOUNT_C,
    BUD.ACB_BUDGET_ID ACB_BUDGET_ID,
    VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID,
    GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
FROM
    ACS_FINANCIAL_YEAR      FYE,
    ACS_PERIOD              PER,
    ACB_PERIOD_AMOUNT       PERB,
    ACB_GLOBAL_BUDGET       GLO,
    ACB_BUDGET_VERSION      VER,
    ACB_BUDGET              BUD,
    ACS_ACCOUNT             ACC,
    ACS_PJ_ACCOUNT          PJ
WHERE
    FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID   = BUD.ACS_FINANCIAL_YEAR_ID AND
    BUD.ACB_BUDGET_ID           = VER.ACB_BUDGET_ID AND
    VER.VER_DEFAULT             = 1 AND
    VER.ACB_BUDGET_VERSION_ID   = GLO.ACB_BUDGET_VERSION_ID AND
    ACC.ACC_NUMBER              >= PROCPARAM_1 AND
    ACC.ACC_NUMBER              <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID          = PJ.ACS_PJ_ACCOUNT_ID AND
    PJ.ACS_PJ_ACCOUNT_ID        = GLO.ACS_PJ_ACCOUNT_ID AND
    GLO.ACB_GLOBAL_BUDGET_ID    = PERB.ACB_GLOBAL_BUDGET_ID AND
    PERB.ACS_PERIOD_ID          = PER.ACS_PERIOD_ID AND
    PER.ACS_FINANCIAL_YEAR_ID   = FYE.ACS_FINANCIAL_YEAR_ID
UNION ALL
SELECT
    'VIDE' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    0 ACS_CPN_ACCOUNT_ID,
    NULL CPN_NUMBER,
    NULL CPN_DESCR,
    0 ACS_CDA_ACCOUNT_ID,
    NULL CDA_NUMBER,
    0 ACS_PF_ACCOUNT_ID,
    NULL PF_NUMBER,
    0 ACT_MGM_DISTRIBUTION_ID,
    0 ACS_PJ_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(PJ.ACS_PJ_ACCOUNT_ID) PJ_NUMBER,
    ACS_FUNCTION.GetAccountDescriptionSummary(PJ.ACS_PJ_ACCOUNT_ID) PJ_SHORT_DESCR,
    ACS_FUNCTION.GetLargeDescription('ACS_ACCOUNT_ID',PJ.ACS_PJ_ACCOUNT_ID) PJ_LARGE_DESCR,
    0 ACS_ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 MGM_AMOUNT_LC_D,
    0 MGM_AMOUNT_LC_C,
    0 MGM_AMOUNT_FC_D,
    0 MGM_AMOUNT_FC_C,
    0 ACS_PERIOD_ID,
    0 ACS_FINANCIAL_ACCOUNT_ID,
    NULL FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    0 ACS_FINANCIAL_YEAR_ID,
    NULL PER_START_DATE,
    NULL PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    (SELECT ACC.ACC_DETAIL_PRINTING
     FROM ACS_ACCOUNT ACC
     WHERE ACC.ACS_ACCOUNT_ID = PJ.ACS_PJ_ACCOUNT_ID) ACC_DETAIL_PRINTING,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
FROM
    ACS_PJ_ACCOUNT  PJ,
    ACS_ACCOUNT     ACC
WHERE
    ACC.ACC_NUMBER      >= PROCPARAM_1 AND
    ACC.ACC_NUMBER      <= PROCPARAM_2 AND
    ACC.ACS_ACCOUNT_ID   = PJ.ACS_PJ_ACCOUNT_ID AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR      FYE,
                    ACS_PERIOD              PER,
                    ACT_MGM_DISTRIBUTION    DIS,
                    ACT_MGM_IMPUTATION      MGM
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        MGM.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        MGM.ACT_MGM_IMPUTATION_ID   = DIS.ACT_MGM_IMPUTATION_ID AND
                        DIS.ACS_PJ_ACCOUNT_ID       = PJ.ACS_PJ_ACCOUNT_ID) AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR              FYE,
                    ACS_PERIOD                      PER,
                    ACT_MGM_TOT_BY_PERIOD            TOT
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        TOT.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        TOT.ACS_PJ_ACCOUNT_ID       = PJ.ACS_PJ_ACCOUNT_ID);
end RPT_ACR_PJ_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_RCO_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     number
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* description used for report ACR_RCO_IMPUTATION_DET AND  ACR_RCO_IMPUTATION_DET_FC
*                                 (Mouvements Dossiers sans et avec ME)

* @author SDO
* @lastUpdate 12 Feb 2009
* @public
* @param PROCPARAM_0    Exercice    (FYE_NO_EXERCICE)
* @param PROCPARAM_1    Dossier du  (RCO_TITLE)
* @param PROCPARAM_2    Dossier au  (RCO_TITLE)
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
  SELECT
    'REEL' INFO,
    MGM.ACT_MGM_IMPUTATION_ID ACT_MGM_IMPUTATION_ID,
    MGM.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID,
    MGM.IMM_TRANSACTION_DATE IMM_TRANSACTION_DATE,
    MGM.IMM_VALUE_DATE IMM_VALUE_DATE,
    MGM.IMM_DESCRIPTION IMM_DESCRIPTION,
    MGM.DOC_RECORD_ID,
    RCO.RCO_TITLE,
    RCO.RCO_DESCRIPTION,
    MGM.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    (SELECT AC1.ACC_NUMBER
     FROM   ACS_ACCOUNT AC1
     WHERE  MGM.ACS_CPN_ACCOUNT_ID = AC1.ACS_ACCOUNT_ID) CPN_NUMBER,
    MGM.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    (SELECT AC2.ACC_NUMBER
     FROM   ACS_ACCOUNT AC2
     WHERE  MGM.ACS_CDA_ACCOUNT_ID = AC2.ACS_ACCOUNT_ID) CDA_NUMBER,
    MGM.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    (SELECT AC3.ACC_NUMBER
     FROM   ACS_ACCOUNT AC3
     WHERE  MGM.ACS_PF_ACCOUNT_ID = AC3.ACS_ACCOUNT_ID) PF_NUMBER,
    DIS.ACS_PJ_ACCOUNT_ID,
    (SELECT AC4.ACC_NUMBER
     FROM   ACS_ACCOUNT AC4
     WHERE  DIS.ACS_PJ_ACCOUNT_ID = AC4.ACS_ACCOUNT_ID) PJ_NUMBER,
    MGM.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    (SELECT CUB.CURRENCY
     FROM   PCS.PC_CURR             CUB,
            ACS_FINANCIAL_CURRENCY  CFB
     WHERE  CFB.ACS_FINANCIAL_CURRENCY_ID = MGM.ACS_ACS_FINANCIAL_CURRENCY_ID AND
            CUB.PC_CURR_ID                = CFB.PC_CURR_ID) CURRENCY_MB,
    MGM.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    (SELECT CUE.CURRENCY
     FROM   PCS.PC_CURR             CUE,
            ACS_FINANCIAL_CURRENCY  CFE
     WHERE  CFE.ACS_FINANCIAL_CURRENCY_ID = MGM.ACS_FINANCIAL_CURRENCY_ID AND
            CUE.PC_CURR_ID                = CFE.PC_CURR_ID) CURRENCY_ME,
    MGM.IMM_AMOUNT_LC_D IMM_AMOUNT_LC_D,
    MGM.IMM_AMOUNT_LC_C IMM_AMOUNT_LC_C,
    MGM.IMM_AMOUNT_FC_D IMM_AMOUNT_FC_D,
    MGM.IMM_AMOUNT_FC_C IMM_AMOUNT_FC_C,
    MGM.ACS_PERIOD_ID ACS_PERIOD_ID,
    IMF.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    (SELECT AC5.ACC_NUMBER
     FROM   ACS_ACCOUNT AC5
     WHERE  IMF.ACS_FINANCIAL_ACCOUNT_ID = AC5.ACS_ACCOUNT_ID) FIN_NUMBER,
    ACT_FUNCTIONS.AuxAccountFromImputation(IMF.ACT_FINANCIAL_IMPUTATION_ID) ACS_AUXILIARY_ACCOUNT_ID,
    ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMF.ACT_FINANCIAL_IMPUTATION_ID)) AUX_NUMBER,
    (SELECT DES.DES_DESCRIPTION_SUMMARY
     FROM   ACS_DESCRIPTION DES
     WHERE  DES.ACS_ACCOUNT_ID  = ACT_FUNCTIONS.AuxAccountFromImputation(IMF.ACT_FINANCIAL_IMPUTATION_ID) AND
            DES.PC_LANG_ID      = VPC_LANG_ID) AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    DOC.ACT_DOCUMENT_ID ACT_DOCUMENT_ID,
    DOC.DOC_NUMBER DOC_NUMBER,
    DOC.ACT_ACT_JOURNAL_ID ACT_ACT_JOURNAL_ID,
    JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID,
    JOU.JOU_NUMBER JOU_NUMBER,
    JOU.JOU_DESCRIPTION JOU_DESCRIPTION,
    (SELECT ETA.C_ETAT_JOURNAL
     FROM   ACT_ETAT_JOURNAL ETA
     WHERE  ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
            ETA.C_SUB_SET      = 'CPN') C_ETAT_JOURNAL,
    (SELECT SCA.C_TYPE_CUMUL
     FROM   ACJ_SUB_SET_CAT SCA
     WHERE  SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID AND
            SCA.C_SUB_SET                 = 'CPN') C_TYPE_CUMUL,
    JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL,
    PAR.ACT_PART_IMPUTATION_ID,
    PAR.PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
  FROM
    ACT_FINANCIAL_IMPUTATION  IMF,
    ACT_PART_IMPUTATION       PAR,
    ACT_JOURNAL               JOU,
    ACT_DOCUMENT              DOC,
    ACS_PERIOD                PER,
    ACS_FINANCIAL_YEAR        FYE,
    ACT_MGM_DISTRIBUTION      DIS,
    ACT_MGM_IMPUTATION        MGM,
    DOC_RECORD                RCO
  WHERE
    RCO.RCO_TITLE                   >= PROCPARAM_1 AND
    RCO.RCO_TITLE                   <= PROCPARAM_2 AND
    MGM.DOC_RECORD_ID               = RCO.DOC_RECORD_ID AND
    MGM.ACT_MGM_IMPUTATION_ID       = DIS.ACT_MGM_IMPUTATION_ID (+) AND
    FYE.FYE_NO_EXERCICE             = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID       = PER.ACS_FINANCIAL_YEAR_ID AND
    MGM.ACS_PERIOD_ID               = PER.ACS_PERIOD_ID AND
    MGM.ACT_DOCUMENT_ID             = DOC.ACT_DOCUMENT_ID AND
    DOC.ACT_ACT_JOURNAL_ID          = JOU.ACT_JOURNAL_ID AND
    MGM.ACT_FINANCIAL_IMPUTATION_ID = IMF.ACT_FINANCIAL_IMPUTATION_ID (+) AND
    IMF.ACT_PART_IMPUTATION_ID      = PAR.ACT_PART_IMPUTATION_ID(+)
UNION ALL
  SELECT
    'REPORT' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    FYE.FYE_START_DATE IMM_TRANSACTION_DATE,
    FYE.FYE_START_DATE IMM_VALUE_DATE,
    'Report' IMM_DESCRIPTION,
    TOT.DOC_RECORD_ID,
    RCO.RCO_TITLE,
    RCO.RCO_DESCRIPTION,
    TOT.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    (SELECT AC1.ACC_NUMBER
     FROM   ACS_ACCOUNT AC1
     WHERE  TOT.ACS_CPN_ACCOUNT_ID = AC1.ACS_ACCOUNT_ID) CPN_NUMBER,
    TOT.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    (SELECT AC2.ACC_NUMBER
     FROM   ACS_ACCOUNT AC2
     WHERE  TOT.ACS_CDA_ACCOUNT_ID = AC2.ACS_ACCOUNT_ID) CDA_NUMBER,
    TOT.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    (SELECT AC3.ACC_NUMBER
     FROM   ACS_ACCOUNT AC3
     WHERE  TOT.ACS_PF_ACCOUNT_ID = AC3.ACS_ACCOUNT_ID) PF_NUMBER,
    TOT.ACS_PJ_ACCOUNT_ID,
    (SELECT AC4.ACC_NUMBER
     FROM   ACS_ACCOUNT AC4
     WHERE  TOT.ACS_PJ_ACCOUNT_ID = AC4.ACS_ACCOUNT_ID) PJ_NUMBER,
    TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    (SELECT CUB.CURRENCY
     FROM   PCS.PC_CURR             CUB,
            ACS_FINANCIAL_CURRENCY  CFB
     WHERE  CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID AND
            CUB.PC_CURR_ID                = CFB.PC_CURR_ID) CURRENCY_MB,
    TOT.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
    (SELECT CUE.CURRENCY
     FROM   PCS.PC_CURR             CUE,
            ACS_FINANCIAL_CURRENCY  CFE
     WHERE  CFE.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID AND
            CUE.PC_CURR_ID                = CFE.PC_CURR_ID) CURRENCY_ME,
    TOT.MTO_DEBIT_LC IMM_AMOUNT_LC_D,
    TOT.MTO_CREDIT_LC IMM_AMOUNT_LC_C,
    TOT.MTO_DEBIT_FC IMM_AMOUNT_FC_D,
    TOT.MTO_CREDIT_FC IMM_AMOUNT_FC_C,
    TOT.ACS_PERIOD_ID ACS_PERIOD_ID,
    TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    (SELECT AC5.ACC_NUMBER
     FROM   ACS_ACCOUNT AC5
     WHERE  TOT.ACS_FINANCIAL_ACCOUNT_ID = AC5.ACS_ACCOUNT_ID ) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    PER.C_TYPE_PERIOD C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    TOT.C_TYPE_CUMUL C_TYPE_CUMUL,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
  FROM
    ACS_FINANCIAL_YEAR    FYE,
    ACS_PERIOD            PER,
    ACT_MGM_TOT_BY_PERIOD TOT,
    DOC_RECORD            RCO
  WHERE
    RCO.RCO_TITLE               >= PROCPARAM_1 AND
    RCO.RCO_TITLE               <= PROCPARAM_2 AND
    TOT.DOC_RECORD_ID           = RCO.DOC_RECORD_ID AND
    ACS_FUNCTION.GetStatePreviousFinancialYear(FYE.ACS_FINANCIAL_YEAR_ID) = 'ACT' AND
    FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
    PER.ACS_PERIOD_ID           = TOT.ACS_PERIOD_ID AND
    PER.C_TYPE_PERIOD           = '1'
UNION ALL
  SELECT
    'BUDGET' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    GLO.DOC_RECORD_ID,
    RCO.RCO_TITLE,
    RCO.RCO_DESCRIPTION,
    GLO.ACS_CPN_ACCOUNT_ID ACS_CPN_ACCOUNT_ID,
    (SELECT AC1.ACC_NUMBER
     FROM   ACS_ACCOUNT AC1
     WHERE  GLO.ACS_CPN_ACCOUNT_ID = AC1.ACS_ACCOUNT_ID) CPN_NUMBER,
    GLO.ACS_CDA_ACCOUNT_ID ACS_CDA_ACCOUNT_ID,
    (SELECT AC2.ACC_NUMBER
     FROM   ACS_ACCOUNT AC2
     WHERE  GLO.ACS_CDA_ACCOUNT_ID = AC2.ACS_ACCOUNT_ID) CDA_NUMBER,
    GLO.ACS_PF_ACCOUNT_ID ACS_PF_ACCOUNT_ID,
    (SELECT AC3.ACC_NUMBER
     FROM   ACS_ACCOUNT AC3
     WHERE  GLO.ACS_PF_ACCOUNT_ID = AC3.ACS_ACCOUNT_ID) PF_NUMBER,
    GLO.ACS_PJ_ACCOUNT_ID,
    (SELECT AC4.ACC_NUMBER
     FROM   ACS_ACCOUNT AC4
     WHERE  GLO.ACS_PJ_ACCOUNT_ID = AC4.ACS_ACCOUNT_ID) PJ_NUMBER,
    GLO.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
    (SELECT CUB.CURRENCY
     FROM   PCS.PC_CURR             CUB,
            ACS_FINANCIAL_CURRENCY  CFB
     WHERE  CFB.ACS_FINANCIAL_CURRENCY_ID = GLO.ACS_FINANCIAL_CURRENCY_ID AND
            CUB.PC_CURR_ID                = CFB.PC_CURR_ID) CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    PERB.ACS_PERIOD_ID ACS_PERIOD_ID,
    GLO.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID,
    (SELECT AC5.ACC_NUMBER
     FROM   ACS_ACCOUNT AC5
     WHERE  GLO.ACS_FINANCIAL_ACCOUNT_ID = AC5.ACS_ACCOUNT_ID) FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID,
    PER.PER_START_DATE PER_START_DATE,
    PER.PER_END_DATE PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    NULL C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    PERB.PER_AMOUNT_D PER_AMOUNT_D,
    PERB.PER_AMOUNT_C PER_AMOUNT_C,
    BUD.ACB_BUDGET_ID ACB_BUDGET_ID,
    VER.ACB_BUDGET_VERSION_ID ACB_BUDGET_VERSION_ID,
    GLO.ACB_GLOBAL_BUDGET_ID ACB_GLOBAL_BUDGET_ID
  FROM
    ACS_FINANCIAL_YEAR  FYE,
    ACS_PERIOD          PER,
    ACB_PERIOD_AMOUNT   PERB,
    ACB_GLOBAL_BUDGET   GLO,
    ACB_BUDGET_VERSION  VER,
    ACB_BUDGET          BUD,
    DOC_RECORD          RCO
  WHERE
    RCO.RCO_TITLE                       >= PROCPARAM_1 AND
    RCO.RCO_TITLE                       <= PROCPARAM_2 AND
    GLO.DOC_RECORD_ID                   = RCO.DOC_RECORD_ID AND
    FYE.FYE_NO_EXERCICE                 = PROCPARAM_0 AND
    FYE.ACS_FINANCIAL_YEAR_ID           = BUD.ACS_FINANCIAL_YEAR_ID AND
    BUD.ACB_BUDGET_ID                   = VER.ACB_BUDGET_ID AND
    VER.VER_DEFAULT                     = 1 AND
    VER.ACB_BUDGET_VERSION_ID           = GLO.ACB_BUDGET_VERSION_ID AND
    GLO.ACB_GLOBAL_BUDGET_ID            = PERB.ACB_GLOBAL_BUDGET_ID AND
    PERB.ACS_PERIOD_ID                  = PER.ACS_PERIOD_ID AND
    PER.ACS_FINANCIAL_YEAR_ID           = FYE.ACS_FINANCIAL_YEAR_ID
UNION ALL
  SELECT
    'VIDE' INFO,
    0 ACT_MGM_IMPUTATION_ID,
    0 ACT_FINANCIAL_IMPUTATION_ID,
    NULL IMM_TRANSACTION_DATE,
    NULL IMM_VALUE_DATE,
    NULL IMM_DESCRIPTION,
    RCO.DOC_RECORD_ID,
    RCO.RCO_TITLE,
    RCO.RCO_DESCRIPTION,
    0 ACS_CPN_ACCOUNT_ID,
    NULL CPN_NUMBER,
    0 ACS_CDA_ACCOUNT_ID,
    NULL CDA_NUMBER,
    0 ACS_PF_ACCOUNT_ID,
    NULL PF_NUMBER,
    0 ACS_PJ_ACCOUNT_ID,
    NULL PJ_NUMBER,
    0 ACS_ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_MB,
    0 ACS_FINANCIAL_CURRENCY_ID,
    NULL CURRENCY_ME,
    0 IMM_AMOUNT_LC_D,
    0 IMM_AMOUNT_LC_C,
    0 IMM_AMOUNT_FC_D,
    0 IMM_AMOUNT_FC_C,
    0 ACS_PERIOD_ID,
    0 ACS_FINANCIAL_ACCOUNT_ID,
    NULL FIN_NUMBER,
    0 ACS_AUXILIARY_ACCOUNT_ID,
    NULL AUX_NUMBER,
    NULL AUX_SHORT_DESCR,
    0 ACS_FINANCIAL_YEAR_ID,
    NULL PER_START_DATE,
    NULL PER_END_DATE,
    NULL C_TYPE_PERIOD,
    0 ACT_DOCUMENT_ID,
    NULL DOC_NUMBER,
    0 ACT_ACT_JOURNAL_ID,
    0 ACT_JOURNAL_ID,
    0 JOU_NUMBER,
    NULL JOU_DESCRIPTION,
    'PROV' C_ETAT_JOURNAL,
    NULL C_TYPE_CUMUL,
    NULL C_TYPE_JOURNAL,
    NULL ACT_PART_IMPUTATION_ID,
    NULL PAR_DOCUMENT,
    0 PER_AMOUNT_D,
    0 PER_AMOUNT_C,
    0 ACB_BUDGET_ID,
    0 ACB_BUDGET_VERSION_ID,
    0 ACB_GLOBAL_BUDGET_ID
  FROM
    DOC_RECORD  RCO
  WHERE
    RCO.RCO_TITLE                       >= PROCPARAM_1 AND
    RCO.RCO_TITLE                       <= PROCPARAM_2 AND
    NOT EXISTS(SELECT 1
               FROM ACS_FINANCIAL_YEAR  FYE,
                    ACS_PERIOD          PER,
                    ACT_MGM_IMPUTATION  MGM
                WHERE   FYE.FYE_NO_EXERCICE         = PROCPARAM_0 AND
                        FYE.ACS_FINANCIAL_YEAR_ID   = PER.ACS_FINANCIAL_YEAR_ID AND
                        MGM.ACS_PERIOD_ID           = PER.ACS_PERIOD_ID AND
                        MGM.DOC_RECORD_ID           = RCO.DOC_RECORD_ID);
end RPT_ACR_RCO_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_REC_BALANCE" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     number
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* Procédure stockée utilisée pour le rapport ACR_REC_BALANCE (Balance REC à une période, avec sélection de comptes
* Replace procedure ACR_REC_BALANCE_RPT
* @author SDO
* @lastUpdate VHA 26 JUNE 2013
* @version 2003
* @public
* @param procparam_0    Sous-ensemble       (ACS_SUB_SET_ID)
* @param procparam_1    Exercice            (FYE_NO_EXERCICE)
* @param procparam_2    Compte du...        (ACC_NUMBER)
* @param procparam_3    Compte au...        (ACC_NUMBER)
* @param procparam_4    Division_ID (List)  NULL = All or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5    Collectiv_ID (List) '' = All sinon liste des ID
* @param procparam_6    Periode du...       (PER_NO_PERIOD)
* @param procparam_7    Période au...       (PER_NO_PERIOD)
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (procparam_1 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id                   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id                   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id                   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id                  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  select decode(min(ACS_SUB_SET_ID), null, 0, 1)
    into TMP
    from ACS_SUB_SET
   where C_TYPE_SUB_SET = 'DIVI';

  ACR_FUNCTIONS.EXIST_DIVISION  := TMP;
  pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  vpc_lang_id                   := pcs.PC_I_LIB_SESSION.GetUserLangId;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select AUX.ACS_AUXILIARY_ACCOUNT_ID
         , ACC.ACC_NUMBER AUX_NUMBER
         , (select DES.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DES
             where DES.ACS_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id) AUX_DESCR
         , ACS_FUNCTION.GetPer_short_Name(TOT.ACS_AUXILIARY_ACCOUNT_ID) PER_SHORT_NAME
         , TOT.ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CMB
             where CMB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CMB.PC_CURR_ID) CURRENCY_MB
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUE.CURRENCY
              from PCS.PC_CURR CUE
                 , ACS_FINANCIAL_CURRENCY CME
             where CME.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUE.PC_CURR_ID = CME.PC_CURR_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_FINANCIAL_ACCOUNT_ID
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIV
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , TOT.ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , (select DE1.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DE1
             where DE1.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
               and DE1.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
         , PER.PER_NO_PERIOD
         , FYE.ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_NO_EXERCICE
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_SUB_SET SUB
         , ACT_TOTAL_BY_PERIOD TOT
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_ACCOUNT ACC
         , ACS_AUXILIARY_ACCOUNT AUX
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_4) ) AUT
     where AUX.ACS_AUXILIARY_ACCOUNT_ID = TOT.ACS_AUXILIARY_ACCOUNT_ID
       and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
       and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and SUB.C_SUB_SET = 'REC'
       and (   ACC.ACS_SUB_SET_ID = procparam_0
            or procparam_0 is null)
       and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
            or procparam_5 is null)
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
       and PER.PER_NO_PERIOD >= procparam_6
       and PER.PER_NO_PERIOD <= procparam_7
       and PER.ACS_FINANCIAL_YEAR_ID = FYE.ACS_FINANCIAL_YEAR_ID
       and FYE.FYE_NO_EXERCICE = procparam_1
       and ACC.ACC_NUMBER >= procparam_2
       and ACC.ACC_NUMBER <= procparam_3
       and TOT.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = TOT.ACS_DIVISION_ACCOUNT_ID;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select AUX.ACS_AUXILIARY_ACCOUNT_ID
         , ACC.ACC_NUMBER AUX_NUMBER
         , (select DES.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DES
             where DES.ACS_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
               and DES.PC_LANG_ID = vpc_lang_id) AUX_DESCR
         , ACS_FUNCTION.GetPer_short_Name(TOT.ACS_AUXILIARY_ACCOUNT_ID) PER_SHORT_NAME
         , TOT.ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CMB
             where CMB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CMB.PC_CURR_ID) CURRENCY_MB
         , TOT.TOT_DEBIT_LC
         , TOT.TOT_CREDIT_LC
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUE.CURRENCY
              from PCS.PC_CURR CUE
                 , ACS_FINANCIAL_CURRENCY CME
             where CME.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUE.PC_CURR_ID = CME.PC_CURR_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_FC
         , TOT.TOT_CREDIT_FC
         , TOT.ACS_FINANCIAL_ACCOUNT_ID
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIV
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , TOT.ACS_PERIOD_ID
         , TOT.C_TYPE_PERIOD
         , TOT.C_TYPE_CUMUL
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , (select DE1.DES_DESCRIPTION_SUMMARY
              from ACS_DESCRIPTION DE1
             where DE1.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
               and DE1.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
         , PER.PER_NO_PERIOD
         , FYE.ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_NO_EXERCICE
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_SUB_SET SUB
         , ACT_TOTAL_BY_PERIOD TOT
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACS_ACCOUNT ACC
         , ACS_AUXILIARY_ACCOUNT AUX
     where AUX.ACS_AUXILIARY_ACCOUNT_ID = TOT.ACS_AUXILIARY_ACCOUNT_ID
       and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
       and TOT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
       and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and SUB.C_SUB_SET = 'REC'
       and (   ACC.ACS_SUB_SET_ID = procparam_0
            or procparam_0 is null)
       and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
            or procparam_5 is null)
       and TOT.ACS_DIVISION_ACCOUNT_ID is null
       and TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
       and PER.PER_NO_PERIOD >= procparam_6
       and PER.PER_NO_PERIOD <= procparam_7
       and PER.ACS_FINANCIAL_YEAR_ID = FYE.ACS_FINANCIAL_YEAR_ID
       and FYE.FYE_NO_EXERCICE = procparam_1
       and ACC.ACC_NUMBER >= procparam_2
       and ACC.ACC_NUMBER <= procparam_3;
end if;
end RPT_ACR_REC_BALANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_REC_IMPUTATION_DET" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_8    in     varchar2
, parameter_9    in     varchar2
, parameter_10   in     varchar2
, parameter_12   in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, parameter_22   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_REC_IMPUTATION_DET

* @author JLI  19 Dec. 2007
* @lastUpdate VHA 15 october 2013
* public
* @param procparam_0            Account from
* @param procparam_1            Account to
* @param procparam_2            ACS_FINANCIAL_YEAR_ID
* @param procparam_3: Job ID (COM_LIST)
* @param parameter_4    IMF_TRANSACTION_DATE/DATE_TO/YEAR
* @param parameter_5    IMF_TRANSACTION_DATE/DATE_TO/MONTH
* @param parameter_6    IMF_TRANSACTION_DATE/DATE_TO/DAY
* @param parameter_7    C_ETAT_JOURNAL
* @param parameter_8    C_ETAT_JOURNAL
* @param parameter_9    C_ETAT_JOURNAL
* @param parameter_10   ACS_SUB_SET
* @param parameter_12   MATCHING
* @param parameter_17: Divisions (# = All  / null = selection (COM_LIST))
* @param parameter_18   C_TYPE_CUMUL
* @param parameter_19   C_TYPE_CUMUL
* @param parameter_20   C_TYPE_CUMUL
* @param parameter_21   C_TYPE_CUMUL
* @param parameter_22   ACS_FINANCIAL_ACCOUNT_ID (Collectiv_ID)
*/
  tmp         number;
  param5      varchar2(10);
  param6      varchar2(10);
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;

  if     (procparam_0 is not null)
     and (length(trim(procparam_0) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER1  := procparam_0;
  else
    ACR_FUNCTIONS.ACC_NUMBER1  := ' ';
  end if;

  if     (procparam_1 is not null)
     and (length(trim(procparam_1) ) > 0) then
    ACR_FUNCTIONS.ACC_NUMBER2  := procparam_1;
  end if;

  if     (procparam_2 is not null)
     and (length(trim(procparam_2) ) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID  := procparam_2;
  end if;

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;

  if length(parameter_5) = 1 then
    param5  := '0' || parameter_5;
  else
    param5  := parameter_5;
  end if;

  if length(parameter_6) = 1 then
    param6  := '0' || parameter_6;
  else
    param6  := parameter_6;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , ACC.FIN_COLLECTIVE
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIVE2
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , CRC.PC_CURR_ID
         , CRC2.PC_CURR_ID
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , PAY.ACT_DET_PAYMENT_ID
         , PAY.DET_PAIED_LC
         , PAY.DET_PAIED_FC
         , PAY.DET_CHARGES_LC
         , PAY.DET_CHARGES_FC
         , PAY.DET_DISCOUNT_LC
         , PAY.DET_DISCOUNT_FC
         , PAY.DET_DEDUCTION_LC
         , PAY.DET_DEDUCTION_FC
         , DOC.DOC_NUMBER
         , DOC.ACT_DOCUMENT_ID
         , IMP.ACT_PART_IMPUTATION_ID
         , IMP.PAR_DOCUMENT
         , IMP.DOC_DATE_DELIVERY
         , PER.PER_NAME
         , PER.PER_FORENAME
         , PER.PER_ACTIVITY
         , CUR.PC_CURR_ID
         , CUR.CURRENCY
         , CUR2.PC_CURR_ID
         , CUR2.CURRENCY
         , LAN.LANID
         , V_AUX.C_TYPE_ACCOUNT
         , V_AUX.ACC_NUMBER
         , V_AUX.DES_DESCRIPTION_SUMMARY
         , V_AUX.DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACT_DET_PAYMENT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_PART_IMPUTATION_ID
         , V_IMP.ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER
         , V_IMP.JOU_NUMBER
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL
         , V_IMP.DOC_DATE_DELIVERY
         , V_IMP.MATCHING
         , PRD.C_TYPE_PERIOD
         , decode(nvl(IMP.ACT_PART_IMPUTATION_ID, 0)
                , 0, decode(nvl(IMP.ACT_DOCUMENT_ID, 0), 0, 0, 1)
                , decode(ACT_FUNCTIONS.GetAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1) -
                         ACT_FUNCTIONS.GetTotalAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1)
                       , 0, 1
                       , 0
                        )
                 ) ctrl_pmt_doc
         , ACS_FUNCTION.GetAuxAccOwnerName(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_NAME
         , ACS_FUNCTION.GetPer_short_Name(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_SHORT_NAME
         , CNY.CURRENCY_NO
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY CRC
         , ACS_FINANCIAL_CURRENCY CRC2
         , ACS_SUB_SET SUB
         , ACT_DET_PAYMENT PAY
         , ACT_DOCUMENT DOC
         , ACT_PART_IMPUTATION IMP
         , ACT_JOB JOB
         , PAC_PERSON PER
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR2
         , PCS.PC_LANG LAN
         , V_ACS_AUXILIARY_ACCOUNT V_AUX
         , V_ACT_REC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , (select distinct ACC_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from V_ACT_REC_IMP_REPORT V_IMP
                      where ACS_FINANCIAL_CURRENCY_ID <> ACS_ACS_FINANCIAL_CURRENCY_ID
                        and (    (    parameter_18 = '1'
                                  and V_IMP.C_TYPE_CUMUL = 'EXT')
                             or (    parameter_19 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'INT')
                             or (    parameter_20 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'PRE')
                             or (    parameter_21 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'ENG')
                            )
                   group by ACC_NUMBER) CNY
         , (select LIS_ID_1
              from COM_LIST
             where LIS_JOB_ID = to_number(procparam_3)
               and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
     where V_AUX.ACS_AUXILIARY_ACCOUNT_ID(+) = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and V_AUX.ACC_NUMBER = CNY.ACC_NUMBER(+)
       and V_AUX.PC_LANG_ID = LAN.PC_LANG_ID
       and V_AUX.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CRC.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CRC2.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACT_DET_PAYMENT_ID = PAY.ACT_DET_PAYMENT_ID(+)
       and V_IMP.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID(+)
       and DOC.ACT_JOB_ID = JOB.ACT_JOB_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and CRC.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and CRC2.PC_CURR_ID = CUR2.PC_CURR_ID(+)
       and IMP.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (   parameter_22 = '#'
            or instr(',' || parameter_22 || ',', ',' || ACC.ACS_FINANCIAL_ACCOUNT_ID || ',') > 0)
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and LAN.PC_LANG_ID = vpc_lang_id
       and ACC.FIN_COLLECTIVE = 1
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || param5 || param6, 'yyyyMMdd')
       and decode(parameter_10, 0, SUB.C_SUB_SET, SUB.ACS_SUB_SET_ID) = decode(parameter_10, 0, 'REC', parameter_10)
       and (   parameter_12 = '1'
            or not(    parameter_12 = '0'
                   and V_IMP.MATCHING = 1) )
       and  V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and V_IMP.ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1;
else     -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select CAT.C_TYPE_CATALOGUE
         , ACC.FIN_COLLECTIVE
         , (select FIN.ACC_NUMBER
              from ACS_ACCOUNT FIN
             where FIN.ACS_ACCOUNT_ID = V_IMP.ACS_FINANCIAL_ACCOUNT_ID) FIN_COLLECTIVE2
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , CRC.PC_CURR_ID
         , CRC2.PC_CURR_ID
         , SUB.ACS_SUB_SET_ID
         , SUB.C_SUB_SET
         , PAY.ACT_DET_PAYMENT_ID
         , PAY.DET_PAIED_LC
         , PAY.DET_PAIED_FC
         , PAY.DET_CHARGES_LC
         , PAY.DET_CHARGES_FC
         , PAY.DET_DISCOUNT_LC
         , PAY.DET_DISCOUNT_FC
         , PAY.DET_DEDUCTION_LC
         , PAY.DET_DEDUCTION_FC
         , DOC.DOC_NUMBER
         , DOC.ACT_DOCUMENT_ID
         , IMP.ACT_PART_IMPUTATION_ID
         , IMP.PAR_DOCUMENT
         , IMP.DOC_DATE_DELIVERY
         , PER.PER_NAME
         , PER.PER_FORENAME
         , PER.PER_ACTIVITY
         , CUR.PC_CURR_ID
         , CUR.CURRENCY
         , CUR2.PC_CURR_ID
         , CUR2.CURRENCY
         , LAN.LANID
         , V_AUX.C_TYPE_ACCOUNT
         , V_AUX.ACC_NUMBER
         , V_AUX.DES_DESCRIPTION_SUMMARY
         , V_AUX.DES_DESCRIPTION_LARGE
         , V_IMP.ACT_FINANCIAL_IMPUTATION_ID
         , V_IMP.IMF_DESCRIPTION
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_EXCHANGE_RATE
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_VALUE_DATE
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_AUXILIARY_ACCOUNT_ID
         , V_IMP.ACT_DET_PAYMENT_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_PART_IMPUTATION_ID
         , V_IMP.ACS_DIVISION_ACCOUNT_ID
         , V_IMP.DIV_NUMBER
         , V_IMP.JOU_NUMBER
         , V_IMP.C_ETAT_JOURNAL
         , V_IMP.C_TYPE_CUMUL
         , V_IMP.DOC_DATE_DELIVERY
         , V_IMP.MATCHING
         , PRD.C_TYPE_PERIOD
         , decode(nvl(IMP.ACT_PART_IMPUTATION_ID, 0)
                , 0, decode(nvl(IMP.ACT_DOCUMENT_ID, 0), 0, 0, 1)
                , decode(ACT_FUNCTIONS.GetAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1) -
                         ACT_FUNCTIONS.GetTotalAmountOfPartImputation(IMP.ACT_PART_IMPUTATION_ID, 1)
                       , 0, 1
                       , 0
                        )
                 ) ctrl_pmt_doc
         , ACS_FUNCTION.GetAuxAccOwnerName(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_NAME
         , ACS_FUNCTION.GetPer_short_Name(V_IMP.ACS_AUXILIARY_ACCOUNT_ID) G1_PER_SHORT_NAME
         , CNY.CURRENCY_NO
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_FINANCIAL_ACCOUNT ACC
         , ACS_FINANCIAL_CURRENCY CRC
         , ACS_FINANCIAL_CURRENCY CRC2
         , ACS_SUB_SET SUB
         , ACT_DET_PAYMENT PAY
         , ACT_DOCUMENT DOC
         , ACT_PART_IMPUTATION IMP
         , ACT_JOB JOB
         , PAC_PERSON PER
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR2
         , PCS.PC_LANG LAN
         , V_ACS_AUXILIARY_ACCOUNT V_AUX
         , V_ACT_REC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , (select distinct ACC_NUMBER
                          , count(distinct ACS_FINANCIAL_CURRENCY_ID) CURRENCY_NO
                       from V_ACT_REC_IMP_REPORT V_IMP
                      where ACS_FINANCIAL_CURRENCY_ID <> ACS_ACS_FINANCIAL_CURRENCY_ID
                        and (    (    parameter_18 = '1'
                                  and V_IMP.C_TYPE_CUMUL = 'EXT')
                             or (    parameter_19 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'INT')
                             or (    parameter_20 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'PRE')
                             or (    parameter_21 = '1'
                                 and V_IMP.C_TYPE_CUMUL = 'ENG')
                            )
                   group by ACC_NUMBER) CNY
     where V_AUX.ACS_AUXILIARY_ACCOUNT_ID(+) = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
       and V_AUX.ACC_NUMBER = CNY.ACC_NUMBER(+)
       and V_AUX.PC_LANG_ID = LAN.PC_LANG_ID
       and V_AUX.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
       and V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_FINANCIAL_ACCOUNT_ID
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CRC.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CRC2.ACS_FINANCIAL_CURRENCY_ID
       and V_IMP.ACT_DET_PAYMENT_ID = PAY.ACT_DET_PAYMENT_ID(+)
       and V_IMP.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID(+)
       and DOC.ACT_JOB_ID = JOB.ACT_JOB_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and CRC.PC_CURR_ID = CUR.PC_CURR_ID(+)
       and CRC2.PC_CURR_ID = CUR2.PC_CURR_ID(+)
       and IMP.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and (    (    parameter_7 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    parameter_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    parameter_9 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and (   parameter_22 = '#'
            or instr(',' || parameter_22 || ',', ',' || ACC.ACS_FINANCIAL_ACCOUNT_ID || ',') > 0)
       and (    (    parameter_18 = '1'
                 and V_IMP.C_TYPE_CUMUL = 'EXT')
            or (    parameter_19 = '1'
                and V_IMP.C_TYPE_CUMUL = 'INT')
            or (    parameter_20 = '1'
                and V_IMP.C_TYPE_CUMUL = 'PRE')
            or (    parameter_21 = '1'
                and V_IMP.C_TYPE_CUMUL = 'ENG')
           )
       and LAN.PC_LANG_ID = vpc_lang_id
       and ACC.FIN_COLLECTIVE = 1
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(parameter_4 || param5 || param6, 'yyyyMMdd')
       and decode(parameter_10, 0, SUB.C_SUB_SET, SUB.ACS_SUB_SET_ID) = decode(parameter_10, 0, 'REC', parameter_10)
       and (   parameter_12 = '1'
            or not(    parameter_12 = '0'
                   and V_IMP.MATCHING = 1) );
end if;
end RPT_ACR_REC_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM" (
   AREFCURSOR       IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCUSER_LANID   IN       PCS.PC_LANG.LANID%TYPE,
   PARAMETER_0       IN         VARCHAR2,
   PARAMETER_1       IN         VARCHAR2,
   PARAMETER_2       IN         VARCHAR2,
   PARAMETER_3       IN         VARCHAR2,
   PARAMETER_4       IN         VARCHAR2,
   PARAMETER_5       IN         VARCHAR2,
   PARAMETER_6      IN         VARCHAR2,
   PARAMETER_7      IN         VARCHAR2,
   PARAMETER_9      IN         VARCHAR2,
   PARAMETER_10     IN         VARCHAR2,
   PARAMETER_11     IN         VARCHAR2,
   PARAMETER_12     IN         VARCHAR2,
   PARAMETER_13     IN         VARCHAR2,
   PARAMETER_14     IN         VARCHAR2,
   PARAMETER_15     IN         VARCHAR2,
   PARAMETER_16     IN         VARCHAR2
)
/**
*Description

 Used for report ACR_VAT_FORM
*@created VHAAB 29.08.2011
*@public
*@PARAM parameter_0   Year(from)
*@PARAM parameter_1   Month(from)
*@PARAM parameter_2   Day(from)
*@PARAM parameter_3   Year(to)
*@PARAM parameter_4   Month(to)
*@PARAM parameter_5   Day(to)
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_9   Group by currency : '0'=No / '1'/Yes
*@PARAM parameter_10  C_TYPE_CUMUL
*@PARAM parameter_11  C_TYPE_CUMUL
*@PARAM parameter_12  C_TYPE_CUMUL
*@PARAM parameter_13  C_TYPE_CUMUL
*@PARAM parameter_14  Def. print : 0=No / 1=Yes
*@PARAM parameter_15  ACT_VAT_DET_ACCOUNT_ID
*@PARAM parameter_16  ACS_VAT_DET_ACCOUNT_ID
*/
IS
   VPC_LANG_ID   PCS.PC_LANG.PC_LANG_ID%TYPE; --user language id

BEGIN


IF PARAMETER_0 IS NOT NULL
   THEN
      ACT_FUNCTIONS.DATE_FROM :=
         TO_DATE (   PARAMETER_0
                  || LPAD (PARAMETER_1, 2, '0')
                  || LPAD (PARAMETER_2, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF PARAMETER_3 IS NOT NULL
   THEN
      ACT_FUNCTIONS.DATE_TO :=
         TO_DATE (   PARAMETER_3
                  || LPAD (PARAMETER_4, 2, '0')
                  || LPAD (PARAMETER_5, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF     (PARAMETER_15 IS NOT NULL)
      AND (LENGTH (TRIM (PARAMETER_15)) > 0)
      AND (PARAMETER_15 <> '0')
   THEN
      ACT_FUNCTIONS.VAT_DET_ACC_ID := PARAMETER_15;
   END IF;

   PCS.PC_I_LIB_SESSION.SETLANID (PROCUSER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

OPEN AREFCURSOR FOR

      SELECT
             (SELECT CAT.CAT_DESCRIPTION
                FROM ACJ_CATALOGUE_DOCUMENT CAT
                WHERE ATD.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID) CAT_DESCRIPTION,
             ACC.ACC_NUMBER  ACC_NUMBER_TAX,
             FIN.ACC_NUMBER  ACC_NUMBER_FIN,
              (SELECT DES_DESCRIPTION_SUMMARY
                FROM ACS_DESCRIPTION
                WHERE ACS_VAT_DET_ACCOUNT_ID =  DET.ACS_VAT_DET_ACCOUNT_ID
                 AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY,
             FUR_LC.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY_LC,
             FUR.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY,
             (SELECT YEA.FYE_NO_EXERCICE
                FROM ACS_FINANCIAL_YEAR YEA
               WHERE  JOU.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID)FYE_NO_EXERCICE,
             TCO.ACS_TAX_CODE_ID,
             DET.ACS_VAT_DET_ACCOUNT_ID,
             ATD.DOC_NUMBER,
             (SELECT ACT_VAT_DET_ACCOUNT_ID
                FROM ACT_VAT_DET_ACCOUNT DET
               WHERE  TAX.ACT_VAT_DET_ACCOUNT_ID = DET.ACT_VAT_DET_ACCOUNT_ID) ACT_VAT_DET_ACCOUNT_ID,
             (SELECT VTD_NUMBER
                FROM ACT_VAT_DET_ACCOUNT DET
               WHERE  TAX.ACT_VAT_DET_ACCOUNT_ID = DET.ACT_VAT_DET_ACCOUNT_ID) VTD_NUMBER,
             CUR.PC_CURR_ID,
             CUR.CURRENCY,
             CUR_LC.PC_CURR_ID PC_CURR_ID_LC,
             CUR_LC.CURRENCY CURRENCY_LC,
             TAX.TAX_INCLUDED_EXCLUDED,
             TAX.TAX_RATE,
             TAX.TAX_VAT_AMOUNT_FC,
             TAX.TAX_VAT_AMOUNT_LC,
             TAX.HT_LC,
             TAX.TTC_LC,
             TAX.HT_FC,
             TAX.TTC_FC,
             FIM.IMF_DESCRIPTION,
             FIM.IMF_TRANSACTION_DATE,
             FIM.C_GENRE_TRANSACTION,
             JOU.JOU_NUMBER,
             (SELECT DES_DESCRIPTION_SUMMARY
                FROM ACS_DESCRIPTION
                WHERE ACS_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY_ACC,
             (SELECT DES_DESCRIPTION_SUMMARY
                FROM ACS_DESCRIPTION
                WHERE ACS_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY_FIN
        FROM
             ACS_ACCOUNT ACC,
             ACS_ACCOUNT FIN,
             ACS_FINANCIAL_CURRENCY FUR_LC,
             ACS_FINANCIAL_CURRENCY FUR,
             V_ACS_TAX_CODE TCO,
             ACS_VAT_DET_ACCOUNT DET,
             ACT_DOCUMENT ATD,
             PCS.PC_CURR CUR,
             PCS.PC_CURR CUR_LC,
             V_ACT_DET_TAX_DATE TAX,
             V_ACT_FIN_IMPUTATION_DATE FIM,
             V_ACT_JOURNAL JOU
       WHERE
            TAX.ACT_FINANCIAL_IMPUTATION_ID = FIM.ACT_FINANCIAL_IMPUTATION_ID AND
            FIM.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID AND
            ATD.ACT_JOB_ID = JOU.ACT_JOB_ID AND
            FIM.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID AND
            FIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID AND
            FUR.PC_CURR_ID = CUR.PC_CURR_ID AND
            FIM.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID AND
            FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID AND
            TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID AND
            TCO.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID AND
            TCO.ACS_VAT_DET_ACCOUNT_ID = DET.ACS_VAT_DET_ACCOUNT_ID AND
            TCO.PC_LANG_ID = VPC_LANG_ID AND
            JOU.C_SUB_SET = 'ACC' AND
            ACC.ACC_NUMBER >= PARAMETER_6 AND
            ACC.ACC_NUMBER <= PARAMETER_7 AND
            ((PARAMETER_10 = '1' AND TAX.C_TYPE_CUMUL = 'INT')
                OR (PARAMETER_11 = '1' AND TAX.C_TYPE_CUMUL = 'EXT')
                 OR (PARAMETER_12 = '1' AND TAX.C_TYPE_CUMUL = 'PRE')
                OR (PARAMETER_13 = '1' AND TAX.C_TYPE_CUMUL = 'ENG')) AND
            nvl(TAX.TAX_TMP_VAT_ENCASHMENT, 0) = 0 AND
            DET.ACS_VAT_DET_ACCOUNT_ID = TO_NUMBER(PARAMETER_16);

END RPT_ACR_VAT_FORM;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_2010" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_00     IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       VARCHAR2,
   parameter_13     IN       VARCHAR2,
   parameter_15     IN       VARCHAR2
)
/**
*Description

 Used for report ACR_VAT_FORM_OFF
*@created JLIU 04.JUNE.2009
*@lastUpdate  4.jan.2010
*@public
*@PARAM parameter_0   Year(from)
*@PARAM parameter_1   Month(from)
*@PARAM parameter_2   Day(from)
*@PARAM parameter_3   Year(to)
*@PARAM parameter_4   Month(to)
*@PARAM parameter_5   Day(to)
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_10  C_TYPE_CUMUL
*@PARAM parameter_11  C_TYPE_CUMUL
*@PARAM parameter_12  C_TYPE_CUMUL
*@PARAM parameter_13  C_TYPE_CUMUL
*@PARAM parameter_15  vatdetaccountid
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
   vtd_number    varchar2(10);
   vtd_year      varchar2(10);
   vtd_type_cumul varchar2(40);
BEGIN



 IF parameter_00 IS NOT NULL
   THEN
      act_functions.date_from :=
         TO_DATE (   parameter_00
                  || LPAD (parameter_1, 2, '0')
                  || LPAD (parameter_2, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF parameter_3 IS NOT NULL
   THEN
      act_functions.date_to :=
         TO_DATE (   parameter_3
                  || LPAD (parameter_4, 2, '0')
                  || LPAD (parameter_5, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF     (parameter_15 IS NOT NULL)
      AND (LENGTH (TRIM (parameter_15)) > 0)
      AND (parameter_15 <> '0')
   THEN
      act_functions.vat_det_acc_id := parameter_15;
      select VTD_NUMBER, FYE_NO_EXERCICE  into vtd_number, vtd_year
      from ACT_VAT_DET_ACCOUNT act, acs_financial_year yea
      where act.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
      and  ACT_VAT_DET_ACCOUNT_ID = parameter_15;

   END IF;


   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   vtd_type_cumul := '';
   if parameter_10 = '1' then
     vtd_type_cumul := vtd_type_cumul||'INT,';
   end if;
   if parameter_11 = '1' then
     vtd_type_cumul := vtd_type_cumul||'EXT,';
   end if;
   if parameter_12 = '1' then
     vtd_type_cumul := vtd_type_cumul||'PRE,';
   end if;
   if parameter_13 = '1' then
     vtd_type_cumul := vtd_type_cumul||'ENG,';
   end if;


  delete from ACR_VAT_RPT_TEMP;

insert into ACR_VAT_RPT_TEMP
  (
  SELECT     (SELECT TCO.ACS_VAT_DET_ACCOUNT_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID )  acs_vat_det_account_id,
             vtd_number,
             vtd_year,
             ACC.ACC_NUMBER TAx_number,
             (select FIN.ACC_NUMBER FROM ACS_ACCOUNT FIN WHERE imp.acs_financial_account_id = FIN.acs_account_id) ACC_NUMBER,
             (SELECT DES_DESCRIPTION_SUMMARY FROM ACS_DESCRIPTION DES, ACS_ACCOUNT ACC
             WHERE  ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
                   AND DES.PC_LANG_ID = vpc_lang_id
                   AND imp.acs_financial_account_id = ACC.acs_account_id) tax_description,
             IMP.C_GENRE_TRANSACTION,
             tax.tax_included_excluded,
             tax.tax_vat_amount_fc,
             tax.tax_vat_amount_lc,
             tax.tax_reduction,
             tax.ht_lc,
             tax.ttc_lc,
             tax.ht_fc,
             tax.ttc_fc,
             tax.imf_value_date,
             tax.act_fin_imput_origin_id,
             TAX.TAX_RATE,
             TAX.DIV_NUMBER,
             TAX.DOC_NUMBER,
             TAX.JOU_NUMBER,
             imp.imf_description,
             imp.imf_exchange_rate,
             imp.imf_transaction_date imf_transaction_date_fin,
             imp.doc_date_delivery,
             imp.pac_person_id,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET4_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET4_ID,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET5_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET5_ID,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET6_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET6_ID,
             '       ' DECOMPTE_POSITION,
             case when c_genre_transaction in ('1','5','9') then 'N' else 'Y' end reduction,
             0 AMOUNT,
             0 OTHER_AMOUNT
             FROM
             v_act_fin_imputation_date imp,
             v_act_det_tax_date tax,
             act_document doc,
             v_act_journal jou,
             acs_account acc
             WHERE imp.act_financial_imputation_id = tax.act_financial_imputation_id
                   AND IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                   AND DOC.ACT_JOB_ID = JOU.ACT_JOB_ID
                   AND TAX.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID
                   AND acc.acc_number >= nvl(parameter_6,'(')
                   AND acc.acc_number <= nvl(parameter_7,'}')
                   AND jou.c_sub_set = 'ACC'
                   AND instr(vtd_type_cumul, tax.c_type_cumul) > 0
                   AND nvl(tax.tax_tmp_vat_encashment, 0) = 0
                                      );

         delete from ACR_VAT_FINAL_RPT_TEMP;

         -- 1er run pour charge le 1er dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             DIC_NO_POS_CALC_SHEET4_ID,
             reduction,
             case when DIC_NO_POS_CALC_SHEET4_ID in ( '200', '205', '220',  '221', '225', '230', '280', '900', '910') and REDUCTION = 'N' then ht_lc *-1
                  when DIC_NO_POS_CALC_SHEET4_ID in ( '235') and REDUCTION = 'Y' then ht_lc
                  else 0
             end TAX_AMOUNT,
             case when DIC_NO_POS_CALC_SHEET4_ID in ('380') and tax_included_excluded = 'S' then ht_lc
                  else 0
             end  TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET4_ID is not null);


-- 2¨¨me run pour charge le 2¨¨me dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             reduction,
             case when DIC_NO_POS_CALC_SHEET5_ID in ( '220','221', '225', '230', '280') and REDUCTION = 'N' then ht_lc *-1
                  when DIC_NO_POS_CALC_SHEET5_ID in ( '235') and REDUCTION = 'Y' then ht_lc
                  else 0
             end TAX_AMOUNT,
             0  TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET5_ID is not null);


-- 3¨¨me run pour charge le 3¨¨me dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             reduction,
             case when DIC_NO_POS_CALC_SHEET6_ID in ('300','310','340','380') then tax_vat_amount_lc *-1
                  when DIC_NO_POS_CALC_SHEET6_ID in ( '400','405','410','415','420')  then tax_vat_amount_lc
                  else 0
             end TAX_AMOUNT,
             case when DIC_NO_POS_CALC_SHEET6_ID in ('300','310','340') then ht_lc *-1
                  else 0
             end TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET6_ID is not null);


OPEN arefcursor FOR
      SELECT  decompte_position, sum(TAX_aMOUNT) tax_Amount , sum(TURNOVER_AMOUNT) turnover_amount, count(*) record_count, MAX(vtd_number) VTD_NUMBER, MAX(vtd_year) FYE_NO_EXERCICE,ACS_VAT_DET_ACCOUNT_ID
      from ACR_VAT_FINAL_RPT_TEMP
      group by decompte_position,ACS_VAT_DET_ACCOUNT_ID  ;

END rpt_acr_vat_form_2010;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_2010_DET" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0     IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       VARCHAR2,
   parameter_13     IN       VARCHAR2,
   parameter_15     IN       VARCHAR2
)
/**
*Description

 Used for report ACR_VAT_FORM_OFF_DET
*@created JLIU 04.JUNE.2009
*@lastUpdate  15 oct 2010
*@public
*@PARAM parameter_0   Year(from)
*@PARAM parameter_1   Month(from)
*@PARAM parameter_2   Day(from)
*@PARAM parameter_3   Year(to)
*@PARAM parameter_4   Month(to)
*@PARAM parameter_5   Day(to)
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_10  C_TYPE_CUMUL
*@PARAM parameter_11  C_TYPE_CUMUL
*@PARAM parameter_12  C_TYPE_CUMUL
*@PARAM parameter_13  C_TYPE_CUMUL
*@PARAM parameter_15  vatdetaccountid
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
   vtd_number    varchar2(10);
   vtd_year      varchar2(10);
   vtd_type_cumul varchar2(40);
BEGIN



 IF parameter_0 IS NOT NULL
   THEN
      act_functions.date_from :=
         TO_DATE (   parameter_0
                  || LPAD (parameter_1, 2, '0')
                  || LPAD (parameter_2, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF parameter_3 IS NOT NULL
   THEN
      act_functions.date_to :=
         TO_DATE (   parameter_3
                  || LPAD (parameter_4, 2, '0')
                  || LPAD (parameter_5, 2, '0'),
                  'YYYYMMDD'
                 );
   END IF;

   IF     (parameter_15 IS NOT NULL)
      AND (LENGTH (TRIM (parameter_15)) > 0)
      AND (parameter_15 <> '0')
   THEN
      BEGIN
              act_functions.vat_det_acc_id := parameter_15;
              select VTD_NUMBER, FYE_NO_EXERCICE  into vtd_number, vtd_year
              from ACT_VAT_DET_ACCOUNT act, acs_financial_year yea
              where act.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
              and  ACT_VAT_DET_ACCOUNT_ID = parameter_15;
      EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         vtd_number := '';
         vtd_year := '';
      END;
   END IF;


   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   vtd_type_cumul := '';
   if parameter_10 = '1' then
     vtd_type_cumul := vtd_type_cumul||'INT,';
   end if;
   if parameter_11 = '1' then
     vtd_type_cumul := vtd_type_cumul||'EXT,';
   end if;
   if parameter_12 = '1' then
     vtd_type_cumul := vtd_type_cumul||'PRE,';
   end if;
   if parameter_13 = '1' then
     vtd_type_cumul := vtd_type_cumul||'ENG,';
   end if;


  delete from ACR_VAT_RPT_TEMP;

insert into ACR_VAT_RPT_TEMP  (
             ACS_VAT_DET_ACCOUNT_ID
            ,VTD_NUMBER
            ,FYE_NO_EXERCICE
            ,TAX_NUMBER
            ,ACC_NUMBER
            ,TAX_DESCRIPTION
            ,C_GENRE_TRANSACTION
            ,TAX_INCLUDED_EXCLUDED
            ,TAX_VAT_AMOUNT_FC
            ,TAX_VAT_AMOUNT_LC
            ,TAX_REDUCTION
            ,HT_LC
            ,TTC_LC
            ,HT_FC
            ,TTC_FC
            ,IMF_VALUE_DATE
            ,ACT_FIN_IMPUT_ORIGIN_ID
            ,TAX_RATE
            ,DIV_NUMBER
            ,DOC_NUMBER
            ,JOU_NUMBER
            ,IMF_DESCRIPTION
            ,IMF_EXCHANGE_RATE
            ,IMF_TRANSACTION_DATE_FIN
            ,DOC_DATE_DELIVERY
            ,PAC_PERSON_ID
            ,DIC_NO_POS_CALC_SHEET4_ID
            ,DIC_NO_POS_CALC_SHEET5_ID
            ,DIC_NO_POS_CALC_SHEET6_ID
            ,DECOMPTE_POSITION
            ,REDUCTION
            ,TAX_AMOUNT
            ,TURNOVER_AMOUNT)
  SELECT     (SELECT TCO.ACS_VAT_DET_ACCOUNT_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID )  acs_vat_det_account_id,
             vtd_number,
             vtd_year,
             ACC.ACC_NUMBER TAx_number,
             (select FIN.ACC_NUMBER FROM ACS_ACCOUNT FIN WHERE imp.acs_financial_account_id = FIN.acs_account_id) ACC_NUMBER,
             (SELECT DES_DESCRIPTION_SUMMARY FROM ACS_DESCRIPTION DES, ACS_ACCOUNT ACC
             WHERE  ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
                   AND DES.PC_LANG_ID = vpc_lang_id
                   AND imp.acs_financial_account_id = ACC.acs_account_id) tax_description,
             IMP.C_GENRE_TRANSACTION,
             tax.tax_included_excluded,
             tax.tax_vat_amount_fc,
             tax.tax_vat_amount_lc,
             tax.tax_reduction,
             tax.ht_lc,
             tax.ttc_lc,
             tax.ht_fc,
             tax.ttc_fc,
             tax.imf_value_date,
             tax.act_fin_imput_origin_id,
             TAX.TAX_RATE,
             TAX.DIV_NUMBER,
             TAX.DOC_NUMBER,
             TAX.JOU_NUMBER,
             imp.imf_description,
             imp.imf_exchange_rate,
             imp.imf_transaction_date imf_transaction_date_fin,
             nvl(imp.doc_date_delivery,imp.imf_value_date),
             imp.pac_person_id,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET4_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET4_ID,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET5_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET5_ID,
             (SELECT TCO.DIC_NO_POS_CALC_SHEET6_ID FROM ACS_TAX_CODE TCO WHERE
             TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID ) DIC_NO_POS_CALC_SHEET6_ID,
             '       ' DECOMPTE_POSITION,
             case when c_genre_transaction in ('1','5','6','9') then 'N' else 'Y' end reduction,
             0 AMOUNT,
             0 OTHER_AMOUNT
             FROM
             v_act_fin_imputation_date imp,
             v_act_det_tax_date tax,
             act_document doc,
             v_act_journal jou,
             acs_account acc
             WHERE imp.act_financial_imputation_id = tax.act_financial_imputation_id
                   AND IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
                   AND DOC.ACT_JOB_ID = JOU.ACT_JOB_ID
                   AND TAX.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID
                   AND acc.acc_number >= nvl(parameter_6,'(')
                   AND acc.acc_number <= nvl(parameter_7,'}')
                   AND jou.c_sub_set = 'ACC'
                   AND instr(vtd_type_cumul, tax.c_type_cumul) > 0
                   AND nvl(tax.tax_tmp_vat_encashment, 0) = 0;

         delete from ACR_VAT_FINAL_RPT_TEMP;

         -- 1er run pour charge le 1er dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
                     ACS_VAT_DET_ACCOUNT_ID
                    ,VTD_NUMBER
                    ,FYE_NO_EXERCICE
                    ,TAX_NUMBER
                    ,ACC_NUMBER
                    ,TAX_DESCRIPTION
                    ,C_GENRE_TRANSACTION
                    ,TAX_INCLUDED_EXCLUDED
                    ,TAX_VAT_AMOUNT_FC
                    ,TAX_VAT_AMOUNT_LC
                    ,TAX_REDUCTION
                    ,HT_LC
                    ,TTC_LC
                    ,HT_FC
                    ,TTC_FC
                    ,IMF_VALUE_DATE
                    ,ACT_FIN_IMPUT_ORIGIN_ID
                    ,TAX_RATE
                    ,DIV_NUMBER
                    ,DOC_NUMBER
                    ,JOU_NUMBER
                    ,IMF_DESCRIPTION
                    ,IMF_EXCHANGE_RATE
                    ,IMF_TRANSACTION_DATE_FIN
                    ,DOC_DATE_DELIVERY
                    ,PAC_PERSON_ID
                    ,DIC_NO_POS_CALC_SHEET4_ID
                    ,DIC_NO_POS_CALC_SHEET5_ID
                    ,DIC_NO_POS_CALC_SHEET6_ID
                    ,DECOMPTE_POSITION
                    ,REDUCTION
                    ,TAX_AMOUNT
                    ,TURNOVER_AMOUNT)
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             DOC_DATE_DELIVERY,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             case when DIC_NO_POS_CALC_SHEET4_ID = '300' and  tax_rate <> 8 then '300'
                  when DIC_NO_POS_CALC_SHEET4_ID = '300' and  tax_rate = 8 then '301'
                  when DIC_NO_POS_CALC_SHEET4_ID = '310' and  tax_rate <>  2.5 then '310'
                  when DIC_NO_POS_CALC_SHEET4_ID = '310' and  tax_rate = 2.5 then '311'
                  when DIC_NO_POS_CALC_SHEET4_ID = '340' and  tax_rate <> 3.8 then '340'
                  when DIC_NO_POS_CALC_SHEET4_ID = '340' and  tax_rate = 3.8 then '341'
                  when DIC_NO_POS_CALC_SHEET4_ID = '380' and  (tax_rate <> 8 and tax_rate <> 2.5 and tax_rate <> 3.8)  then '380'
                  when DIC_NO_POS_CALC_SHEET4_ID = '380' and  (tax_rate = 8 OR tax_rate = 2.5 OR tax_rate = 3.8) then '381'
                  else DIC_NO_POS_CALC_SHEET4_ID
             end DECOMPTE_POSITION,
             reduction,
             case when DIC_NO_POS_CALC_SHEET4_ID in ( '200', '205', '220',  '221', '225', '230', '280', '900', '910') and REDUCTION = 'N' then ht_lc *-1
                  when DIC_NO_POS_CALC_SHEET4_ID in ( '235') and REDUCTION = 'Y' then ht_lc
                  else 0
             end TAX_AMOUNT,
             case when DIC_NO_POS_CALC_SHEET4_ID in ('380') and tax_included_excluded = 'S' then ht_lc
                  else 0
             end  TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET4_ID is not null;


-- 2¨¨me run pour charge le 2¨¨me dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
                             ACS_VAT_DET_ACCOUNT_ID
                    ,VTD_NUMBER
                    ,FYE_NO_EXERCICE
                    ,TAX_NUMBER
                    ,ACC_NUMBER
                    ,TAX_DESCRIPTION
                    ,C_GENRE_TRANSACTION
                    ,TAX_INCLUDED_EXCLUDED
                    ,TAX_VAT_AMOUNT_FC
                    ,TAX_VAT_AMOUNT_LC
                    ,TAX_REDUCTION
                    ,HT_LC
                    ,TTC_LC
                    ,HT_FC
                    ,TTC_FC
                    ,IMF_VALUE_DATE
                    ,ACT_FIN_IMPUT_ORIGIN_ID
                    ,TAX_RATE
                    ,DIV_NUMBER
                    ,DOC_NUMBER
                    ,JOU_NUMBER
                    ,IMF_DESCRIPTION
                    ,IMF_EXCHANGE_RATE
                    ,IMF_TRANSACTION_DATE_FIN
                    ,DOC_DATE_DELIVERY
                    ,PAC_PERSON_ID
                    ,DIC_NO_POS_CALC_SHEET4_ID
                    ,DIC_NO_POS_CALC_SHEET5_ID
                    ,DIC_NO_POS_CALC_SHEET6_ID
                    ,DECOMPTE_POSITION
                    ,REDUCTION
                    ,TAX_AMOUNT
                    ,TURNOVER_AMOUNT)
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             case when DIC_NO_POS_CALC_SHEET5_ID = '300' and  tax_rate <> 8 then '300'
                  when DIC_NO_POS_CALC_SHEET5_ID = '300' and  tax_rate = 8 then '301'
                  when DIC_NO_POS_CALC_SHEET5_ID = '310' and  tax_rate <>  2.5 then '310'
                  when DIC_NO_POS_CALC_SHEET5_ID = '310' and  tax_rate = 2.5 then '311'
                  when DIC_NO_POS_CALC_SHEET5_ID = '340' and  tax_rate <> 3.8 then '340'
                  when DIC_NO_POS_CALC_SHEET5_ID = '340' and  tax_rate = 3.8 then '341'
                  when DIC_NO_POS_CALC_SHEET5_ID = '380' and  (tax_rate <> 8 and tax_rate <> 2.5 and tax_rate <> 3.8)  then '380'
                  when DIC_NO_POS_CALC_SHEET5_ID = '380' and  (tax_rate = 8 OR tax_rate = 2.5 OR tax_rate = 3.8) then '381'
                  else DIC_NO_POS_CALC_SHEET5_ID
             end DECOMPTE_POSITION,
             reduction,
             case when DIC_NO_POS_CALC_SHEET5_ID in ( '220','221', '225', '230', '280') and REDUCTION = 'N' then ht_lc *-1
                  when DIC_NO_POS_CALC_SHEET5_ID in ( '235') and REDUCTION = 'Y' then ht_lc
                  else 0
             end TAX_AMOUNT,
             0  TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET5_ID is not null;


-- 3¨¨me run pour charge le 3¨¨me dico de positionnement
         insert into ACR_VAT_FINAL_RPT_TEMP (
                     ACS_VAT_DET_ACCOUNT_ID
                    ,VTD_NUMBER
                    ,FYE_NO_EXERCICE
                    ,TAX_NUMBER
                    ,ACC_NUMBER
                    ,TAX_DESCRIPTION
                    ,C_GENRE_TRANSACTION
                    ,TAX_INCLUDED_EXCLUDED
                    ,TAX_VAT_AMOUNT_FC
                    ,TAX_VAT_AMOUNT_LC
                    ,TAX_REDUCTION
                    ,HT_LC
                    ,TTC_LC
                    ,HT_FC
                    ,TTC_FC
                    ,IMF_VALUE_DATE
                    ,ACT_FIN_IMPUT_ORIGIN_ID
                    ,TAX_RATE
                    ,DIV_NUMBER
                    ,DOC_NUMBER
                    ,JOU_NUMBER
                    ,IMF_DESCRIPTION
                    ,IMF_EXCHANGE_RATE
                    ,IMF_TRANSACTION_DATE_FIN
                    ,DOC_DATE_DELIVERY
                    ,PAC_PERSON_ID
                    ,DIC_NO_POS_CALC_SHEET4_ID
                    ,DIC_NO_POS_CALC_SHEET5_ID
                    ,DIC_NO_POS_CALC_SHEET6_ID
                    ,DECOMPTE_POSITION
                    ,REDUCTION
                    ,TAX_AMOUNT
                    ,TURNOVER_AMOUNT)
         select ACS_VAT_DET_ACCOUNT_ID,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             pac_person_id,
             DIC_NO_POS_CALC_SHEET4_ID,
             DIC_NO_POS_CALC_SHEET5_ID,
             DIC_NO_POS_CALC_SHEET6_ID,
             case when DIC_NO_POS_CALC_SHEET6_ID = '300' and  tax_rate <> 8 then '300'
                  when DIC_NO_POS_CALC_SHEET6_ID = '300' and  tax_rate = 8 then '301'
                  when DIC_NO_POS_CALC_SHEET6_ID = '310' and  tax_rate <>  2.5 then '310'
                  when DIC_NO_POS_CALC_SHEET6_ID = '310' and  tax_rate = 2.5 then '311'
                  when DIC_NO_POS_CALC_SHEET6_ID = '340' and  tax_rate <> 3.8 then '340'
                  when DIC_NO_POS_CALC_SHEET6_ID = '340' and  tax_rate = 3.8 then '341'
                  when DIC_NO_POS_CALC_SHEET6_ID = '380' and  (tax_rate <> 8 and tax_rate <> 2.5 and tax_rate <> 3.8)  then '380'
                  when DIC_NO_POS_CALC_SHEET6_ID = '380' and  (tax_rate = 8 OR tax_rate = 2.5 OR tax_rate = 3.8) then '381'
                  else DIC_NO_POS_CALC_SHEET6_ID
             end DECOMPTE_POSITION,
             reduction,
             case when DIC_NO_POS_CALC_SHEET6_ID in ('300','310','340','380') then tax_vat_amount_lc *-1
                  when DIC_NO_POS_CALC_SHEET6_ID in ( '400','405','410','415','420')  then tax_vat_amount_lc
                  else 0
             end TAX_AMOUNT,
             case when DIC_NO_POS_CALC_SHEET6_ID in ('300','310','340') then ht_lc *-1
                  else 0
             end TURNOVER_AMOUNT
             from ACR_VAT_RPT_TEMP where  DIC_NO_POS_CALC_SHEET6_ID is not null;


OPEN arefcursor FOR
      SELECT decompte_position,
             TAX_AMOUNT calc_tax_amount,
             TURNOVER_AMOUNT calc_turnover_amount,
             vtd_number,
             vtd_year,
             tax_number,
             ACC_NUMBER,
             tax_description,
             C_GENRE_TRANSACTION,
             tax_included_excluded,
             tax_vat_amount_fc,
             tax_vat_amount_lc,
             tax_reduction,
             ht_lc,
             ttc_lc,
             ht_fc,
             ttc_fc,
             imf_value_date,
             act_fin_imput_origin_id,
             TAX_RATE,
             DIV_NUMBER,
             DOC_NUMBER,
             JOU_NUMBER,
             imf_description,
             imf_exchange_rate,
             imf_transaction_date_fin,
             doc_date_delivery,
             (SELECT DIC_DESCRIPTION
                     FROM DIC_NO_POS_CALC_SHEET
                     WHERE TRIM(DECOMPTE_POSITION) = DIC_NO_POS_CALC_SHEET_ID) DIC_DESCRIPTION
      from ACR_VAT_FINAL_RPT_TEMP
       where tax_amount <> 0 or turnover_Amount <> 0;



END rpt_acr_vat_form_2010_det;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_COND_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, parameter_0    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_13   in     varchar2
)
/**
*Description

 Used for subreport ACR_VAT_FORM_COND, subreport OF ACR_VAT_FORM_DET
*@created JLIU 03.JUNE.2009
*@lastUpdate VHA 09.04.2013
*@public
*@param parameter_0   ACS_VAT_DET_ACCOUNT_ID
*@param parameter_6   ACC_NUMBER(from)
*@param parameter_7   ACC_NUMBER(to)
*@param parameter_10  C_TYPE_CUMUL
*@param parameter_11  C_TYPE_CUMUL
*@param parameter_12  C_TYPE_CUMUL
*@param parameter_13  C_TYPE_CUMUL
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select ACC.ACC_NUMBER
         , ACC.ACC_INTEREST
         , FIN.ACC_NUMBER ACC_NUMBER_FIN
         , FIN_1.ACC_NUMBER ACC_NUMBER_FIN_1
         , FUR_LC.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY_LC
         , FUR.FIN_LOCAL_CURRENCY
         , DET.ACS_VAT_DET_ACCOUNT_ID
         , CUR.PC_CURR_ID
         , CUR.CURRENCY
         , CUR_LC.PC_CURR_ID PC_CURR_ID_LC
         , VDT.TAX_INCLUDED_EXCLUDED
         , VDT.TAX_RATE
         , VDT.TAX_VAT_AMOUNT_FC
         , VDT.TAX_VAT_AMOUNT_LC
         , VDT.HT_LC
         , VDT.TTC_LC
         , VDT.HT_FC
         , VDT.TTC_FC
         , VDT.IMF_TRANSACTION_DATE
         , VDT.C_TYPE_CUMUL
         , VDT.TAX_TMP_VAT_ENCASHMENT
         , VIM.IMF_TRANSACTION_DATE
         , VIM.C_GENRE_TRANSACTION
      from ACS_ACCOUNT ACC
         , ACS_ACCOUNT FIN
         , ACS_ACCOUNT FIN_1
         , ACS_FINANCIAL_CURRENCY FUR_LC
         , ACS_FINANCIAL_CURRENCY FUR
         , ACS_TAX_CODE TCO
         , ACS_VAT_DET_ACCOUNT DET
         , PCS.PC_CURR CUR
         , PCS.PC_CURR CUR_LC
         , V_ACT_DET_TAX_DATE VDT
         , V_ACT_FIN_IMPUTATION_DATE VIM
     where DET.ACS_VAT_DET_ACCOUNT_ID = to_number(PARAMETER_0)
       and VDT.ACT_FINANCIAL_IMPUTATION_ID = VIM.ACT_FINANCIAL_IMPUTATION_ID
       and VIM.ACS_FINANCIAL_ACCOUNT_ID = FIN_1.ACS_ACCOUNT_ID
       and VIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
       and FUR.PC_CURR_ID = CUR.PC_CURR_ID
       and VIM.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID
       and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID
       and VDT.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID
       and TCO.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID
       and TCO.ACS_VAT_DET_ACCOUNT_ID = DET.ACS_VAT_DET_ACCOUNT_ID
       and VDT.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID(+)
       and acc.acc_number >= parameter_6
       and acc.acc_number <= parameter_7
       and (    (    parameter_10 = '1'
                 and VDT.C_TYPE_CUMUL = 'INT')
            or (    parameter_11 = '1'
                and VDT.C_TYPE_CUMUL = 'EXT')
            or (    parameter_12 = '1'
                and VDT.C_TYPE_CUMUL = 'PRE')
            or (    parameter_13 = '1'
                and VDT.C_TYPE_CUMUL = 'ENG')
           )
       and VDT.TAX_TMP_VAT_ENCASHMENT = 0;
end RPT_ACR_VAT_FORM_COND_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_DET" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_13   in     varchar2
, parameter_15   in     varchar2
, parameter_16   in     varchar2
)
/**
*Description

 Used for report ACR_VAT_FORM_DET
*@created JLIU 04.JUNE.2009
*@lastUpdate  VHA 09.04.2013
*@public
*@PARAM parameter_0   Year(from)
*@PARAM parameter_1   Month(from)
*@PARAM parameter_2   Day(from)
*@PARAM parameter_3   Year(to)
*@PARAM parameter_4   Month(to)
*@PARAM parameter_5   Day(to)
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_10  C_TYPE_CUMUL
*@PARAM parameter_11  C_TYPE_CUMUL
*@PARAM parameter_12  C_TYPE_CUMUL
*@PARAM parameter_13  C_TYPE_CUMUL
*@PARAM parameter_15  ACT_VAT_DET_ACCOUNT_ID
*@PARAM parameter_16  ACS_VAT_DET_ACCOUNT_ID
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  if parameter_0 is not null then
    act_functions.date_from  := to_date(parameter_0 || lpad(parameter_1, 2, '0') || lpad(parameter_2, 2, '0'), 'YYYYMMDD');
  end if;

  if parameter_3 is not null then
    act_functions.date_to  := to_date(parameter_3 || lpad(parameter_4, 2, '0') || lpad(parameter_5, 2, '0'), 'YYYYMMDD');
  end if;

  if     (parameter_15 is not null)
     and (length(trim(parameter_15) ) > 0)
     and (parameter_15 <> '0') then
    ACT_FUNCTIONS.VAT_DET_ACC_ID  := parameter_15;
  end if;

  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
         select 'VAT' INFO
                 , ACC.ACC_NUMBER
                 , ACS_FUNCTION.GetDescription('ACS_VAT_DET_ACCOUNT_ID', DET.ACS_VAT_DET_ACCOUNT_ID) DES_DESCRIPTION_SUMMARY
                 , FUR.FIN_LOCAL_CURRENCY
                 , FUR.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY_LC
                 , YEA.FYE_NO_EXERCICE
                 , DET.ACS_VAT_DET_ACCOUNT_ID
                 , ATD.ACT_DOCUMENT_ID
                 , ATD.DOC_NUMBER
                 , TAX.ACT_VAT_DET_ACCOUNT_ID
                 , (select VTD_NUMBER
                      from ACT_VAT_DET_ACCOUNT DET
                     where TAX.ACT_VAT_DET_ACCOUNT_ID = DET.ACT_VAT_DET_ACCOUNT_ID) VTD_NUMBER
                 , CUR.CURRENCY
                 , CUR_LC.CURRENCY CURRENCY_LC
                 , TCO.ACC_NUMBER ACC_NUMBER_TCO
                 , TCO.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY_TCO
                 , TAX.TAX_INCLUDED_EXCLUDED
                 , TAX.TAX_RATE
                 , TAX.TAX_VAT_AMOUNT_FC
                 , TAX.TAX_VAT_AMOUNT_LC
                 , TAX.HT_LC
                 , TAX.TTC_LC
                 , TAX.HT_FC
                 , TAX.TTC_FC
                 , TAX.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE_TAX
                 , TAX.IMF_VALUE_DATE
                 , TAX.ACT_FIN_IMPUT_ORIGIN_ID
                 , FIM.IMF_DESCRIPTION
                 , FIM.IMF_EXCHANGE_RATE
                 , FIM.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE_FIN
                 , FIM.C_GENRE_TRANSACTION
                 , FIM.DOC_DATE_DELIVERY
                 , FIM.PAC_PERSON_ID
                 , JOU.JOU_NUMBER
              from ACS_ACCOUNT ACC
                 , ACS_FINANCIAL_CURRENCY FUR
                 , ACS_FINANCIAL_CURRENCY FUR_LC
                 , ACS_FINANCIAL_YEAR YEA
                 , ACS_VAT_DET_ACCOUNT DET
                 , ACT_DOCUMENT ATD
                 , PCS.PC_CURR CUR
                 , PCS.PC_CURR CUR_LC
                 , V_ACS_TAX_CODE TCO
                 , V_ACT_DET_TAX_DATE TAX
                 , V_ACT_FIN_IMPUTATION_DATE FIM
                 , V_ACT_JOURNAL JOU
             where TAX.ACT_FINANCIAL_IMPUTATION_ID = FIM.ACT_FINANCIAL_IMPUTATION_ID
               and FIM.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
               and ATD.ACT_JOB_ID = JOU.ACT_JOB_ID
               and JOU.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
               and FIM.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
               and FIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
               and FUR.PC_CURR_ID = CUR.PC_CURR_ID
               and FIM.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID
               and FUR_LC.PC_CURR_ID = CUR_LC.PC_CURR_ID
               and TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID
               and TCO.ACS_VAT_DET_ACCOUNT_ID = DET.ACS_VAT_DET_ACCOUNT_ID
               and TCO.PC_LANG_ID = vpc_lang_id
               and JOU.C_SUB_SET = 'ACC'
               and TCO.ACC_NUMBER >= nvl(parameter_6, '(')
               and TCO.ACC_NUMBER <= nvl(parameter_7, '}')
               and (    (    parameter_10 = '1'
                         and TAX.C_TYPE_CUMUL = 'INT')
                    or (    parameter_11 = '1'
                        and TAX.C_TYPE_CUMUL = 'EXT')
                    or (    parameter_12 = '1'
                        and TAX.C_TYPE_CUMUL = 'PRE')
                    or (    parameter_13 = '1'
                        and TAX.C_TYPE_CUMUL = 'ENG')
                   )
               and TAX.TAX_TMP_VAT_ENCASHMENT = 0
               and DET.ACS_VAT_DET_ACCOUNT_ID = to_number(parameter_16);
end RPT_ACR_VAT_FORM_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_OFF" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.lanid%type
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, parameter_12   in     varchar2
, parameter_13   in     varchar2
, parameter_14   in     varchar2
, parameter_15   in     varchar2
, parameter_17   in     varchar2
)
/**
*Description

 Used for report ACR_VAT_FORM_OFF, ACR_VAT_FORM_OFF_2010, ACR_VAT_FORM_OFF_2011
*@created VHA 17 July 2013
*@lastUpdate
*@public
*@PARAM procuser_lanid User language id
*@PARAM parameter_0   Year(from)
*@PARAM parameter_1   Month(from)
*@PARAM parameter_2   Day(from)
*@PARAM parameter_3   Year(to)
*@PARAM parameter_4   Month(to)
*@PARAM parameter_5   Day(to)
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_10  C_TYPE_CUMUL = INT : 0=No / 1=Yes
*@PARAM parameter_11  C_TYPE_CUMUL = EXT : 0=No / 1=Yes
*@PARAM parameter_12  C_TYPE_CUMUL = PRE : 0=No / 1=Yes
*@PARAM parameter_13  C_TYPE_CUMUL = ENG : 0=No / 1=Yes
*@PARAM parameter_14  Def. print : 0=No / 1=Yes
*@PARAM parameter_15  ACT_VAT_DET_ACCOUNT_ID
*@PARAM parameter_17  ACS_VAT_DET_ACCOUNT_ID
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
begin
  if (parameter_0 is not null and parameter_1 is not null and parameter_2 is not null) then
    ACT_FUNCTIONS.date_from  := to_date(parameter_0 || lpad(parameter_1, 2, '0') || lpad(parameter_2, 2, '0'), 'YYYYMMDD');
    PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
    vpc_lang_id              := PCS.PC_I_LIB_SESSION.getuserlangid;
  end if;

  if (parameter_3 is not null and parameter_4 is not null and parameter_5 is not null) then
    ACT_FUNCTIONS.date_to  := to_date(parameter_3 || lpad(parameter_4, 2, '0') || lpad(parameter_5, 2, '0'), 'YYYYMMDD');
  end if;

  if     (parameter_15 is not null)
     and (length(trim(parameter_15) ) > 0)
     and (parameter_15 <> '0') then
    ACT_FUNCTIONS.vat_det_acc_id  := parameter_15;
  end if;

  if (parameter_14 = '1') then
    update ACT_VAT_DET_ACCOUNT VAT
       set VAT.C_VAT_TAX_DET_ACC_STATUS = '2'
     where VAT.ACT_VAT_DET_ACCOUNT_ID = to_number(parameter_15);
  end if;

  if (procuser_lanid is not null) then
    PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
    vpc_lang_id              := PCS.PC_I_LIB_SESSION.getuserlangid;
  end if;

  open arefcursor for
    select DOC.DOC_NUMBER,
       V_TAX.HT_LC,
       V_TAX.TTC_LC,
       V_TAX.TAX_VAT_AMOUNT_LC,
       V_TAX.HT_FC,
       V_TAX.TTC_FC,
       V_TAX.TAX_VAT_AMOUNT_FC,
       V_TAX.C_TYPE_CUMUL,
       V_TAX.TAX_TMP_VAT_ENCASHMENT,
       V_TAX.TAX_INCLUDED_EXCLUDED,
       V_TAX.ACS_TAX_CODE_ID,
       V_TAX.ACT_FINANCIAL_IMPUTATION_ID,
       V_TAX.ACT_DOCUMENT_ID,
       V_TAX.TAX_REDUCTION,
       V_TAX. TAX_RATE_REF,
       TAX.DIC_NO_POS_CALC_SHEET_ID,
       TAX.DIC_NO_POS_CALC_SHEET2_ID,
       TAX.DIC_NO_POS_CALC_SHEET3_ID,
       TAX.DIC_NO_POS_CALC_SHEET4_ID,
       TAX.DIC_NO_POS_CALC_SHEET5_ID,
       TAX.DIC_NO_POS_CALC_SHEET6_ID,
       TAX.C_ESTABLISHING_CALC_SHEET,
       YEA.FYE_NO_EXERCICE,
       YEA1.FYE_NO_EXERCICE FYE_NO_EXERCICE1,
       ACC.ACC_NUMBER,
       CAT.CAT_DESCRIPTION,
       VAT.ACS_VAT_DET_ACCOUNT_ID,
       VAT.VDE_VAT_NUMBER,
       VAT1.ACT_VAT_DET_ACCOUNT_ID,
       VAT1.VTD_NUMBER,
       IMP.C_GENRE_TRANSACTION
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACS_ACCOUNT ACC
         , ACS_FINANCIAL_YEAR YEA
         , ACS_FINANCIAL_YEAR YEA1
         , ACS_TAX_CODE TAX
         , ACS_VAT_DET_ACCOUNT VAT
         , ACT_DOCUMENT DOC
         , ACT_VAT_DET_ACCOUNT VAT1
         , V_ACT_DET_TAX_DATE V_TAX
         , V_ACT_FIN_IMPUTATION_DATE IMP
     where IMP.ACT_FINANCIAL_IMPUTATION_ID = V_TAX.ACT_FINANCIAL_IMPUTATION_ID
       and TAX.ACS_TAX_CODE_ID = V_TAX.ACS_TAX_CODE_ID
       and ACC.ACS_ACCOUNT_ID = TAX.ACS_TAX_CODE_ID
       and VAT.ACS_VAT_DET_ACCOUNT_ID = TAX.ACS_VAT_DET_ACCOUNT_ID
       and DOC.ACT_DOCUMENT_ID = V_TAX.ACT_DOCUMENT_ID
       and CAT.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
       and YEA.ACS_FINANCIAL_YEAR_ID = DOC.ACS_FINANCIAL_YEAR_ID
       and VAT1.ACT_VAT_DET_ACCOUNT_ID(+) = V_TAX.ACT_VAT_DET_ACCOUNT_ID
       and YEA1.ACS_FINANCIAL_YEAR_ID(+) = VAT1.ACS_FINANCIAL_YEAR_ID
       and ACC.ACC_NUMBER >= parameter_6
       and ACC.ACC_NUMBER <= parameter_7
       and (    (    parameter_10 = '1'
                 and V_TAX.C_TYPE_CUMUL = 'INT')
            or (    parameter_11 = '1'
                and V_TAX.C_TYPE_CUMUL = 'EXT')
            or (    parameter_12 = '1'
                and V_TAX.C_TYPE_CUMUL = 'PRE')
            or (    parameter_13 = '1'
                and V_TAX.C_TYPE_CUMUL = 'ENG')
           )
       and V_TAX.TAX_TMP_VAT_ENCASHMENT = 0
       and VAT.ACS_VAT_DET_ACCOUNT_ID = to_number(parameter_17);
end RPT_ACR_VAT_FORM_OFF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_FORM_SUB_COND" (
   AREFCURSOR       IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCUSER_LANID   IN       PCS.PC_LANG.LANID%TYPE,
   PARAMETER_6      IN       VARCHAR2,
   PARAMETER_7      IN       VARCHAR2,
   PARAMETER_10     IN       VARCHAR2,
   PARAMETER_11     IN       VARCHAR2,
   PARAMETER_12     IN       VARCHAR2,
   PARAMETER_13     IN       VARCHAR2,
   PARAMETER_16     IN       VARCHAR2
)
/**
*Description

 Used for subreport ACR_VAT_FORM_SUB_COND in report ACR_VAT_FORM
*@created VHAAB 29.08.2011
*@public
*@PARAM ACS_VAT_DET_ACCOUNT_ID
*@PARAM parameter_6   ACC_NUMBER(from)
*@PARAM parameter_7   ACC_NUMBER(to)
*@PARAM parameter_10  C_TYPE_CUMUL
*@PARAM parameter_11  C_TYPE_CUMUL
*@PARAM parameter_12  C_TYPE_CUMUL
*@PARAM parameter_13  C_TYPE_CUMUL
*@PARAM parameter_16  ACS_VAT_DET_ACCOUNT_ID
*/
IS
   VPC_LANG_ID   PCS.PC_LANG.PC_LANG_ID%TYPE; --user language id

BEGIN

   PCS.PC_I_LIB_SESSION.SETLANID (PROCUSER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;


OPEN AREFCURSOR FOR

      SELECT
              FIM.IMF_TRANSACTION_DATE,
              TAX.HT_LC,
              TAX.TTC_LC,
              TAX.TAX_VAT_AMOUNT_LC,
              TAX.HT_FC,
              TAX.TTC_FC,
              TAX.TAX_VAT_AMOUNT_FC,
              TAX.C_TYPE_CUMUL,
              TAX.TAX_INCLUDED_EXCLUDED,
              TAX.TAX_TMP_VAT_ENCASHMENT,
              TAX.IMF_TRANSACTION_DATE,
              TAX.TAX_RATE,
              FIM.C_GENRE_TRANSACTION,
              FIN.ACC_NUMBER ACC_NUMBER_FIN,
              FIN1.ACC_NUMBER ACC_NUMBER_FIN1,
              FUR.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY,
              FUR_LC.FIN_LOCAL_CURRENCY FIN_LOCAL_CURRENCY_LC,
              ACC.ACC_NUMBER ACC_NUMBER_ACC,
              ACC.ACC_INTEREST,
              DET.ACS_VAT_DET_ACCOUNT_ID,
              (SELECT PC_CURR.PC_CURR_ID
                FROM PCS.PC_CURR PC_CURR
                WHERE  FUR.PC_CURR_ID = PC_CURR.PC_CURR_ID) PC_CURR_ID,
               (SELECT PC_CURR.CURRENCY
                FROM PCS.PC_CURR PC_CURR
                WHERE  FUR.PC_CURR_ID = PC_CURR.PC_CURR_ID)  CURRENCY,
              (SELECT PC_CURR_LC.PC_CURR_ID
                FROM PCS.PC_CURR PC_CURR_LC
                WHERE  FUR_LC.PC_CURR_ID = PC_CURR_LC.PC_CURR_ID) PC_CURR_ID_LC,
              (SELECT DES_DESCRIPTION_SUMMARY FROM ACS_DESCRIPTION
                WHERE ACS_ACCOUNT_ID =  ACC.ACS_ACCOUNT_ID
                AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY_ACC,
              (SELECT DES_DESCRIPTION_SUMMARY
                FROM ACS_DESCRIPTION
                WHERE ACS_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID
                AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY_FIN,
              (SELECT DES_DESCRIPTION_SUMMARY
                FROM ACS_DESCRIPTION
                WHERE ACS_ACCOUNT_ID = FIN1.ACS_ACCOUNT_ID
                AND PC_LANG_ID = VPC_LANG_ID) DES_DESCRIPTION_SUMMARY_FIN1,
              ACC.ACS_ACCOUNT_ID
      FROM
              V_ACT_DET_TAX_DATE TAX,
              V_ACT_FIN_IMPUTATION_DATE FIM,
              ACS_ACCOUNT ACC,
              ACS_ACCOUNT FIN,
              ACS_ACCOUNT FIN1,
              V_ACS_TAX_CODE TCO,
              ACS_VAT_DET_ACCOUNT DET,
              ACS_FINANCIAL_CURRENCY FUR,
              ACS_FINANCIAL_CURRENCY  FUR_LC
      WHERE
              TAX.ACT_FINANCIAL_IMPUTATION_ID = FIM.ACT_FINANCIAL_IMPUTATION_ID AND
              TAX.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_ACCOUNT_ID (+) AND
              TAX.ACS_TAX_CODE_ID = TCO.ACS_TAX_CODE_ID AND
              TCO.ACS_VAT_DET_ACCOUNT_ID = DET.ACS_VAT_DET_ACCOUNT_ID AND
              TCO.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID AND
              TCO.PC_LANG_ID = VPC_LANG_ID AND
              FIM.ACS_FINANCIAL_ACCOUNT_ID = FIN1.ACS_ACCOUNT_ID AND
               FIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID AND
              FIM.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_LC.ACS_FINANCIAL_CURRENCY_ID AND
              ACC.ACC_NUMBER >= PARAMETER_6 AND
              ACC.ACC_NUMBER <= PARAMETER_7 AND
              ((PARAMETER_10 = '1' AND TAX.C_TYPE_CUMUL = 'INT')
                OR (PARAMETER_11 = '1' AND TAX.C_TYPE_CUMUL = 'EXT')
                OR (PARAMETER_12 = '1' AND TAX.C_TYPE_CUMUL = 'PRE')
                OR (PARAMETER_13 = '1' AND TAX.C_TYPE_CUMUL = 'ENG')) AND
              nvl(TAX.TAX_TMP_VAT_ENCASHMENT, 0) = 0 AND
              DET.ACS_VAT_DET_ACCOUNT_ID = TO_NUMBER(PARAMETER_16);

END RPT_ACR_VAT_FORM_SUB_COND;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACR_VAT_PROVISION" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* Proc¨¦dure stock¨¦e utilis¨¦e pour le rapport ACR_VAT_PROVISION (Justificatif des comptes de
* provisions TVA
*
* @author SDO
* @lastUpdate
* @version 2003
* @public
* @param PROCPARAM_0    Date jusqu'au 'yyyyMMdd'
*/
begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);

open aRefCursor for
 select
  TAX.TAX_VAT_AMOUNT_LC,
  TAX.TAX_VAT_AMOUNT_FC,
  TAX.TAX_VAT_AMOUNT_EUR,
  TAX.ACT_DET_TAX_ID,
  TAX.ACT_FINANCIAL_IMPUTATION_ID,
  TAX.ACT_ACT_FINANCIAL_IMPUTATION,
  TAX.ACT2_ACT_FINANCIAL_IMPUTATION,
  NVL(IMT.ACS_FINANCIAL_ACCOUNT_ID, IMF.ACS_FINANCIAL_ACCOUNT_ID) ACS_FINANCIAL_ACCOUNT_ID,
  NVL(ACS_FUNCTION.GetAccountNumber(IMT.ACS_FINANCIAL_ACCOUNT_ID),ACS_FUNCTION.GetAccountNumber(IMF.ACS_FINANCIAL_ACCOUNT_ID)) ACCOUNT_NUMBER,
  NVL(ACS_FUNCTION.GetAccountDescriptionSummary(IMT.ACS_FINANCIAL_ACCOUNT_ID),ACS_FUNCTION.GetAccountDescriptionSummary(IMF.ACS_FINANCIAL_ACCOUNT_ID)) ACCOUNT_DESCR,
  IMF.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE_IMP,
  IMF.IMF_VALUE_DATE,
  IMF.IMF_DESCRIPTION,
  IMT.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE_TAX,
  DOC.ACT_DOCUMENT_ID,
  DOC.DOC_DOCUMENT_DATE,
  DOC.DOC_NUMBER,
  ACT_FUNCTIONS.GetProvTaxAmountDoc(DOC.ACT_DOCUMENT_ID,PROCPARAM_0) PROV_TAX_AMOUNT_DOC,
  ACT_FUNCTIONS.GetProvTaxAmountDet(TAX.ACT_DET_TAX_ID,PROCPARAM_0) PROV_TAX_AMOUNT_TAX,
  IMF.ACT_PART_IMPUTATION_ID,
  IMF.ACS_AUXILIARY_ACCOUNT_ID,
  DOC.ACT_JOURNAL_ID,
  JOU.JOU_NUMBER,
  JOU.JOU_DESCRIPTION,
  ACS_FUNCTION.GetAccountNumber(ACT_FUNCTIONS.AuxAccountFromImputation(IMF.ACT_FINANCIAL_IMPUTATION_ID)) AUXILIARY_ACCOUNT,
  ACS_FUNCTION.GetAuxAccOwnerName(ACT_FUNCTIONS.AuxAccountFromImputation(IMF.ACT_FINANCIAL_IMPUTATION_ID)) AUXILIARY_DESCR
FROM
  ACT_JOURNAL JOU,
  ACT_FINANCIAL_IMPUTATION IMT,
  ACT_DOCUMENT DOC,
  ACT_FINANCIAL_IMPUTATION IMF,
  ACT_DET_TAX TAX
WHERE
  TAX.ACT_ACT_FINANCIAL_IMPUTATION = IMT.ACT_FINANCIAL_IMPUTATION_ID(+) AND
  TAX.ACT_FINANCIAL_IMPUTATION_ID = IMF.ACT_FINANCIAL_IMPUTATION_ID AND
  IMF.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID AND
  TAX.TAX_TMP_VAT_ENCASHMENT = '1' AND
  TAX.TAX_INCLUDED_EXCLUDED <> 'R' AND
  DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID AND
  NVL(trunc(IMF.IMF_TRANSACTION_DATE),TRUNC(IMT.IMF_TRANSACTION_DATE))<= trunc(to_date(PROCPARAM_0,'YYYYMMDD')) AND
  ACT_FUNCTIONS.GetProvTaxAmountDet(TAX.ACT_DET_TAX_ID,PROCPARAM_0) <>0;
end RPT_ACR_VAT_PROVISION;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_ACCOUNTING_PLAN" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_2      IN       VARCHAR2,
   PARAMETER_3      IN       VARCHAR2
)
/**
*Description

 Used for report ACS_ACCOUNTING_PLAN
*@created JLIU 30.JULY.2009
*@lastUpdate MAY 2010
*@public
*@PARAM PARAMETER_2    ACCCOUNT NUMBER (FROM)
*@PARAM PARAMETER_3    ACCCOUNT NUMBER (TO)
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id

BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    ACC.ACS_ACCOUNT_ID,
    ACC.ACC_NUMBER,
    ACC.ACC_BLOCKED,
    ACC.ACC_VALID_TO,
    ACC.ACC_VALID_SINCE,
    DES.PC_LANG_ID,
    DES.DES_DESCRIPTION_SUMMARY,
    DES.DES_DESCRIPTION_LARGE,
    FCC.ACS_FINANCIAL_ACCOUNT_ID,
    FCC.FIN_COLLECTIVE
   FROM
    ACS_ACCOUNT ACC,
    ACS_DESCRIPTION DES,
    ACS_FINANCIAL_ACCOUNT FCC
   WHERE
    FCC.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
    AND FCC.ACS_FINANCIAL_ACCOUNT_ID = DES.ACS_ACCOUNT_ID(+)
    AND DES.PC_LANG_ID = vpc_lang_id
    AND ACC.ACC_NUMBER >= NVL(PARAMETER_2,'00000')
    AND ACC.ACC_NUMBER <= NVL(PARAMETER_3,'ZZZZZZ');

END RPT_ACS_ACCOUNTING_PLAN ;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_ACCOUNTING_PLAN_STR" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_1      IN       VARCHAR2,
   PARAMETER_2      IN       VARCHAR2,
   PARAMETER_3      IN       VARCHAR2
)
/**
*Description

 Used for report ACS_ACCOUNTING_PLAN_STR
*@created JLIU 30.JULY.2009
*@lastUpdate MAY 2010
*@public
*@PARAM PARAMETER_1    CLASSIFICATION ID LIST
*@PARAM PARAMETER_2    ACCCOUNT NUMBER (FROM)
*@PARAM PARAMETER_3    ACCCOUNT NUMBER (TO)
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;


  OPEN arefcursor FOR
  SELECT
    ACC_DES.ACC_NUMBER,
    ACC_DES.ACC_BLOCKED,
    ACC_DES.ACC_VALID_TO,
    ACC_DES.ACC_VALID_SINCE,
    ACC_DES.ACS_FINANCIAL_ACCOUNT_ID,
    ACC_DES.FIN_COLLECTIVE,
    ACC_DES.DES_DESCRIPTION_SUMMARY,
    ACC_DES.DES_DESCRIPTION_LARGE,
    CLN_DES.DES_DESCR NODE_DESCR,
    FLA.NODE01,
    FLA.NODE02,
    FLA.NODE03,
    FLA.NODE04,
    FLA.NODE05,
    FLA.NODE06,
    FLA.NODE07,
    FLA.NODE08,
    FLA.NODE09,
    FLA.NODE10,
    FLA.PC_LANG_ID,
    FLA.LEAF_DESCR,
    CLA.CLASSIFICATION_ID
   FROM
    CLASSIF_FLAT FLA,
    CLASSIFICATION CLA,
    (SELECT
    CLN.CLASSIF_NODE_ID,
    DES.DES_DESCR
    FROM
    CLASSIF_NODE CLN,
    CLASSIF_NODE_DESCR DES
    WHERE
    CLN.CLASSIF_NODE_ID = DES.CLASSIF_NODE_ID
    AND DES.PC_LANG_ID = vpc_lang_id) CLN_DES,
    (
    SELECT
    ACS.ACS_ACCOUNT_ID,
    ACS.ACC_NUMBER,
    ACS.ACC_BLOCKED,
    ACS.ACC_VALID_TO,
    ACS.ACC_VALID_SINCE,
    FCC.ACS_FINANCIAL_ACCOUNT_ID,
    FCC.FIN_COLLECTIVE,
    DES.DES_DESCRIPTION_SUMMARY,
    DES.DES_DESCRIPTION_LARGE
    FROM
    ACS_ACCOUNT ACS,
    ACS_DESCRIPTION DES,
    ACS_FINANCIAL_ACCOUNT FCC
    WHERE
    ACS.ACS_ACCOUNT_ID = FCC.ACS_FINANCIAL_ACCOUNT_ID
    AND ACS.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
    AND DES.PC_LANG_ID = vpc_lang_id
    ) ACC_DES
   WHERE
    CLA.CLASSIFICATION_ID = FLA.CLASSIFICATION_ID
    AND FLA.CFL_NODE_ID = CLN_DES.CLASSIF_NODE_ID(+)
    AND FLA.CLASSIF_LEAF_ID = ACC_DES.ACS_ACCOUNT_ID(+)
    AND FLA.PC_LANG_ID = vpc_lang_id
    AND INSTR(';' || PARAMETER_1 ||';', ';' || CLA.CLASSIFICATION_ID ||';' ) > 0
    AND ACC_DES.ACC_NUMBER >= NVL(PARAMETER_2,'00000')
    AND ACC_DES.ACC_NUMBER <= NVL(PARAMETER_3,'ZZZZZ')
   ORDER BY
   FLA.NODE01 NULLS FIRST,
    FLA.NODE02 NULLS FIRST,
    FLA.NODE03 NULLS FIRST,
    FLA.NODE04 NULLS FIRST,
    FLA.NODE05 NULLS FIRST,
    FLA.NODE06 NULLS FIRST,
    FLA.NODE07 NULLS FIRST,
    FLA.NODE08 NULLS FIRST,
    FLA.NODE09 NULLS FIRST,
    FLA.NODE10 NULLS FIRST
    ;

END RPT_ACS_ACCOUNTING_PLAN_STR ;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_ACCOUNTING_PLAN_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   PARAMETER_0      IN       VARCHAR2
)
/**
*Description

 Used for report ACS_ACCOUNTING_PLAN,ACS_ACCOUNTING_PLAN_STR
*@created MZHU 22.DEC.2009
*@lastUpdate
*@public
*@PARAM PARAMETER_0    ACCCOUNT NUMBER (FROM)
*/

IS


BEGIN


  OPEN arefcursor FOR
  SELECT
          acc.acc_number
     FROM ACS_INTERACTION acs,acs_account acc, acs_division_account div, acs_sub_set sub
    WHERE ACS.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_DIVISION_ACCOUNT_ID
      AND div.acs_division_account_id = acc.acs_account_id
      AND acc.acs_sub_set_id = sub.acs_sub_set_id
      AND sub.c_type_sub_set = 'DIVI'
      and ACS.ACS_FINANCIAL_ACCOUNT_ID = to_number(parameter_0)
    ;

END RPT_ACS_ACCOUNTING_PLAN_SUB ;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_AUXILIARY_ACC_LIST" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description

 Used for report ACS_AUXILIARY_ACC_LIST
*@created JLIU 30.JULY.2009
*@lastUpdate 30.JULY.2009
*@public
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    ACC.ACS_ACCOUNT_ID,
    ACC.ACC_NUMBER,
    ACC.ACC_BLOCKED,
    ACC.ACC_VALID_TO,
    ACC.ACC_VALID_SINCE,
    ACC_COL.ACC_NUMBER ACC_NUMBER_COL,
    ACC_SUB.ACC_NUMBER ACC_NUMBER_SUB,
    AUX.C_TYPE_ACCOUNT,
    SUB.ACS_SUB_SET_ID,
    DES_1.DES_DESCRIPTION_SUMMARY,
    DES_2.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY_2,
    DES_2.DES_DESCRIPTION_LARGE DES_DESCRIPTION_LARGE_2
   FROM
    ACS_ACCOUNT ACC,
    ACS_ACCOUNT ACC_COL,
    ACS_ACCOUNT ACC_SUB,
    ACS_AUXILIARY_ACCOUNT AUX,
    ACS_SUB_SET SUB,
    ACS_DESCRIPTION DES_1,
    ACS_DESCRIPTION DES_2
   WHERE
    AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
    AND ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
    AND SUB.ACS_PROP_INVOICE_COLL_ID = ACC_SUB.ACS_ACCOUNT_ID
    AND AUX.ACS_INVOICE_COLL_ID = ACC_COL.ACS_ACCOUNT_ID
    AND SUB.ACS_SUB_SET_ID = DES_1.ACS_SUB_SET_ID
    AND DES_1.PC_LANG_ID = vpc_lang_id
    AND ACC.ACS_ACCOUNT_ID = DES_2.ACS_ACCOUNT_ID
    AND DES_2.PC_LANG_ID = vpc_lang_id


    ;

END RPT_ACS_AUXILIARY_ACC_LIST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_DIVISION_ACCOUNT_SUB" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_10   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report ACR_ACC_IMPUTATION_DET
  (Grand livre standard et grand livre pour les communes bernoises)
* @author VHA 2003
 *@created VHA 10 october 2013
* @lastUpdate
* @public
* @param procparam_10    Job ID (COM_LIST)
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  if (procuser_lanid is not null) then
      pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  open aRefCursor for
    select ACC.ACC_NUMBER DIV_NUMBER
      from ACS_ACCOUNT ACC
         , (select LIS_ID_1
              from COM_LIST
             where LIS_JOB_ID = to_number(procparam_10)
               and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
     where ACC.ACS_ACCOUNT_ID = LIS_ID_1;
end RPT_ACS_DIVISION_ACCOUNT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_DIVISION_ACC_LIST" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description

 Used for report ACS_DIVISION_ACC_LIST
*@created JLIU 30.JULY.2009
*@lastUpdate 30.JULY.2009
*@public
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    ACC.ACS_ACCOUNT_ID,
    ACC.ACC_NUMBER,
    ACC.ACC_BLOCKED,
    ACC.ACS_SUB_SET_ID,
    DES.DES_DESCRIPTION_SUMMARY,
    DES.DES_DESCRIPTION_LARGE,
    ACC.ACC_VALID_SINCE,
    ACC.ACC_VALID_TO,
    DIV.DIV_DEFAULT_ACCOUNT
   FROM
    ACS_ACCOUNT ACC,
    ACS_DIVISION_ACCOUNT DIV,
    ACS_DESCRIPTION DES
   WHERE
    DIV.ACS_DIVISION_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
   AND ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
   AND DES.PC_LANG_ID = vpc_lang_id
    ;

END RPT_ACS_DIVISION_ACC_LIST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_EXCHANGE_RATE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_02     IN       VARCHAR2,
   parameter_03     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   parameter_05     IN       VARCHAR2,
   parameter_06     IN       VARCHAR2,
   parameter_07     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description  Used for report acs_exchange_rate
*
*@created Eqi 18 June 2009
*@lastUpdate VHA 26 JUNE 2013
*@public
*@param
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE := null;
BEGIN
  if (procuser_lanid is not null) then
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
  end if;

   OPEN arefcursor FOR
   SELECT
    ACS_PRICE_CURRENCY.PCU_DAYLY_PRICE,
    ACS_PRICE_CURRENCY.PCU_START_VALIDITY,
    ACS_PRICE_CURRENCY.PCU_VALUATION_PRICE,
    ACS_PRICE_CURRENCY.PCU_INVENTORY_PRICE,
    ACS_PRICE_CURRENCY.PCU_CLOSING_PRICE,
    ACS_PRICE_CURRENCY.PCU_BASE_PRICE,
    PC_CURR.CURRENCY CURRENCY,
    PC_CURR.CURRNAME CURRNAME,
    PC_CURR_2.CURRENCY CURRENCY2,
    PC_CURR_2.CURRNAME CURRNAME2,
    ACS_PRICE_CURRENCY.PCU_VAT_PRICE,
    ACS_PRICE_CURRENCY.PCU_INVOICE_PRICE
    FROM
    ACS_PRICE_CURRENCY     ACS_PRICE_CURRENCY,
    ACS_FINANCIAL_CURRENCY ACS_FINANCIAL_CURRENCY,
    ACS_FINANCIAL_CURRENCY ACS_FINANCIAL_CURRENCY_2,
    PCS.PC_CURR            PC_CURR_2,
    PCS.PC_CURR            PC_CURR
    WHERE
    ACS_PRICE_CURRENCY.ACS_BETWEEN_CURR_ID=ACS_FINANCIAL_CURRENCY.ACS_FINANCIAL_CURRENCY_ID and
    ACS_PRICE_CURRENCY.ACS_AND_CURR_ID=ACS_FINANCIAL_CURRENCY_2.ACS_FINANCIAL_CURRENCY_ID and
    ACS_FINANCIAL_CURRENCY_2.PC_CURR_ID=PC_CURR_2.PC_CURR_ID and
    ACS_FINANCIAL_CURRENCY.PC_CURR_ID=PC_CURR.PC_CURR_ID and
    ( (PARAMETER_02 is null)
        or (Trunc(ACS_PRICE_CURRENCY.PCU_START_VALIDITY)>=Trunc(to_date(PARAMETER_02||'/'||PARAMETER_01||'/'||PARAMETER_00,'DD/MM/YYYY')))
    ) and
    ( (PARAMETER_05 is null)
        or (Trunc(ACS_PRICE_CURRENCY.PCU_START_VALIDITY)<Trunc(to_date(PARAMETER_05||'/'||PARAMETER_04||'/'||PARAMETER_03,'DD/MM/YYYY')))
    ) and
    (PC_CURR.CURRENCY>= parameter_06 OR PC_CURR_2.CURRENCY>= parameter_06) AND
    (PC_CURR.CURRENCY<= parameter_07 OR PC_CURR_2.CURRENCY<= parameter_07);
END rpt_acs_exchange_rate;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_INTEREST_METHOD" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*DESCRIPTION
USED FOR REPORT ACT_INTEREST_METHOD
*author JLI
*lastUpdate July 4 2009
*public
*@param PARAMETER_0:  ICM_DESCRIPTION
*@param PARAMETER_1:  ICM_DESCRIPTION
*/

tmp           NUMBER;
vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;

BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

OPEN arefcursor FOR
SELECT
MED.ACS_INT_CALC_METHOD_ID,
MED.ACS_INTEREST_ACC_ID,
MED.ACS_ASSETS_INT_ACC_ID,
MED.ACS_LIABIL_INT_ACC_ID,
MED.ACS_ADV_TAX_ACC_ID,
MED.ICM_DESCRIPTION,
MED.ICM_COMMENT,
MED.C_METHOD,
MED.C_INT_DOC_GENERATION,
MED.C_ROUND_TYPE,
MED.ICM_ASSETS_INT_LBL,
MED.ICM_LIABIL_INT_LBL,
MED.ICM_ROUND_AMOUNT,
ELE.ACS_INTEREST_CATEG_ID,
ELE.ACS_DIVISION_ACCOUNT_ID,
ELE.ACS_FINANCIAL_ACCOUNT_ID,
ELE.ACS_INTEREST_ACC_ID,
ELE.ACS_ASSETS_INT_ACC_ID,
ELE.ACS_LIABIL_INT_ACC_ID,
ELE.ACS_ADV_TAX_ACC_ID,
ELE.MEL_ADV_TAX_SUBJECT,
ELE.MEL_ADV_TAX_EXEMPTION,
CUR.CURRENCY,
ACS_FUNCTION.GetAccountNumber(ELE.ACS_DIVISION_ACCOUNT_ID) DIV_ACC,
ACS_FUNCTION.GetAccountNumber(ELE.ACS_FINANCIAL_ACCOUNT_ID) FIN_ACC
FROM
ACS_INT_CALC_METHOD MED,
ACS_METHOD_ELEM  ELE,
ACS_FINANCIAL_CURRENCY FUR,
PCS.PC_CURR CUR
WHERE
MED.ACS_INT_CALC_METHOD_ID = ELE.ACS_INT_CALC_METHOD_ID(+)
AND ((parameter_0 IS NULL AND parameter_1 IS NULL)
    OR (parameter_0 IS NULL AND parameter_1 IS NOT NULL AND MED.ICM_DESCRIPTION <= parameter_1)
    OR (parameter_1 IS NULL AND parameter_0 IS NOT NULL AND MED.ICM_DESCRIPTION >= parameter_0)
    OR (parameter_1 IS NOT NULL AND parameter_0 IS NOT NULL AND MED.ICM_DESCRIPTION >= parameter_0 AND MED.ICM_DESCRIPTION <= parameter_1))
AND ELE.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID(+)
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID(+)
;
END RPT_ACS_INTEREST_METHOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_MGM_PLAN" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_0      IN       VARCHAR2,
   PARAMETER_1      IN       VARCHAR2
)
/**
*Description

 Used for report ACS_MGM_PLAN
*@created JLIU 30.JULY.2009
*@lastUpdate 30.JULY.2009
*@public
*@PARAM PARAMETER_0    ACCCOUNT NUMBER (FROM)
*@PARAM PARAMETER_1    ACCCOUNT NUMBER (TO)
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    ACC.ACC_NUMBER,
    ACC.ACC_BLOCKED,
    ACC.ACC_VALID_TO,
    ACC.ACC_VALID_SINCE,
    CPN.ACS_CPN_ACCOUNT_ID,
    DES.PC_LANG_ID,
    DES.DES_DESCRIPTION_SUMMARY,
    DES.DES_DESCRIPTION_LARGE
   FROM
    ACS_ACCOUNT ACC,
    ACS_DESCRIPTION DES,
    ACS_CPN_ACCOUNT CPN
   WHERE
    CPN.ACS_CPN_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
    AND CPN.ACS_CPN_ACCOUNT_ID = DES.ACS_ACCOUNT_ID(+)
    AND DES.PC_LANG_ID = vpc_lang_id
    AND ((PARAMETER_0 IS NULL  AND PARAMETER_1 IS NULL ) OR
    (PARAMETER_1 IS NULL AND ACC.ACC_NUMBER >= PARAMETER_0) OR
    (PARAMETER_0 IS NULL AND ACC.ACC_NUMBER <= PARAMETER_1) OR
    (PARAMETER_0 IS NOT NULL AND PARAMETER_1 IS NOT NULL AND ACC.ACC_NUMBER >= PARAMETER_0 AND ACC.ACC_NUMBER <= PARAMETER_1))

    ;

END RPT_ACS_MGM_PLAN;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_MGM_PLAN_STR" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_0      IN       VARCHAR2,
   PARAMETER_1      IN       VARCHAR2,
   PARAMETER_6      IN       VARCHAR2)
/**
*Description

 Used for report ACS_MGM_PLAN_STR
*@created JLIU 30.JULY.2009
*@lastUpdate 320 JAN 2010
*@public
*@PARAM PARAMETER_0    ACCCOUNT NUMBER (FROM)
*@PARAM PARAMETER_1    ACCCOUNT NUMBER (TO)
*@PARAM PARAMETER_6    CLASSIFICATION ID LIST
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    ACC.ACC_NUMBER,
    ACC.ACC_BLOCKED,
    ACC.ACC_VALID_TO,
    ACC.ACC_VALID_SINCE,
    CPN.ACS_CPN_ACCOUNT_ID,
    FLA.NODE01,
    FLA.NODE02,
    FLA.NODE03,
    FLA.NODE04,
    FLA.NODE05,
    FLA.NODE06,
    FLA.NODE07,
    FLA.NODE08,
    FLA.NODE09,
    FLA.NODE10,
    FLA.PC_LANG_ID,
    FLA.LEAF_DESCR,
    CLA.CLASSIFICATION_ID
   FROM
    ACS_ACCOUNT ACC,
    ACS_DESCRIPTION DES,
    ACS_CPN_ACCOUNT CPN,
    CLASSIF_FLAT FLA,
    CLASSIF_TABLES TBL,
    CLASSIFICATION CLA
    WHERE
    CLA.CLASSIFICATION_ID = FLA.CLASSIFICATION_ID
    AND FLA.CLASSIF_LEAF_ID = CPN.ACS_CPN_ACCOUNT_ID(+)
    AND CPN.ACS_CPN_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID (+)
    AND CPN.ACS_CPN_ACCOUNT_ID = DES.ACS_ACCOUNT_ID(+)
    AND DES.PC_LANG_ID = vpc_lang_id
    AND CLA.CLASSIFICATION_ID = TBL.CLASSIFICATION_ID
    AND FLA.PC_LANG_ID = vpc_lang_id
    AND ((PARAMETER_0 IS NULL  AND PARAMETER_1 IS NULL ) OR
    (PARAMETER_1 IS NULL AND ACC.ACC_NUMBER >= PARAMETER_0) OR
    (PARAMETER_0 IS NULL AND ACC.ACC_NUMBER <= PARAMETER_1) OR
    (PARAMETER_0 IS NOT NULL AND PARAMETER_1 IS NOT NULL AND ACC.ACC_NUMBER >= PARAMETER_0 AND ACC.ACC_NUMBER <= PARAMETER_1))
    AND INSTR( ',' || PARAMETER_6 ||',' , ','|| CLA.CLASSIFICATION_ID ||',' ) > 0
    ;

END RPT_ACS_MGM_PLAN_STR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_MGM_PLAN_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_0      IN       VARCHAR2
)
/**
*Description

 Used for sub report of ACS_MGM_PLAN and ACS_MGM_PLAN_STR
*@created JLIU 30.JULY.2009
*@lastUpdate 30.JULY.2009
*@public
*/

IS

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  OPEN arefcursor FOR
  SELECT
    DES_CDA.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY_CDA,
    DES_PF.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY_PF,
    DES_PJ.DES_DESCRIPTION_SUMMARY DES_DESCRIPTION_SUMMARY_PJ,
    RAC.ACS_CPN_ACCOUNT_ID,
    RAC.ACS_CDA_ACCOUNT_ID,
    RAC.ACS_PF_ACCOUNT_ID,
    RAC.ACS_PJ_ACCOUNT_ID,
    RAC.CDA_NUMBER,
    RAC.PF_NUMBER,
    RAC.PJ_NUMBER,
    RAC.MGM_DEFAULT
   FROM
    V_ACS_MGM_INTERACTION RAC,
    ACS_DESCRIPTION DES_CDA,
    ACS_DESCRIPTION DES_PF,
    ACS_DESCRIPTION DES_PJ
   WHERE
    RAC.ACS_CPN_ACCOUNT_ID = TO_NUMBER(PARAMETER_0 )
    AND RAC.ACS_CDA_ACCOUNT_ID = DES_CDA.ACS_ACCOUNT_ID(+)
    AND DES_CDA.PC_LANG_ID(+) = vpc_lang_id
    AND RAC.ACS_PF_ACCOUNT_ID = DES_PF.ACS_ACCOUNT_ID(+)
    AND DES_PF.PC_LANG_ID(+) = vpc_lang_id
    AND RAC.ACS_PJ_ACCOUNT_ID = DES_PJ.ACS_ACCOUNT_ID(+)
    AND DES_PJ.PC_LANG_ID(+) = vpc_lang_id

    ;

END RPT_ACS_MGM_PLAN_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_REMINDER_FILTER_DET" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description  Used for report ACS_AUX_REMINDER_FILTER_DET
*
*@created AWU 18 MAY 2009
*@lastUpdate
*@public
*@param
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acc.acs_sub_set_id, fil.acs_auxiliary_account_id,
             fil.c_reminder_filter, job.job_aci_control_date, acc.acc_number,
             (SELECT des_a.des_description_summary
                FROM acs_description des_a
               WHERE des_a.acs_account_id =
                               acc.acs_account_id
                 AND des_a.pc_lang_id = vpc_lang_id)
                                                 des_description_summary_acc,
             (SELECT des_a.des_description_large
                FROM acs_description des_a
               WHERE des_a.acs_account_id =
                                 acc.acs_account_id
                 AND des_a.pc_lang_id = vpc_lang_id)
                                                   des_description_large_acc,
             (SELECT des_s.des_description_summary
                FROM acs_description des_s
               WHERE des_s.acs_sub_set_id =
                               acc.acs_sub_set_id
                 AND des_s.pc_lang_id = vpc_lang_id)
                                                 des_description_summary_sub
        FROM act_aux_account_filter fil, acs_account acc, act_job job
       WHERE fil.acs_auxiliary_account_id = acc.acs_account_id
         AND fil.act_job_id = job.act_job_id;
END rpt_acs_reminder_filter_det;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_VAT_CODE_FORM" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0 in     varchar2
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* Procédure stockée utilisée pour le rapport ACS_VAT_CODE_FORM(Fiche des codes TVA)
*
* @author VBO
* @lastUpdate février 2011
* @version 2003
* @public
* @param PROCPARAM_0    Compte du   (ACC_NUMBER)
* @param PROCPARAM_1    Compte au   (ACC_NUMBER)
* @param PROCPARAM_2    Décompte TVA (ACS_VAT_DET_ACCOUNT_ID)
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
  TAX.ACS_TAX_CODE_ID,
  ACC.ACC_NUMBER,
  TAX.TAX_RATE,
  TAX.TAX_LIABLED_RATE,
  TAX.C_ROUND_TYPE,
  TAX.TAX_ROUNDED_AMOUNT,
  TAX.ACS_VAT_DET_ACCOUNT_ID,
  (SELECT DE6.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE6
   WHERE TAX.ACS_VAT_DET_ACCOUNT_ID = DE6.ACS_VAT_DET_ACCOUNT_ID AND
             DE6.PC_LANG_ID = VPC_LANG_ID) DEC_TVA_DES,
  TAX.C_TYPE_TAX,
  TAX.TAX_DEDUCTIBLE_RATE,
  TAX.ACS_NONDED_ACCOUNT_ID,
  (SELECT AC3.ACC_NUMBER
   FROM ACS_ACCOUNT AC3
   WHERE TAX.ACS_NONDED_ACCOUNT_ID = AC3.ACS_ACCOUNT_ID) CPT_TVA_NO_DED,
  (SELECT DE5.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE5
   WHERE TAX.ACS_NONDED_ACCOUNT_ID = DE5.ACS_ACCOUNT_ID AND
            DE5.PC_LANG_ID = VPC_LANG_ID) CPT_TVA_NO_DED_DES,
  TAX.C_ESTABLISHING_CALC_SHEET,
  TAX.ACS_PREA_ACCOUNT_ID,
  (SELECT AC1.ACC_NUMBER
   FROM ACS_ACCOUNT AC1
   WHERE TAX.ACS_PREA_ACCOUNT_ID = AC1.ACS_ACCOUNT_ID) CPT_TAXE,
  (SELECT DE1.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE1
   WHERE TAX.ACS_PREA_ACCOUNT_ID = DE1.ACS_ACCOUNT_ID AND
            DE1.PC_LANG_ID = VPC_LANG_ID) CPT_TAXE_DES,
  TAX.ACS_PROV_ACCOUNT_ID,
  (SELECT AC2.ACC_NUMBER
   FROM ACS_ACCOUNT AC2
   WHERE TAX.ACS_PROV_ACCOUNT_ID = AC2.ACS_ACCOUNT_ID) CPT_PROV,
  (SELECT DE2.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE2
   WHERE TAX.ACS_PROV_ACCOUNT_ID = DE2.ACS_ACCOUNT_ID AND
         DE2.PC_LANG_ID = VPC_LANG_ID) CPT_PROV_DES,
  TAX.DIC_NO_POS_CALC_SHEET_ID,
  TAX.DIC_NO_POS_CALC_SHEET2_ID,
  TAX.DIC_NO_POS_CALC_SHEET3_ID,
  TAX.DIC_NO_POS_CALC_SHEET4_ID,
  TAX.DIC_NO_POS_CALC_SHEET5_ID,
  TAX.DIC_NO_POS_CALC_SHEET6_ID,
  TAX.DIC_TYPE_MOVEMENT_ID,
  TAX.DIC_TYPE_SUBMISSION_ID,
  TAX.DIC_TYPE_VAT_GOOD_ID,
  TAX.ACS_TAX_CODE1_ID,
  (SELECT AC4.ACC_NUMBER
   FROM ACS_ACCOUNT AC4
   WHERE TAX.ACS_TAX_CODE1_ID = AC4.ACS_ACCOUNT_ID) CPT_TAX_CODE1,
  (SELECT DE3.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE3
   WHERE TAX.ACS_TAX_CODE1_ID = DE3.ACS_ACCOUNT_ID AND
         DE3.PC_LANG_ID = VPC_LANG_ID) CPT_TAX_CODE1_DES,
  TAX.ACS_TAX_CODE2_ID,
  (SELECT AC5.ACC_NUMBER
   FROM ACS_ACCOUNT AC5
   WHERE TAX.ACS_TAX_CODE2_ID = AC5.ACS_ACCOUNT_ID) CPT_TAX_CODE2,
  (SELECT DE4.DES_DESCRIPTION_SUMMARY
   FROM ACS_DESCRIPTION DE4
   WHERE TAX.ACS_TAX_CODE2_ID = DE4.ACS_ACCOUNT_ID AND
         DE4.PC_LANG_ID = VPC_LANG_ID) CPT_TAX_CODE2_DES,
  ACC.C_VALID,
  ACC.ACC_INTEREST,
  DES.DES_DESCRIPTION_SUMMARY,
  DES.DES_DESCRIPTION_LARGE,
  VAT.VAT_SINCE,
  VAT.VAT_TO,
  VAT.VAT_RATE
FROM
  ACS_VAT_RATE VAT,
  ACS_DESCRIPTION DES,
  ACS_ACCOUNT ACC,
  ACS_TAX_CODE TAX
WHERE
  ACC.ACC_NUMBER >= PROCPARAM_0 AND
  ACC.ACC_NUMBER <= PROCPARAM_1 AND
  (TAX.ACS_VAT_DET_ACCOUNT_ID = PROCPARAM_2 OR PROCPARAM_2 is null) AND
  TAX.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID AND
  TAX.ACS_TAX_CODE_ID = VAT.ACS_TAX_CODE_ID(+) AND
  ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID AND
  DES.PC_LANG_ID = VPC_LANG_ID;

end RPT_ACS_VAT_CODE_FORM;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACS_VAT_CODE_LIST" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0 in     varchar2
, PARAMETER_1 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
* Store procedure used for the report ACS_VAT_CODE_LIST (Fiche des codes TVA)
*
* @author VBO
* @lastUpdate
* @version 2003
* @public
* @param PARAMETER_0   Compte du   (ACC_NUMBER)
* @param PARAMETER_1   Compte au   (ACC_NUMBER)
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
  TAX.ACS_TAX_CODE_ID,
  TAX.DIC_TYPE_SUBMISSION_ID,
  TAX.DIC_TYPE_MOVEMENT_ID,
  TAX.TAX_RATE,
  TAX.TAX_LIABLED_RATE,
  TAX.DIC_TYPE_VAT_GOOD_ID,
  TAX.ACC_NUMBER,
  TAX.DES_DESCRIPTION_SUMMARY,
  TAX.DES_DESCRIPTION_LARGE,
  ACC_PREA.ACC_NUMBER ACC_NUMBER_PREA,
  ACC_PROV.ACC_NUMBER ACC_NUMBER_PROV
FROM
  ACS_ACCOUNT ACC_PREA,
  ACS_ACCOUNT ACC_PROV,
  V_ACS_TAX_CODE TAX
WHERE
  TAX.ACC_NUMBER >= PARAMETER_0 AND
  TAX.ACC_NUMBER <= PARAMETER_1 AND
  TAX.ACS_PREA_ACCOUNT_ID = ACC_PREA.ACS_ACCOUNT_ID(+) AND
  TAX.ACS_PROV_ACCOUNT_ID = ACC_PROV.ACS_ACCOUNT_ID(+) AND
  TAX.PC_LANG_ID = VPC_LANG_ID;

end RPT_ACS_VAT_CODE_LIST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_ACC_IMP_ME_SUB_1" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
  PROCPARAM_0    in number,
  PROCPARAM_3    in varchar2,
  PARAMETER_0    in varchar2,
  PARAMETER_1    in varchar2,
  PARAMETER_2    in varchar2,
  PARAMETER_3    in varchar2,
  PARAMETER_4    in varchar2,
  PARAMETER_5    in varchar2,
  PARAMETER_6    in varchar2,
  PARAMETER_7    in varchar2,
  PARAMETER_8    in varchar2,
  PARAMETER_12   in varchar2,
  PARAMETER_13   in varchar2,
  PARAMETER_14   in number
)
is

/**
* description used for report ACT_ACC_IMP_ME_1 , THE SUB REPORT OF ACR_ACC_IMPUTATION_DET.RPT

* @author SDO 2003
* @lastupdate May 2010
* @public
* @param PROCPARAM_0    FYE_NO_EXERCICE
* @param PROCPARAM_3    Division_ID (List)
* @param PARAMETER_0    DATE_FROM
* @param PARAMETER_1    DATE_TO
* @param PARAMETER_2    JOURNAL_STATUS
* @param PARAMETER_3    JOURNAL_STATUS
* @param PARAMETER_4    JOURNAL_STATUS
* @param PARAMETER_5    C_TYPE_CUMUL
* @param PARAMETER_5    C_TYPE_CUMUL
* @param PARAMETER_6    C_TYPE_CUMUL
* @param PARAMETER_7    C_TYPE_CUMUL
* @param PARAMETER_8    C_TYPE_CUMUL
* @param PARAMETER_12   WITH START SUBTOTAL
* @param PARAMETER_13   ONLY TRANSACTION WITH VAT CODE
* @param PARAMETER_14   ACS_FINANCIAL_ACCOUNT_ID
*/

BEGIN
open aRefCursor for
SELECT
'REEL' info,
 imp.imf_transaction_date imf_transaction_date,
 imp.imf_amount_lc_d imf_amount_lc_d,
 imp.imf_amount_lc_c imf_amount_lc_c,
 imp.imf_amount_fc_d imf_amount_fc_d,
 imp.imf_amount_fc_c imf_amount_fc_c,
 imp.acs_acs_financial_currency_id acs_acs_financial_currency_id,
 acs_function.getcurrencyname(imp.acs_acs_financial_currency_id) currency_mb,
 imp.acs_financial_currency_id acs_financial_currency_id,
 acs_function.getcurrencyname(imp.acs_financial_currency_id) currency_me,
 imp.acs_financial_account_id acs_financial_account_id,
 imp.imf_acs_division_account_id acs_division_account_id,
 imp.acs_tax_code_id acs_tax_code_id,
 fye.fye_no_exercice fye_no_exercice,
 eta.C_ETAT_JOURNAL,
 sca.C_TYPE_CUMUL
FROM
act_journal jou,
act_etat_journal eta,
acj_sub_set_cat sca,
act_document doc,
acs_period per,
acs_financial_year fye,
act_financial_imputation imp
WHERE
imp.acs_period_id = per.acs_period_id
AND per.acs_financial_year_id = fye.acs_financial_year_id
AND imp.act_document_id = doc.act_document_id
AND doc.act_journal_id = jou.act_journal_id
AND eta.act_journal_id = jou.act_journal_id
AND eta.c_sub_set = 'ACC'
AND sca.acj_catalogue_document_id = doc.acj_catalogue_document_id
AND sca.c_sub_set = 'ACC'
AND (INSTR(','||PROCPARAM_3||',', TO_CHAR(','||IMP.IMF_ACS_DIVISION_ACCOUNT_ID||',')) > 0 OR PROCPARAM_3 is null)
AND ((PARAMETER_12 = '1'AND imp.imf_transaction_date <= TO_DATE(PARAMETER_1,'yyyyMMdd'))
    OR (PARAMETER_12 = '0' AND imp.imf_transaction_date >= TO_DATE(PARAMETER_0,'yyyyMMdd') AND imp.imf_transaction_date <= TO_DATE(PARAMETER_1,'yyyyMMdd')))
AND ((PARAMETER_2 = '1' AND  eta.C_ETAT_JOURNAL ='BRO')
    OR (PARAMETER_3 = '1' AND  eta.C_ETAT_JOURNAL ='PROV')
    OR (PARAMETER_4 = '1' AND  eta.C_ETAT_JOURNAL ='DEF'))
AND ((PARAMETER_5 ='1' AND sca.C_TYPE_CUMUL = 'EXT')
    OR (PARAMETER_6 ='1' AND  sca.C_TYPE_CUMUL ='INT')
    OR (PARAMETER_7 ='1' AND sca.C_TYPE_CUMUL ='PRE')
    OR (PARAMETER_8='1' AND sca.C_TYPE_CUMUL ='ENG'))
AND ((imp.acs_tax_code_id IS NULL) AND PARAMETER_13 = '1'
    OR PARAMETER_13 = '0' )
AND IMP.ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_14
AND FYE.FYE_NO_EXERCICE = PROCPARAM_0
UNION ALL
SELECT
 'REPORT' info,
 fye.fye_start_date imf_transaction_date,
 tot.tot_debit_lc imf_amount_lc_d,
 tot.tot_credit_lc imf_amount_lc_c,
 tot.tot_debit_fc imf_amount_fc_d,
 tot.tot_credit_fc imf_amount_fc_c,
 tot.acs_financial_currency_id acs_acs_financial_currency_id,
 acs_function.getcurrencyname(tot.acs_financial_currency_id) currency_mb,
 tot.acs_acs_financial_currency_id acs_financial_currency_id,
 acs_function.getcurrencyname (tot.acs_acs_financial_currency_id) currency_me,
 tot.acs_financial_account_id acs_financial_account_id,
 tot.acs_division_account_id acs_division_account_id,
 0 acs_tax_code_id,
 fye.fye_no_exercice fye_no_exercice,
 'PROV' c_etat_journal,
 tot.c_type_cumul c_type_cumul
FROM
acs_period per,
acs_financial_year fye,
act_total_by_period tot
WHERE
tot.acs_period_id = per.acs_period_id
AND per.acs_financial_year_id = fye.acs_financial_year_id
AND acs_function.getstatepreviousfinancialyear(fye.acs_financial_year_id) = 'ACT'
AND tot.acs_auxiliary_account_id IS NULL
AND ((tot.acs_division_account_id IS NOT NULL)
    OR (tot.acs_division_account_id IS NULL
    AND acr_functions.existdivision = 0 ))
AND per.c_type_period = '1'
AND ((TOT.ACS_DIVISION_ACCOUNT_ID is not null) or (TOT.ACS_DIVISION_ACCOUNT_ID is null and ACR_FUNCTIONS.ExistDivision = 0)) AND
    (INSTR(','||PROCPARAM_3||',', TO_CHAR(','||TOT.ACS_DIVISION_ACCOUNT_ID||',')) > 0 OR PROCPARAM_3 is null)
AND PARAMETER_3 ='1'
AND (  (PARAMETER_12 = '1'AND fye.fye_start_date <= TO_DATE(PARAMETER_1,'yyyyMMdd'))
    OR (PARAMETER_12 = '0' AND fye.fye_start_date >= TO_DATE(PARAMETER_0,'yyyyMMdd') AND fye.fye_start_date <= TO_DATE(PARAMETER_1,'yyyyMMdd')))
AND (  (PARAMETER_5 ='1' AND TOT.C_TYPE_CUMUL = 'EXT')
    OR (PARAMETER_6 ='1' AND  TOT.C_TYPE_CUMUL ='INT')
    OR (PARAMETER_7 ='1' AND TOT.C_TYPE_CUMUL ='PRE')
    OR (PARAMETER_8='1' AND TOT.C_TYPE_CUMUL ='ENG'))
AND PARAMETER_13 = '0'
AND TOT.ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_14
AND FYE.FYE_NO_EXERCICE = PROCPARAM_0
 ;
end RPT_ACT_ACC_IMP_ME_SUB_1;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_ACC_IMP_ME_SUB_2" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
  PROCPARAM_0    in number,
  PROCPARAM_3    in varchar2,
  PARAMETER_0    in varchar2,
  PARAMETER_1    in varchar2,
  PARAMETER_2    in varchar2,
  PARAMETER_3    in varchar2,
  PARAMETER_4    in varchar2,
  PARAMETER_5    in varchar2,
  PARAMETER_6    in varchar2,
  PARAMETER_7    in varchar2,
  PARAMETER_8    in varchar2,
  PARAMETER_12   in varchar2,
  PARAMETER_13   in varchar2,
  PARAMETER_14    in number,
  PARAMETER_15    in number
)
is

/**
* description used for report  ACT_ACC_IMP_ME_2, THE SUB REPORT OF ACR_ACC_IMPUTATION_DET.RPT

* @author SDO 2003
* @lastupdate may 2010
* @public
* @param PROCPARAM_0    FYE_NO_EXERCICE
* @param PROCPARAM_3    Division_ID (List)
* @param PARAMETER_0    DATE_FROM
* @param PARAMETER_1    DATE_TO
* @param PARAMETER_2    JOURNAL_STATUS
* @param PARAMETER_3    JOURNAL_STATUS
* @param PARAMETER_4    JOURNAL_STATUS
* @param PARAMETER_5    C_TYPE_CUMUL
* @param PARAMETER_5    C_TYPE_CUMUL
* @param PARAMETER_6    C_TYPE_CUMUL
* @param PARAMETER_7    C_TYPE_CUMUL
* @param PARAMETER_8    C_TYPE_CUMUL
* @param PARAMETER_12   WITH START SUBTOTAL
* @param PARAMETER_13   ONLY TRANSACTION WITH VAT CODE
* @param PARAMETER_14   ACS_FINANCIAL_ACCOUNT_ID
* @param PARAMETER_15   ACS_DIVISION_ACCOUNT_ID
*/

BEGIN
open aRefCursor for
SELECT
'REEL' info,
 imp.imf_transaction_date imf_transaction_date,
 imp.imf_amount_lc_d imf_amount_lc_d,
 imp.imf_amount_lc_c imf_amount_lc_c,
 imp.imf_amount_fc_d imf_amount_fc_d,
 imp.imf_amount_fc_c imf_amount_fc_c,
 imp.acs_acs_financial_currency_id acs_acs_financial_currency_id,
 acs_function.getcurrencyname(imp.acs_acs_financial_currency_id) currency_mb,
 imp.acs_financial_currency_id acs_financial_currency_id,
 acs_function.getcurrencyname(imp.acs_financial_currency_id) currency_me,
 imp.acs_financial_account_id acs_financial_account_id,
 imp.imf_acs_division_account_id acs_division_account_id,
 imp.acs_tax_code_id acs_tax_code_id,
 fye.fye_no_exercice fye_no_exercice,
 eta.C_ETAT_JOURNAL,
 sca.C_TYPE_CUMUL
FROM
act_journal jou,
act_etat_journal eta,
acj_sub_set_cat sca,
act_document doc,
acs_period per,
acs_financial_year fye,
act_financial_imputation imp
WHERE
imp.acs_period_id = per.acs_period_id
AND per.acs_financial_year_id = fye.acs_financial_year_id
AND imp.act_document_id = doc.act_document_id
AND doc.act_journal_id = jou.act_journal_id
AND eta.act_journal_id = jou.act_journal_id
AND eta.c_sub_set = 'ACC'
AND sca.acj_catalogue_document_id = doc.acj_catalogue_document_id
AND sca.c_sub_set = 'ACC'
AND (INSTR(','||PROCPARAM_3||',', TO_CHAR(','||IMP.IMF_ACS_DIVISION_ACCOUNT_ID||',')) > 0 OR PROCPARAM_3 is null)
AND ((PARAMETER_12 = '1'AND imp.imf_transaction_date <= TO_DATE(PARAMETER_1,'yyyyMMdd'))
    OR (PARAMETER_12 = '0' AND imp.imf_transaction_date >= TO_DATE(PARAMETER_0,'yyyyMMdd') AND imp.imf_transaction_date <= TO_DATE(PARAMETER_1,'yyyyMMdd')))
AND ((PARAMETER_2 = '1' AND  eta.C_ETAT_JOURNAL ='BRO')
    OR (PARAMETER_3 = '1' AND  eta.C_ETAT_JOURNAL ='PROV')
    OR (PARAMETER_4 = '1' AND  eta.C_ETAT_JOURNAL ='DEF'))
AND ((PARAMETER_5 ='1' AND sca.C_TYPE_CUMUL = 'EXT')
    OR (PARAMETER_6 ='1' AND  sca.C_TYPE_CUMUL ='INT')
    OR (PARAMETER_7 ='1' AND sca.C_TYPE_CUMUL ='PRE')
    OR (PARAMETER_8='1' AND sca.C_TYPE_CUMUL ='ENG'))
AND ((imp.acs_tax_code_id IS NULL) AND PARAMETER_13 = '1'
    OR PARAMETER_13 = '0' )
AND IMP.ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_14
AND FYE.FYE_NO_EXERCICE = PROCPARAM_0
AND IMP.IMF_ACS_DIVISION_ACCOUNT_ID = PARAMETER_15
UNION ALL
SELECT
 'REPORT' info,
 fye.fye_start_date imf_transaction_date,
 tot.tot_debit_lc imf_amount_lc_d,
 tot.tot_credit_lc imf_amount_lc_c,
 tot.tot_debit_fc imf_amount_fc_d,
 tot.tot_credit_fc imf_amount_fc_c,
 tot.acs_financial_currency_id acs_acs_financial_currency_id,
 acs_function.getcurrencyname(tot.acs_financial_currency_id) currency_mb,
 tot.acs_acs_financial_currency_id acs_financial_currency_id,
 acs_function.getcurrencyname (tot.acs_acs_financial_currency_id) currency_me,
 tot.acs_financial_account_id acs_financial_account_id,
 tot.acs_division_account_id acs_division_account_id,
 0 acs_tax_code_id,
 fye.fye_no_exercice fye_no_exercice,
 'PROV' c_etat_journal,
 tot.c_type_cumul c_type_cumul
FROM
acs_period per,
acs_financial_year fye,
act_total_by_period tot
WHERE
tot.acs_period_id = per.acs_period_id
AND per.acs_financial_year_id = fye.acs_financial_year_id
AND acs_function.getstatepreviousfinancialyear(fye.acs_financial_year_id) = 'ACT'
AND tot.acs_auxiliary_account_id IS NULL
AND ((tot.acs_division_account_id IS NOT NULL)
    OR (tot.acs_division_account_id IS NULL
    AND acr_functions.existdivision = 0 ))
AND per.c_type_period = '1'
AND ((TOT.ACS_DIVISION_ACCOUNT_ID is not null) or (TOT.ACS_DIVISION_ACCOUNT_ID is null and ACR_FUNCTIONS.ExistDivision = 0)) AND
    (INSTR(','||PROCPARAM_3||',', TO_CHAR(','||TOT.ACS_DIVISION_ACCOUNT_ID||',')) > 0 OR PROCPARAM_3 is null)
AND PARAMETER_3 ='1'
AND (  (PARAMETER_12 = '1'AND fye.fye_start_date <= TO_DATE(PARAMETER_1,'yyyyMMdd'))
    OR (PARAMETER_12 = '0' AND fye.fye_start_date >= TO_DATE(PARAMETER_0,'yyyyMMdd') AND fye.fye_start_date <= TO_DATE(PARAMETER_1,'yyyyMMdd')))
AND (  (PARAMETER_5 ='1' AND TOT.C_TYPE_CUMUL = 'EXT')
    OR (PARAMETER_6 ='1' AND  TOT.C_TYPE_CUMUL ='INT')
    OR (PARAMETER_7 ='1' AND TOT.C_TYPE_CUMUL ='PRE')
    OR (PARAMETER_8='1' AND TOT.C_TYPE_CUMUL ='ENG'))
AND PARAMETER_13 = '0'
AND TOT.ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_14
AND FYE.FYE_NO_EXERCICE = PROCPARAM_0
AND TOT.ACS_DIVISION_ACCOUNT_ID = PARAMETER_15
 ;
end RPT_ACT_ACC_IMP_ME_SUB_2;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_AGED_BALANCE_CUST" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_11   in     varchar2
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procparam_8    in     varchar2
, procparam_9    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_AGED_BALANCE_CUST (Echéanciers fournisseurs)

* @author SDO 2003
* @lastupdate SMA 13 January 2016
* @public
* @param parameter_1    Only expired : 0=No / 1=Yes
* @param parameter_2    Date expired : YYYYMMDD
* @param parameter_3    C_TYPE_CUMUL = INT : 0=No / 1=Yes
* @param parameter_4    C_TYPE_CUMUL = EXT : 0=No / 1=Yes
* @param parameter_5    C_TYPE_CUMUL = PRE : 0=No / 1=Yes
* @param parameter_6    C_TYPE_CUMUL = ENG : 0=No / 1=Yes
* @param parameter_11   Only summary : 0=No / 1=Yes
* @param procparam_1    Account from        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2    Account to        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_3    Reference date
* @param procparam_3    SUBSET ID      Date pour le calcul des escomptes et des réévaluations
* @param procparam_4    Divisions (# = All  / null = selection (COM_LIST))
* @param procparam_5    Collectiv_ID (List)  # = All sinon liste des ID
* @param procparam_6    Type de cours        1 : Cours du jour (par défaut)
                                             2 : Cours d'évaluation
                                             3 : Cours d'inventaire
                                             4 : Cours de bouclement
                                             5 : Cours de facturation
* @param procparam_7    Currency_ID List)   '' = All sinon liste des ID   (ACS_FINANCIAL_CURRENCY_ID)
* @param procparam_8    ACS_PAYMENT_METHOD_ID (List)  ('#'= All or ID List)
* @param procparam_9    Job ID (COM_LIST)
*/
is
  vdate       date;
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
begin
  if (procuser_lanid is not null) then
    PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
  end if;

  begin
    if procparam_2 is null then
      vdate  := trunc(sysdate);
    else
      vdate  := to_date(procparam_2, 'YYYYMMDD');
    end if;
  exception
    when others then
      vdate  := trunc(sysdate);
  end;

  delete from act_aged_balance_cust_temp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if    (procparam_4 is null)
       or (procparam_4 <> '#') then
      insert into act_aged_balance_cust_temp
        (select par.par_document
              , par.acs_acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
              , par.acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_me
              , doc.doc_number
              , cat.c_type_catalogue
              , sub.c_type_cumul
              , exp.act_expiry_id
              , exp.act_document_id
              , exp.act_part_imputation_id
              , exp.c_status_expiry
              , case
                  when(procparam_7 = 1)
                  and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                  else exp.exp_adapted
                end exp_adapted
              , exp.exp_calculated
              , vdate - exp.exp_adapted days
              , exp.exp_amount_lc
              , exp.exp_amount_fc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
              , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
              , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
              , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                       , par.acs_financial_currency_id
                                                       , par.acs_acs_financial_currency_id
                                                       , vdate
                                                       , procparam_6
                                                        ) solde_reeval_lc
              , exp.exp_slice
              , exp.acs_fin_acc_s_payment_id
              , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
              , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
              , co2.pco_descr pco_descr_exp
              , imp.acs_period_id
              , imp.imf_transaction_date
              , imp.imf_value_date
              , imp.imf_description
              , imp.acs_financial_account_id
              , (select acf.acc_number
                   from acs_account acf
                  where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
              , (select de1.des_description_summary
                   from acs_description de1
                  where de1.acs_account_id = imp.acs_financial_account_id
                    and de1.pc_lang_id = vpc_lang_id) account_fin_descr
              , jou.jou_number
              , ejo.c_etat_journal
              , imp.imf_acs_division_account_id
              , (select acd.acc_number
                   from acs_account acd
                  where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
              , (select de2.des_description_summary
                   from acs_description de2
                  where de2.acs_account_id = imp.imf_acs_division_account_id
                    and de2.pc_lang_id = vpc_lang_id) account_div_descr
              , cus.pac_custom_partner_id
              , cus.acs_auxiliary_account_id
              , cus.c_partner_category
              , co1.pco_descr pco_descr_cus
              , acc.acc_number acc_number_aux
              , (select de3.des_description_summary
                   from acs_description de3
                  where de3.acs_account_id = cus.acs_auxiliary_account_id
                    and de3.pc_lang_id = vpc_lang_id) account_aux_descr
              , (select de4.des_description_large
                   from acs_description de4
                  where de4.acs_account_id = cus.acs_auxiliary_account_id
                    and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
              , acc.acs_sub_set_id
              , (select de5.des_description_summary
                   from acs_description de5
                  where de5.acs_sub_set_id = acc.acs_sub_set_id
                    and de5.pc_lang_id = vpc_lang_id) sub_set_descr
              , aux.c_type_account
              , per.per_name
              , per.per_forename
              , per.per_short_name
              , per.per_activity
              , per.per_key1
              , (select adr.add_format
                   from pac_address adr
                  where adr.pac_person_id = cus.pac_custom_partner_id
                    and adr.add_principal = '1') add_format
              , (select de6.des_description_summary
                   from acs_description de6
                  where de6.acs_payment_method_id = pfc.acs_payment_method_id
                    and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_cust
              , (select de7.des_description_summary
                   from acs_description de7
                  where de7.acs_payment_method_id = pfe.acs_payment_method_id
                    and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
           from acs_payment_method pae
              , acs_fin_acc_s_payment pfe
              , acs_payment_method pac
              , acs_fin_acc_s_payment pfc
              , pac_payment_condition co2
              , pac_payment_condition co1
              , pac_person per
              , acs_auxiliary_account aux
              , pac_custom_partner cus
              , acs_financial_account fin
              , act_financial_imputation imp
              , act_etat_journal ejo
              , act_journal jou
              , act_expiry exp
              , acj_catalogue_document cat
              , act_document doc
              , act_part_imputation par
              , acs_account acc
              , (select c_type_cumul
                      , acj_catalogue_document_id
                   from acj_sub_set_cat
                  where c_sub_set = 'REC') sub
              , (select LIS_ID_1
                   from COM_LIST
                  where LIS_JOB_ID = to_number(procparam_9)
                    and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
          where par.act_document_id = doc.act_document_id
            and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
            and cat.c_type_catalogue <> '8'
            and   -- Transaction de relance
                par.act_part_imputation_id = exp.act_part_imputation_id
            and exp_calc_net + 0 = 1
            and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
            and doc.act_journal_id = jou.act_journal_id
            and doc.act_journal_id = ejo.act_journal_id
            and ejo.c_sub_set = 'REC'
            and exp.act_part_imputation_id = imp.act_part_imputation_id
            and imp.act_det_payment_id is null
            and imp.acs_auxiliary_account_id is not null
            and imp.acs_financial_account_id = fin.acs_financial_account_id
            and (   exp.C_STATUS_EXPIRY = 0
                 or (    exp.C_STATUS_EXPIRY <> 0
                     and exp.EXP_DATE_PMT_TOT > vdate) )
            and imp.imf_transaction_date <= vdate
            and fin.fin_collective = 1
            and acc.acc_number >= procparam_0
            and acc.acc_number <= procparam_1
            and (   acc.acs_sub_set_id = procparam_3
                 or procparam_3 is null)
            and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
            and IMP.IMF_ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1
            and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
                 or procparam_5 = '#')
            and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                 or procparam_8 = '#')
            and par.pac_custom_partner_id = cus.pac_custom_partner_id
            and cus.acs_auxiliary_account_id = acc.acs_account_id
            and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
            and cus.pac_custom_partner_id = per.pac_person_id
            and cus.pac_payment_condition_id = co1.pac_payment_condition_id
            and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
            and cus.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
            and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
            and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
            and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
            and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
            and
                --Ctrl_only)expired
                (   parameter_1 = '0'
                 or (    parameter_1 = '1'
                     and (case
                            when(procparam_7 = 1)
                            and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                            else exp.exp_adapted
                          end
                         ) <= to_date(parameter_2, 'YYYYMMDD')
                    )
                )
            and
                --Ctrl_c_type_cumul
                (    (    parameter_3 = '1'
                      and sub.c_type_cumul = 'INT')
                 or (    parameter_4 = '1'
                     and sub.c_type_cumul = 'EXT')
                 or (    parameter_5 = '1'
                     and sub.c_type_cumul = 'PRE')
                 or (    parameter_6 = '1'
                     and sub.c_type_cumul = 'ENG')
                )
            and
                --Ctrl_c_etat_journal
                (   parameter_11 = '1'
                 or (    parameter_11 = '0'
                     and ejo.c_etat_journal <> 'BRO') ) );

      commit;
    else
      insert into act_aged_balance_cust_temp
        (select par.par_document
              , par.acs_acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
              , par.acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_me
              , doc.doc_number
              , cat.c_type_catalogue
              , sub.c_type_cumul
              , exp.act_expiry_id
              , exp.act_document_id
              , exp.act_part_imputation_id
              , exp.c_status_expiry
              , case
                  when(procparam_7 = 1)
                  and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                  else exp.exp_adapted
                end exp_adapted
              , exp.exp_calculated
              , vdate - exp.exp_adapted days
              , exp.exp_amount_lc
              , exp.exp_amount_fc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
              , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
              , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
              , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                       , par.acs_financial_currency_id
                                                       , par.acs_acs_financial_currency_id
                                                       , vdate
                                                       , procparam_6
                                                        ) solde_reeval_lc
              , exp.exp_slice
              , exp.acs_fin_acc_s_payment_id
              , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
              , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
              , co2.pco_descr pco_descr_exp
              , imp.acs_period_id
              , imp.imf_transaction_date
              , imp.imf_value_date
              , imp.imf_description
              , imp.acs_financial_account_id
              , (select acf.acc_number
                   from acs_account acf
                  where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
              , (select de1.des_description_summary
                   from acs_description de1
                  where de1.acs_account_id = imp.acs_financial_account_id
                    and de1.pc_lang_id = vpc_lang_id) account_fin_descr
              , jou.jou_number
              , ejo.c_etat_journal
              , imp.imf_acs_division_account_id
              , (select acd.acc_number
                   from acs_account acd
                  where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
              , (select de2.des_description_summary
                   from acs_description de2
                  where de2.acs_account_id = imp.imf_acs_division_account_id
                    and de2.pc_lang_id = vpc_lang_id) account_div_descr
              , cus.pac_custom_partner_id
              , cus.acs_auxiliary_account_id
              , cus.c_partner_category
              , co1.pco_descr pco_descr_cus
              , acc.acc_number acc_number_aux
              , (select de3.des_description_summary
                   from acs_description de3
                  where de3.acs_account_id = cus.acs_auxiliary_account_id
                    and de3.pc_lang_id = vpc_lang_id) account_aux_descr
              , (select de4.des_description_large
                   from acs_description de4
                  where de4.acs_account_id = cus.acs_auxiliary_account_id
                    and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
              , acc.acs_sub_set_id
              , (select de5.des_description_summary
                   from acs_description de5
                  where de5.acs_sub_set_id = acc.acs_sub_set_id
                    and de5.pc_lang_id = vpc_lang_id) sub_set_descr
              , aux.c_type_account
              , per.per_name
              , per.per_forename
              , per.per_short_name
              , per.per_activity
              , per.per_key1
              , (select adr.add_format
                   from pac_address adr
                  where adr.pac_person_id = cus.pac_custom_partner_id
                    and adr.add_principal = '1') add_format
              , (select de6.des_description_summary
                   from acs_description de6
                  where de6.acs_payment_method_id = pfc.acs_payment_method_id
                    and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_cust
              , (select de7.des_description_summary
                   from acs_description de7
                  where de7.acs_payment_method_id = pfe.acs_payment_method_id
                    and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
           from acs_payment_method pae
              , acs_fin_acc_s_payment pfe
              , acs_payment_method pac
              , acs_fin_acc_s_payment pfc
              , pac_payment_condition co2
              , pac_payment_condition co1
              , pac_person per
              , acs_auxiliary_account aux
              , pac_custom_partner cus
              , acs_financial_account fin
              , act_financial_imputation imp
              , act_etat_journal ejo
              , act_journal jou
              , act_expiry exp
              , acj_catalogue_document cat
              , act_document doc
              , act_part_imputation par
              , acs_account acc
              , (select c_type_cumul
                      , acj_catalogue_document_id
                   from acj_sub_set_cat
                  where c_sub_set = 'REC') sub
          where par.act_document_id = doc.act_document_id
            and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
            and cat.c_type_catalogue <> '8'
            and   -- Transaction de relance
                par.act_part_imputation_id = exp.act_part_imputation_id
            and exp_calc_net + 0 = 1
            and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
            and doc.act_journal_id = jou.act_journal_id
            and doc.act_journal_id = ejo.act_journal_id
            and ejo.c_sub_set = 'REC'
            and exp.act_part_imputation_id = imp.act_part_imputation_id
            and imp.act_det_payment_id is null
            and imp.acs_auxiliary_account_id is not null
            and imp.acs_financial_account_id = fin.acs_financial_account_id
            and (   exp.C_STATUS_EXPIRY = 0
                 or (    exp.C_STATUS_EXPIRY <> 0
                     and exp.EXP_DATE_PMT_TOT > vdate) )
            and imp.imf_transaction_date <= vdate
            and fin.fin_collective = 1
            and acc.acc_number >= procparam_0
            and acc.acc_number <= procparam_1
            and (   acc.acs_sub_set_id = procparam_3
                 or procparam_3 is null)
            and (IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null)
            and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
                 or procparam_5 = '#')
            and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                 or procparam_8 = '#')
            and par.pac_custom_partner_id = cus.pac_custom_partner_id
            and cus.acs_auxiliary_account_id = acc.acs_account_id
            and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
            and cus.pac_custom_partner_id = per.pac_person_id
            and cus.pac_payment_condition_id = co1.pac_payment_condition_id
            and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
            and cus.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
            and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
            and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
            and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
            and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
            and
                --Ctrl_only)expired
                (   parameter_1 = '0'
                 or (    parameter_1 = '1'
                     and (case
                            when(procparam_7 = 1)
                            and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                            else exp.exp_adapted
                          end
                         ) <= to_date(parameter_2, 'YYYYMMDD')
                    )
                )
            and
                --Ctrl_c_type_cumul
                (    (    parameter_3 = '1'
                      and sub.c_type_cumul = 'INT')
                 or (    parameter_4 = '1'
                     and sub.c_type_cumul = 'EXT')
                 or (    parameter_5 = '1'
                     and sub.c_type_cumul = 'PRE')
                 or (    parameter_6 = '1'
                     and sub.c_type_cumul = 'ENG')
                )
            and
                --Ctrl_c_etat_journal
                (   parameter_11 = '1'
                 or (    parameter_11 = '0'
                     and ejo.c_etat_journal <> 'BRO') ) );

      commit;
    end if;
  else   -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
    insert into act_aged_balance_cust_temp
      (select par.par_document
            , par.acs_acs_financial_currency_id
            , (select cub.currency
                 from pcs.pc_curr cub
                    , acs_financial_currency cfb
                where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                  and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
            , par.acs_financial_currency_id
            , (select cub.currency
                 from pcs.pc_curr cub
                    , acs_financial_currency cfb
                where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                  and cub.pc_curr_id = cfb.pc_curr_id) currency_me
            , doc.doc_number
            , cat.c_type_catalogue
            , sub.c_type_cumul
            , exp.act_expiry_id
            , exp.act_document_id
            , exp.act_part_imputation_id
            , exp.c_status_expiry
            , case
                when(procparam_7 = 1)
                and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                else exp.exp_adapted
              end exp_adapted
            , exp.exp_calculated
            , vdate - exp.exp_adapted days
            , exp.exp_amount_lc
            , exp.exp_amount_fc
            , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
            , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
            , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
            , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
            , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
            , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
            , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                     , par.acs_financial_currency_id
                                                     , par.acs_acs_financial_currency_id
                                                     , vdate
                                                     , procparam_6
                                                      ) solde_reeval_lc
            , exp.exp_slice
            , exp.acs_fin_acc_s_payment_id
            , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
            , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
            , co2.pco_descr pco_descr_exp
            , imp.acs_period_id
            , imp.imf_transaction_date
            , imp.imf_value_date
            , imp.imf_description
            , imp.acs_financial_account_id
            , (select acf.acc_number
                 from acs_account acf
                where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
            , (select de1.des_description_summary
                 from acs_description de1
                where de1.acs_account_id = imp.acs_financial_account_id
                  and de1.pc_lang_id = vpc_lang_id) account_fin_descr
            , jou.jou_number
            , ejo.c_etat_journal
            , imp.imf_acs_division_account_id
            , (select acd.acc_number
                 from acs_account acd
                where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
            , (select de2.des_description_summary
                 from acs_description de2
                where de2.acs_account_id = imp.imf_acs_division_account_id
                  and de2.pc_lang_id = vpc_lang_id) account_div_descr
            , cus.pac_custom_partner_id
            , cus.acs_auxiliary_account_id
            , cus.c_partner_category
            , co1.pco_descr pco_descr_cus
            , acc.acc_number acc_number_aux
            , (select de3.des_description_summary
                 from acs_description de3
                where de3.acs_account_id = cus.acs_auxiliary_account_id
                  and de3.pc_lang_id = vpc_lang_id) account_aux_descr
            , (select de4.des_description_large
                 from acs_description de4
                where de4.acs_account_id = cus.acs_auxiliary_account_id
                  and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
            , acc.acs_sub_set_id
            , (select de5.des_description_summary
                 from acs_description de5
                where de5.acs_sub_set_id = acc.acs_sub_set_id
                  and de5.pc_lang_id = vpc_lang_id) sub_set_descr
            , aux.c_type_account
            , per.per_name
            , per.per_forename
            , per.per_short_name
            , per.per_activity
            , per.per_key1
            , (select adr.add_format
                 from pac_address adr
                where adr.pac_person_id = cus.pac_custom_partner_id
                  and adr.add_principal = '1') add_format
            , (select de6.des_description_summary
                 from acs_description de6
                where de6.acs_payment_method_id = pfc.acs_payment_method_id
                  and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_cust
            , (select de7.des_description_summary
                 from acs_description de7
                where de7.acs_payment_method_id = pfe.acs_payment_method_id
                  and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
         from acs_payment_method pae
            , acs_fin_acc_s_payment pfe
            , acs_payment_method pac
            , acs_fin_acc_s_payment pfc
            , pac_payment_condition co2
            , pac_payment_condition co1
            , pac_person per
            , acs_auxiliary_account aux
            , pac_custom_partner cus
            , acs_financial_account fin
            , act_financial_imputation imp
            , act_etat_journal ejo
            , act_journal jou
            , act_expiry exp
            , acj_catalogue_document cat
            , act_document doc
            , act_part_imputation par
            , acs_account acc
            , (select c_type_cumul
                    , acj_catalogue_document_id
                 from acj_sub_set_cat
                where c_sub_set = 'REC') sub
        where par.act_document_id = doc.act_document_id
          and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
          and cat.c_type_catalogue <> '8'
          and   -- Transaction de relance
              par.act_part_imputation_id = exp.act_part_imputation_id
          and exp_calc_net + 0 = 1
          and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
          and doc.act_journal_id = jou.act_journal_id
          and doc.act_journal_id = ejo.act_journal_id
          and ejo.c_sub_set = 'REC'
          and exp.act_part_imputation_id = imp.act_part_imputation_id
          and imp.act_det_payment_id is null
          and imp.acs_auxiliary_account_id is not null
          and imp.acs_financial_account_id = fin.acs_financial_account_id
          and (   exp.C_STATUS_EXPIRY = 0
               or (    exp.C_STATUS_EXPIRY <> 0
                   and exp.EXP_DATE_PMT_TOT > vdate) )
          and imp.imf_transaction_date <= vdate
          and fin.fin_collective = 1
          and acc.acc_number >= procparam_0
          and acc.acc_number <= procparam_1
          and (   acc.acs_sub_set_id = procparam_3
               or procparam_3 is null)
          and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
               or procparam_5 = '#')
          and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
               or procparam_8 = '#')
          and par.pac_custom_partner_id = cus.pac_custom_partner_id
          and cus.acs_auxiliary_account_id = acc.acs_account_id
          and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
          and cus.pac_custom_partner_id = per.pac_person_id
          and cus.pac_payment_condition_id = co1.pac_payment_condition_id
          and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
          and cus.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
          and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
          and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
          and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
          and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
          and
              --Ctrl_only)expired
              (   parameter_1 = '0'
               or (    parameter_1 = '1'
                   and (case
                          when(procparam_7 = 1)
                          and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                          else exp.exp_adapted
                        end
                       ) <= to_date(parameter_2, 'YYYYMMDD')
                  )
              )
          and
              --Ctrl_c_type_cumul
              (    (    parameter_3 = '1'
                    and sub.c_type_cumul = 'INT')
               or (    parameter_4 = '1'
                   and sub.c_type_cumul = 'EXT')
               or (    parameter_5 = '1'
                   and sub.c_type_cumul = 'PRE')
               or (    parameter_6 = '1'
                   and sub.c_type_cumul = 'ENG')
              )
          and
              --Ctrl_c_etat_journal
              (   parameter_11 = '1'
               or (    parameter_11 = '0'
                   and ejo.c_etat_journal <> 'BRO') ) );

    commit;
  end if;

  open arefcursor for
    select par_document
         , acs_acs_financial_currency_id
         , currency_mb
         , acs_financial_currency_id
         , currency_me
         , doc_number
         , c_type_catalogue
         , c_type_cumul
         , act_expiry_id
         , act_document_id
         , act_part_imputation_id
         , c_status_expiry
         , exp_adapted
         , exp_calculated
         , days
         , exp_amount_lc
         , exp_amount_fc
         , discount_lc
         , discount_fc
         , det_paied_lc
         , det_paied_fc
         , solde_exp_lc
         , solde_exp_fc
         , solde_reeval_lc
         , exp_slice
         , acs_fin_acc_s_payment_id
         , last_claims_level
         , last_claims_date
         , pco_descr_exp
         , acs_period_id
         , imf_transaction_date
         , imf_value_date
         , imf_description
         , acs_financial_account_id
         , acc_number_fin
         , account_fin_descr
         , jou_number
         , c_etat_journal
         , imf_acs_division_account_id
         , acc_number_div
         , account_div_descr
         , pac_custom_partner_id
         , acs_auxiliary_account_id
         , c_partner_category
         , pco_descr_cus
         , acc_number_aux
         , account_aux_descr
         , account_aux_large_descr
         , acs_sub_set_id
         , sub_set_descr
         , c_type_account
         , per_name
         , per_forename
         , per_short_name
         , per_activity
         , per_key1
         , add_format
         , acs_payment_method_descr_cust
         , acs_payment_method_descr_exp
      from act_aged_balance_cust_temp;
end RPT_ACT_AGED_BALANCE_CUST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_AGED_BALANCE_CUST_SUB" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_1   in     varchar2
, PARAMETER_2   in     varchar2
, PARAMETER_3   in     varchar2
, PARAMETER_4   in     varchar2
, PARAMETER_5   in     varchar2
, PARAMETER_6   in     varchar2
, PARAMETER_11  in     varchar2
, PROCPARAM_0   in     varchar2
, PROCPARAM_1   in     varchar2
, PROCPARAM_2   in     varchar2
, PROCPARAM_3   in     varchar2
, PROCPARAM_4   in     varchar2
, PROCPARAM_5   in     varchar2
, PROCPARAM_6   in     number
, PROCPARAM_7   in     number
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_AGED_BALANCE_CUST (Ech??¨¬|anciers fournisseurs)

* @author SDO 2003
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_1    Only expired : 0=No / 1=Yes
* @param PARAMETER_2    Date expired : YYYYMMDD
* @param PARAMETER_3    C_TYPE_CUMUL = INT : 0=No / 1=Yes
* @param PARAMETER_4    C_TYPE_CUMUL = EXT : 0=No / 1=Yes
* @param PARAMETER_5    C_TYPE_CUMUL = PRE : 0=No / 1=Yes
* @param PARAMETER_6    C_TYPE_CUMUL = ENG : 0=No / 1=Yes
* @param PARAMETER_11   Only summary : 0=No / 1=Yes
* @param PROCPARAM_0    Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param PROCPARAM_1    Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param PROCPARAM_2    DATE
* @param PROCPARAM_3    SUBSET ID      Date pour le calcul des escomptes et des r??¨¬|??¨¬|valuations
* @param PROCPARAM_4    Division_ID (List)   '' = All sinon liste des ID
* @param PROCPARAM_5    Collectiv_ID (List)  '' = All sinon liste des ID
* @param PROCPARAM_6    Type de cours        1 : Cours du jour (par d??¨¬|faut)
                                             2 : Cours d'??¨¬|valuation
                                             3 : Cours d'inventaire
                                             4 : Cours de bouclement
                                             5 : Cours de facturation
* @param PROCPARAM_7    Currency_ID List)   '' = All sinon liste des ID   (ACS_FINANCIAL_CURRENCY_ID)
*/
is




begin




  open aRefCursor for
  SELECT
  PAR_DOCUMENT,
  ACS_ACS_FINANCIAL_CURRENCY_ID,
  CURRENCY_MB,
  ACS_FINANCIAL_CURRENCY_ID,
  CURRENCY_ME,
  DOC_NUMBER,
  C_TYPE_CATALOGUE,
  C_TYPE_CUMUL,
  ACT_EXPIRY_ID,
  ACT_DOCUMENT_ID,
  ACT_PART_IMPUTATION_ID,
  C_STATUS_EXPIRY,
  EXP_ADAPTED,
  EXP_CALCULATED,
  DAYS,
  EXP_AMOUNT_LC,
  EXP_AMOUNT_FC,
  DISCOUNT_LC,
  DISCOUNT_FC,
  DET_PAIED_LC,
  DET_PAIED_FC,
  SOLDE_EXP_LC,
  SOLDE_EXP_FC,
  SOLDE_REEVAL_LC,
  EXP_SLICE,
  ACS_FIN_ACC_S_PAYMENT_ID,
  LAST_CLAIMS_LEVEL,
  LAST_CLAIMS_DATE,
  PCO_DESCR_EXP,
  ACS_PERIOD_ID,
  IMF_TRANSACTION_DATE,
  IMF_VALUE_DATE,
  IMF_DESCRIPTION,
  ACS_FINANCIAL_ACCOUNT_ID,
  ACC_NUMBER_FIN,
  ACCOUNT_FIN_DESCR,
  JOU_NUMBER,
  C_ETAT_JOURNAL,
  IMF_ACS_DIVISION_ACCOUNT_ID,
  ACC_NUMBER_DIV,
  ACCOUNT_DIV_DESCR,
  PAC_CUSTOM_PARTNER_ID,
  ACS_AUXILIARY_ACCOUNT_ID,
  C_PARTNER_CATEGORY,
  PCO_DESCR_CUS,
  ACC_NUMBER_AUX,
  ACCOUNT_AUX_DESCR,
  ACCOUNT_AUX_LARGE_DESCR,
  ACS_SUB_SET_ID,
  SUB_SET_DESCR,
  C_TYPE_ACCOUNT,
  PER_NAME,
  PER_FORENAME,
  PER_SHORT_NAME,
  PER_ACTIVITY,
  PER_KEY1,
  ADD_FORMAT,
  ACS_PAYMENT_METHOD_DESCR_CUST,
  ACS_PAYMENT_METHOD_DESCR_EXP
  FROM
  ACT_AGED_BALANCE_CUST_TEMP;


end RPT_ACT_AGED_BALANCE_CUST_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_AGED_BALANCE_SUPP" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_11   in     varchar2
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procparam_8    in     varchar2
, procparam_9    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_AGED_BALANCE_SUPP (Echéanciers fournisseurs)

* @author SDO 2003
* @lastupdate SMA 13 January 2016
* @public
* @param parameter_1    Only expired : 0=No / 1=Yes
* @param parameter_2    Date expired : YYYYMMDD
* @param parameter_3    C_TYPE_CUMUL = INT : 0=No / 1=Yes
* @param parameter_4    C_TYPE_CUMUL = EXT : 0=No / 1=Yes
* @param parameter_5    C_TYPE_CUMUL = PRE : 0=No / 1=Yes
* @param parameter_6    C_TYPE_CUMUL = ENG : 0=No / 1=Yes
* @param parameter_11   Daybook : 0=No / 1=Yes
* @param parameter_8    Impression payment method : 0=No / 1=Yes
* @param parameter_9    Impression discount : 0=No / 1=Yes
* @param procparam_0    Account from        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_1    Account to        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2    Reference date
* @param procparam_3    Acs_sub_set_ID       ACS_SUB_SET_ID
* @param procparam_4    Divisions (# = All  / null = selection (COM_LIST))
* @param procparam_5    Collectiv_ID (List)  # = All or ID list
* @param procparam_6    Rate type      1 : Cours du jour (par défaut)
                                           2 : Cours d'évaluation
                                           3 : Cours d'inventaire
                                           4 : Cours de bouclement
                                           5 : Cours de facturation
* @param procparam_7    Currency_ID List)   '' = All or ID list   (ACS_FINANCIAL_CURRENCY_ID)
* @param procparam_8    ACS_PAYMENT_METHOD_ID (List)  ('#'= All or ID List)
* @param procparam_9    Job ID (COM_LIST)
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
  vdate       date;
begin
  if (procuser_lanid is not null) then
    PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
  end if;

  begin
    if procparam_2 is null then
      vdate  := trunc(sysdate);
    else
      vdate  := to_date(procparam_2, 'YYYYMMDD');
    end if;
  exception
    when others then
      vdate  := trunc(sysdate);
  end;

  if parameter_11 = '1' then
    act_functions.setbro(1);
  else
    act_functions.setbro(0);
  end if;

  delete from act_aged_balance_supp_temp;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if    (procparam_4 is null)
       or (procparam_4 <> '#') then
      insert into act_aged_balance_supp_temp
        (select par.par_document
              , par.acs_acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
              , par.acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_me
              , doc.doc_number
              , cat.c_type_catalogue
              , sub.c_type_cumul
              , exp.act_expiry_id
              , exp.act_document_id
              , exp.act_part_imputation_id
              , exp.c_status_expiry
              , case
                  when(procparam_7 = 1)
                  and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                  else exp.exp_adapted
                end exp_adapted
              , exp.exp_calculated
              , vdate - exp.exp_adapted days
              , exp.exp_amount_lc
              , exp.exp_amount_fc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
              , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
              , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
              , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                       , par.acs_financial_currency_id
                                                       , par.acs_acs_financial_currency_id
                                                       , vdate
                                                       , procparam_6
                                                        ) solde_reeval_lc
              , exp.exp_slice
              , exp.acs_fin_acc_s_payment_id
              , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
              , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
              , co2.pco_descr pco_descr_exp
              , imp.acs_period_id
              , imp.imf_transaction_date
              , imp.imf_value_date
              , imp.imf_description
              , imp.acs_financial_account_id
              , (select acf.acc_number
                   from acs_account acf
                  where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
              , (select de1.des_description_summary
                   from acs_description de1
                  where de1.acs_account_id = imp.acs_financial_account_id
                    and de1.pc_lang_id = vpc_lang_id) account_fin_descr
              , null jou_number
              , ' ' c_etat_journal
              , imp.imf_acs_division_account_id
              , (select acd.acc_number
                   from acs_account acd
                  where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
              , (select de2.des_description_summary
                   from acs_description de2
                  where de2.acs_account_id = imp.imf_acs_division_account_id
                    and de2.pc_lang_id = vpc_lang_id) account_div_descr
              , sup.pac_supplier_partner_id
              , sup.acs_auxiliary_account_id
              , sup.c_partner_category
              , co1.pco_descr pco_descr_sup
              , acc.acc_number acc_number_aux
              , (select de3.des_description_summary
                   from acs_description de3
                  where de3.acs_account_id = sup.acs_auxiliary_account_id
                    and de3.pc_lang_id = vpc_lang_id) account_aux_descr
              , (select de4.des_description_large
                   from acs_description de4
                  where de4.acs_account_id = sup.acs_auxiliary_account_id
                    and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
              , acc.acs_sub_set_id
              , (select de5.des_description_summary
                   from acs_description de5
                  where de5.acs_sub_set_id = acc.acs_sub_set_id
                    and de5.pc_lang_id = vpc_lang_id) sub_set_descr
              , aux.c_type_account
              , per.per_name
              , per.per_forename
              , per.per_short_name
              , per.per_activity
              , per.per_key1
              , (select adr.add_format
                   from pac_address adr
                  where adr.pac_person_id = sup.pac_supplier_partner_id
                    and adr.add_principal = '1') add_format
              , (select de6.des_description_summary
                   from acs_description de6
                  where de6.acs_payment_method_id = pfc.acs_payment_method_id
                    and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_supp
              , (select de7.des_description_summary
                   from acs_description de7
                  where de7.acs_payment_method_id = pfe.acs_payment_method_id
                    and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
           from acs_payment_method pae
              , acs_fin_acc_s_payment pfe
              , acs_payment_method pac
              , acs_fin_acc_s_payment pfc
              , pac_payment_condition co2
              , pac_payment_condition co1
              , pac_person per
              , acs_auxiliary_account aux
              , pac_supplier_partner sup
              , acs_financial_account fin
              , act_financial_imputation imp
              , act_expiry exp
              , acj_catalogue_document cat
              , act_document doc
              , act_part_imputation par
              , acs_account acc
              , (select c_type_cumul
                      , acj_catalogue_document_id
                   from acj_sub_set_cat
                  where c_sub_set = 'PAY') sub
              , (select LIS_ID_1
                   from COM_LIST
                  where LIS_JOB_ID = to_number(procparam_9)
                    and LIS_CODE = 'ACS_DIVISION_ACCOUNT_ID') LIS
          where par.act_document_id = doc.act_document_id
            and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
            and cat.c_type_catalogue <> '8'
            and   -- Transaction de relance
                par.act_part_imputation_id = exp.act_part_imputation_id
            and exp_calc_net + 0 = 1
            and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
            and exp.act_part_imputation_id = imp.act_part_imputation_id
            and imp.act_det_payment_id is null
            and imp.acs_auxiliary_account_id is not null
            and imp.acs_financial_account_id = fin.acs_financial_account_id
            and imp.imf_transaction_date <= vdate
            and fin.fin_collective = 1
            and acc.acc_number >= procparam_0
            and acc.acc_number <= procparam_1
            and (   acc.acs_sub_set_id = procparam_3
                 or procparam_3 is null)
            and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
            and IMP.IMF_ACS_DIVISION_ACCOUNT_ID = LIS.LIS_ID_1
            and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
                 or procparam_5 = '#')
            and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                 or procparam_8 = '#')
            and par.pac_supplier_partner_id = sup.pac_supplier_partner_id
            and sup.acs_auxiliary_account_id = acc.acs_account_id
            and sup.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
            and sup.pac_supplier_partner_id = per.pac_person_id
            and sup.pac_payment_condition_id = co1.pac_payment_condition_id
            and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
            and sup.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
            and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
            and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
            and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
            and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
            and
                --Ctrl_only)expired
                (   parameter_1 = '0'
                 or (    parameter_1 = '1'
                     and (case
                            when(procparam_7 = 1)
                            and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                            else exp.exp_adapted
                          end
                         ) <= to_date(parameter_2, 'YYYYMMDD')
                    )
                )
            and
                --Ctrl_c_type_cumul
                (    (    parameter_3 = '1'
                      and sub.c_type_cumul = 'INT')
                 or (    parameter_4 = '1'
                     and sub.c_type_cumul = 'EXT')
                 or (    parameter_5 = '1'
                     and sub.c_type_cumul = 'PRE')
                 or (    parameter_6 = '1'
                     and sub.c_type_cumul = 'ENG')
                )
            --Ctrl_c_etat_journal
            and (    (    exp.C_STATUS_EXPIRY <> 0
                      and exp.EXP_DATE_PMT_TOT >
                            (case (select nvl(max(1), 0)
                                     from ACT_ETAT_JOURNAL EJO
                                        , ACT_JOURNAL JOU
                                        , ACT_DET_PAYMENT DET
                                        , ACT_DOCUMENT DOC_PAY
                                    where exp.ACT_EXPIRY_ID = DET.ACT_EXPIRY_ID
                                      and DOC_PAY.ACT_DOCUMENT_ID = DET.ACT_DOCUMENT_ID
                                      and DOC_PAY.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                                      and DOC_PAY.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
                                      and EJO.C_SUB_SET = 'PAY'
                                      and EJO.C_ETAT_JOURNAL = 'BRO')
                               when 1 then decode(parameter_11, '1', vdate, exp.EXP_DATE_PMT_TOT - 1)
                               else vdate
                             end
                            )
                     )
                 or (exp.C_STATUS_EXPIRY = 0)
                ) );

      commit;
    else
      insert into act_aged_balance_supp_temp
        (select par.par_document
              , par.acs_acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
              , par.acs_financial_currency_id
              , (select cub.currency
                   from pcs.pc_curr cub
                      , acs_financial_currency cfb
                  where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                    and cub.pc_curr_id = cfb.pc_curr_id) currency_me
              , doc.doc_number
              , cat.c_type_catalogue
              , sub.c_type_cumul
              , exp.act_expiry_id
              , exp.act_document_id
              , exp.act_part_imputation_id
              , exp.c_status_expiry
              , case
                  when(procparam_7 = 1)
                  and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                  else exp.exp_adapted
                end exp_adapted
              , exp.exp_calculated
              , vdate - exp.exp_adapted days
              , exp.exp_amount_lc
              , exp.exp_amount_fc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
              , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
              , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
              , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
              , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
              , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                       , par.acs_financial_currency_id
                                                       , par.acs_acs_financial_currency_id
                                                       , vdate
                                                       , procparam_6
                                                        ) solde_reeval_lc
              , exp.exp_slice
              , exp.acs_fin_acc_s_payment_id
              , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
              , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
              , co2.pco_descr pco_descr_exp
              , imp.acs_period_id
              , imp.imf_transaction_date
              , imp.imf_value_date
              , imp.imf_description
              , imp.acs_financial_account_id
              , (select acf.acc_number
                   from acs_account acf
                  where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
              , (select de1.des_description_summary
                   from acs_description de1
                  where de1.acs_account_id = imp.acs_financial_account_id
                    and de1.pc_lang_id = vpc_lang_id) account_fin_descr
              , null jou_number
              , ' ' c_etat_journal
              , imp.imf_acs_division_account_id
              , (select acd.acc_number
                   from acs_account acd
                  where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
              , (select de2.des_description_summary
                   from acs_description de2
                  where de2.acs_account_id = imp.imf_acs_division_account_id
                    and de2.pc_lang_id = vpc_lang_id) account_div_descr
              , sup.pac_supplier_partner_id
              , sup.acs_auxiliary_account_id
              , sup.c_partner_category
              , co1.pco_descr pco_descr_sup
              , acc.acc_number acc_number_aux
              , (select de3.des_description_summary
                   from acs_description de3
                  where de3.acs_account_id = sup.acs_auxiliary_account_id
                    and de3.pc_lang_id = vpc_lang_id) account_aux_descr
              , (select de4.des_description_large
                   from acs_description de4
                  where de4.acs_account_id = sup.acs_auxiliary_account_id
                    and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
              , acc.acs_sub_set_id
              , (select de5.des_description_summary
                   from acs_description de5
                  where de5.acs_sub_set_id = acc.acs_sub_set_id
                    and de5.pc_lang_id = vpc_lang_id) sub_set_descr
              , aux.c_type_account
              , per.per_name
              , per.per_forename
              , per.per_short_name
              , per.per_activity
              , per.per_key1
              , (select adr.add_format
                   from pac_address adr
                  where adr.pac_person_id = sup.pac_supplier_partner_id
                    and adr.add_principal = '1') add_format
              , (select de6.des_description_summary
                   from acs_description de6
                  where de6.acs_payment_method_id = pfc.acs_payment_method_id
                    and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_supp
              , (select de7.des_description_summary
                   from acs_description de7
                  where de7.acs_payment_method_id = pfe.acs_payment_method_id
                    and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
           from acs_payment_method pae
              , acs_fin_acc_s_payment pfe
              , acs_payment_method pac
              , acs_fin_acc_s_payment pfc
              , pac_payment_condition co2
              , pac_payment_condition co1
              , pac_person per
              , acs_auxiliary_account aux
              , pac_supplier_partner sup
              , acs_financial_account fin
              , act_financial_imputation imp
              , act_expiry exp
              , acj_catalogue_document cat
              , act_document doc
              , act_part_imputation par
              , acs_account acc
              , (select c_type_cumul
                      , acj_catalogue_document_id
                   from acj_sub_set_cat
                  where c_sub_set = 'PAY') sub
          where par.act_document_id = doc.act_document_id
            and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
            and cat.c_type_catalogue <> '8'
            and   -- Transaction de relance
                par.act_part_imputation_id = exp.act_part_imputation_id
            and exp_calc_net + 0 = 1
            and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
            and exp.act_part_imputation_id = imp.act_part_imputation_id
            and imp.act_det_payment_id is null
            and imp.acs_auxiliary_account_id is not null
            and imp.acs_financial_account_id = fin.acs_financial_account_id
            and imp.imf_transaction_date <= vdate
            and fin.fin_collective = 1
            and acc.acc_number >= procparam_0
            and acc.acc_number <= procparam_1
            and (   acc.acs_sub_set_id = procparam_3
                 or procparam_3 is null)
            and IMP.IMF_ACS_DIVISION_ACCOUNT_ID is not null
            and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
                 or procparam_5 = '#')
            and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                 or procparam_8 = '#')
            and par.pac_supplier_partner_id = sup.pac_supplier_partner_id
            and sup.acs_auxiliary_account_id = acc.acs_account_id
            and sup.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
            and sup.pac_supplier_partner_id = per.pac_person_id
            and sup.pac_payment_condition_id = co1.pac_payment_condition_id
            and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
            and sup.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
            and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
            and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
            and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
            and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
            and
                --Ctrl_only)expired
                (   parameter_1 = '0'
                 or (    parameter_1 = '1'
                     and (case
                            when(procparam_7 = 1)
                            and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                            else exp.exp_adapted
                          end
                         ) <= to_date(parameter_2, 'YYYYMMDD')
                    )
                )
            and
                --Ctrl_c_type_cumul
                (    (    parameter_3 = '1'
                      and sub.c_type_cumul = 'INT')
                 or (    parameter_4 = '1'
                     and sub.c_type_cumul = 'EXT')
                 or (    parameter_5 = '1'
                     and sub.c_type_cumul = 'PRE')
                 or (    parameter_6 = '1'
                     and sub.c_type_cumul = 'ENG')
                )
            --Ctrl_c_etat_journal
            and (    (    exp.C_STATUS_EXPIRY <> 0
                      and exp.EXP_DATE_PMT_TOT >
                            (case (select nvl(max(1), 0)
                                     from ACT_ETAT_JOURNAL EJO
                                        , ACT_JOURNAL JOU
                                        , ACT_DET_PAYMENT DET
                                        , ACT_DOCUMENT DOC_PAY
                                    where exp.ACT_EXPIRY_ID = DET.ACT_EXPIRY_ID
                                      and DOC_PAY.ACT_DOCUMENT_ID = DET.ACT_DOCUMENT_ID
                                      and DOC_PAY.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                                      and DOC_PAY.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
                                      and EJO.C_SUB_SET = 'PAY'
                                      and EJO.C_ETAT_JOURNAL = 'BRO')
                               when 1 then decode(parameter_11, '1', vdate, exp.EXP_DATE_PMT_TOT - 1)
                               else vdate
                             end
                            )
                     )
                 or (exp.C_STATUS_EXPIRY = 0)
                ) );

      commit;
    end if;
  else   -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
    insert into act_aged_balance_supp_temp
      (select par.par_document
            , par.acs_acs_financial_currency_id
            , (select cub.currency
                 from pcs.pc_curr cub
                    , acs_financial_currency cfb
                where cfb.acs_financial_currency_id = par.acs_acs_financial_currency_id
                  and cub.pc_curr_id = cfb.pc_curr_id) currency_mb
            , par.acs_financial_currency_id
            , (select cub.currency
                 from pcs.pc_curr cub
                    , acs_financial_currency cfb
                where cfb.acs_financial_currency_id = par.acs_financial_currency_id
                  and cub.pc_curr_id = cfb.pc_curr_id) currency_me
            , doc.doc_number
            , cat.c_type_catalogue
            , sub.c_type_cumul
            , exp.act_expiry_id
            , exp.act_document_id
            , exp.act_part_imputation_id
            , exp.c_status_expiry
            , case
                when(procparam_7 = 1)
                and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , vdate
                                                                                                                                           )
                else exp.exp_adapted
              end exp_adapted
            , exp.exp_calculated
            , vdate - exp.exp_adapted days
            , exp.exp_amount_lc
            , exp.exp_amount_fc
            , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 1) discount_lc
            , act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, vdate, 0) discount_fc
            , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) det_paied_lc
            , act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) det_paied_fc
            , exp.exp_amount_lc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 1) solde_exp_lc
            , exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0) solde_exp_fc
            , act_currency_evaluation.getconvertamount(exp.exp_amount_fc - act_functions.totalpaymentat(exp.act_expiry_id, vdate, 0)
                                                     , par.acs_financial_currency_id
                                                     , par.acs_acs_financial_currency_id
                                                     , vdate
                                                     , procparam_6
                                                      ) solde_reeval_lc
            , exp.exp_slice
            , exp.acs_fin_acc_s_payment_id
            , act_functions.lastclaimsnumber(exp.act_expiry_id) last_claims_level
            , act_functions.lastclaimsdate(exp.act_expiry_id) last_claims_date
            , co2.pco_descr pco_descr_exp
            , imp.acs_period_id
            , imp.imf_transaction_date
            , imp.imf_value_date
            , imp.imf_description
            , imp.acs_financial_account_id
            , (select acf.acc_number
                 from acs_account acf
                where acf.acs_account_id = imp.acs_financial_account_id) acc_number_fin
            , (select de1.des_description_summary
                 from acs_description de1
                where de1.acs_account_id = imp.acs_financial_account_id
                  and de1.pc_lang_id = vpc_lang_id) account_fin_descr
            , null jou_number
            , ' ' c_etat_journal
            , imp.imf_acs_division_account_id
            , (select acd.acc_number
                 from acs_account acd
                where acd.acs_account_id = imp.imf_acs_division_account_id) acc_number_div
            , (select de2.des_description_summary
                 from acs_description de2
                where de2.acs_account_id = imp.imf_acs_division_account_id
                  and de2.pc_lang_id = vpc_lang_id) account_div_descr
            , sup.pac_supplier_partner_id
            , sup.acs_auxiliary_account_id
            , sup.c_partner_category
            , co1.pco_descr pco_descr_sup
            , acc.acc_number acc_number_aux
            , (select de3.des_description_summary
                 from acs_description de3
                where de3.acs_account_id = sup.acs_auxiliary_account_id
                  and de3.pc_lang_id = vpc_lang_id) account_aux_descr
            , (select de4.des_description_large
                 from acs_description de4
                where de4.acs_account_id = sup.acs_auxiliary_account_id
                  and de4.pc_lang_id = vpc_lang_id) account_aux_large_descr
            , acc.acs_sub_set_id
            , (select de5.des_description_summary
                 from acs_description de5
                where de5.acs_sub_set_id = acc.acs_sub_set_id
                  and de5.pc_lang_id = vpc_lang_id) sub_set_descr
            , aux.c_type_account
            , per.per_name
            , per.per_forename
            , per.per_short_name
            , per.per_activity
            , per.per_key1
            , (select adr.add_format
                 from pac_address adr
                where adr.pac_person_id = sup.pac_supplier_partner_id
                  and adr.add_principal = '1') add_format
            , (select de6.des_description_summary
                 from acs_description de6
                where de6.acs_payment_method_id = pfc.acs_payment_method_id
                  and de6.pc_lang_id = vpc_lang_id) acs_payment_method_descr_supp
            , (select de7.des_description_summary
                 from acs_description de7
                where de7.acs_payment_method_id = pfe.acs_payment_method_id
                  and de7.pc_lang_id = vpc_lang_id) acs_payment_method_descr_exp
         from acs_payment_method pae
            , acs_fin_acc_s_payment pfe
            , acs_payment_method pac
            , acs_fin_acc_s_payment pfc
            , pac_payment_condition co2
            , pac_payment_condition co1
            , pac_person per
            , acs_auxiliary_account aux
            , pac_supplier_partner sup
            , acs_financial_account fin
            , act_financial_imputation imp
            , act_expiry exp
            , acj_catalogue_document cat
            , act_document doc
            , act_part_imputation par
            , acs_account acc
            , (select c_type_cumul
                    , acj_catalogue_document_id
                 from acj_sub_set_cat
                where c_sub_set = 'PAY') sub
        where par.act_document_id = doc.act_document_id
          and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
          and cat.c_type_catalogue <> '8'
          and   -- Transaction de relance
              par.act_part_imputation_id = exp.act_part_imputation_id
          and exp_calc_net + 0 = 1
          and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.act_expiry_id, vdate) = 1
          and exp.act_part_imputation_id = imp.act_part_imputation_id
          and imp.act_det_payment_id is null
          and imp.acs_auxiliary_account_id is not null
          and imp.acs_financial_account_id = fin.acs_financial_account_id
          and imp.imf_transaction_date <= vdate
          and fin.fin_collective = 1
          and acc.acc_number >= procparam_0
          and acc.acc_number <= procparam_1
          and (   acc.acs_sub_set_id = procparam_3
               or procparam_3 is null)
          and (   instr(',' || procparam_5 || ',', to_char(',' || fin.acs_financial_account_id || ',') ) > 0
               or procparam_5 = '#')
          and (   instr(',' || procparam_8 || ',', to_char(',' || pae.ACS_PAYMENT_METHOD_ID || ',') ) > 0
               or procparam_8 = '#')
          and par.pac_supplier_partner_id = sup.pac_supplier_partner_id
          and sup.acs_auxiliary_account_id = acc.acs_account_id
          and sup.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
          and sup.pac_supplier_partner_id = per.pac_person_id
          and sup.pac_payment_condition_id = co1.pac_payment_condition_id
          and par.pac_payment_condition_id = co2.pac_payment_condition_id(+)
          and sup.acs_fin_acc_s_payment_id = pfc.acs_fin_acc_s_payment_id(+)
          and pfc.acs_payment_method_id = pac.acs_payment_method_id(+)
          and exp.acs_fin_acc_s_payment_id = pfe.acs_fin_acc_s_payment_id(+)
          and pfe.acs_payment_method_id = pae.acs_payment_method_id(+)
          and doc.acj_catalogue_document_id = sub.acj_catalogue_document_id(+)
          and
              --Ctrl_only)expired
              (   parameter_1 = '0'
               or (    parameter_1 = '1'
                   and (case
                          when(procparam_7 = 1)
                          and (act_functions.discountamountafter(exp.act_document_id, exp.exp_slice, sysdate, 1) <> 0) then act_functions.discountdateafter
                                                                                                                                           (exp.act_document_id
                                                                                                                                          , exp.exp_slice
                                                                                                                                          , sysdate
                                                                                                                                           )
                          else exp.exp_adapted
                        end
                       ) <= to_date(parameter_2, 'YYYYMMDD')
                  )
              )
          and
              --Ctrl_c_type_cumul
              (    (    parameter_3 = '1'
                    and sub.c_type_cumul = 'INT')
               or (    parameter_4 = '1'
                   and sub.c_type_cumul = 'EXT')
               or (    parameter_5 = '1'
                   and sub.c_type_cumul = 'PRE')
               or (    parameter_6 = '1'
                   and sub.c_type_cumul = 'ENG')
              )
          --Ctrl_c_etat_journal
          and (    (    exp.C_STATUS_EXPIRY <> 0
                    and exp.EXP_DATE_PMT_TOT >
                          (case (select nvl(max(1), 0)
                                   from ACT_ETAT_JOURNAL EJO
                                      , ACT_JOURNAL JOU
                                      , ACT_DET_PAYMENT DET
                                      , ACT_DOCUMENT DOC_PAY
                                  where exp.ACT_EXPIRY_ID = DET.ACT_EXPIRY_ID
                                    and DOC_PAY.ACT_DOCUMENT_ID = DET.ACT_DOCUMENT_ID
                                    and DOC_PAY.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                                    and DOC_PAY.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
                                    and EJO.C_SUB_SET = 'PAY'
                                    and EJO.C_ETAT_JOURNAL = 'BRO')
                             when 1 then decode(parameter_11, '1', vdate, exp.EXP_DATE_PMT_TOT - 1)
                             else vdate
                           end
                          )
                   )
               or (exp.C_STATUS_EXPIRY = 0)
              ) );

    commit;
  end if;

  open arefcursor for
    select par_document
         , acs_acs_financial_currency_id
         , currency_mb
         , acs_financial_currency_id
         , currency_me
         , doc_number
         , c_type_catalogue
         , c_type_cumul
         , act_expiry_id
         , act_document_id
         , act_part_imputation_id
         , c_status_expiry
         , exp_adapted
         , exp_calculated
         , days
         , exp_amount_lc
         , exp_amount_fc
         , discount_lc
         , discount_fc
         , det_paied_lc
         , det_paied_fc
         , solde_exp_lc
         , solde_exp_fc
         , solde_reeval_lc
         , exp_slice
         , acs_fin_acc_s_payment_id
         , last_claims_level
         , last_claims_date
         , pco_descr_exp
         , acs_period_id
         , imf_transaction_date
         , imf_value_date
         , imf_description
         , acs_financial_account_id
         , acc_number_fin
         , account_fin_descr
         , jou_number
         , c_etat_journal
         , imf_acs_division_account_id
         , acc_number_div
         , account_div_descr
         , pac_supplier_partner_id
         , acs_auxiliary_account_id
         , c_partner_category
         , pco_descr_sup
         , acc_number_aux
         , account_aux_descr
         , account_aux_large_descr
         , acs_sub_set_id
         , sub_set_descr
         , c_type_account
         , per_name
         , per_forename
         , per_short_name
         , per_activity
         , per_key1
         , add_format
         , acs_payment_method_descr_supp
         , acs_payment_method_descr_exp
      from act_aged_balance_supp_temp;
end RPT_ACT_AGED_BALANCE_SUPP;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_AGED_BALANCE_SUPP_SUB" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_1   in     varchar2
, PARAMETER_2   in     varchar2
, PARAMETER_3   in     varchar2
, PARAMETER_4   in     varchar2
, PARAMETER_5   in     varchar2
, PARAMETER_6   in     varchar2
, PARAMETER_11  in     varchar2
, PROCPARAM_0   in     varchar2
, PROCPARAM_1   in     varchar2
, PROCPARAM_2   in     varchar2
, PROCPARAM_3   in     varchar2
, PROCPARAM_4   in     varchar2
, PROCPARAM_5   in     varchar2
, PROCPARAM_6   in     number
, PROCPARAM_7   in     number
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)/**
* description used for report ACT_AGED_BALANCE_SUPP (Ech¡§|anciers fournisseurs)

* @author SDO 2003
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_0    Sort by : 0=Account number / 1=Short name / 2=Name
* @param PARAMETER_1    Only expired : 0=No / 1=Yes
* @param PARAMETER_2    Date expired : YYYYMMDD
* @param PARAMETER_3    C_TYPE_CUMUL = INT : 0=No / 1=Yes
* @param PARAMETER_4    C_TYPE_CUMUL = EXT : 0=No / 1=Yes
* @param PARAMETER_5    C_TYPE_CUMUL = PRE : 0=No / 1=Yes
* @param PARAMETER_6    C_TYPE_CUMUL = ENG : 0=No / 1=Yes
* @param PARAMETER_7    Only summary : 0=No / 1=Yes
* @param PARAMETER_8    Impression payment method : 0=No / 1=Yes
* @param PARAMETER_9    Impression discount : 0=No / 1=Yes
* @param PROCPARAM_0    Acs_sub_set_ID       ACS_SUB_SET_ID
* @param PROCPARAM_1    Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param PROCPARAM_2    Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param PROCPARAM_3    Date r¡§|f¡§|rence       Date pour le calcul des escomptes et des r¡§|¡§|valuations
* @param PROCPARAM_4    Division_ID (List)   '' = All sinon liste des ID
* @param PROCPARAM_5    Collectiv_ID (List)  '' = All sinon liste des ID
* @param PROCPARAM_6    Type de cours        1 : Cours du jour (par d¡§|faut)
                                            2 : Cours d'¡§|valuation
                                            3 : Cours d'inventaire
                                            4 : Cours de bouclement
                                            5 : Cours de facturation
* @param PROCPARAM_7    Currency_ID List)   '' = All sinon liste des ID   (ACS_FINANCIAL_CURRENCY_ID)
*/
is


begin

  open aRefCursor for
  SELECT
  PAR_DOCUMENT,
  ACS_ACS_FINANCIAL_CURRENCY_ID,
  CURRENCY_MB,
  ACS_FINANCIAL_CURRENCY_ID,
  CURRENCY_ME,
  DOC_NUMBER,
  C_TYPE_CATALOGUE,
  C_TYPE_CUMUL,
  ACT_EXPIRY_ID,
  ACT_DOCUMENT_ID,
  ACT_PART_IMPUTATION_ID,
  C_STATUS_EXPIRY,
  EXP_ADAPTED,
  EXP_CALCULATED,
  DAYS,
  EXP_AMOUNT_LC,
  EXP_AMOUNT_FC,
  DISCOUNT_LC,
  DISCOUNT_FC,
  DET_PAIED_LC,
  DET_PAIED_FC,
  SOLDE_EXP_LC,
  SOLDE_EXP_FC,
  SOLDE_REEVAL_LC,
  EXP_SLICE,
  ACS_FIN_ACC_S_PAYMENT_ID,
  LAST_CLAIMS_LEVEL,
  LAST_CLAIMS_DATE,
  PCO_DESCR_EXP,
  ACS_PERIOD_ID,
  IMF_TRANSACTION_DATE,
  IMF_VALUE_DATE,
  IMF_DESCRIPTION,
  ACS_FINANCIAL_ACCOUNT_ID,
  ACC_NUMBER_FIN,
  ACCOUNT_FIN_DESCR,
  JOU_NUMBER,
  C_ETAT_JOURNAL,
  IMF_ACS_DIVISION_ACCOUNT_ID,
  ACC_NUMBER_DIV,
  ACCOUNT_DIV_DESCR,
  PAC_SUPPLIER_PARTNER_ID,
  ACS_AUXILIARY_ACCOUNT_ID,
  C_PARTNER_CATEGORY,
  PCO_DESCR_SUP,
  ACC_NUMBER_AUX,
  ACCOUNT_AUX_DESCR,
  ACCOUNT_AUX_LARGE_DESCR,
  ACS_SUB_SET_ID,
  SUB_SET_DESCR,
  C_TYPE_ACCOUNT,
  PER_NAME,
  PER_FORENAME,
  PER_SHORT_NAME,
  PER_ACTIVITY,
  PER_KEY1,
  ADD_FORMAT,
  ACS_PAYMENT_METHOD_DESCR_SUPP,
  ACS_PAYMENT_METHOD_DESCR_EXP
  FROM
  ACT_AGED_BALANCE_SUPP_TEMP;




end RPT_ACT_AGED_BALANCE_SUPP_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_ARGMT_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0            in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is
/**
* description used for sub report of ACT_ARRANGEMENT

* @author JLI  16 Sep 2009
* modified PNA 22.02.2010
* Published VHA 07 Sept 2011
* public
* @param PARAMETER_0   ACT_EXPIRY_ID
*/


VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;


open aRefCursor for
SELECT  ACC.ACC_NUMBER,
        MET.PME_SBVR,
        EXY.EXP_CALC_NET,
        EXY.EXP_BVR_CODE,
        EXY.EXP_REF_BVR,
        EXY.EXP_AMOUNT_LC,
        PLT.DPO_DESCR,
        ADR.ADD_ADDRESS1,
        ADR.ADD_FORMAT,
        PER.PER_NAME,
        PER.PER_FORENAME,
        PER.PER_ACTIVITY,
        BAK.BAN_NAME1,
        BAK.BAN_ZIP,
        BAK.BAN_CITY
FROM    ACS_FIN_ACC_S_PAYMENT SPA,
        ACS_ACCOUNT ACC,
        ACS_FINANCIAL_ACCOUNT FCC,
        ACS_PAYMENT_METHOD MET,
        ACT_DOCUMENT ATD,
        ACT_EXPIRY EXY,
        ACT_PART_IMPUTATION PAR,
        DIC_PERSON_POLITNESS PLT,
        PAC_ADDRESS ADR,
        PAC_CUSTOM_PARTNER CUS,
        PAC_PERSON PER,
        PCS.PC_BANK BAK
WHERE   EXY.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
  AND   EXY.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
  AND   PAR.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
  AND   CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
  AND   PER.PAC_PERSON_ID = ADR.PAC_PERSON_ID
  AND   PER.DIC_PERSON_POLITNESS_ID = PLT.DIC_PERSON_POLITNESS_ID(+)
  AND   CUS.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
  AND   EXY.ACS_FIN_ACC_S_PAYMENT_ID = SPA.ACS_FIN_ACC_S_PAYMENT_ID(+)
  AND   SPA.ACS_PAYMENT_METHOD_ID = MET.ACS_PAYMENT_METHOD_ID(+)
  AND   SPA.ACS_FINANCIAL_ACCOUNT_ID = FCC.ACS_FINANCIAL_ACCOUNT_ID(+)
  AND   FCC.PC_BANK_ID = BAK.PC_BANK_ID(+)
  AND   EXY.EXP_CALC_NET = 1
  AND   ADR.ADD_PRINCIPAL=1
  AND   EXY.ACT_EXPIRY_ID = PARAMETER_0;
END RPT_ACT_ARGMT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_ARGMT_SUB_0" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0            in     varchar2
)
is
/**
* description used for  sub report of ACT_ARRANGEMENT

* @author JLI  16 Sep 2009
* Published VHA 07 Sept 2011
* public
* @param PARAMETER_0   ACT_DOCUMENT_ID
*/


VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN


open aRefCursor for
SELECT  EXY.ACT_DOCUMENT_ID,
        EXY.EXP_ADAPTED,
        EXY.EXP_AMOUNT_LC,
        EXY.EXP_SLICE,
        CUR.CURRENCY
FROM    ACS_FINANCIAL_CURRENCY FUR,
        ACT_EXPIRY EXY,
        ACT_PART_IMPUTATION IMP,
        PCS.PC_CURR CUR
WHERE   EXY.ACT_DOCUMENT_ID = PARAMETER_0
  AND   EXY.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
  AND   IMP.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
  AND   FUR.PC_CURR_ID = CUR.PC_CURR_ID;
END RPT_ACT_ARGMT_SUB_0;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_ARRANGEMENT" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, Proccompany_owner      in     pcs.pc_scrip.scrdbowner%TYPE
, PARAMETER_0            in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is
/**
* description used for report ACT_ARRANGEMENT

* @author JLI  16 Sept 2009
* Modified VHA 26 JUNE 2013
* public
* @param PARAMETER_0   ACT_DOCUMENT_ID
*/


VPC_LANG_ID pcs.pc_lang.pc_lang_id%type := null;
v_com_logo_large pcs.pc_comp.com_logo_large%type := null;

BEGIN
if procuser_lanid is not null then
    pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
    VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;
end if;

if proccompany_owner is not null then
    SELECT com.com_logo_large
      INTO v_com_logo_large
      FROM pcs.pc_comp com, pcs.pc_scrip scr
      WHERE scr.pc_scrip_id = com.pc_scrip_id
      AND scr.scrdbowner = proccompany_owner;
end if;

open aRefCursor for
SELECT  v_com_logo_large com_logo_large,
        ATD.ACT_DOCUMENT_ID,
        ATD.DOC_NUMBER,
        ATD.DOC_TOTAL_AMOUNT_DC,
        ATD.DOC_DOCUMENT_DATE,
        EXY.ACT_EXPIRY_ID,
        EXY.EXP_ADAPTED,
        EXY.EXP_AMOUNT_LC,
        EXY.EXP_SLICE,
        PLT.DPO_DESCR,
        ADR.ADD_ADDRESS1,
        ADR.PC_LANG_ID,
        ADR.ADD_FORMAT,
        ADR.ADD_PRINCIPAL,
        PER.PER_NAME,
        PER.PER_FORENAME,
        PER.PER_ACTIVITY,
        CUR.CURRENCY,
        PER.DIC_PERSON_POLITNESS_ID,
        ADR.ADD_ZIPCODE,
        ADR.ADD_CITY
FROM    ACS_FIN_ACC_S_PAYMENT SPA,
        ACS_FINANCIAL_CURRENCY FUR,
        ACS_PAYMENT_METHOD MET,
        ACT_DOCUMENT ATD,
        ACT_EXPIRY EXY,
        ACT_PART_IMPUTATION PAR,
        DIC_PERSON_POLITNESS PLT,
        PAC_ADDRESS ADR,
        PAC_CUSTOM_PARTNER CUS,
        PAC_PERSON PER,
        PCS.PC_CURR CUR
WHERE   (PARAMETER_0 IS NULL OR ATD.ACT_DOCUMENT_ID = PARAMETER_0)
  AND   ATD.ACT_DOCUMENT_ID = EXY.ACT_DOCUMENT_ID
  AND   EXY.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
  AND   PAR.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
  AND   CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
  AND   PER.PAC_PERSON_ID = ADR.PAC_PERSON_ID(+)
  AND   PER.DIC_PERSON_POLITNESS_ID = PLT.DIC_PERSON_POLITNESS_ID(+)
  AND   PAR.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
  AND   FUR.PC_CURR_ID = CUR.PC_CURR_ID
  AND   EXY.ACS_FIN_ACC_S_PAYMENT_ID = SPA.ACS_FIN_ACC_S_PAYMENT_ID
  AND   SPA.ACS_PAYMENT_METHOD_ID = MET.ACS_PAYMENT_METHOD_ID
  AND   ADR.ADD_PRINCIPAL = 1;
END RPT_ACT_ARRANGEMENT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_CUSTOMER_EXTRACT2" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS

/**
* description used for report  ACT_CUSTOMER_EXTRACT2  (SI - rupture par no abonnement)

* @author PNA
* @lastupdate 12 Feb 2009
* @Update 4 feb 2010
* @public
* @param PROCPARAM_0    customer id         ACC_NUMBER (AUXILIARY_ACCOUNT)

*/
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);

   OPEN arefcursor FOR
      SELECT 1 union_number, det.act_det_payment_id det_det_id1,
             imf.act_det_payment_id imf_det_id1,
             imf.act_financial_imputation_id id1,
             imf2.act_financial_imputation_id id2, NULL id3,
             det2.act_det_payment_id det_payment_id2,
             acc.acc_number acc_number, pac.per_name per_name,
             pac.pac_person_id pac_person_id,
             DECODE
                 (SUBSTR (imp.par_document, -2),
                  '-X', (SELECT MAX (exp0.act_expiry_id)
                           FROM act_expiry exp0, act_part_imputation imp0
                          WHERE exp0.act_part_imputation_id =
                                                   imp0.act_part_imputation_id
                            AND imp0.par_document =
                                   SUBSTR (imp.par_document,
                                           0,
                                           LENGTH (imp.par_document) - 2
                                          )),
                  EXP.act_expiry_id
                 ) act_expiry_id_0,
             EXP.act_expiry_id act_expiry_id,
             det.act_part_imputation_id act_part_imputation_id,
             imp.act_part_imputation_id act_part_imputation_id_2,
             doc.doc_number doc_number, det.det_paied_lc det_paied_lc,
             imf.imf_amount_lc_d imf_amount_lc_d,
             imf.imf_amount_lc_c imf_amount_lc_c, det.det_diff_exchange,
             imf2.act_document_id act_document_id_2,
             doc2.doc_number doc_number_2, EXP.exp_amount_lc exp_amount_lc,
             imf2.imf_amount_lc_d imf_amount_lc_d_2,
             imf2.imf_amount_lc_c imf_amount_lc_c_2,
             det2.det_diff_exchange det_diff_exchange_2_invoice,
             imf2.imf_amount_lc_d - imf2.imf_amount_lc_c text_value,
             NULL doc_number_3, NULL imf_amount_lc_d_3,
             NULL imf_amount_lc_c_3, NULL imf_transation_date_3,
             NULL imf_description_3, curr3.currency currency_3,
             imf2.imf_transaction_date imf_transaction_date_2,
             imf2.imf_description imf_description_2,
             curr2.currency currency_2,
             imf.imf_transaction_date imf_transaction_date,
             imf.imf_description imf_description,
             acj.c_type_catalogue c_type_catalogue,
             acj.cat_description cat_description, curr.currency currency,
             adr.pc_lang_id, EXP.exp_adapted,
             (SELECT MAX (REM.rem_number)
                FROM act_reminder REM
               WHERE EXP.act_expiry_id = REM.act_expiry_id
                 AND REM.rem_number <> 0) rem_number,
             imp.par_blocked_document,
             imf.act_det_payment_id act_det_payment_id_1, pac.per_forename,
             pac.per_activity, pol.dpo_descr,
             imf2.imf_number2 imf_number2, adr.add_address1 add_address1,
             CASE
                WHEN adr.add_zipcode IS NULL
                   THEN adr.add_city
                ELSE adr.add_zipcode || ' ' || adr.add_city
             END add_zipcode_city,
             adr.add_city add_city,
             CASE
                WHEN country.pc_cntry_id = 1
                   THEN ' '
                ELSE UPPER (country.cntname)
             END cntname,
             imf.act_document_id act_document_id,
             jou.c_sub_set c_sub_set, acf.fin_collective fin_collective,
             imp.par_document par_document
        FROM act_det_payment det,
             act_det_payment det2,
             act_expiry EXP,
             act_part_imputation imp,
             act_financial_imputation imf,
             acj_catalogue_document acj,
             acs_financial_currency fcurr,
             pcs.pc_curr curr,
             act_document doc,
             act_financial_imputation imf2,
             acs_financial_currency fcurr2,
             acs_financial_currency fcurr3,
             pcs.pc_curr curr2,
             pcs.pc_curr curr3,
             acs_financial_account acf,
             act_document doc2,
             act_etat_journal jou,
             acs_account acc,
             pac_custom_partner par,
             pac_person pac,
             pac_address adr,
             dic_person_politness pol,
             pcs.pc_cntry country
       WHERE det.act_det_payment_id = imf.act_det_payment_id
         AND imf2.act_det_payment_id = det2.act_det_payment_id(+)
         AND (   det.det_paied_lc + det.det_discount_lc + det.DET_CHARGES_LC + det.DET_DEDUCTION_LC = imf.imf_amount_lc_c
              OR - (det.det_paied_lc + det.det_discount_lc + det.DET_CHARGES_LC + det.DET_DEDUCTION_LC) =
                                                           imf.imf_amount_lc_d
             )
         AND imf.act_document_id = doc.act_document_id
         AND doc.acj_catalogue_document_id = acj.acj_catalogue_document_id
         AND fcurr.fin_local_currency = '1'
         AND fcurr.pc_curr_id = curr.pc_curr_id(+)
         AND det.act_expiry_id(+) = EXP.act_expiry_id
         AND EXP.act_part_imputation_id = imp.act_part_imputation_id
         AND imp.act_part_imputation_id = imf2.act_part_imputation_id
         AND fcurr2.fin_local_currency = '1'
         AND fcurr2.pc_curr_id = curr2.pc_curr_id(+)
         AND fcurr3.fin_local_currency = '1'
         AND fcurr3.pc_curr_id = curr3.pc_curr_id(+)
         AND acf.fin_collective = 1
         AND imf2.acs_financial_account_id = acf.acs_financial_account_id
         AND doc2.act_document_id = imf2.act_document_id
         AND doc2.act_journal_id = jou.act_journal_id
         AND jou.c_sub_set = 'REC'
         AND imp.pac_custom_partner_id = pac.pac_person_id
         AND par.pac_custom_partner_id = pac.pac_person_id
         AND par.acs_auxiliary_account_id = acc.acs_account_id
         AND pac.pac_person_id = adr.pac_person_id
         AND adr.add_principal = 1
         AND det.det_diff_exchange = 0
         AND det2.act_det_payment_id IS NULL
         AND det.act_det_payment_id IS NOT NULL
         AND pac.pac_person_id = parameter_0
         and adr.pc_cntry_id = country.pc_cntry_id
         AND pac.dic_person_politness_id = pol.dic_person_politness_id(+)
      UNION
      SELECT 2 union_number, NULL det_det_id1, NULL imf_det_id1, NULL id1,
             imf2.act_financial_imputation_id id2, NULL id3,
             det2.act_det_payment_id det_payment_id2,
             acc.acc_number acc_number, pac.per_name per_name,
             pac.pac_person_id pac_person_id,
             DECODE
                (SUBSTR (imp2.par_document, -2),
                 '-X', (SELECT MAX (exp0.act_expiry_id)
                          FROM act_expiry exp0, act_part_imputation imp0
                         WHERE exp0.act_part_imputation_id =
                                                   imp0.act_part_imputation_id
                           AND imp0.par_document =
                                  SUBSTR (imp2.par_document,
                                          0,
                                          LENGTH (imp2.par_document) - 2
                                         )),
                 EXP.act_expiry_id
                ) act_expiry_id_0,
             EXP.act_expiry_id act_expiry_id,
             det.act_part_imputation_id act_part_imputation_id,
             imf2.act_document_id act_document_id_2, NULL doc_number,
             det.det_paied_lc det_paied_lc, NULL imf_amount_lc_d,
             NULL imf_amount_lc_c, det.det_diff_exchange,
             NULL act_part_imputation_id_2, doc2.doc_number doc_number_2,

             EXP.exp_amount_lc exp_amount_lc,
             imf2.imf_amount_lc_d imf_amount_lc_d_2,
             imf2.imf_amount_lc_c imf_amount_lc_c_2,
             NULL det_diff_exchange_2_invoice,
             imf2.imf_amount_lc_d - imf2.imf_amount_lc_c text_value,
             NULL doc_number_3, NULL imf_amount_lc_d_3,
             NULL imf_amount_lc_c_3, NULL imf_transation_date_3,
             NULL imf_description_3, curr3.currency currency_3,
             imf2.imf_transaction_date imf_transaction_date_2,
             imf2.imf_description imf_description_2,
             curr2.currency currency_2, NULL imf_transaction_date,
             NULL imf_description, NULL c_type_catalogue,
             NULL cat_description, NULL currency, adr.pc_lang_id,
             EXP.exp_adapted,
             (SELECT MAX (REM.rem_number)
                FROM act_reminder REM
               WHERE EXP.act_expiry_id = REM.act_expiry_id
                 AND REM.rem_number <> 0) rem_number,
             imp2.par_blocked_document, NULL act_det_payment_id_1,
             pac.per_forename,
             pac.per_activity, pol.dpo_descr,
             imf2.imf_number2 imf_number2,
             adr.add_address1 add_address1,
             CASE
                WHEN adr.add_zipcode IS NULL
                   THEN adr.add_city
                ELSE adr.add_zipcode || ' ' || adr.add_city
             END add_zipcode_city,
             adr.add_city add_city,
             CASE
                WHEN country.pc_cntry_id = 1
                   THEN ' '
                ELSE UPPER (country.cntname)
             END cntname,
             NULL act_document_id,
             jou.c_sub_set c_sub_set, acf.fin_collective fin_collective,
             imp2.par_document par_document
        FROM act_det_payment det,
             act_det_payment det2,
             act_expiry EXP,
             act_part_imputation imp2,
             act_financial_imputation imf2,
             acs_financial_currency fcurr2,
             pcs.pc_curr curr2,
             acs_financial_currency fcurr3,
             pcs.pc_curr curr3,
             acs_financial_account acf,
             act_document doc2,
             act_etat_journal jou,
             acs_account acc,
             pac_custom_partner par,
             pac_person pac,
             pac_address adr,
             dic_person_politness pol,
             pcs.pc_cntry country
       WHERE det.act_expiry_id(+) = EXP.act_expiry_id
         AND imf2.act_det_payment_id = det2.act_det_payment_id(+)
         AND EXP.act_part_imputation_id = imp2.act_part_imputation_id
         AND imp2.act_part_imputation_id = imf2.act_part_imputation_id
         AND fcurr2.fin_local_currency = '1'
         AND fcurr2.pc_curr_id = curr2.pc_curr_id(+)
         AND fcurr3.fin_local_currency = '1'
         AND fcurr3.pc_curr_id = curr3.pc_curr_id(+)
         AND acf.fin_collective = 1
         AND imf2.acs_financial_account_id = acf.acs_financial_account_id
         AND doc2.act_document_id = imf2.act_document_id
         AND doc2.act_journal_id = jou.act_journal_id
         AND jou.c_sub_set = 'REC'
         AND imp2.pac_custom_partner_id = pac.pac_person_id
         AND par.pac_custom_partner_id = pac.pac_person_id
         AND par.acs_auxiliary_account_id = acc.acs_account_id
         AND pac.pac_person_id = adr.pac_person_id
         AND adr.add_principal = 1
         AND NVL (det.det_paied_lc, 0) = 0
         AND EXP.exp_discount_lc = 0
         AND (det2.act_det_payment_id IS NULL)
         AND pac.pac_person_id = parameter_0
         and adr.pc_cntry_id = country.pc_cntry_id
         AND pac.dic_person_politness_id = pol.dic_person_politness_id(+)
      UNION
      SELECT 3 union_number, det.act_det_payment_id det_det_id1,
             imf.act_det_payment_id imf_det_id1,
             imf.act_financial_imputation_id id1,
             imf2.act_financial_imputation_id id2,
             imf3.act_financial_imputation_id id3,
             det2.act_det_payment_id det_payment_id2,
             acc.acc_number acc_number, pac.per_name per_name,
             pac.pac_person_id pac_person_id,
             DECODE
                 (SUBSTR (imp.par_document, -2),
                  '-X', (SELECT MAX (exp0.act_expiry_id)
                           FROM act_expiry exp0, act_part_imputation imp0
                          WHERE exp0.act_part_imputation_id =
                                                   imp0.act_part_imputation_id
                            AND imp0.par_document =
                                   SUBSTR (imp.par_document,
                                           0,
                                           LENGTH (imp.par_document) - 2
                                          )),
                  EXP.act_expiry_id
                 ) act_expiry_id_0,
             EXP.act_expiry_id act_expiry_id,
             det.act_part_imputation_id act_part_imputation_id,
             imp.act_part_imputation_id act_part_imputation_id_2,
             doc.doc_number doc_number, det.det_paied_lc det_paied_lc,
             imf.imf_amount_lc_d imf_amount_lc_d,
             imf.imf_amount_lc_c imf_amount_lc_c, det.det_diff_exchange,
             imf2.act_document_id act_document_id_2,
             doc2.doc_number doc_number_2, EXP.exp_amount_lc exp_amount_lc,
             imf2.imf_amount_lc_d imf_amount_lc_d_2,
             imf2.imf_amount_lc_c imf_amount_lc_c_2,
             NULL det_diff_exchange_2_invoice,
             imf2.imf_amount_lc_d - imf2.imf_amount_lc_c text_value,
             doc2.doc_number doc_number_3,
             imf3.imf_amount_lc_d imf_amount_lc_d_3,
             imf3.imf_amount_lc_c imf_amount_lc_c_3,
             imf3.imf_transaction_date imf_transation_date_3,
             imf3.imf_description imf_description_3,
             curr3.currency currency_3,
             imf2.imf_transaction_date imf_transaction_date_2,
             imf2.imf_description imf_description_2,
             curr2.currency currency_2,
             imf.imf_transaction_date imf_transaction_date,
             imf.imf_description imf_description,
             acj.c_type_catalogue c_type_catalogue,
             acj.cat_description cat_description, curr.currency currency,
             adr.pc_lang_id, EXP.exp_adapted,
             (SELECT MAX (REM.rem_number)
                FROM act_reminder REM
               WHERE EXP.act_expiry_id = REM.act_expiry_id
                 AND REM.rem_number <> 0) rem_number,
             imp.par_blocked_document,
             imf.act_det_payment_id act_det_payment_id_1, pac.per_forename,
             pac.per_activity, pol.dpo_descr,
             imf2.imf_number2 imf_number2, adr.add_address1 add_address1,
             CASE
                WHEN adr.add_zipcode IS NULL
                   THEN adr.add_city
                ELSE adr.add_zipcode || ' ' || adr.add_city
             END add_zipcode_city,
             adr.add_city add_city,
             CASE
                WHEN country.pc_cntry_id = 1
                   THEN ' '
                ELSE UPPER (country.cntname)
             END cntname,
             imf.act_document_id act_document_id,
             jou.c_sub_set c_sub_set, acf.fin_collective fin_collective,
             imp.par_document par_document
        FROM act_det_payment det,
             act_det_payment det2,
             act_expiry EXP,
             act_part_imputation imp,
             act_financial_imputation imf,
             acj_catalogue_document acj,
             act_financial_imputation imf3,
             act_document doc3,
             acs_financial_currency fcurr,
             pcs.pc_curr curr,
             act_document doc,
             act_financial_imputation imf2,
             acs_financial_currency fcurr2,
             pcs.pc_curr curr2,
             acs_financial_currency fcurr3,
             pcs.pc_curr curr3,
             acs_financial_account acf,
             act_document doc2,
             act_etat_journal jou,
             acs_account acc,
             pac_custom_partner par,
             pac_person pac,
             pac_address adr,
             dic_person_politness pol,
             pcs.pc_cntry country
       WHERE det.act_det_payment_id = imf.act_det_payment_id
         AND imf2.act_det_payment_id = det2.act_det_payment_id(+)
         AND (   det.det_paied_lc + det.det_discount_lc = imf.imf_amount_lc_c
              OR - (det.det_paied_lc + det.det_discount_lc) =
                                                           imf.imf_amount_lc_d
             )
         AND imf.act_document_id = doc.act_document_id
         AND doc.acj_catalogue_document_id = acj.acj_catalogue_document_id
         AND fcurr.fin_local_currency = '1'
         AND fcurr.pc_curr_id = curr.pc_curr_id(+)
         AND det.act_expiry_id(+) = EXP.act_expiry_id
         AND det2.act_det_payment_id IS NULL
         AND EXP.act_part_imputation_id = imp.act_part_imputation_id
         AND imp.act_part_imputation_id = imf2.act_part_imputation_id
         AND fcurr2.fin_local_currency = '1'
         AND fcurr2.pc_curr_id = curr2.pc_curr_id(+)
         AND fcurr3.fin_local_currency = '1'
         AND fcurr3.pc_curr_id = curr3.pc_curr_id(+)
         AND acf.fin_collective = 1
         AND imf2.acs_financial_account_id = acf.acs_financial_account_id
         AND doc2.act_document_id = imf2.act_document_id
         AND doc2.act_journal_id = jou.act_journal_id
         AND jou.c_sub_set = 'REC'
         AND imp.pac_custom_partner_id = pac.pac_person_id
         AND par.pac_custom_partner_id = pac.pac_person_id
         AND par.acs_auxiliary_account_id = acc.acs_account_id
         AND pac.pac_person_id = adr.pac_person_id
         AND adr.add_principal = 1
         AND imf3.acs_financial_account_id = imf.acs_financial_account_id
         AND imf.act_det_payment_id = imf3.act_det_payment_id
         AND imf3.c_genre_transaction = 4
         AND imf3.act_document_id = doc3.act_document_id
         AND det.act_det_payment_id IS NOT NULL
         AND pac.pac_person_id = parameter_0
         and adr.pc_cntry_id = country.pc_cntry_id
         AND pac.dic_person_politness_id = pol.dic_person_politness_id(+);

END rpt_act_customer_extract2;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_CUSTOMER_EXTRACT3" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
* description used for report  ACT_CUSTOMER_EXTRACT3  (SI - rupture par no abonnement)

* @author PYB
* @lastupdate 16 jun 2010
* @Update
* @public
* @param PROCPARAM_0    customer id         ACC_NUMBER (AUXILIARY_ACCOUNT_ID)

*/

 vcurrency     PCS.PC_CURR.CURRENCY%Type;

BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);

   select currency into vcurrency
   from pcs.pc_curr cur, acs_financial_currency acr
   where acr.fin_local_currency = '1'
   AND acr.pc_curr_id = cur.pc_curr_id;

   DELETE FROM com_list_id_temp
         WHERE lid_code = 'ACS_FINANCIAL_YEAR_ID';

   DELETE FROM com_list_id_temp
         WHERE lid_code = 'MAIN_ID';

   INSERT INTO com_list_id_temp
               (com_list_id_temp_id, lid_free_number_1, lid_code
               )
        VALUES (init_id_seq.NEXTVAL, parameter_0, 'MAIN_ID'
               );

   INSERT INTO com_list_id_temp
               (com_list_id_temp_id, lid_code, lid_free_number_2)
      SELECT init_id_seq.NEXTVAL, 'ACS_FINANCIAL_YEAR_ID',
             acs_financial_year_id
        FROM acs_financial_year;

   OPEN arefcursor FOR
      SELECT
             ( select nvl(com_city,'') from pcs.pc_comp where pc_comp_id = pcs.PC_public.GetCompanyId ) com_city,
             isa.*, per.per_forename, per.per_name, adr.add_address1,
             POL.DPO_DESCR,
             adr.add_format, acc.acc_number,
             vcurrency currency
        FROM v_acr_rec_imputation_isag isa,
             act_part_imputation imp,
             pac_person per,
             dic_person_politness pol,
             pac_address adr,
             acs_account acc
       WHERE isa.act_part_imputation_id = imp.act_part_imputation_id
         AND imp.pac_custom_partner_id = per.pac_person_id
         AND isa.acs_auxiliary_account_id = acc.acs_account_id
         AND per.pac_person_id = adr.pac_person_id(+)
         AND adr.add_principal(+) = 1
         AND per.dic_person_politness_id = pol.dic_person_politness_id(+)
         AND c_type_catalogue <> '7';
END rpt_act_customer_extract3;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_CUSTOMER_EXTRACT3_OE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2
)
IS

/**
* description used for report  ACT_CUSTOMER_EXTRACT3  (SI - rupture par no abonnement)

* @author PYB
* @lastupdate 11 jun 2010
* @Update
* @public
* @param PROCPARAM_0    customer id         ACC_NUMBER (AUXILIARY_ACCOUNT_ID)
* @param PROCPARAM_1                        DATE for the open entries
*/

 v_date   varchar2 (20);

BEGIN

   v_date := substr(parameter_1,7,4) || substr(parameter_1,4,2)  || substr(parameter_1,1,2);

   DELETE FROM COM_LIST_ID_TEMP  WHERE LID_CODE = 'MAIN_ID';

   INSERT INTO COM_LIST_ID_TEMP  (COM_LIST_ID_TEMP_ID, LID_FREE_NUMBER_1, LID_CODE)
   VALUES (INIT_ID_SEQ.NEXTVAL, parameter_0, 'MAIN_ID');


   ACT_FUNCTIONS.SETANALYSE_PARAMETERS   (v_date, '', '', 1);

   OPEN arefcursor FOR
   select *
   from  V_ACR_EXPIRY_CUST_ISAG;




END rpt_act_customer_extract3_oe;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_CUSTOMER_EXTRACT3_SOL" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       NUMBER,
   parameter_2      IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS

/**
* description used for report  ACT_CUSTOMER_EXTRACT3  (SI - rupture par no abonnement)

* @author PYB
* @lastupdate 24 jun 2010
* @Update
* @public
* @param PROCPARAM_0    customer id         ACC_NUMBER (AUXILIARY_ACCOUNT_ID)
* @param PROCPARAM_1                        DATE (20060101)
* @param PROCPARAM_2    Imf_number2         NO ABONNEMENT


*/
BEGIN

   DELETE FROM COM_LIST_ID_TEMP  WHERE LID_CODE = 'ACS_FINANCIAL_YEAR_ID';

   DELETE FROM COM_LIST_ID_TEMP  WHERE LID_CODE = 'MAIN_ID';

   INSERT INTO COM_LIST_ID_TEMP  (COM_LIST_ID_TEMP_ID, LID_FREE_NUMBER_1, LID_CODE)
   VALUES (INIT_ID_SEQ.NEXTVAL, parameter_0, 'MAIN_ID');

   INSERT INTO COM_LIST_ID_TEMP  (COM_LIST_ID_TEMP_ID, LID_CODE, LID_FREE_NUMBER_2)
   SELECT INIT_ID_SEQ.NEXTVAL, 'ACS_FINANCIAL_YEAR_ID', ACS_FINANCIAL_YEAR_ID FROM ACS_FINANCIAL_YEAR;


   OPEN arefcursor FOR
   select imf_amount_lc_d, imf_amount_lc_c, IMF_NUMBER2
   from  V_ACR_REC_IMPUTATION_ISAG
   WHERE c_type_catalogue <> '7' and
       (IMF_NUMBER2 = parameter_2 or (imf_number2 is null and parameter_2 = 0))
   AND TO_NUMBER(TO_cHAR(IMF_TRANSACTION_DATE,'YYYYMMDD')) < PARAMETER_1;

END rpt_act_customer_extract3_sol;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DET_PAYMENT_LET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0 in     NUMBER
)
is
/**
* description used for report ACR_REC_IMPUTATION_DET and ACR_PAY_IMPUTATION_DET.

* @author jliu 19 Dec.2007
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_0    ACT_PART_IMPUTATION_ID
*/

BEGIN
open aRefCursor for
SELECT
FIN.PC_CURR_ID,
IMP.IMF_TYPE,
IMP.IMF_AMOUNT_LC_D,
IMP.IMF_AMOUNT_LC_C,
IMP.IMF_AMOUNT_FC_D,
IMP.IMF_AMOUNT_FC_C,
IMP.ACT_DET_PAYMENT_ID,
IMP.ACS_FINANCIAL_CURRENCY_ID,
IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
IMP.C_GENRE_TRANSACTION,
IMP.ACT_PART_IMPUTATION_ID
FROM
    ACS_FINANCIAL_CURRENCY     FIN,
    ACT_FINANCIAL_IMPUTATION   IMP
WHERE
IMP.C_GENRE_TRANSACTION = '1'
AND (IMP.ACT_DET_PAYMENT_ID IS NULL)
AND IMP.IMF_TYPE <> 'VAT'
AND IMP.ACT_PART_IMPUTATION_ID = PARAMETER_0
AND IMP.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
;
END RPT_ACT_DET_PAYMENT_LET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DET_PAYMENT_SUB" (
  aRefCursor    in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
  PARAMETER_0   in     varchar2
)
is
/**
* description used for report ACR_REC_IMPUTATION_DET and ACR_PAY_IMPUTATION_DET.

* @author jliu 19 Dec.2007
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_0    ACT_PART_IMPUTATION_ID
*/

BEGIN
open aRefCursor for
SELECT
FIN.PC_CURR_ID,
FIN.FIN_LOCAL_CURRENCY,
PAY.ACT_PART_IMPUTATION_ID,
PAY.DET_PAIED_LC,
PAY.DET_PAIED_FC,
PAY.DET_CHARGES_LC,
PAY.DET_CHARGES_FC,
PAY.DET_DISCOUNT_LC,
PAY.DET_DISCOUNT_FC,
PAY.DET_DEDUCTION_LC,
PAY.DET_DEDUCTION_FC,
PAY.DET_DIFF_EXCHANGE,
DOC.DOC_NUMBER,
IMP.PAR_DOCUMENT,
PAY.ACT_DET_PAYMENT_ID
FROM
    ACS_FINANCIAL_CURRENCY FIN,
    ACT_DET_PAYMENT        PAY,
    ACT_DOCUMENT           DOC,
    ACT_PART_IMPUTATION    IMP,
    ACT_EXPIRY             EXP
WHERE
PAY.ACT_EXPIRY_ID = EXP.ACT_EXPIRY_ID
AND EXP.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
AND IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
AND IMP.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
AND PAY.ACT_PART_IMPUTATION_ID = to_number(PARAMETER_0)
;
END RPT_ACT_DET_PAYMENT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOCUMENT_EXAMPLE" (
   arefcursor       in out   crystal_cursor_types.dualcursortyp,
   parameter_4   in         varchar2,
   user_lanid      in          varchar2
)
is
/**
*Description - used for report ACT_DOCUMENT_EXAMPLE
* @author MZHU
* @Published VHA 20 sept 2011
* @lastupdate VHA 26 october 2012
* @public
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(user_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select doc.act_document_id
         , doc.doc_number
         , doc.doc_total_amount_dc
         , doc.doc_document_date
         , doc.acs_financial_year_id
         , doc.doc_comment
         , doc.dic_doc_source_id
         , doc.dic_doc_destination_id
         , doc.a_datecre
         , doc.a_datemod
         , doc.a_idcre
         , doc.a_idmod
         , nvl(tra.tra_text, cat.cat_description) cat_description
         , cur.currency
      from act_document doc
         , acj_catalogue_document cat
         , acs_financial_currency acs
         , pcs.pc_curr cur
         , (select acj_catalogue_document_id
                 , tra_text
              from acj_traduction
             where pc_lang_id = vpc_lang_id) tra
     where doc.acj_catalogue_document_id = cat.acj_catalogue_document_id
       and doc.acs_financial_currency_id = acs.acs_financial_currency_id
       and acs.pc_curr_id = cur.pc_curr_id
       and doc.acj_catalogue_document_id = tra.acj_catalogue_document_id
       and doc.act_document_id = to_number(parameter_4);
end rpt_act_document_example;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOCUMENT_ORI_SUB" (
arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, parameter_0 in varchar2
)
/**
*Description

 Used for subreport ACT_DOCUMENT_ORI_SUB, subreport OF ACR_VAT_FORM_DET
*@created JLIU 06.JUNE.2009
*@lastUpdate VHA 09.04.2013
*@public
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open aRefCursor for
    select ACC.ACC_NUMBER
         , DOC.DOC_NUMBER
         , IMP.ACT_FINANCIAL_IMPUTATION_ID
         , IMP.IMF_DESCRIPTION
         , IMP.IMF_TRANSACTION_DATE
         , JOU.JOU_NUMBER
         , PAR.DOC_DATE_DELIVERY
      from ACS_ACCOUNT ACC
         , ACT_DOCUMENT DOC
         , ACT_FINANCIAL_IMPUTATION IMP
         , ACT_JOURNAL JOU
         , ACT_PART_IMPUTATION PAR
     where IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
       and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
       and IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
       and IMP.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
       and IMP.ACT_FINANCIAL_IMPUTATION_ID = to_number(parameter_0);
end RPT_ACT_DOCUMENT_ORI_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_FIN_IMP_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
*Description - used for report ACT_DOCUMENT_EXAMPLE
* @author mzhu
* @lastupdate 11 Feb 2009 - Mai 2009
* @Published VHA 20 sept 2011
* @public
* @PARAM PARAMETER_0: ACT_DOCUMENT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT par.par_document, par.par_blocked_document,
             par.doc_date_delivery, cur.currency, cur_b.currency currency_b,
             imf.act_document_id, imf.act_financial_imputation_id,
             imf.acs_financial_account_id, imf.imf_primary,
             imf.imf_description, imf.imf_amount_lc_d, imf.imf_amount_lc_c,
             imf.imf_exchange_rate, imf.imf_amount_fc_d, imf.imf_amount_fc_c,
             imf.imf_value_date, imf.acs_tax_code_id,
             imf.imf_transaction_date, imf.imf_acs_aux_account_cust_id,
             imf.imf_acs_aux_account_supp_id, imf.acs_auxiliary_account_id,
             imf.act_part_imputation_id, imf.pac_person_id imp_pac_person,
             NVL (imf.imf_pac_custom_partner_id,
               imf.imf_pac_supplier_partner_id
              ) pac_person_id,
             imf.imf_acs_division_account_id,
             acs_function.getaccountnumber
                                     (imf.acs_auxiliary_account_id)
                                                                  aux_number,
             acs_function.getaccountnumber
                             (imf.imf_acs_aux_account_cust_id)
                                                             aux_number_cust,
             acs_function.getaccountnumber
                             (imf.imf_acs_aux_account_supp_id)
                                                             aux_number_supp,
             acs_function.getaccountnumber
                               (imf.imf_acs_division_account_id)
                                                               cpte_division,
             acs_function.getaccountnumber
                                 (imf.acs_financial_account_id)
                                                              cpte_financier,
             acs_function.getaccountnumber (imf.acs_tax_code_id) cpte_tva
        FROM acs_financial_currency afc,
             acs_financial_currency afc_b,
             pcs.pc_curr cur,
             pcs.pc_curr cur_b,
             act_part_imputation par,
             act_financial_imputation imf
       WHERE imf.act_part_imputation_id = par.act_part_imputation_id(+)
         AND imf.acs_financial_currency_id = afc.acs_financial_currency_id
         AND afc.pc_curr_id = cur.pc_curr_id
         AND imf.acs_acs_financial_currency_id =
                                               afc_b.acs_financial_currency_id
         AND afc_b.pc_curr_id = cur_b.pc_curr_id
         AND imf.act_document_id = parameter_0;
END rpt_act_doc_fin_imp_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_MGM_DIS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
*Description - used for the report ACT_DOCUMENT_EXAMPLE

* @author mzhu
* @lastupdate 11 Feb 2009
* @Published VHA 20 sept 2011
* @public
* @PARAM PARAMETER_0: ACT_DOCUMENT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT imm.act_document_id, imm.imm_exchange_rate, imm.imm_value_date,
             imm.imm_transaction_date,
             imm.acs_qty_unit_id,
             ACS_FUNCTION.GetAccountNumber(imm.acs_qty_unit_id) acs_qty_unit_num,
             mgm.act_mgm_distribution_id,
             mgm.acs_pj_account_id,
             ACS_FUNCTION.GetAccountNumber(acs_pj_account_id) acs_pj_account_num,
             mgm.mgm_description, mgm.mgm_amount_lc_d, mgm.mgm_amount_fc_d,
             mgm.mgm_amount_lc_c, mgm.mgm_amount_fc_c, mgm.mgm_quantity_d,
             mgm.mgm_quantity_c, cur.pc_curr_id, cur.currency,
             cur_b.pc_curr_id pc_curr_id_b, cur_b.currency currency_b
        FROM acs_financial_currency afc,
             acs_financial_currency afc_b,
             pcs.pc_curr cur,
             pcs.pc_curr cur_b,
             act_mgm_imputation imm,
             act_mgm_distribution mgm,
             acs_account acc_pj,
             acs_account acc_qty
       WHERE imm.acs_financial_currency_id = afc.acs_financial_currency_id
         AND afc.pc_curr_id = cur.pc_curr_id
         AND imm.acs_acs_financial_currency_id =
                                               afc_b.acs_financial_currency_id
         AND afc_b.pc_curr_id = cur_b.pc_curr_id
         AND imm.act_mgm_imputation_id = mgm.act_mgm_imputation_id
         AND mgm.acs_pj_account_id = acc_pj.acs_account_id
         AND imm.acs_qty_unit_id = acc_qty.acs_account_id(+)
         AND imm.act_document_id = parameter_0;
END rpt_act_doc_mgm_dis_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_MGM_IMP_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
*Description - used for report ACT_DOCUMENT_EXAMPLE
* @author mzhu
* @lastupdate 11 feb 2009
* @Published VHA 20 sept 2011
* @PUBLIC
* @PARAM PARAMETER_0: ACT_DOCUMENT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT imm.act_mgm_imputation_id, imm.act_document_id,
             imm.acs_cpn_account_id, imm.acs_cda_account_id,
             imm.acs_pf_account_id, imm.imm_description, imm.imm_amount_lc_d,
             imm.imm_amount_lc_c, imm.imm_exchange_rate, imm.imm_amount_fc_d,
             imm.imm_amount_fc_c, imm.imm_value_date,
             imm.imm_transaction_date, imm.acs_qty_unit_id,
             imm.imm_quantity_d, imm.imm_quantity_c, cur.pc_curr_id,
             cur.currency, cur_b.pc_curr_id pc_curr_id_b,
             cur_b.currency currency_b,
             acs_function.getaccountnumber (imm.acs_cda_account_id) cpte_cda,
             acs_function.getaccountnumber (imm.acs_cpn_account_id) cpte_cpn,
             acs_function.getaccountnumber (imm.acs_pf_account_id) cpte_pf,
             acs_function.getaccountnumber (imm.acs_qty_unit_id) cpte_qty
        FROM acs_financial_currency afc,
             acs_financial_currency afc_b,
             pcs.pc_curr cur,
             pcs.pc_curr cur_b,
             act_mgm_imputation imm
       WHERE imm.acs_financial_currency_id = afc.acs_financial_currency_id
         AND afc.pc_curr_id = cur.pc_curr_id
         AND imm.acs_acs_financial_currency_id =
                                               afc_b.acs_financial_currency_id
         AND afc_b.pc_curr_id = cur_b.pc_curr_id
         AND imm.act_document_id = parameter_0;
END rpt_act_doc_mgm_imp_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_PRE_CTRL" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
/**
*Description  Used for report ACT_DOC_PRE_CTRL
*
*@created AWU 20 MAY 2009
*@lastUpdate
*@public
*@param PARAMETER_0 Only document with duplicate partner document ? (0=No / 1=Yes)
*/
IS
BEGIN
   OPEN arefcursor FOR
      SELECT cat.acj_catalogue_document_id, cat.c_type_catalogue,
             cat.cat_description, typ.typ_supplier_permanent,
             fye.fye_no_exercice, doc.act_document_id, doc.doc_number,
             doc.doc_total_amount_dc, doc.doc_document_date,
             doc.doc_pre_entry_expiry, doc.doc_pre_entry_validation,
             doc.doc_pre_entry_ini, job.act_job_id, job.job_description,
             job.a_datecre, par.par_document, p_cur.currency,
             act_functions.getduplicatepardocument
                                  (doc.act_document_id)
                                                      duplicate_par_document
        FROM act_job job,
             act_document doc,
             acj_job_type typ,
             acs_financial_year fye,
             act_part_imputation par,
             acs_financial_currency cur,
             acj_catalogue_document cat,
             pcs.pc_curr p_cur,
             acj_sub_set_cat ssc
       WHERE job.act_job_id = doc.act_job_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND job.acs_financial_year_id = fye.acs_financial_year_id
         AND doc.act_document_id = par.act_document_id(+)
         AND doc.acs_financial_currency_id = cur.acs_financial_currency_id(+)
         AND doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND cur.pc_curr_id = p_cur.pc_curr_id(+)
         AND cat.acj_catalogue_document_id = ssc.acj_catalogue_document_id
         AND typ.typ_supplier_permanent = 1
         AND ssc.c_sub_set = 'ACC'
         AND ssc.c_type_cumul = 'PRE'
         AND (   act_functions.getduplicatepardocument (doc.act_document_id) <>
                                                                             0
              OR parameter_0 <> 1
             );
END rpt_act_doc_pre_ctrl;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_PRE_NOT_VAL" (
   arefcursor   IN OUT   crystal_cursor_types.dualcursortyp,
   PROCPARAMDUMMY IN varchar2 default null
)
/**
*Description  Used for report ACT_DOC_PRE_VAL
*
*@created AWU 20 MAY 2009
*@lastUpdate
*@public
*@param
*/
IS
BEGIN
   OPEN arefcursor FOR
      SELECT cat.acj_catalogue_document_id, cat.c_type_catalogue,
             cat.cat_description, typ.typ_supplier_permanent,
             fye.fye_no_exercice, doc.act_document_id, doc.doc_number,
             doc.doc_total_amount_dc, doc.doc_document_date,
             doc.doc_pre_entry_expiry, doc.doc_pre_entry_validation,
             doc.doc_pre_entry_ini, job.act_job_id, job.job_description,
             p_cur.currency, p_use.pc_user_id, p_use.use_name,
             p_use.use_descr
        FROM act_job job,
             act_document doc,
             acj_job_type typ,
             acs_financial_year fye,
             pcs.pc_user p_use,
             acs_financial_currency cur,
             acj_catalogue_document cat,
             pcs.pc_curr p_cur,
             acj_sub_set_cat ssc
       WHERE job.act_job_id = doc.act_job_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND job.acs_financial_year_id = fye.acs_financial_year_id
         AND doc.pc_user_id = p_use.pc_user_id(+)
         AND doc.acs_financial_currency_id = cur.acs_financial_currency_id(+)
         AND doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND cur.pc_curr_id = p_cur.pc_curr_id(+)
         AND cat.acj_catalogue_document_id = ssc.acj_catalogue_document_id
         AND doc.doc_pre_entry_validation IS NULL
         AND typ.typ_supplier_permanent = 1
         AND ssc.c_sub_set = 'ACC'
         AND ssc.c_type_cumul = 'PRE';
END rpt_act_doc_pre_not_val;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DOC_PRE_VAL" (
   arefcursor   IN OUT   crystal_cursor_types.dualcursortyp,
   PROCPARAMDUMMY IN varchar2 default null
)
/**
*Description  Used for report ACT_DOC_PRE_VAL
*
*@created AWU 20 MAY 2009
*@lastUpdate
*@public
*@param
*/
IS
BEGIN
   OPEN arefcursor FOR
      SELECT cat.acj_catalogue_document_id, cat.c_type_catalogue,
             cat.cat_description, typ.typ_supplier_permanent,
             fye.fye_no_exercice, doc.act_document_id, doc.doc_number,
             doc.doc_total_amount_dc, doc.doc_document_date,
             doc.doc_pre_entry_expiry, doc.doc_pre_entry_validation,
             doc.doc_pre_entry_ini, job.act_job_id, job.job_description,
             p_cur.currency, p_use.pc_user_id, p_use.use_name,
             p_use.use_descr
        FROM act_job job,
             act_document doc,
             acj_job_type typ,
             acs_financial_year fye,
             pcs.pc_user p_use,
             acs_financial_currency cur,
             acj_catalogue_document cat,
             pcs.pc_curr p_cur,
             acj_sub_set_cat ssc
       WHERE job.act_job_id = doc.act_job_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND job.acs_financial_year_id = fye.acs_financial_year_id
         AND doc.pc_user_id = p_use.pc_user_id(+)
         AND doc.acs_financial_currency_id = cur.acs_financial_currency_id(+)
         AND doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND cur.pc_curr_id = p_cur.pc_curr_id(+)
         AND cat.acj_catalogue_document_id = ssc.acj_catalogue_document_id
         AND doc.doc_pre_entry_validation IS NOT NULL
         AND typ.typ_supplier_permanent = 1
         AND ssc.c_sub_set = 'ACC'
         AND ssc.c_type_cumul = 'PRE';
END rpt_act_doc_pre_val;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_DTA_BATCH" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
  PARAMETER_0            in     varchar2
)
IS

/**
* description used for report ACT_DTA BATCH

* @author JLI  16 Sep 2009
* Modified PYB 28 Apr 2010
* public
* @param PARAMETER_0   ACT_JOB_ID

*/


BEGIN
open aRefCursor for
SELECT
FIN.FIN_ETAB_ACCOUNT,
PMM.PME_PRINCIPAL,
PMM.PME_SENDER,
DET.DET_PAIED_LC,
DET.DET_PAIED_FC,
DET.DET_TRANSACTION_TYPE,
DET.DET_SEQ_NUMBER,
DET.DET_FILE_AMOUNT,
DOC.ACT_JOB_ID,
DOC.DOC_COMMENT,
DOC.DOC_EXECUTIVE_DATE,
DOC.DOC_ESTABL_DATE,
PAR.ACS_FINANCIAL_CURRENCY_ID,
PAR.ACS_ACS_FINANCIAL_CURRENCY_ID,
BAN.BAN_NAME1,
BAN.BAN_NAME2,
BAN.BAN_ADR,
BAN.BAN_ZIP,
BAN.BAN_CITY,
CUR.CURRENCY
FROM
ACT_DOCUMENT DOC,
ACT_JOB JOB,
ACT_PART_IMPUTATION PAR,
ACT_DET_PAYMENT DET,
ACT_EXPIRY EXP,
ACS_FINANCIAL_CURRENCY AFC,
PCS.PC_CURR CUR,
ACJ_CATALOGUE_DOCUMENT CAT,
ACS_FIN_ACC_S_PAYMENT FSP,
ACS_PAYMENT_METHOD PMM,
ACS_FINANCIAL_ACCOUNT FIN,
PCS.PC_BANK BAN
WHERE
DOC.ACT_JOB_ID = JOB.ACT_JOB_ID
AND JOB.ACT_JOB_ID = PARAMETER_0
AND DOC.ACT_DOCUMENT_ID = PAR.ACT_DOCUMENT_ID
AND PAR.ACT_PART_IMPUTATION_ID = DET.ACT_PART_IMPUTATION_ID
AND DET.ACT_EXPIRY_ID = EXP.ACT_EXPIRY_ID
AND PAR.ACS_FINANCIAL_CURRENCY_ID = AFC.ACS_FINANCIAL_CURRENCY_ID
AND AFC.PC_CURR_ID = CUR.PC_CURR_ID
AND DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
AND DOC.ACS_FIN_ACC_S_PAYMENT_ID = FSP.ACS_FIN_ACC_S_PAYMENT_ID(+)
AND FSP.ACS_PAYMENT_METHOD_ID = PMM.ACS_PAYMENT_METHOD_ID(+)
AND FSP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
AND FIN.PC_BANK_ID = BAN.PC_BANK_ID(+)
AND CAT.C_TYPE_CATALOGUE >= '3'
AND CAT.C_TYPE_CATALOGUE <= '4'
AND DET.DET_SEQ_NUMBER IS NOT NULL
;

END RPT_ACT_DTA_BATCH;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_EXPIRY_CUSTOMER" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procparam_8    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_9    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, procparam_9    in     varchar2
, procparam_10   in     varchar2
, procparam_11   in     varchar2
, PROCUSER_LANID in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
* description used for report ACT_EXPIRY_CUSTOMER (Postes ouverts débiteurs)

* @author SDO 2003
* @lastupdate VHA 26 JUNE 2013
* @public
* @param procparam_0    Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_1    Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2    DateRef...           Date à laquelle sont imprimée les P.O.
* @param procparam_3    Acs_sub_set_ID       ACS_SUB_SET_ID
* @param procparam_4    Division_ID (List)   # =  All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5    Collectiv_ID (List)  # = All or ID list
* @param procparam_6    Type de cours        1 : Cours du jour (par défaut)
                                             2 : Cours d'évaluation
                                             3 : Cours d'inventaire
                                             4 : Cours de bouclement
                                             5 : Cours de facturation
* @param procparam_7    Prise en compte de la date de l'échéance de l'escompte
* @param procparam_8    Paiement methode (List) ACS_PAYMENT_METHOD_ID # = All or ID list
* @param parameter_1    Only due
* @param parameter_2    Due date
* @param parameter_3    Totals type(C_TYPE_CUMUL)
* @param parameter_4    Totals type(C_TYPE_CUMUL)
* @param parameter_5    Totals type(C_TYPE_CUMUL)
* @param parameter_6    Totals type(C_TYPE_CUMUL)
* @param parameter_10   reevaluation
* @param parameter_11   Daybook
* @param procparam_9    Payment filter
* @param procparam_10    Not fully payed date
* @param procparam_11    Fully payed date
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if ((procuser_lanid is not null) and (pc_user_id is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (procparam_4 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := procparam_4;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if (procparam_2 is null) then
      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , PAR.ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , SUB.C_TYPE_CUMUL
             , EPY.ACT_EXPIRY_ID
             , EPY.ACT_DOCUMENT_ID
             , EPY.ACT_PART_IMPUTATION_ID
             , EPY.C_STATUS_EXPIRY
             , case
                 when(procparam_7 = 1)
                 and (ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1) <> 0) then ACT_FUNCTIONS.DiscountDateAfter
                                                                                                                                           (EPY.ACT_DOCUMENT_ID
                                                                                                                                          , EPY.EXP_SLICE
                                                                                                                                          , sysdate
                                                                                                                                           )
                 else EPY.EXP_ADAPTED
               end EXP_ADAPTED
             , EPY.EXP_CALCULATED
             , EPY.EXP_AMOUNT_LC
             , EPY.EXP_AMOUNT_FC
             , ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1) DISCOUNT_LC
             , ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 0) DISCOUNT_FC
             , ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
             , ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
             , EPY.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
             , EPY.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(EPY.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0)
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , sysdate
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , EPY.EXP_SLICE
             , EPY.ACS_FIN_ACC_S_PAYMENT_ID
             , ACT_FUNCTIONS.LastClaimsNumber(EPY.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
             , ACT_FUNCTIONS.LastClaimsDate(EPY.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
             , CO2.PCO_DESCR PCO_DESCR_EXP
             , IMP.ACS_PERIOD_ID
             , IMP.IMF_TRANSACTION_DATE
             , IMP.IMF_VALUE_DATE
             , IMP.IMF_DESCRIPTION
             , IMP.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , IMP.DIC_IMP_FREE1_ID
             , IMP.DIC_IMP_FREE2_ID
             , IMP.DIC_IMP_FREE3_ID
             , IMP.DIC_IMP_FREE4_ID
             , IMP.DIC_IMP_FREE5_ID
             , IMP.IMF_NUMBER
             , IMP.IMF_NUMBER2
             , IMP.IMF_NUMBER3
             , IMP.IMF_NUMBER4
             , IMP.IMF_NUMBER5
             , IMP.IMF_TEXT1
             , IMP.IMF_TEXT2
             , IMP.IMF_TEXT3
             , IMP.IMF_TEXT4
             , IMP.IMF_TEXT5
             , JOU.JOU_NUMBER
             , EJO.C_ETAT_JOURNAL
             , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , CUS.PAC_CUSTOM_PARTNER_ID
             , CUS.ACS_AUXILIARY_ACCOUNT_ID
             , CUS.C_PARTNER_CATEGORY
             , CO1.PCO_DESCR PCO_DESCR_CUS
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = CUS.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = CUS.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , ACC.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = CUS.PAC_CUSTOM_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_CUST
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from ACS_PAYMENT_METHOD PAE
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_PAYMENT_METHOD PAC
             , ACS_FIN_ACC_S_PAYMENT PFC
             , PAC_PAYMENT_CONDITION CO2
             , PAC_PAYMENT_CONDITION CO1
             , PAC_PERSON PER
             , ACS_AUXILIARY_ACCOUNT AUX
             , PAC_CUSTOM_PARTNER CUS
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMP
             , ACT_ETAT_JOURNAL EJO
             , ACT_JOURNAL JOU
             , ACT_EXPIRY EPY
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACT_DOCUMENT DOC
             , ACT_PART_IMPUTATION PAR
             , ACS_ACCOUNT ACC
             , ACJ_SUB_SET_CAT SUB
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and CAT.C_TYPE_CATALOGUE <> '8'
           and   -- Transaction de relance
               PAR.ACT_PART_IMPUTATION_ID = EPY.ACT_PART_IMPUTATION_ID
           and EXP_CALC_NET + 0 = 1
           and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(EPY.ACT_EXPIRY_ID, sysdate) = 1
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
           and EJO.C_SUB_SET = 'REC'
           and EPY.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
           and IMP.ACT_DET_PAYMENT_ID is null
           and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
           and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and EPY.C_STATUS_EXPIRY = 0
           and FIN.FIN_COLLECTIVE = 1
           and ACC.ACC_NUMBER >= procparam_0
           and ACC.ACC_NUMBER <= procparam_1
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and AUT.COLUMN_VALUE = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and PAR.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
           and CUS.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and CUS.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
           and CUS.PAC_PAYMENT_CONDITION_ID = CO1.PAC_PAYMENT_CONDITION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = CO2.PAC_PAYMENT_CONDITION_ID(+)
           and CUS.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFC.ACS_PAYMENT_METHOD_ID = PAC.ACS_PAYMENT_METHOD_ID(+)
           and EPY.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFE.ACS_PAYMENT_METHOD_ID = PAE.ACS_PAYMENT_METHOD_ID(+)
           and doc.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'REC'
           and (    (    parameter_3 = '1'
                     and SUB.C_TYPE_CUMUL = 'INT')
                or (    parameter_4 = '1'
                    and SUB.C_TYPE_CUMUL = 'EXT')
                or (    parameter_5 = '1'
                    and SUB.C_TYPE_CUMUL = 'PRE')
                or (    parameter_6 = '1'
                    and SUB.C_TYPE_CUMUL = 'ENG')
               )
           and (   parameter_11 = '1'
                or (    parameter_11 = '0'
                    and EJO.C_ETAT_JOURNAL <> 'BRO') )
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1)
                                       , 0, EPY.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate)
                                        )
                             , EPY.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> EPY.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> EPY.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = EPY.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = EPY.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    else
      if     (procparam_2 is not null)
         and (length(trim(procparam_2) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_DATE  := to_date(procparam_2, 'YYYYMMDD');
      end if;

      if     (procparam_0 is not null)
         and (length(trim(procparam_0) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := procparam_0;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := ' ';
      end if;

      if     (procparam_1 is not null)
         and (length(trim(procparam_1) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := procparam_1;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := ' ';
      end if;

      if     (parameter_11 is not null)
         and (length(trim(parameter_11) ) > 0) then
        if parameter_11 = '1' then
          ACT_FUNCTIONS.BRO  := 1;
        else
          ACT_FUNCTIONS.BRO  := 0;
        end if;
      end if;

      if     (procparam_6 is not null)
         and (length(trim(procparam_6) ) > 0) then
        begin
          ACT_CURRENCY_EVALUATION.RATE_TYPE  := to_number(procparam_6);
        exception
          when invalid_number then
            ACT_CURRENCY_EVALUATION.RATE_TYPE  := 1;   -- Cours du jour
        end;
      end if;

      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , V.ACS_ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY2 CURRENCY_MB
             , V.ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY1 CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , V.C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , V.ACT_DOCUMENT_ID
             , V.ACT_PART_IMPUTATION_ID
             , V.C_STATUS_EXPIRY
             , V.EXP_ADAPTED
             , V.EXP_CALCULATED
             , V.EXP_AMOUNT_LC
             , V.EXP_AMOUNT_FC
             , V.EXP_DISCOUNT_LC DISCOUNT_LC
             , V.EXP_DISCOUNT_FC DISCOUNT_FC
             , V.DET_PAIED_LC
             , V.DET_PAIED_FC
             , V.EXP_AMOUNT_LC - V.DET_PAIED_LC SOLDE_EXP_LC
             , V.EXP_AMOUNT_FC - V.DET_PAIED_FC SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(V.EXP_AMOUNT_FC - V.DET_PAIED_FC
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , to_date(procparam_2, 'YYYYMMDD')
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , V.EXP_SLICE
             , V.ACS_FIN_ACC_S_PAYMENT_ID
             , V.LAST_CLAIMS_LEVEL
             , V.LAST_CLAIMS_DATE
             , PCO_EXP.PCO_DESCR PCO_DESCR_EXP
             , V.ACS_PERIOD_ID
             , V.IMF_TRANSACTION_DATE
             , V.IMF_VALUE_DATE
             , V.IMF_DESCRIPTION
             , V.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , JOU.JOU_NUMBER
             , V.C_ETAT_JOURNAL
             , V.ACS_DIVISION_ACCOUNT_ID IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , V.PAC_CUSTOM_PARTNER_ID
             , V.ACS_AUXILIARY_ACCOUNT_ID
             , PCO.PCO_DESCR PCO_DESCR_CUS
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , V.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = V.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = V.PAC_CUSTOM_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_CUST
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from V_ACT_EXPIRY_CUST V
             , ACT_EXPIRY exp
             , ACT_DOCUMENT DOC
             , ACT_JOURNAL JOU
             , ACT_PART_IMPUTATION PAR
             , PAC_PAYMENT_CONDITION PCO_EXP
             , PAC_CUSTOM_PARTNER CUS
             , PAC_PERSON PER
             , PAC_PAYMENT_CONDITION PCO
             , ACS_AUXILIARY_ACCOUNT AUX
             , ACS_ACCOUNT ACC
             , ACS_SUB_SET SUB
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_FIN_ACC_S_PAYMENT PFC
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where V.ACT_EXPIRY_ID = exp.ACT_EXPIRY_ID
           and V.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and V.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = PCO_EXP.PAC_PAYMENT_CONDITION_ID(+)
           and V.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
           and CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
           and CUS.PAC_PAYMENT_CONDITION_ID = PCO.PAC_PAYMENT_CONDITION_ID(+)
           and V.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
           and V.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and V.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and CUS.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
--Selection formula from crystal
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD'), 1)
                                       , 0, v.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD') )
                                        )
                             , v.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (    parameter_3 = '1'
                     and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'INT'
                    )
                or (    parameter_4 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'EXT'
                   )
                or (    parameter_5 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'PRE'
                   )
                or (    parameter_6 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'ENG'
                   )
               )
           and AUT.COLUMN_VALUE = V.ACS_DIVISION_ACCOUNT_ID
           and (   instr(',' || procparam_5 || ',', to_char(',' || V.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> V.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = V.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    end if;
  else
    if (procparam_2 is null) then
      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , PAR.ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , SUB.C_TYPE_CUMUL
             , EPY.ACT_EXPIRY_ID
             , EPY.ACT_DOCUMENT_ID
             , EPY.ACT_PART_IMPUTATION_ID
             , EPY.C_STATUS_EXPIRY
             , case
                 when(procparam_7 = 1)
                 and (ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1) <> 0) then ACT_FUNCTIONS.DiscountDateAfter
                                                                                                                                           (EPY.ACT_DOCUMENT_ID
                                                                                                                                          , EPY.EXP_SLICE
                                                                                                                                          , sysdate
                                                                                                                                           )
                 else EPY.EXP_ADAPTED
               end EXP_ADAPTED
             , EPY.EXP_CALCULATED
             , EPY.EXP_AMOUNT_LC
             , EPY.EXP_AMOUNT_FC
             , ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1) DISCOUNT_LC
             , ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 0) DISCOUNT_FC
             , ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
             , ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
             , EPY.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
             , EPY.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(EPY.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(EPY.ACT_EXPIRY_ID, sysdate, 0)
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , sysdate
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , EPY.EXP_SLICE
             , EPY.ACS_FIN_ACC_S_PAYMENT_ID
             , ACT_FUNCTIONS.LastClaimsNumber(EPY.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
             , ACT_FUNCTIONS.LastClaimsDate(EPY.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
             , CO2.PCO_DESCR PCO_DESCR_EXP
             , IMP.ACS_PERIOD_ID
             , IMP.IMF_TRANSACTION_DATE
             , IMP.IMF_VALUE_DATE
             , IMP.IMF_DESCRIPTION
             , IMP.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , IMP.DIC_IMP_FREE1_ID
             , IMP.DIC_IMP_FREE2_ID
             , IMP.DIC_IMP_FREE3_ID
             , IMP.DIC_IMP_FREE4_ID
             , IMP.DIC_IMP_FREE5_ID
             , IMP.IMF_NUMBER
             , IMP.IMF_NUMBER2
             , IMP.IMF_NUMBER3
             , IMP.IMF_NUMBER4
             , IMP.IMF_NUMBER5
             , IMP.IMF_TEXT1
             , IMP.IMF_TEXT2
             , IMP.IMF_TEXT3
             , IMP.IMF_TEXT4
             , IMP.IMF_TEXT5
             , JOU.JOU_NUMBER
             , EJO.C_ETAT_JOURNAL
             , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , CUS.PAC_CUSTOM_PARTNER_ID
             , CUS.ACS_AUXILIARY_ACCOUNT_ID
             , CUS.C_PARTNER_CATEGORY
             , CO1.PCO_DESCR PCO_DESCR_CUS
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = CUS.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = CUS.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , ACC.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = CUS.PAC_CUSTOM_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_CUST
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from ACS_PAYMENT_METHOD PAE
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_PAYMENT_METHOD PAC
             , ACS_FIN_ACC_S_PAYMENT PFC
             , PAC_PAYMENT_CONDITION CO2
             , PAC_PAYMENT_CONDITION CO1
             , PAC_PERSON PER
             , ACS_AUXILIARY_ACCOUNT AUX
             , PAC_CUSTOM_PARTNER CUS
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMP
             , ACT_ETAT_JOURNAL EJO
             , ACT_JOURNAL JOU
             , ACT_EXPIRY EPY
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACT_DOCUMENT DOC
             , ACT_PART_IMPUTATION PAR
             , ACS_ACCOUNT ACC
             , ACJ_SUB_SET_CAT SUB
         where PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and CAT.C_TYPE_CATALOGUE <> '8'
           and   -- Transaction de relance
               PAR.ACT_PART_IMPUTATION_ID = EPY.ACT_PART_IMPUTATION_ID
           and EXP_CALC_NET + 0 = 1
           and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(EPY.ACT_EXPIRY_ID, sysdate) = 1
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
           and EJO.C_SUB_SET = 'REC'
           and EPY.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
           and IMP.ACT_DET_PAYMENT_ID is null
           and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
           and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and EPY.C_STATUS_EXPIRY = 0
           and FIN.FIN_COLLECTIVE = 1
           and ACC.ACC_NUMBER >= procparam_0
           and ACC.ACC_NUMBER <= procparam_1
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and PAR.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
           and CUS.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and CUS.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
           and CUS.PAC_PAYMENT_CONDITION_ID = CO1.PAC_PAYMENT_CONDITION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = CO2.PAC_PAYMENT_CONDITION_ID(+)
           and CUS.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFC.ACS_PAYMENT_METHOD_ID = PAC.ACS_PAYMENT_METHOD_ID(+)
           and EPY.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFE.ACS_PAYMENT_METHOD_ID = PAE.ACS_PAYMENT_METHOD_ID(+)
           and doc.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'REC'
           and (    (    parameter_3 = '1'
                     and SUB.C_TYPE_CUMUL = 'INT')
                or (    parameter_4 = '1'
                    and SUB.C_TYPE_CUMUL = 'EXT')
                or (    parameter_5 = '1'
                    and SUB.C_TYPE_CUMUL = 'PRE')
                or (    parameter_6 = '1'
                    and SUB.C_TYPE_CUMUL = 'ENG')
               )
           and (   parameter_11 = '1'
                or (    parameter_11 = '0'
                    and EJO.C_ETAT_JOURNAL <> 'BRO') )
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate, 1)
                                       , 0, EPY.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(EPY.ACT_DOCUMENT_ID, EPY.EXP_SLICE, sysdate)
                                        )
                             , EPY.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> EPY.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> EPY.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = EPY.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(EPY.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = EPY.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    else
      if     (procparam_2 is not null)
         and (length(trim(procparam_2) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_DATE  := to_date(procparam_2, 'YYYYMMDD');
      end if;

      if     (procparam_0 is not null)
         and (length(trim(procparam_0) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := procparam_0;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := ' ';
      end if;

      if     (procparam_1 is not null)
         and (length(trim(procparam_1) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := procparam_1;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := ' ';
      end if;

      if     (parameter_11 is not null)
         and (length(trim(parameter_11) ) > 0) then
        if parameter_11 = '1' then
          ACT_FUNCTIONS.BRO  := 1;
        else
          ACT_FUNCTIONS.BRO  := 0;
        end if;
      end if;

      if     (procparam_6 is not null)
         and (length(trim(procparam_6) ) > 0) then
        begin
          ACT_CURRENCY_EVALUATION.RATE_TYPE  := to_number(procparam_6);
        exception
          when invalid_number then
            ACT_CURRENCY_EVALUATION.RATE_TYPE  := 1;   -- Cours du jour
        end;
      end if;

      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , V.ACS_ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY2 CURRENCY_MB
             , V.ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY1 CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , V.C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , V.ACT_DOCUMENT_ID
             , V.ACT_PART_IMPUTATION_ID
             , V.C_STATUS_EXPIRY
             , V.EXP_ADAPTED
             , V.EXP_CALCULATED
             , V.EXP_AMOUNT_LC
             , V.EXP_AMOUNT_FC
             , V.EXP_DISCOUNT_LC DISCOUNT_LC
             , V.EXP_DISCOUNT_FC DISCOUNT_FC
             , V.DET_PAIED_LC
             , V.DET_PAIED_FC
             , V.EXP_AMOUNT_LC - V.DET_PAIED_LC SOLDE_EXP_LC
             , V.EXP_AMOUNT_FC - V.DET_PAIED_FC SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(V.EXP_AMOUNT_FC - V.DET_PAIED_FC
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , to_date(procparam_2, 'YYYYMMDD')
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , V.EXP_SLICE
             , V.ACS_FIN_ACC_S_PAYMENT_ID
             , V.LAST_CLAIMS_LEVEL
             , V.LAST_CLAIMS_DATE
             , PCO_EXP.PCO_DESCR PCO_DESCR_EXP
             , V.ACS_PERIOD_ID
             , V.IMF_TRANSACTION_DATE
             , V.IMF_VALUE_DATE
             , V.IMF_DESCRIPTION
             , V.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , JOU.JOU_NUMBER
             , V.C_ETAT_JOURNAL
             , V.ACS_DIVISION_ACCOUNT_ID IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , V.PAC_CUSTOM_PARTNER_ID
             , V.ACS_AUXILIARY_ACCOUNT_ID
             , PCO.PCO_DESCR PCO_DESCR_CUS
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , V.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = V.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = V.PAC_CUSTOM_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_CUST
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from V_ACT_EXPIRY_CUST V
             , ACT_EXPIRY exp
             , ACT_DOCUMENT DOC
             , ACT_JOURNAL JOU
             , ACT_PART_IMPUTATION PAR
             , PAC_PAYMENT_CONDITION PCO_EXP
             , PAC_CUSTOM_PARTNER CUS
             , PAC_PERSON PER
             , PAC_PAYMENT_CONDITION PCO
             , ACS_AUXILIARY_ACCOUNT AUX
             , ACS_ACCOUNT ACC
             , ACS_SUB_SET SUB
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_FIN_ACC_S_PAYMENT PFC
         where V.ACT_EXPIRY_ID = exp.ACT_EXPIRY_ID
           and V.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and V.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = PCO_EXP.PAC_PAYMENT_CONDITION_ID(+)
           and V.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
           and CUS.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
           and CUS.PAC_PAYMENT_CONDITION_ID = PCO.PAC_PAYMENT_CONDITION_ID(+)
           and V.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
           and V.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and V.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and CUS.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
--Selection formula from crystal
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD'), 1)
                                       , 0, v.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD') )
                                        )
                             , v.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (    parameter_3 = '1'
                     and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'INT'
                    )
                or (    parameter_4 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'EXT'
                   )
                or (    parameter_5 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'PRE'
                   )
                or (    parameter_6 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'ENG'
                   )
               )
           and (   instr(',' || procparam_5 || ',', to_char(',' || V.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> V.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = V.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    end if;
  end if;
end RPT_ACT_EXPIRY_CUSTOMER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_EXPIRY_SUPPLIER" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procparam_1    in     varchar2
, procparam_2    in     varchar2
, procparam_3    in     varchar2
, procparam_4    in     varchar2
, procparam_5    in     varchar2
, procparam_6    in     number
, procparam_7    in     number
, procparam_8    in     varchar2
, procparam_9    in     varchar2
, procparam_10   in     varchar2
, procparam_11   in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     varchar2
, parameter_5    in     varchar2
, parameter_6    in     varchar2
, parameter_9    in     varchar2
, parameter_10   in     varchar2
, parameter_11   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
)
/**
* description used for report ACT_EXPIRY_SUPPLIER (Postes ouverts débiteurs)

* @author MZHU 11 Oct. 2010
* @lastupdate VHA 26 JUNE 2013
* @public
* @param procparam_0    Compte du ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_1    Compte au ...        ACC_NUMBER (AUXILIARY_ACCOUNT)
* @param procparam_2    DateRef...           Date à laquelle sont imprimée les P.O.
* @param procparam_3    Acs_sub_set_ID       ACS_SUB_SET_ID
* @param procparam_4    Division_ID (List)   # = All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5    Collectiv_ID (List)  # = All sinon liste des ID
* @param procparam_6    Type de cours        1 : Cours du jour (par défaut)
                                             2 : Cours d'évaluation
                                             3 : Cours d'inventaire
                                             4 : Cours de bouclement
                                             5 : Cours de facturation
* @param procparam_7    Prise en compte de la date de l'échéance de l'escompte
* @param procparam_8    Paiement methode List ACS_PAYMENT_METHOD_ID # = All or ID list
* @param parameter_1    Only due
* @param parameter_2    Due date
* @param parameter_3    Totals type(C_TYPE_CUMUL)
* @param parameter_4    Totals type(C_TYPE_CUMUL)
* @param parameter_5    Totals type(C_TYPE_CUMUL)
* @param parameter_6    Totals type(C_TYPE_CUMUL)
* @param parameter_11   Daybook
* @param procparam_9    Payment filter
* @param procparam_10    Not fully payed date
* @param procparam_11    Fully payed date
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;
  vlstdivisions varchar2(4000);
begin
  if ((procuser_lanid is not null) and (pc_user_id is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (procparam_4 = '#') then
    vlstdivisions := null;
  else
    vlstdivisions := procparam_4;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
    if (procparam_2 is null) then
      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , PAR.ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , (select SUB.C_TYPE_CUMUL
                  from ACJ_SUB_SET_CAT SUB
                 where DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
                   and SUB.C_SUB_SET = 'PAY') C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , exp.ACT_DOCUMENT_ID
             , exp.ACT_PART_IMPUTATION_ID
             , exp.C_STATUS_EXPIRY
             , case
                 when(procparam_7 = 1)
                 and (ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) <> 0) then ACT_FUNCTIONS.DiscountDateAfter
                                                                                                                                           (exp.ACT_DOCUMENT_ID
                                                                                                                                          , exp.EXP_SLICE
                                                                                                                                          , sysdate
                                                                                                                                           )
                 else exp.EXP_ADAPTED
               end EXP_ADAPTED
             , exp.EXP_CALCULATED
             , exp.EXP_AMOUNT_LC
             , exp.EXP_AMOUNT_FC
             , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) DISCOUNT_LC
             , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 0) DISCOUNT_FC
             , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
             , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
             , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
             , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0)
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , sysdate
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , exp.EXP_SLICE
             , exp.ACS_FIN_ACC_S_PAYMENT_ID
             , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
             , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
             , CO2.PCO_DESCR PCO_DESCR_EXP
             , IMP.ACS_PERIOD_ID
             , IMP.IMF_TRANSACTION_DATE
             , IMP.IMF_VALUE_DATE
             , IMP.IMF_DESCRIPTION
             , IMP.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , IMP.DIC_IMP_FREE1_ID
             , IMP.DIC_IMP_FREE2_ID
             , IMP.DIC_IMP_FREE3_ID
             , IMP.DIC_IMP_FREE4_ID
             , IMP.DIC_IMP_FREE5_ID
             , IMP.IMF_NUMBER
             , IMP.IMF_NUMBER2
             , IMP.IMF_NUMBER3
             , IMP.IMF_NUMBER4
             , IMP.IMF_NUMBER5
             , IMP.IMF_TEXT1
             , IMP.IMF_TEXT2
             , IMP.IMF_TEXT3
             , IMP.IMF_TEXT4
             , IMP.IMF_TEXT5
             , JOU.JOU_NUMBER
             , EJO.C_ETAT_JOURNAL
             , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , SUP.PAC_SUPPLIER_PARTNER_ID
             , SUP.ACS_AUXILIARY_ACCOUNT_ID
             , SUP.C_PARTNER_CATEGORY
             , CO1.PCO_DESCR PCO_DESCR_SUP
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , ACC.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_SUPP
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from ACS_PAYMENT_METHOD PAE
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_PAYMENT_METHOD PAC
             , ACS_FIN_ACC_S_PAYMENT PFC
             , PAC_PAYMENT_CONDITION CO2
             , PAC_PAYMENT_CONDITION CO1
             , PAC_PERSON PER
             , ACS_AUXILIARY_ACCOUNT AUX
             , PAC_SUPPLIER_PARTNER SUP
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMP
             , ACT_ETAT_JOURNAL EJO
             , ACT_JOURNAL JOU
             , ACT_EXPIRY exp
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACT_DOCUMENT DOC
             , ACT_PART_IMPUTATION PAR
             , ACS_ACCOUNT ACC
             , ACJ_SUB_SET_CAT SUB
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and CAT.C_TYPE_CATALOGUE <> '8'
           and   -- Transaction de relance
               PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
           and EXP_CALC_NET + 0 = 1
           and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, sysdate) = 1
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
           and EJO.C_SUB_SET = 'PAY'
           and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
           and IMP.ACT_DET_PAYMENT_ID is null
           and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
           and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and exp.C_STATUS_EXPIRY = 0
           and FIN.FIN_COLLECTIVE = 1
           and ACC.ACC_NUMBER >= procparam_0
           and ACC.ACC_NUMBER <= procparam_1
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and AUT.column_value = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
           and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
           and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID
           and SUP.PAC_PAYMENT_CONDITION_ID = CO1.PAC_PAYMENT_CONDITION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = CO2.PAC_PAYMENT_CONDITION_ID(+)
           and SUP.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFC.ACS_PAYMENT_METHOD_ID = PAC.ACS_PAYMENT_METHOD_ID(+)
           and exp.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFE.ACS_PAYMENT_METHOD_ID = PAE.ACS_PAYMENT_METHOD_ID(+)
           and doc.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'PAY'
           and (    (    parameter_3 = '1'
                     and SUB.C_TYPE_CUMUL = 'INT')
                or (    parameter_4 = '1'
                    and SUB.C_TYPE_CUMUL = 'EXT')
                or (    parameter_5 = '1'
                    and SUB.C_TYPE_CUMUL = 'PRE')
                or (    parameter_6 = '1'
                    and SUB.C_TYPE_CUMUL = 'ENG')
               )
           and (   parameter_11 = '1'
                or (    parameter_11 = '0'
                    and EJO.C_ETAT_JOURNAL <> 'BRO') )
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1)
                                       , 0, exp.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate)
                                        )
                             , exp.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> exp.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> exp.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = exp.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = exp.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    else
      if     (procparam_2 is not null)
         and (length(trim(procparam_2) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_DATE  := to_date(procparam_2, 'YYYYMMDD');
      end if;

      if     (procparam_0 is not null)
         and (length(trim(procparam_0) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := procparam_0;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := ' ';
      end if;

      if     (procparam_1 is not null)
         and (length(trim(procparam_1) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := procparam_1;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := ' ';
      end if;

      if     (parameter_11 is not null)
         and (length(trim(parameter_11) ) > 0) then
        if parameter_11 = '1' then
          ACT_FUNCTIONS.BRO  := 1;
        else
          ACT_FUNCTIONS.BRO  := 0;
        end if;
      end if;

      if     (procparam_6 is not null)
         and (length(trim(procparam_6) ) > 0) then
        begin
          ACT_CURRENCY_EVALUATION.RATE_TYPE  := to_number(procparam_6);
        exception
          when invalid_number then
            ACT_CURRENCY_EVALUATION.RATE_TYPE  := 1;   -- Cours du jour
        end;
      end if;

      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , V.ACS_ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY2 CURRENCY_MB
             , V.ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY1 CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , V.C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , V.ACT_DOCUMENT_ID
             , V.ACT_PART_IMPUTATION_ID
             , V.C_STATUS_EXPIRY
             , V.EXP_ADAPTED
             , V.EXP_CALCULATED
             , V.EXP_AMOUNT_LC
             , V.EXP_AMOUNT_FC
             , V.EXP_DISCOUNT_LC DISCOUNT_LC
             , V.EXP_DISCOUNT_FC DISCOUNT_FC
             , V.DET_PAIED_LC
             , V.DET_PAIED_FC
             , V.EXP_AMOUNT_LC - V.DET_PAIED_LC SOLDE_EXP_LC
             , V.EXP_AMOUNT_FC - V.DET_PAIED_FC SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(V.EXP_AMOUNT_FC - V.DET_PAIED_FC
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , to_date(procparam_2, 'YYYYMMDD')
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , V.EXP_SLICE
             , V.ACS_FIN_ACC_S_PAYMENT_ID
             , V.LAST_CLAIMS_LEVEL
             , V.LAST_CLAIMS_DATE
             , PCO_EXP.PCO_DESCR PCO_DESCR_EXP
             , V.ACS_PERIOD_ID
             , V.IMF_TRANSACTION_DATE
             , V.IMF_VALUE_DATE
             , V.IMF_DESCRIPTION
             , V.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , JOU.JOU_NUMBER
             , V.C_ETAT_JOURNAL
             , V.ACS_DIVISION_ACCOUNT_ID IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , V.PAC_SUPPLIER_PARTNER_ID
             , V.ACS_AUXILIARY_ACCOUNT_ID
             , PCO.PCO_DESCR PCO_DESCR_SUP
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , V.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = V.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = V.PAC_SUPPLIER_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_SUPP
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from V_ACT_EXPIRY_SUPP V
             , ACT_EXPIRY exp
             , ACT_DOCUMENT DOC
             , ACT_JOURNAL JOU
             , ACT_PART_IMPUTATION PAR
             , PAC_PAYMENT_CONDITION PCO_EXP
             , PAC_SUPPLIER_PARTNER SUP
             , PAC_PERSON PER
             , PAC_PAYMENT_CONDITION PCO
             , ACS_AUXILIARY_ACCOUNT AUX
             , ACS_ACCOUNT ACC
             , ACS_SUB_SET SUB
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_FIN_ACC_S_PAYMENT PFC
             , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, vlstdivisions) ) AUT
         where V.ACT_EXPIRY_ID = exp.ACT_EXPIRY_ID
           and V.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and V.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = PCO_EXP.PAC_PAYMENT_CONDITION_ID(+)
           and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
           and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID
           and SUP.PAC_PAYMENT_CONDITION_ID = PCO.PAC_PAYMENT_CONDITION_ID(+)
           and V.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
           and V.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and V.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and SUP.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
--Selection formula from crystal
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD'), 1)
                                       , 0, v.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD') )
                                        )
                             , v.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (    parameter_3 = '1'
                     and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'INT'
                    )
                or (    parameter_4 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'EXT'
                   )
                or (    parameter_5 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'PRE'
                   )
                or (    parameter_6 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'ENG'
                   )
               )
           and AUT.column_value = V.ACS_DIVISION_ACCOUNT_ID
           and (   instr(',' || procparam_5 || ',', to_char(',' || V.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> V.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = V.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    end if;
  else
    if (procparam_2 is null) then
      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
             , PAR.ACS_FINANCIAL_CURRENCY_ID
             , (select CUB.CURRENCY
                  from PCS.PC_CURR CUB
                     , ACS_FINANCIAL_CURRENCY CFB
                 where CFB.ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID
                   and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , (select SUB.C_TYPE_CUMUL
                  from ACJ_SUB_SET_CAT SUB
                 where DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
                   and SUB.C_SUB_SET = 'PAY') C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , exp.ACT_DOCUMENT_ID
             , exp.ACT_PART_IMPUTATION_ID
             , exp.C_STATUS_EXPIRY
             , case
                 when(procparam_7 = 1)
                 and (ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) <> 0) then ACT_FUNCTIONS.DiscountDateAfter
                                                                                                                                           (exp.ACT_DOCUMENT_ID
                                                                                                                                          , exp.EXP_SLICE
                                                                                                                                          , sysdate
                                                                                                                                           )
                 else exp.EXP_ADAPTED
               end EXP_ADAPTED
             , exp.EXP_CALCULATED
             , exp.EXP_AMOUNT_LC
             , exp.EXP_AMOUNT_FC
             , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1) DISCOUNT_LC
             , ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 0) DISCOUNT_FC
             , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) DET_PAIED_LC
             , ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) DET_PAIED_FC
             , exp.EXP_AMOUNT_LC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 1) SOLDE_EXP_LC
             , exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0) SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(exp.EXP_AMOUNT_FC - ACT_FUNCTIONS.TotalPaymentAt(exp.ACT_EXPIRY_ID, sysdate, 0)
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , sysdate
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , exp.EXP_SLICE
             , exp.ACS_FIN_ACC_S_PAYMENT_ID
             , ACT_FUNCTIONS.LastClaimsNumber(exp.ACT_EXPIRY_ID) LAST_CLAIMS_LEVEL
             , ACT_FUNCTIONS.LastClaimsDate(exp.ACT_EXPIRY_ID) LAST_CLAIMS_DATE
             , CO2.PCO_DESCR PCO_DESCR_EXP
             , IMP.ACS_PERIOD_ID
             , IMP.IMF_TRANSACTION_DATE
             , IMP.IMF_VALUE_DATE
             , IMP.IMF_DESCRIPTION
             , IMP.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = IMP.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , IMP.DIC_IMP_FREE1_ID
             , IMP.DIC_IMP_FREE2_ID
             , IMP.DIC_IMP_FREE3_ID
             , IMP.DIC_IMP_FREE4_ID
             , IMP.DIC_IMP_FREE5_ID
             , IMP.IMF_NUMBER
             , IMP.IMF_NUMBER2
             , IMP.IMF_NUMBER3
             , IMP.IMF_NUMBER4
             , IMP.IMF_NUMBER5
             , IMP.IMF_TEXT1
             , IMP.IMF_TEXT2
             , IMP.IMF_TEXT3
             , IMP.IMF_TEXT4
             , IMP.IMF_TEXT5
             , JOU.JOU_NUMBER
             , EJO.C_ETAT_JOURNAL
             , IMP.IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = IMP.IMF_ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , SUP.PAC_SUPPLIER_PARTNER_ID
             , SUP.ACS_AUXILIARY_ACCOUNT_ID
             , SUP.C_PARTNER_CATEGORY
             , CO1.PCO_DESCR PCO_DESCR_SUP
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = SUP.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , ACC.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = ACC.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_SUPP
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from ACS_PAYMENT_METHOD PAE
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_PAYMENT_METHOD PAC
             , ACS_FIN_ACC_S_PAYMENT PFC
             , PAC_PAYMENT_CONDITION CO2
             , PAC_PAYMENT_CONDITION CO1
             , PAC_PERSON PER
             , ACS_AUXILIARY_ACCOUNT AUX
             , PAC_SUPPLIER_PARTNER SUP
             , ACS_FINANCIAL_ACCOUNT FIN
             , ACT_FINANCIAL_IMPUTATION IMP
             , ACT_ETAT_JOURNAL EJO
             , ACT_JOURNAL JOU
             , ACT_EXPIRY exp
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACT_DOCUMENT DOC
             , ACT_PART_IMPUTATION PAR
             , ACS_ACCOUNT ACC
             , ACJ_SUB_SET_CAT SUB
         where PAR.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and CAT.C_TYPE_CATALOGUE <> '8'
           and   -- Transaction de relance
               PAR.ACT_PART_IMPUTATION_ID = exp.ACT_PART_IMPUTATION_ID
           and EXP_CALC_NET + 0 = 1
           and ACT_EXPIRY_MANAGEMENT.IsExpiryOpenedAt(exp.ACT_EXPIRY_ID, sysdate) = 1
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and DOC.ACT_JOURNAL_ID = EJO.ACT_JOURNAL_ID
           and EJO.C_SUB_SET = 'PAY'
           and exp.ACT_PART_IMPUTATION_ID = IMP.ACT_PART_IMPUTATION_ID
           and IMP.ACT_DET_PAYMENT_ID is null
           and IMP.ACS_AUXILIARY_ACCOUNT_ID is not null
           and IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID
           and exp.C_STATUS_EXPIRY = 0
           and FIN.FIN_COLLECTIVE = 1
           and ACC.ACC_NUMBER >= procparam_0
           and ACC.ACC_NUMBER <= procparam_1
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   instr(',' || procparam_5 || ',', to_char(',' || FIN.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
           and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and SUP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID
           and SUP.PAC_PAYMENT_CONDITION_ID = CO1.PAC_PAYMENT_CONDITION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = CO2.PAC_PAYMENT_CONDITION_ID(+)
           and SUP.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFC.ACS_PAYMENT_METHOD_ID = PAC.ACS_PAYMENT_METHOD_ID(+)
           and exp.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and PFE.ACS_PAYMENT_METHOD_ID = PAE.ACS_PAYMENT_METHOD_ID(+)
           and doc.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID
           and SUB.C_SUB_SET = 'PAY'
           and (    (    parameter_3 = '1'
                     and SUB.C_TYPE_CUMUL = 'INT')
                or (    parameter_4 = '1'
                    and SUB.C_TYPE_CUMUL = 'EXT')
                or (    parameter_5 = '1'
                    and SUB.C_TYPE_CUMUL = 'PRE')
                or (    parameter_6 = '1'
                    and SUB.C_TYPE_CUMUL = 'ENG')
               )
           and (   parameter_11 = '1'
                or (    parameter_11 = '0'
                    and EJO.C_ETAT_JOURNAL <> 'BRO') )
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate, 1)
                                       , 0, exp.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(exp.ACT_DOCUMENT_ID, exp.EXP_SLICE, sysdate)
                                        )
                             , exp.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> exp.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> exp.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID = PAR.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = exp.EXP_AMOUNT_LC)
                             )
                         or (     (PAR.ACS_ACS_FINANCIAL_CURRENCY_ID <> PAR.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(exp.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = exp.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    else
      if     (procparam_2 is not null)
         and (length(trim(procparam_2) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_DATE  := to_date(procparam_2, 'YYYYMMDD');
      end if;

      if     (procparam_0 is not null)
         and (length(trim(procparam_0) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := procparam_0;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY1  := ' ';
      end if;

      if     (procparam_1 is not null)
         and (length(trim(procparam_1) ) > 0) then
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := procparam_1;
      else
        ACT_FUNCTIONS.ANALYSE_AUXILIARY2  := ' ';
      end if;

      if     (parameter_11 is not null)
         and (length(trim(parameter_11) ) > 0) then
        if parameter_11 = '1' then
          ACT_FUNCTIONS.BRO  := 1;
        else
          ACT_FUNCTIONS.BRO  := 0;
        end if;
      end if;

      if     (procparam_6 is not null)
         and (length(trim(procparam_6) ) > 0) then
        begin
          ACT_CURRENCY_EVALUATION.RATE_TYPE  := to_number(procparam_6);
        exception
          when invalid_number then
            ACT_CURRENCY_EVALUATION.RATE_TYPE  := 1;   -- Cours du jour
        end;
      end if;

      open aRefCursor for
        select PAR.PAR_DOCUMENT
             , V.ACS_ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY2 CURRENCY_MB
             , V.ACS_FINANCIAL_CURRENCY_ID
             , V.CURRENCY1 CURRENCY_ME
             , DOC.DOC_NUMBER
             , CAT.C_TYPE_CATALOGUE
             , V.C_TYPE_CUMUL
             , exp.ACT_EXPIRY_ID
             , V.ACT_DOCUMENT_ID
             , V.ACT_PART_IMPUTATION_ID
             , V.C_STATUS_EXPIRY
             , V.EXP_ADAPTED
             , V.EXP_CALCULATED
             , V.EXP_AMOUNT_LC
             , V.EXP_AMOUNT_FC
             , V.EXP_DISCOUNT_LC DISCOUNT_LC
             , V.EXP_DISCOUNT_FC DISCOUNT_FC
             , V.DET_PAIED_LC
             , V.DET_PAIED_FC
             , V.EXP_AMOUNT_LC - V.DET_PAIED_LC SOLDE_EXP_LC
             , V.EXP_AMOUNT_FC - V.DET_PAIED_FC SOLDE_EXP_FC
             , ACT_CURRENCY_EVALUATION.GetConvertAmount(V.EXP_AMOUNT_FC - V.DET_PAIED_FC
                                                      , PAR.ACS_FINANCIAL_CURRENCY_ID
                                                      , PAR.ACS_ACS_FINANCIAL_CURRENCY_ID
                                                      , to_date(procparam_2, 'YYYYMMDD')
                                                      , procparam_6
                                                       ) SOLDE_REEVAL_LC
             , V.EXP_SLICE
             , V.ACS_FIN_ACC_S_PAYMENT_ID
             , V.LAST_CLAIMS_LEVEL
             , V.LAST_CLAIMS_DATE
             , PCO_EXP.PCO_DESCR PCO_DESCR_EXP
             , V.ACS_PERIOD_ID
             , V.IMF_TRANSACTION_DATE
             , V.IMF_VALUE_DATE
             , V.IMF_DESCRIPTION
             , V.ACS_FINANCIAL_ACCOUNT_ID
             , (select ACF.ACC_NUMBER
                  from ACS_ACCOUNT ACF
                 where ACF.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER_FIN
             , (select DE1.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE1
                 where DE1.ACS_ACCOUNT_ID = V.ACS_FINANCIAL_ACCOUNT_ID
                   and DE1.PC_LANG_ID = vpc_lang_id) ACCOUNT_FIN_DESCR
             , JOU.JOU_NUMBER
             , V.C_ETAT_JOURNAL
             , V.ACS_DIVISION_ACCOUNT_ID IMF_ACS_DIVISION_ACCOUNT_ID
             , (select ACD.ACC_NUMBER
                  from ACS_ACCOUNT ACD
                 where ACD.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID) ACC_NUMBER_DIV
             , (select DE2.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE2
                 where DE2.ACS_ACCOUNT_ID = V.ACS_DIVISION_ACCOUNT_ID
                   and DE2.PC_LANG_ID = vpc_lang_id) ACCOUNT_DIV_DESCR
             , V.PAC_SUPPLIER_PARTNER_ID
             , V.ACS_AUXILIARY_ACCOUNT_ID
             , PCO.PCO_DESCR PCO_DESCR_SUP
             , ACC.ACC_NUMBER ACC_NUMBER_AUX
             , (select DE3.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE3
                 where DE3.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE3.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_DESCR
             , (select DE4.DES_DESCRIPTION_LARGE
                  from ACS_DESCRIPTION DE4
                 where DE4.ACS_ACCOUNT_ID = V.ACS_AUXILIARY_ACCOUNT_ID
                   and DE4.PC_LANG_ID = vpc_lang_id) ACCOUNT_AUX_LARGE_DESCR
             , V.ACS_SUB_SET_ID
             , (select DE5.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE5
                 where DE5.ACS_SUB_SET_ID = V.ACS_SUB_SET_ID
                   and DE5.PC_LANG_ID = vpc_lang_id) SUB_SET_DESCR
             , AUX.C_TYPE_ACCOUNT
             , PER.PER_NAME
             , PER.PER_FORENAME
             , PER.PER_SHORT_NAME
             , PER.PER_ACTIVITY
             , PER.PER_KEY1
             , (select ADR.ADD_FORMAT
                  from PAC_ADDRESS ADR
                 where ADR.PAC_PERSON_ID = V.PAC_SUPPLIER_PARTNER_ID
                   and ADR.ADD_PRINCIPAL = '1') ADD_FORMAT
             , (select DE6.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE6
                 where DE6.ACS_PAYMENT_METHOD_ID = PFC.ACS_PAYMENT_METHOD_ID
                   and DE6.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_SUPP
             , (select DE7.DES_DESCRIPTION_SUMMARY
                  from ACS_DESCRIPTION DE7
                 where DE7.ACS_PAYMENT_METHOD_ID = PFE.ACS_PAYMENT_METHOD_ID
                   and DE7.PC_LANG_ID = vpc_lang_id) ACS_PAYMENT_METHOD_DESCR_EXP
          from V_ACT_EXPIRY_SUPP V
             , ACT_EXPIRY exp
             , ACT_DOCUMENT DOC
             , ACT_JOURNAL JOU
             , ACT_PART_IMPUTATION PAR
             , PAC_PAYMENT_CONDITION PCO_EXP
             , PAC_SUPPLIER_PARTNER SUP
             , PAC_PERSON PER
             , PAC_PAYMENT_CONDITION PCO
             , ACS_AUXILIARY_ACCOUNT AUX
             , ACS_ACCOUNT ACC
             , ACS_SUB_SET SUB
             , ACJ_CATALOGUE_DOCUMENT CAT
             , ACS_FIN_ACC_S_PAYMENT PFE
             , ACS_FIN_ACC_S_PAYMENT PFC
         where V.ACT_EXPIRY_ID = exp.ACT_EXPIRY_ID
           and V.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
           and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
           and V.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
           and PAR.PAC_PAYMENT_CONDITION_ID = PCO_EXP.PAC_PAYMENT_CONDITION_ID(+)
           and PAR.PAC_SUPPLIER_PARTNER_ID = SUP.PAC_SUPPLIER_PARTNER_ID
           and SUP.PAC_SUPPLIER_PARTNER_ID = PER.PAC_PERSON_ID
           and SUP.PAC_PAYMENT_CONDITION_ID = PCO.PAC_PAYMENT_CONDITION_ID(+)
           and V.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
           and AUX.ACS_AUXILIARY_ACCOUNT_ID = ACC.ACS_ACCOUNT_ID
           and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
           and V.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID
           and V.ACS_FIN_ACC_S_PAYMENT_ID = PFE.ACS_FIN_ACC_S_PAYMENT_ID(+)
           and SUP.ACS_FIN_ACC_S_PAYMENT_ID = PFC.ACS_FIN_ACC_S_PAYMENT_ID(+)
--Selection formula from crystal
           and (   ACC.ACS_SUB_SET_ID = procparam_3
                or procparam_3 is null)
           and (   parameter_1 = '0'
                or (    parameter_1 = '1'
                    and decode(procparam_7
                             , 1, decode(ACT_FUNCTIONS.DiscountAmountAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD'), 1)
                                       , 0, v.EXP_ADAPTED
                                       , ACT_FUNCTIONS.DiscountDateAfter(v.ACT_DOCUMENT_ID, v.EXP_SLICE, to_date(procparam_2, 'YYYYMMDD') )
                                        )
                             , v.EXP_ADAPTED
                              ) <= to_date(parameter_2, 'yyyyMMdd')
                   )
               )
           and (    (    parameter_3 = '1'
                     and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'INT'
                    )
                or (    parameter_4 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'EXT'
                   )
                or (    parameter_5 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'PRE'
                   )
                or (    parameter_6 = '1'
                    and substr(ACT_FUNCTIONS.GETCUMULTYP(DOC.ACJ_CATALOGUE_DOCUMENT_ID, nvl2(exp.EXP_PAC_SUPPLIER_PARTNER_ID, 'PAY', 'REC') ), 1, 3) = 'ENG'
                   )
               )
           and (   instr(',' || procparam_5 || ',', to_char(',' || V.ACS_FINANCIAL_ACCOUNT_ID || ',') ) > 0
                or procparam_5 = '#')
           and (   instr(',' || procparam_8 || ',', to_char(',' || PFE.ACS_PAYMENT_METHOD_ID || ',') ) > 0
                or procparam_8 = '#')
           and (    (procparam_9 = '0')
                or (     (procparam_9 = '1')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 1) <> V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_10, 'yyyyMMdd'), 0) <> V.EXP_AMOUNT_FC)
                            )
                        )
                   )
                or (     (procparam_9 = '2')
                    and (    (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID = V.ACS_FINANCIAL_CURRENCY_ID)
                              and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 1) = V.EXP_AMOUNT_LC)
                             )
                         or (     (V.ACS_ACS_FINANCIAL_CURRENCY_ID <> V.ACS_FINANCIAL_CURRENCY_ID)
                             and (ACT_FUNCTIONS.TOTALPAYMENTAT(V.ACT_EXPIRY_ID, to_date(procparam_11, 'yyyyMMdd'), 0) = V.EXP_AMOUNT_FC)
                            )
                        )
                   )
               );
    end if;
  end if;
end RPT_ACT_EXPIRY_SUPPLIER;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_FIN_IMP_CML_BAL_SUB" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_3    in     varchar2
, PROCPARAM_4    in     varchar2
, PROCPARAM_6    in     varchar2
, PROCPARAM_7    in     varchar2
, PROCPARAM_8    in     varchar2
, PROCPARAM_9    in     varchar2
, PARAMETER_2    in     varchar2
, PARAMETER_3    in     varchar2
, PARAMETER_4    in     varchar2
, PARAMETER_5    in     varchar2
, PARAMETER_6    in     varchar2
, PARAMETER_9    in     varchar2
, PROCUSER_LANID in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACR_ACC_IMPUTATION_COMPARE

* @author jliu 18 nov 2008
* @lastupdate VHA 15 August 2012
* @public
* @param PROCPARAM_3    DIVISION_ID List ('' = tout), sinon liste des ID
* @param PROCPARAM_4    Date (yyyyMMdd)
* @param PROCPARAM_6    Journal status = BRO : 1=Yes / 0=No
* @param PROCPARAM_7    Journal status = PROV : 1=Yes / 0=No
* @param PROCPARAM_8    Journal status = DEF : 1=Yes / 0=No
* @param PROCPARAM_9    ACS_FINANCIAL_ACCOUNT_ID

* @param PARAMETER_2    Compare code : '0'=all / '1'=compared / '2'=not compared
* @param PARAMETER_3    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param PARAMETER_4    C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param PARAMETER_5    C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param PARAMETER_6    C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
* @param PARAMETER_9    Only transaction without VAT
*/
is
  VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;
begin
  open aRefCursor for
    select 0 ACT_FINANCIAL_IMPUTATION_ID
         , TOT.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , FYE.FYE_START_DATE IMF_TRANSACTION_DATE
         , FYE.FYE_START_DATE IMF_VALUE_DATE
         , 'Report' IMF_DESCRIPTION
         , TOT.ACS_DIVISION_ACCOUNT_ID
         , 0 ACS_TAX_CODE_ID
         , null TAX_NUMBER
         , TOT.ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CFB
             where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
         , TOT.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CFB
             where CFB.ACS_FINANCIAL_CURRENCY_ID = TOT.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
         , TOT.TOT_DEBIT_LC IMF_AMOUNT_LC_D
         , TOT.TOT_CREDIT_LC IMF_AMOUNT_LC_C
         , TOT.TOT_DEBIT_FC IMF_AMOUNT_FC_D
         , TOT.TOT_CREDIT_FC IMF_AMOUNT_FC_C
         , FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_START_DATE FYE_START_DATE
         , FYE.FYE_END_DATE FYE_END_DATE
         , PER.PER_START_DATE PER_START_DATE
         , PER.PER_END_DATE PER_END_DATE
         , PER.C_TYPE_PERIOD C_TYPE_PERIOD
         , 0 ACT_JOURNAL_ID
         , null JOU_NUMBER
         , null JOU_DESCRIPTION
         , 'PROV' C_ETAT_JOURNAL
         , TOT.C_TYPE_CUMUL
         , 'OPB' C_TYPE_JOURNAL
         , 'MAN' IMF_TYPE
      from ACS_FINANCIAL_YEAR FYE
         , ACS_PERIOD PER
         , ACS_FINANCIAL_ACCOUNT FIN
         , ACT_TOTAL_BY_PERIOD TOT
     where FIN.ACS_FINANCIAL_ACCOUNT_ID = PROCPARAM_9
       and FIN.ACS_FINANCIAL_ACCOUNT_ID = TOT.ACS_FINANCIAL_ACCOUNT_ID
       and TOT.ACS_AUXILIARY_ACCOUNT_ID is null
       and to_date(PROCPARAM_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and PER.ACS_PERIOD_ID = TOT.ACS_PERIOD_ID
       and PER.C_TYPE_PERIOD = '1'
       and (    (TOT.ACS_DIVISION_ACCOUNT_ID is not null)
            or (    TOT.ACS_DIVISION_ACCOUNT_ID is null
                and ACR_FUNCTIONS.ExistDivision = 0) )
       and (   PROCPARAM_3 is null
            or instr(',' || PROCPARAM_3 || ',', ',' || TOT.ACS_DIVISION_ACCOUNT_ID || ',') > 0)
       and PROCPARAM_7 = 1
       and decode(TOT.C_TYPE_CUMUL
                , 'INT', decode(PARAMETER_3, '1', 1, 0)
                , 'EXT', decode(PARAMETER_4, '1', 1, 0)
                , 'PRE', decode(PARAMETER_5, '1', 1, 0)
                , 'ENG', decode(PARAMETER_6, '1', 1, 0)
                , 0
                 ) = 1
    union all
    select IMP.ACT_FINANCIAL_IMPUTATION_ID ACT_FINANCIAL_IMPUTATION_ID
         , IMP.ACS_FINANCIAL_ACCOUNT_ID ACS_FINANCIAL_ACCOUNT_ID
         , IMP.IMF_TRANSACTION_DATE IMF_TRANSACTION_DATE
         , IMP.IMF_VALUE_DATE IMF_VALUE_DATE
         , IMP.IMF_DESCRIPTION IMF_DESCRIPTION
         , IMP.IMF_ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID
         , IMP.ACS_TAX_CODE_ID ACS_TAX_CODE_ID
         , (select ACV.ACC_NUMBER
              from ACS_ACCOUNT ACV
             where ACV.ACS_ACCOUNT_ID = IMP.ACS_TAX_CODE_ID) TAX_NUMBER
         , IMP.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CFB
             where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_MB
         , IMP.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID
         , (select CUB.CURRENCY
              from PCS.PC_CURR CUB
                 , ACS_FINANCIAL_CURRENCY CFB
             where CFB.ACS_FINANCIAL_CURRENCY_ID = IMP.ACS_FINANCIAL_CURRENCY_ID
               and CUB.PC_CURR_ID = CFB.PC_CURR_ID) CURRENCY_ME
         , IMP.IMF_AMOUNT_LC_D IMF_AMOUNT_LC_D
         , IMP.IMF_AMOUNT_LC_C IMF_AMOUNT_LC_C
         , IMP.IMF_AMOUNT_FC_D IMF_AMOUNT_FC_D
         , IMP.IMF_AMOUNT_FC_C IMF_AMOUNT_FC_C
         , FYE.ACS_FINANCIAL_YEAR_ID ACS_FINANCIAL_YEAR_ID
         , FYE.FYE_START_DATE FYE_START_DATE
         , FYE.FYE_END_DATE FYE_END_DATE
         , PER.PER_START_DATE PER_START_DATE
         , PER.PER_END_DATE PER_END_DATE
         , PER.C_TYPE_PERIOD C_TYPE_PERIOD
         , JOU.ACT_JOURNAL_ID ACT_JOURNAL_ID
         , JOU.JOU_NUMBER JOU_NUMBER
         , JOU.JOU_DESCRIPTION JOU_DESCRIPTION
         , (select ETA.C_ETAT_JOURNAL
              from ACT_ETAT_JOURNAL ETA
             where ETA.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
               and ETA.C_SUB_SET = 'ACC') C_ETAT_JOURNAL
         , (select SCA.C_TYPE_CUMUL
              from ACJ_SUB_SET_CAT SCA
             where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
               and SCA.C_SUB_SET = 'ACC') C_TYPE_CUMUL
         , JOU.C_TYPE_JOURNAL C_TYPE_JOURNAL
         , IMP.IMF_TYPE IMF_TYPE
      from ACT_JOURNAL JOU
         , ACT_DOCUMENT DOC
         , ACS_PERIOD PER
         , ACS_FINANCIAL_YEAR FYE
         , ACT_FINANCIAL_IMPUTATION IMP
     where IMP.ACS_FINANCIAL_ACCOUNT_ID = PROCPARAM_9
       and to_date(PROCPARAM_4, 'yyyyMMdd') between FYE.FYE_START_DATE and FYE.FYE_END_DATE
       and FYE.ACS_FINANCIAL_YEAR_ID = PER.ACS_FINANCIAL_YEAR_ID
       and IMP.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
       and IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID
       and IMP.IMF_TRANSACTION_DATE < to_date(PROCPARAM_4, 'yyyyMMdd')
       and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
       and (   PROCPARAM_3 is null
            or instr(',' || PROCPARAM_3 || ',', ',' || IMP.IMF_ACS_DIVISION_ACCOUNT_ID || ',') > 0)
       and decode( (select C_ETAT_JOURNAL
                      from ACT_ETAT_JOURNAL
                     where ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
                       and C_SUB_SET = 'ACC')
                , null, 1
                , 'BRO', decode(PROCPARAM_6, '1', 1, 0)
                , 'PROV', decode(PROCPARAM_7, '1', 1, 0)
                , 'DEF', decode(PROCPARAM_8, '1', 1, 0)
                , 0
                 ) = 1
       and decode( (select SCA.C_TYPE_CUMUL
                      from ACJ_SUB_SET_CAT SCA
                     where SCA.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
                       and SCA.C_SUB_SET = 'ACC')
                , 'INT', decode(PARAMETER_3, '1', 1, 0)
                , 'EXT', decode(PARAMETER_4, '1', 1, 0)
                , 'PRE', decode(PARAMETER_5, '1', 1, 0)
                , 'ENG', decode(PARAMETER_6, '1', 1, 0)
                , 0
                 ) = 1
       and decode(PARAMETER_9, 1, decode(IMP.IMF_TYPE, 'VAT', 0, decode(IMP.ACS_TAX_CODE_ID, null, 1, 0) ), 1) = 1;
end RPT_ACT_FIN_IMP_CML_BAL_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_FIN_IMP_CML_DIV_SUB" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_5 in     varchar2
, PROCPARAM_6 in     varchar2
, PROCPARAM_7 in     varchar2
, PROCPARAM_8 in     varchar2
, PARAMETER_0 in     varchar2
, PARAMETER_1 in     varchar2
, PARAMETER_3 in     varchar2
, PARAMETER_4 in     varchar2
, PARAMETER_5 in     varchar2
, PARAMETER_6 in     varchar2
, PARAMETER_9 in     varchar2
)
/**
* description used for report ACR_ACC_IMPUTATION_COMPARE

* @author jliu 18 nov 2008
* @lastupdate VHA 15 August 2012
* @public
* @param PROCPARAM_5    Date to (yyyyMMdd)
* @param PROCPARAM_6    Journal status = BRO : 1=Yes / 0=No
* @param PROCPARAM_7    Journal status = PROV : 1=Yes / 0=No
* @param PROCPARAM_8    Journal status = DEF : 1=Yes / 0=No
* @param PARAMETER_0    ACS_FINANCIAL_ACCOUNT_ID
* @param PARAMETER_1    ACS_DIVISION_ACCOUNT_ID
* @param PARAMETER_3    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param PARAMETER_4    C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param PARAMETER_5    C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param PARAMETER_6    C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
* @param PARAMETER_9    Only transaction without VAT
*/
is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin
open aRefCursor for
SELECT
CAT.ACJ_CATALOGUE_DOCUMENT_ID,
ACC_S.ACS_FINANCIAL_CURRENCY_ID S_ACS_FINANCIAL_CURRENCY_ID,
CUR.FIN_LOCAL_CURRENCY,
JOU.C_TYPE_JOURNAL,
PCR.CURRENCY,
PCR2.CURRENCY CURRENCY_LC,
V_IMP.ACS_FINANCIAL_ACCOUNT_ID,
V_IMP.IMF_AMOUNT_LC_D,
V_IMP.IMF_AMOUNT_LC_C,
V_IMP.IMF_AMOUNT_FC_D,
V_IMP.IMF_AMOUNT_FC_C,
V_IMP.IMF_TRANSACTION_DATE,
V_IMP.IMF_COMPARE_DATE,
V_IMP.ACS_FINANCIAL_CURRENCY_ID V_ACS_FINANCIAL_CURRENCY_ID,
V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
V_IMP.ACT_JOURNAL_ID,
V_IMP.ACS_DIVISION_ACCOUNT_ID
FROM
    ACJ_CATALOGUE_DOCUMENT CAT,
    ACJ_SUB_SET_CAT SUB,
    ACS_FIN_ACCOUNT_S_FIN_CURR ACC_S,
    ACS_FINANCIAL_CURRENCY CUR,
    ACS_FINANCIAL_CURRENCY CUL,
    ACT_DOCUMENT DOC,
    ACT_JOURNAL JOU,
    PCS.PC_CURR PCR,
    PCS.PC_CURR PCR2,
    V_ACT_ACC_IMP_REPORT V_IMP
WHERE
V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
AND DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID(+)
AND DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC_S.ACS_FINANCIAL_ACCOUNT_ID(+)
AND V_IMP.ACS_FINANCIAL_CURRENCY_ID = ACC_S.ACS_FINANCIAL_CURRENCY_ID(+)
AND V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
AND CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
AND V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID
AND CUL.PC_CURR_ID = PCR2.PC_CURR_ID
AND V_IMP.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
AND V_IMP.IMF_TRANSACTION_DATE <= TO_DATE(PROCPARAM_5,'yyyyMMdd')
AND DECODE(SUB.C_SUB_SET,NULL,1,'ACC',1,0)=1
AND DECODE(PARAMETER_9,'1',
          DECODE(V_IMP.IMF_TYPE,'VAT',0,DECODE(V_IMP.ACS_TAX_CODE_ID,NULL,1,0)),
          DECODE(V_IMP.IMF_TYPE,NULL,0,1))=1
AND ((PROCPARAM_6='1' AND V_IMP.C_ETAT_JOURNAL = 'BRO')
    OR (PROCPARAM_7='1' AND V_IMP.C_ETAT_JOURNAL = 'PROV')
    OR (PROCPARAM_8='1' AND V_IMP.C_ETAT_JOURNAL = 'DEF'))
AND DECODE(V_IMP.C_TYPE_CUMUL,'INT',DECODE(PARAMETER_3,'1',1,0),'EXT',DECODE(PARAMETER_4,'1',1,0),'PRE',DECODE(PARAMETER_5,'1',1,0),'ENG',DECODE(PARAMETER_6,'1',1,0),0)=1
AND DECODE(V_IMP.ACT_JOURNAL_ID,'NULL',0,DECODE(JOU.C_TYPE_JOURNAL,'OPB',0,1))=1
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = TO_NUMBER(PARAMETER_0)
AND V_IMP.ACS_DIVISION_ACCOUNT_ID = TO_NUMBER(PARAMETER_1)
;
end RPT_ACT_FIN_IMP_CML_DIV_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_FIN_IMP_CUMUL_PAY" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, date_to        in     VARCHAR2
, PARAMETER_0    in     NUMBER
, PARAMETER_7    in     VARCHAR2
, PARAMETER_8    in     VARCHAR2
, PARAMETER_9    in     VARCHAR2
, PARAMETER_12   in     VARCHAR2
, PARAMETER_17   in     VARCHAR2 -- Division list
, PARAMETER_18   in     VARCHAR2
, PARAMETER_19   in     VARCHAR2
, PARAMETER_20   in     VARCHAR2
, PARAMETER_21   in     VARCHAR2
)
is
/**
/**
*DESCRIPTION USED FOR REPORT ACR_PAY_IMPUTATION_DET (SS_REPORT V_ACT_FINANCIAL_IMPUTATION_CUMUL)
 * Replace the procedure ACT_FIN_IMP_CUMUL_PAY_RPT
*author JLI / PYB
*lastUpdate 2007-12-19 / 2008-09-30
*version 2007
*public
*/
BEGIN
open aRefCursor for
SELECT
CAT.C_TYPE_CATALOGUE,
CUR.ACS_FINANCIAL_CURRENCY_ID,
FIN.FIN_COLLECTIVE,
CUR.FIN_LOCAL_CURRENCY,
PCR.CURRENCY,
PCR2.CURRENCY CURRENCY_LC,
V_IMP.IMF_AMOUNT_LC_D,
V_IMP.IMF_AMOUNT_LC_C,
V_IMP.IMF_AMOUNT_FC_D,
V_IMP.IMF_AMOUNT_FC_C,
V_IMP.IMF_TRANSACTION_DATE,
V_IMP.ACS_FINANCIAL_CURRENCY_ID,
V_IMP.ACS_AUXILIARY_ACCOUNT_ID,
V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
V_IMP.C_ETAT_JOURNAL,
V_IMP.ACT_FINANCIAL_IMPUTATION_ID,
PRD.C_TYPE_PERIOD
FROM
	ACJ_CATALOGUE_DOCUMENT CAT,
	ACS_AUX_ACCOUNT_S_FIN_CURR AUX,
	ACS_FINANCIAL_ACCOUNT FIN,
	ACS_FINANCIAL_CURRENCY CUR,
	ACS_FINANCIAL_CURRENCY CUL,
	ACT_DOCUMENT DOC,
	PCS.PC_CURR PCR,
	PCS.PC_CURR PCR2,
	V_ACT_PAY_IMP_REPORT V_IMP,
	ACS_PERIOD PRD,
    THE (SELECT CAST(DOC_DOCUMENT_LIST_FUNCTIONS.IN_LIST(PARAMETER_17) AS CHAR_TABLE_TYPE) FROM DUAL) DIVISION_ACCOUNT_ID_LIST,
	ACS_AUX_ACCOUNT_S_FIN_CURR AUX_S
WHERE
V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
AND DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
AND V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
AND CUR.ACS_FINANCIAL_CURRENCY_ID = PCR.PC_CURR_ID(+)
AND V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
AND V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
AND CUL.PC_CURR_ID = PCR2.PC_CURR_ID
AND FIN.FIN_COLLECTIVE = 1
AND PRD.ACS_PERIOD_ID = V_IMP.ACS_PERIOD_ID
AND AUX_S.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
AND AUX_S.ACS_FINANCIAL_CURRENCY_ID = V_IMP.ACS_FINANCIAL_CURRENCY_ID
AND V_IMP.IMF_TRANSACTION_DATE <= TO_DATE(date_to,'yyyyMMdd')
AND ((PARAMETER_7='1' AND V_IMP.C_ETAT_JOURNAL = 'BRO')
    OR (PARAMETER_8='1' AND V_IMP.C_ETAT_JOURNAL = 'PROV')
	OR (PARAMETER_9='1' AND V_IMP.C_ETAT_JOURNAL = 'DEF'))
AND (PARAMETER_17 = '#' OR V_IMP.ACS_DIVISION_ACCOUNT_ID = DIVISION_ACCOUNT_ID_LIST.COLUMN_VALUE)
AND ((PARAMETER_18 ='1' AND V_IMP.C_TYPE_CUMUL = 'EXT')
    OR (PARAMETER_19 ='1' AND  V_IMP.C_TYPE_CUMUL ='INT')
    OR (PARAMETER_20 ='1' AND V_IMP.C_TYPE_CUMUL ='PRE')
    OR (PARAMETER_21='1' AND V_IMP.C_TYPE_CUMUL ='ENG'))
AND ((PARAMETER_12 = '1')
    OR((PARAMETER_12 <>'1') AND (CAT.C_TYPE_CATALOGUE IS NULL))
    OR((PARAMETER_12 <>'1') AND NOT(CAT.C_TYPE_CATALOGUE IS NULL) AND CAT.C_TYPE_CATALOGUE <>'9'))
AND V_IMP.ACS_AUXILIARY_ACCOUNT_ID = PARAMETER_0
;
END RPT_ACT_FIN_IMP_CUMUL_PAY;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_FIN_IMP_CUMUL_REC" (
  aRefCursor    in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, date_to       in     VARCHAR2
, PARAMETER_0   in     NUMBER
, PARAMETER_7   in     VARCHAR2
, PARAMETER_8   in     VARCHAR2
, PARAMETER_9   in     VARCHAR2
, PARAMETER_12  in     VARCHAR2
, PARAMETER_17  in     VARCHAR2 -- Division list
, PARAMETER_18  in     VARCHAR2
, PARAMETER_19  in     VARCHAR2
, PARAMETER_20  in     VARCHAR2
, PARAMETER_21  in     VARCHAR2
)
is
/**
/**
*DESCRIPTION
  USED FOR REPORT  ACR_REC_IMPUTATION_DET (SS_REPORT V_ACT_FINANCIAL_IMPUTATION_CUMUL)
 * Replace the procedure ACT_FIN_IMP_CUMUL_REC_RPT
*author JLI / PYB
*lastUpdate 2007-12-19 - 2008-09-30
*version 2007
*public
*/
BEGIN
open aRefCursor for
SELECT
CAT.C_TYPE_CATALOGUE,
FIN.FIN_COLLECTIVE,
CUR.FIN_LOCAL_CURRENCY,
PCR.CURRENCY,
PCR2.CURRENCY CURRENCY_LC,
V_IMP.IMF_AMOUNT_LC_D,
V_IMP.IMF_AMOUNT_LC_C,
V_IMP.IMF_AMOUNT_FC_D,
V_IMP.IMF_AMOUNT_FC_C,
V_IMP.IMF_TRANSACTION_DATE,
V_IMP.ACS_FINANCIAL_CURRENCY_ID,
V_IMP.ACS_AUXILIARY_ACCOUNT_ID,
V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
V_IMP.C_ETAT_JOURNAL,
V_IMP.ACT_FINANCIAL_IMPUTATION_ID,
PRD.C_TYPE_PERIOD
FROM
    ACJ_CATALOGUE_DOCUMENT CAT,
    ACS_AUX_ACCOUNT_S_FIN_CURR AUX,
    ACS_FINANCIAL_ACCOUNT FIN,
    ACS_FINANCIAL_CURRENCY CUR,
    ACS_FINANCIAL_CURRENCY CUL,
    ACT_DOCUMENT DOC,
    PCS.PC_CURR PCR,
    PCS.PC_CURR PCR2,
    V_ACT_REC_IMP_REPORT V_IMP,
    ACS_PERIOD PRD,
    ACS_AUX_ACCOUNT_S_FIN_CURR AUX_S,
    THE (SELECT CAST(DOC_DOCUMENT_LIST_FUNCTIONS.IN_LIST(PARAMETER_17) AS CHAR_TABLE_TYPE) FROM DUAL) DIVISION_ACCOUNT_ID_LIST
WHERE
V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
AND DOC.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = FIN.ACS_FINANCIAL_ACCOUNT_ID(+)
AND V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID(+)
AND CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
AND V_IMP.ACS_AUXILIARY_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID(+)
AND V_IMP.ACS_FINANCIAL_ACCOUNT_ID = AUX.ACS_FINANCIAL_CURRENCY_ID(+)
AND V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID(+)
AND CUL.PC_CURR_ID = PCR2.PC_CURR_ID
AND FIN.FIN_COLLECTIVE = 1
AND V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
AND AUX_S.ACS_AUXILIARY_ACCOUNT_ID = V_IMP.ACS_AUXILIARY_ACCOUNT_ID
AND AUX_S.ACS_FINANCIAL_CURRENCY_ID = V_IMP.ACS_FINANCIAL_CURRENCY_ID
AND V_IMP.IMF_TRANSACTION_DATE <= TO_DATE(date_to,'yyyyMMdd')
AND ((PARAMETER_7='1' AND V_IMP.C_ETAT_JOURNAL = 'BRO')
    OR (PARAMETER_8='1' AND V_IMP.C_ETAT_JOURNAL = 'PROV')
    OR (PARAMETER_9='1' AND V_IMP.C_ETAT_JOURNAL = 'DEF'))
AND (PARAMETER_17 = '#' OR V_IMP.ACS_DIVISION_ACCOUNT_ID = DIVISION_ACCOUNT_ID_LIST.COLUMN_VALUE)
AND ((PARAMETER_18 ='1' AND V_IMP.C_TYPE_CUMUL = 'EXT')
     OR (PARAMETER_19 ='1' AND  V_IMP.C_TYPE_CUMUL ='INT')
     OR (PARAMETER_20 ='1' AND V_IMP.C_TYPE_CUMUL ='PRE')
     OR (PARAMETER_21='1' AND V_IMP.C_TYPE_CUMUL ='ENG'))
AND ((PARAMETER_12 = '1')
    OR((PARAMETER_12 <>'1') AND (CAT.C_TYPE_CATALOGUE IS NULL))
    OR((PARAMETER_12 <>'1') AND NOT(CAT.C_TYPE_CATALOGUE IS NULL) AND CAT.C_TYPE_CATALOGUE <>'9'))
AND V_IMP.ACS_AUXILIARY_ACCOUNT_ID = PARAMETER_0
;
END RPT_ACT_FIN_IMP_CUMUL_REC ;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_FIN_IMP_CUMUL_SUB" (
  aRefCursor        in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_3     in     varchar2
, procparam_5     in     varchar2
, procparam_6     in     varchar2
, procparam_7     in     varchar2
, procparam_8     in     varchar2
, parameter_0     in     varchar2
, parameter_2     in     varchar2
, parameter_3     in     varchar2
, parameter_4     in     varchar2
, parameter_5     in     varchar2
, parameter_6     in     varchar2
, parameter_9     in     varchar2
, procuser_lanid   in     PCS.PC_LANG.LANID%type
, pc_user_id        in     PCS.PC_USER.PC_USER_ID%type
)
/**
* description used for report ACR_ACC_IMPUTATION_COMPARE

* @author jliu 18 nov 2008
* @lastupdate VHA 26 JUNE 2013
* @public
* @param procparam_3    Division_ID (List) NULL = All  or ACS_DIVISION_ACCOUNT_ID list
* @param procparam_5 Date to (yyyyMMdd)
* @param procparam_6 Journal status = BRO : 1=Yes / 0=No
* @param procparam_7 Journal status = PROV : 1=Yes / 0=No
* @param procparam_8 Journal status = DEF : 1=Yes / 0=No
* @param parameter_0    ACS_FINANCIAL_ACCOUNT_ID
* @param parameter_2   Compare code : '0'=all / '1'=compared / '2'=not compared
* @param parameter_3    C_TYPE_CUMUL = 'INT' :  0=No / 1=Yes
* @param parameter_4  C_TYPE_CUMUL = 'EXT' :  0=No / 1=Yes
* @param parameter_5   C_TYPE_CUMUL = 'PRE' :  0=No / 1=Yes
* @param parameter_6   C_TYPE_CUMUL = 'ENG' :  0=No / 1=Yes
* @param parameter_9    Only transaction without VAT
*/
is
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id PCS.PC_USER.PC_USER_ID%type := null;

begin
  if ((procuser_lanid is not null) and (procuser_lanid is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => null
                                  , iConliId  => null);
      vpc_lang_id  := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id  := PCS.PC_I_LIB_SESSION.getUserId;
  end if;

  if (ACS_FUNCTION.ExistDIVI = 1) then
  open aRefCursor for
    select CAT.ACJ_CATALOGUE_DOCUMENT_ID
         , ACC_S.ACS_FINANCIAL_CURRENCY_ID S_ACS_FINANCIAL_CURRENCY_ID
         , CUR.FIN_LOCAL_CURRENCY
         , JOU.C_TYPE_JOURNAL
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.IMF_COMPARE_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID V_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_JOURNAL_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACJ_SUB_SET_CAT SUB
         , ACS_FIN_ACCOUNT_S_FIN_CURR ACC_S
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , ACT_JOURNAL JOU
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_ACC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
         , table(RPT_FUNCTIONS.TableAuthRptDivisions(vpc_user_id, procparam_3) ) AUT
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC_S.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = ACC_S.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and V_IMP.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(procparam_5, 'yyyyMMdd')
       and decode(SUB.C_SUB_SET, null, 1, 'ACC', 1, 0) = 1
       and decode(parameter_9, '1', decode(V_IMP.IMF_TYPE, 'VAT', 0, decode(V_IMP.ACS_TAX_CODE_ID, null, 1, 0) ), decode(V_IMP.IMF_TYPE, null, 0, 1) ) = 1
       and (    (    procparam_6 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    procparam_7 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    procparam_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and decode(parameter_2, '0', 1, '1', decode(V_IMP.IMF_COMPARE_DATE, null, 0, 1), '2', decode(V_IMP.IMF_COMPARE_DATE, null, 1, 0), 0) = 1
       and decode(V_IMP.C_TYPE_CUMUL
                , 'INT', decode(parameter_3, '1', 1, 0)
                , 'EXT', decode(parameter_4, '1', 1, 0)
                , 'PRE', decode(parameter_5, '1', 1, 0)
                , 'ENG', decode(parameter_6, '1', 1, 0)
                , 0
                 ) = 1
       and decode(V_IMP.ACT_JOURNAL_ID, 'NULL', 0, decode(JOU.C_TYPE_JOURNAL, 'OPB', 0, 1) ) = 1
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = to_number(parameter_0)
       and V_IMP.ACS_DIVISION_ACCOUNT_ID is not null
       and AUT.column_value = V_IMP.ACS_DIVISION_ACCOUNT_ID;
else -- if (ACS_FUNCTION.ExistDIVI = 0) = No divisions
  open aRefCursor for
    select CAT.ACJ_CATALOGUE_DOCUMENT_ID
         , ACC_S.ACS_FINANCIAL_CURRENCY_ID S_ACS_FINANCIAL_CURRENCY_ID
         , CUR.FIN_LOCAL_CURRENCY
         , JOU.C_TYPE_JOURNAL
         , PCR.CURRENCY
         , PCR2.CURRENCY CURRENCY_LC
         , V_IMP.ACS_FINANCIAL_ACCOUNT_ID
         , V_IMP.IMF_AMOUNT_LC_D
         , V_IMP.IMF_AMOUNT_LC_C
         , V_IMP.IMF_AMOUNT_FC_D
         , V_IMP.IMF_AMOUNT_FC_C
         , V_IMP.IMF_TRANSACTION_DATE
         , V_IMP.IMF_COMPARE_DATE
         , V_IMP.ACS_FINANCIAL_CURRENCY_ID V_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID
         , V_IMP.ACT_JOURNAL_ID
         , PRD.C_TYPE_PERIOD
      from ACJ_CATALOGUE_DOCUMENT CAT
         , ACJ_SUB_SET_CAT SUB
         , ACS_FIN_ACCOUNT_S_FIN_CURR ACC_S
         , ACS_FINANCIAL_CURRENCY CUR
         , ACS_FINANCIAL_CURRENCY CUL
         , ACT_DOCUMENT DOC
         , ACT_JOURNAL JOU
         , PCS.PC_CURR PCR
         , PCS.PC_CURR PCR2
         , V_ACT_ACC_IMP_REPORT V_IMP
         , ACS_PERIOD PRD
     where V_IMP.ACT_DOCUMENT_ID = DOC.ACT_DOCUMENT_ID(+)
       and DOC.ACJ_CATALOGUE_DOCUMENT_ID = SUB.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and DOC.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID(+)
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC_S.ACS_FINANCIAL_ACCOUNT_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = ACC_S.ACS_FINANCIAL_CURRENCY_ID(+)
       and V_IMP.ACS_FINANCIAL_CURRENCY_ID = CUR.ACS_FINANCIAL_CURRENCY_ID
       and CUR.PC_CURR_ID = PCR.PC_CURR_ID(+)
       and V_IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = CUL.ACS_FINANCIAL_CURRENCY_ID
       and CUL.PC_CURR_ID = PCR2.PC_CURR_ID
       and V_IMP.ACJ_CATALOGUE_DOCUMENT_ID = CAT.ACJ_CATALOGUE_DOCUMENT_ID(+)
       and V_IMP.ACS_PERIOD_ID = PRD.ACS_PERIOD_ID
       and V_IMP.IMF_TRANSACTION_DATE <= to_date(procparam_5, 'yyyyMMdd')
       and decode(SUB.C_SUB_SET, null, 1, 'ACC', 1, 0) = 1
       and decode(parameter_9, '1', decode(V_IMP.IMF_TYPE, 'VAT', 0, decode(V_IMP.ACS_TAX_CODE_ID, null, 1, 0) ), decode(V_IMP.IMF_TYPE, null, 0, 1) ) = 1
       and (    (    procparam_6 = '1'
                 and V_IMP.C_ETAT_JOURNAL = 'BRO')
            or (    procparam_7 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'PROV')
            or (    procparam_8 = '1'
                and V_IMP.C_ETAT_JOURNAL = 'DEF')
           )
       and decode(parameter_2, '0', 1, '1', decode(V_IMP.IMF_COMPARE_DATE, null, 0, 1), '2', decode(V_IMP.IMF_COMPARE_DATE, null, 1, 0), 0) = 1
       and decode(V_IMP.C_TYPE_CUMUL
                , 'INT', decode(parameter_3, '1', 1, 0)
                , 'EXT', decode(parameter_4, '1', 1, 0)
                , 'PRE', decode(parameter_5, '1', 1, 0)
                , 'ENG', decode(parameter_6, '1', 1, 0)
                , 0
                 ) = 1
       and decode(V_IMP.ACT_JOURNAL_ID, 'NULL', 0, decode(JOU.C_TYPE_JOURNAL, 'OPB', 0, 1) ) = 1
       and V_IMP.ACS_FINANCIAL_ACCOUNT_ID = to_number(parameter_0);
end if;
end RPT_ACT_FIN_IMP_CUMUL_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_INTEREST_BALANCE" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_00           in     varchar2
, PARAMETER_01           in     varchar2
, PARAMETER_02           in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is

/**
*DESCRIPTION
USED FOR REPORT ACT_INTEREST_BALANCE
*author JLI
*lastUpdate 2009-4-7
*public
*@param PARAMETER_00:  FINANCIAL YEAR ID
*@param PARAMETER_01:  icm_description
*@param PARAMETER_02:  icm_description
*/

TMP NUMBER;
VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT DISTINCT
job.act_job_id,
icm.acs_int_calc_method_id,
icm.icm_description,
typ.c_type_cumul,
(SELECT MAX (cal.act_calc_period_id)
     FROM act_calc_period cal
     WHERE cal.act_job_id = job.act_job_id) act_calc_period_id,
(SELECT MAX (cal.acs_period_id)
     FROM act_calc_period cal
     WHERE cal.act_job_id = job.act_job_id) acs_period_id,
fye.acs_financial_year_id,
fye.fye_no_exercice,
mel.acs_financial_account_id,
mel.acs_financial_currency_id mel_acs_financial_currency_id,
fin.acc_number fin_number,
fin.pac_person_id,
imp.imf_acs_division_account_id
acs_division_account_id,
(SELECT acc.acc_number
     FROM acs_account acc
     WHERE acc.acs_account_id =imp.imf_acs_division_account_id) div_number,
doc.act_document_id,
doc.doc_number,
imp.imf_description,
imp.imf_amount_lc_d,
imp.imf_amount_lc_c,
imp.imf_amount_fc_d,
imp.imf_amount_fc_c,
imp.act_financial_imputation_id,
imp.c_genre_transaction,
des.DES_DESCRIPTION_SUMMARY,
imp.IMF_EXCHANGE_RATE,
imp.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
cur_me.CURRENCY currency_me,
imp.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
cur_mb.CURRENCY currency_mb
FROM
act_financial_imputation imp,
act_document doc,
acs_account fin,
acs_method_elem mel,
act_calc_period cal,
acs_financial_year fye,
act_job job,
acs_calc_cumul_type typ,
acs_int_calc_method icm,
acs_description des,
acs_financial_currency fur_mb,
PCS.PC_CURR cur_mb,
acs_financial_currency fur_me,
PCS.PC_CURR cur_me
WHERE
(PARAMETER_00 = 0 OR fye.acs_financial_year_id = TO_NUMBER(PARAMETER_00))
AND (PARAMETER_01 IS NULL OR icm.icm_description >= PARAMETER_01)
AND (PARAMETER_02 IS NULL OR icm.icm_description <= PARAMETER_02)
AND job.act_job_id = cal.act_job_id
AND job.acs_financial_year_id = fye.acs_financial_year_id
AND cal.acs_int_calc_method_id = icm.acs_int_calc_method_id
AND icm.acs_int_calc_method_id = mel.acs_int_calc_method_id
AND typ.acs_int_calc_method_id = icm.acs_int_calc_method_id
AND mel.acs_financial_account_id = fin.acs_account_id
AND job.act_job_id = doc.act_job_id
AND doc.act_document_id = imp.act_document_id
AND mel.acs_financial_account_id = imp.acs_financial_account_id
AND des.ACS_ACCOUNT_ID = imp.acs_financial_account_id
AND des.PC_LANG_ID = VPC_LANG_ID
AND imp.ACS_FINANCIAL_CURRENCY_ID = fur_me.ACS_FINANCIAL_CURRENCY_ID
AND fur_me.PC_CURR_ID = cur_me.PC_CURR_ID
AND imp.ACS_ACS_FINANCIAL_CURRENCY_ID = fur_mb.ACS_FINANCIAL_CURRENCY_ID
AND fur_mb.PC_CURR_ID = cur_mb.PC_CURR_ID
;
END RPT_ACT_INTEREST_BALANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_INTEREST_BALANCE_SUB" (
  aRefCursor            in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0           in     varchar2
, PARAMETER_1           in     varchar2
, PARAMETER_2           in     varchar2
, PARAMETER_3           in     varchar2
, PROCUSER_LANID        in     pcs.pc_lang.lanid%type
)
IS

/**
*DESCRIPTION
USED FOR SUB REPORT OF ACT_INTEREST_BALANCE
*author JLI
*lastUpdate 2009-4-7
*public
*@param PARAMETER_0:  MAX_ACT_JOB_ID
*@param PARAMETER_1:  MAX_ACS_PERIOD_ID
*@param PARAMETER_2:  ACS_ACCOUNT_ID
*@param PARAMETER_3:  ACS_DIVISION_ACCOUNT_ID
*/

TMP NUMBER;
VPC_LANG_ID       pcs.pc_lang.pc_lang_id%type;
FinancialYearId   ACS_FINANCIAL_YEAR.ACS_FINANCIAL_YEAR_ID%type;
PerNumber         ACS_PERIOD.PER_NO_PERIOD%type;
DivisionAccountId ACS_ACCOUNT.ACS_ACCOUNT_ID%type;
SubSet            ACS_SUB_SET.C_SUB_SET%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID        := pcs.PC_I_LIB_SESSION.GetUserLangId;
PerNumber          := RPT_FUNCTIONS.GetPerNumber;
FinancialYearId    := ACS_FUNCTION.GetMaxNoExerciceId;
SubSet             := ACS_FUNCTION.GetSubSetOfAccount(PARAMETER_2);

OPEN aRefCursor FOR

SELECT
'1' UNION_NO,/*Accounting balance*/
DECODE(SubSet,'ACC',TOT.ACS_FINANCIAL_ACCOUNT_ID
             ,'REC',TOT.ACS_AUXILIARY_ACCOUNT_ID
             ,'PAY',TOT.ACS_AUXILIARY_ACCOUNT_ID,TOT.ACS_FINANCIAL_ACCOUNT_ID) ACS_FINANCIAL_ACCOUNT_ID,
TOT.ACS_DIVISION_ACCOUNT_ID ACS_DIVISION_ACCOUNT_ID,
CURRENCY,
0 AMOUNT_IDE,
SUM(TOT_DEBIT_FC - TOT_CREDIT_FC) TOT_AMOUNT_FC,
0 IMF_AMOUNT_FC
FROM
ACT_TOTAL_BY_PERIOD TOT,
ACS_PERIOD PER,
ACS_FINANCIAL_CURRENCY FUR,
PCS.PC_CURR CUR
WHERE
TOT.ACS_PERIOD_ID = PER.ACS_PERIOD_ID
AND TOT.ACS_DIVISION_ACCOUNT_ID = PARAMETER_3
AND PER.ACS_FINANCIAL_YEAR_ID = FinancialYearId
AND PER.PER_NO_PERIOD <= PerNumber
AND TOT.C_TYPE_CUMUL = 'EXT'
AND (((SubSet = 'ACC' AND TOT.ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_2) AND TOT.ACS_AUXILIARY_ACCOUNT_ID is null)
     OR ( SubSet in('REC','PAY') AND TOT.ACS_AUXILIARY_ACCOUNT_ID = PARAMETER_2))
AND ((PARAMETER_3 is null and TOT.ACS_DIVISION_ACCOUNT_ID is null)
     or (PARAMETER_3 is not null and TOT.ACS_DIVISION_ACCOUNT_ID = PARAMETER_3)
    )
AND TOT.ACS_ACS_FINANCIAL_CURRENCY_ID <>(SELECT FUR.ACS_FINANCIAL_CURRENCY_ID FROM ACS_FINANCIAL_CURRENCY FUR WHERE FUR.FIN_LOCAL_CURRENCY = 1 )
AND TOT.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
GROUP BY
DECODE(SubSet,'ACC',TOT.ACS_FINANCIAL_ACCOUNT_ID
             ,'REC',TOT.ACS_AUXILIARY_ACCOUNT_ID
             ,'PAY',TOT.ACS_AUXILIARY_ACCOUNT_ID,TOT.ACS_FINANCIAL_ACCOUNT_ID),
TOT.ACS_DIVISION_ACCOUNT_ID,
CURRENCY
UNION ALL
SELECT
'2' UNION_NO,/*WITH INTEREST BREAKDOWN -last balance before calculating interest*/
ACS_FINANCIAL_ACCOUNT_ID,
ACS_DIVISION_ACCOUNT_ID,
CURRENCY,
IDE_BALANCE_AMOUNT AMOUNT_IDE,
0 TOT_AMOUNT_FC,
0 IMF_AMOUNT_FC
FROM
ACT_INTEREST_DETAIL DET,
ACS_FINANCIAL_CURRENCY FUR,
PCS.PC_CURR CUR
WHERE
ACT_JOB_ID = PARAMETER_0
AND ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_2
AND (ACS_DIVISION_ACCOUNT_ID = PARAMETER_3 or PARAMETER_3 is null)
AND DET.ACS_FINANCIAL_CURRENCY_ID <>(SELECT FUR.ACS_FINANCIAL_CURRENCY_ID FROM ACS_FINANCIAL_CURRENCY FUR WHERE FUR.FIN_LOCAL_CURRENCY = 1 )
AND DET.ACS_FINANCIAL_CURRENCY_ID =FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
UNION ALL
SELECT
'3' UNION_NO,/*WITH INTEREST BREAKDOWN -total interest charges*/
ACS_FINANCIAL_ACCOUNT_ID,
ACS_DIVISION_ACCOUNT_ID,
CURRENCY,
0 AMOUNT_IDE,
0 TOT_AMOUNT_FC,
sum(IMF_AMOUNT_FC_D - IMF_AMOUNT_FC_C) IMF_AMOUNT_FC
FROM
V_ACT_INTEREST_DOCUMENT_FC VFC,
ACS_FINANCIAL_CURRENCY FUR,
PCS.PC_CURR CUR
WHERE
ACT_JOB_ID = PARAMETER_0
AND ACS_FINANCIAL_ACCOUNT_ID = PARAMETER_2
AND (ACS_DIVISION_ACCOUNT_ID = PARAMETER_3 or PARAMETER_3 is null)
AND VFC.ACS_FINANCIAL_CURRENCY_ID <>(SELECT FUR.ACS_FINANCIAL_CURRENCY_ID FROM ACS_FINANCIAL_CURRENCY FUR WHERE FUR.FIN_LOCAL_CURRENCY = 1 )
AND VFC.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
GROUP BY
ACS_FINANCIAL_ACCOUNT_ID ,
ACS_DIVISION_ACCOUNT_ID ,
CURRENCY

;
END RPT_ACT_INTEREST_BALANCE_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_INTEREST_CERTIFICATE" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, Proccompany_owner      IN     pcs.pc_scrip.scrdbowner%TYPE
, PARAMETER_0           in     varchar2
, PARAMETER_1           in     varchar2
, PARAMETER_2           in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is

/**
*DESCRIPTION
USED FOR REPORT ACT_INTEREST_CERTIFICATE
*author EQI
*lastUpdate 2 SEP 2010
*public
*@param PARAMETER_0:  FINANCIAL YEAR ID
*@param PARAMETER_1:  icm_description
*@param PARAMETER_2:  icm_description
*/

TMP NUMBER;
VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;
v_max_act_job_id NUMBER;
v_max_period number;
v_com_logo_large pcs.pc_comp.com_logo_large%type;
v_perioddate date;
v_mb varchar2 (10);
v_max_end_date date;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

select max(act_job_id) into v_max_act_job_id
from  v_act_interest_document v
where (PARAMETER_0 = 0 OR v.acs_financial_year_id = TO_NUMBER(PARAMETER_0))
    AND (PARAMETER_1 IS NULL OR icm_description >= PARAMETER_1)
    AND (PARAMETER_2 IS NULL OR icm_description <= PARAMETER_2);

SELECT MAX (cal.acs_period_id) into v_max_period
     FROM act_calc_period cal,v_act_interest_document v
where (PARAMETER_0 = 0 OR v.acs_financial_year_id = TO_NUMBER(PARAMETER_0))
       AND (PARAMETER_1 IS NULL OR icm_description >= PARAMETER_1)
       AND (PARAMETER_2 IS NULL OR icm_description <= PARAMETER_2)
       AND cal.act_job_id = v.act_job_id;

select max(per_end_date) into v_max_end_date from acs_period where acs_period_id = v_max_period;

SELECT max(com.com_logo_large) into v_com_logo_large
 FROM pcs.pc_comp com, pcs.pc_scrip scr
 WHERE scr.pc_scrip_id = com.pc_scrip_id
 AND scr.scrdbowner = proccompany_owner;

select ACS_FUNCTION.GETLOCALCURRENCYNAME into v_mb from dual;


open aRefCursor for
select
       v_max_act_job_id max_job_id,
       v_max_end_date per_end_date,
       act_job_id,
       acs_int_calc_method_id,
       icm_description,
       c_type_cumul,
       act_calc_period_id,
       v.acs_period_id,
       v.acs_financial_year_id,
       fye_no_exercice,
       v.acs_financial_account_id,
       fin_number,
       v.pac_person_id,
       v.acs_division_account_id,
       div_number,
       v.act_document_id,
       doc_number,
       v.imf_description,
       v.imf_amount_lc_d,
       v.imf_amount_lc_c,
       fin.imf_amount_fc_d,
       fin.imf_amount_fc_c,
       v.act_financial_imputation_id,
       v.c_genre_transaction,
       DES_DESCRIPTION_SUMMARY,
       IMF_EXCHANGE_RATE,
       v.ACS_FINANCIAL_CURRENCY_ID,
       case when v.acs_financial_currency_id is not null then
         (select currency
          from PCS.PC_CURR p, acs_financial_currency cur
          where v.acs_financial_currency_id =  CUR.ACS_FINANCIAL_CURRENCY_ID
                and cur.pc_curr_id = P.PC_CURR_ID)
       else ' '
       end  currency_me,
       v_mb  currency_mb,
       TO_CHAR(imf_transaction_date,'YYYY')||TO_CHAR(imf_transaction_date,'Q') imf_transaction_qdate,
       v_com_logo_large com_logo_large,
       v_max_period max_acs_period_id
 from  v_act_interest_document v,
      act_financial_imputation fin,
      acs_description des
    where V.ACS_FINANCIAL_ACCOUNT_ID = des.acs_account_id
        and des.pc_lang_id = VPC_LANG_ID
        and V.ACT_FINANCIAL_IMPUTATION_ID = FIN.ACT_FINANCIAL_IMPUTATION_ID
        AND (PARAMETER_0 = 0 OR v.acs_financial_year_id = TO_NUMBER(PARAMETER_0))
        AND (PARAMETER_1 IS NULL OR icm_description >= PARAMETER_1)
        AND (PARAMETER_2 IS NULL OR icm_description <= PARAMETER_2);



END RPT_ACT_INTEREST_CERTIFICATE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_INTEREST_DETAIL" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       VARCHAR2,
   parameter_01     IN       VARCHAR2,
   parameter_02     IN       VARCHAR2,
   parameter_03     IN       VARCHAR2,
   parameter_04     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*DESCRIPTION
USED FOR REPORT ACT_INTEREST_DETAIL
*author JLI
*lastUpdate 2009-4-7
*public
*@param PARAMETER_00:  JOB ID
*@param PARAMETER_01:  JOB TYPE ID
*@param PARAMETER_02:  JOB DESCRIPTION
*@param PARAMETER_03:  JOB DESCRIPTION
*@param PARAMETER_04:  FINANCIAL YEAR ID
*/

tmp           NUMBER;
vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;

BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ide.act_interest_detail_id, ide.acs_financial_account_id,
             ide.acs_division_account_id, ide.act_financial_imputation_id,
             ide.act_job_id, ide.ide_value_date,
             NVL (ide.ide_transaction_date,
                  ide_value_date
                 ) ide_transaction_date,
             ide.ide_amount_lc_d, ide.ide_amount_lc_c, ide.ide_amount_fc_d,
             ide.ide_amount_fc_c, ide.ide_balance_amount,
             ide.ide_interest_rate_d, ide.ide_interest_rate_c,
             ide.ide_days_nbr_d, ide.ide_days_nbr_c, ide.ide_nbr_d,
             ide.ide_nbr_c, ide.a_confirm, ide.a_datecre, ide.a_datemod,
             ide.a_idcre, ide.a_idmod, ide.a_reclevel, ide.a_recstatus,
             (SELECT imp.imf_description
                FROM act_financial_imputation imp
               WHERE imp.act_financial_imputation_id =
                              ide.act_financial_imputation_id)
                                                             imf_description,
             (SELECT imp.act_part_imputation_id
                FROM act_financial_imputation imp
               WHERE imp.act_financial_imputation_id =
                        ide.act_financial_imputation_id)
                                                      act_part_imputation_id,
             NVL
                ((SELECT dis.act_financial_distribution_id
                    FROM act_financial_distribution dis
                   WHERE dis.act_financial_imputation_id =
                                               ide.act_financial_imputation_id),
                 0
                ) act_financial_distribution_id,
             NVL
                ((SELECT doc.doc_number
                    FROM act_document doc
                   WHERE doc.act_document_id =
                            (SELECT imp.act_document_id
                               FROM act_financial_imputation imp
                              WHERE imp.act_financial_imputation_id =
                                               ide.act_financial_imputation_id)),
                 ' '
                ) doc_number,
             NVL ((SELECT cur.currency
                     FROM pcs.pc_curr cur, acs_financial_currency afc
                    WHERE ide.acs_financial_currency_id =
                                                 afc.acs_financial_currency_id
                      AND afc.pc_curr_id = cur.pc_curr_id),
                  (SELECT cur.currency
                     FROM pcs.pc_curr cur, acs_financial_currency afc
                    WHERE afc.pc_curr_id = cur.pc_curr_id
                      AND afc.fin_local_currency = 1)
                 ) currency,
             (SELECT cur.currency
                     FROM pcs.pc_curr cur, acs_financial_currency afc
                    WHERE afc.pc_curr_id = cur.pc_curr_id
                      AND afc.fin_local_currency = 1) local_cur,
             0 tri,
             (SELECT des.des_description_summary
                FROM acs_description des
               WHERE des.acs_account_id = ide.acs_financial_account_id
                 AND des.pc_lang_id = vpc_lang_id) fin_des,
             (SELECT des.des_description_summary
                FROM acs_description des
               WHERE des.acs_account_id = ide.acs_division_account_id
                 AND des.pc_lang_id = vpc_lang_id) div_des,
             ACS_FUNCTION.GetAccountNumber(ide.acs_division_account_id) div_acc,
             ACS_FUNCTION.GetAccountNumber(ide.acs_financial_account_id) fin_acc
        FROM
        act_interest_detail ide,
        act_job job
        WHERE
        (PARAMETER_00 =0 OR JOB.ACT_JOB_ID = TO_NUMBER(PARAMETER_00))
        AND ide.ACT_JOB_ID = JOB.ACT_JOB_ID
        AND (PARAMETER_01 =0 OR JOB.ACJ_JOB_TYPE_ID = TO_NUMBER(PARAMETER_01))
        AND (PARAMETER_02 IS NULL OR JOB.JOB_DESCRIPTION >= PARAMETER_02)
        AND (PARAMETER_03 IS NULL OR JOB.JOB_DESCRIPTION <= PARAMETER_03)
        AND (PARAMETER_04 =0 OR JOB.ACS_FINANCIAL_YEAR_ID = TO_NUMBER(PARAMETER_04))
      UNION ALL
      SELECT imf.act_financial_imputation_id act_interest_detail_id,
             imf.acs_financial_account_id acs_financial_account_id,
             imf.imf_acs_division_account_id acs_division_account_id,
             imf.act_financial_imputation_id act_financial_imputation_id,
             doc.act_job_id act_job_id, imf.imf_value_date ide_value_date,
             imf.imf_transaction_date ide_transaction_date,
             imf.imf_amount_lc_d ide_amount_lc_d,
             imf.imf_amount_lc_c ide_amount_lc_c,
             imf.imf_amount_fc_d ide_amount_fc_d,
             imf.imf_amount_fc_c ide_amount_fc_c, 0 ide_balance_amount,
             0 ide_interest_rate_d, 0 ide_interest_rate_d, 0 ide_days_nbr_d,
             0 ide_days_nbr_c, 0 ide_nbr_d, 0 ide_nbr_c, imf.a_confirm,
             imf.a_datecre, imf.a_datemod, imf.a_idcre, imf.a_idmod,
             imf.a_reclevel, imf.a_recstatus, imf.imf_description,
             imf.act_part_imputation_id,
             NVL
                ((SELECT dis.act_financial_distribution_id
                    FROM act_financial_distribution dis
                   WHERE dis.act_financial_imputation_id =
                                               imf.act_financial_imputation_id),
                 0
                ) act_financial_distribution_id,
             NVL (doc.doc_number, ' ') doc_number,
             NVL ((SELECT cur.currency
                     FROM pcs.pc_curr cur, acs_financial_currency afc
                    WHERE imf.acs_financial_currency_id =
                                                 afc.acs_financial_currency_id
                      AND afc.pc_curr_id = cur.pc_curr_id),
                  ' '
                 ) currency,
             (SELECT cur.currency
                     FROM pcs.pc_curr cur, acs_financial_currency afc
                    WHERE afc.pc_curr_id = cur.pc_curr_id
                      AND afc.fin_local_currency = 1) local_cur,
             1 tri,
             (SELECT des.des_description_summary
                FROM acs_description des
               WHERE des.acs_account_id = imf.acs_financial_account_id
                 AND des.pc_lang_id = vpc_lang_id) fin_des,
             (SELECT des.des_description_summary
                FROM acs_description des
               WHERE des.acs_account_id = imf.imf_acs_division_account_id
                 AND des.pc_lang_id = vpc_lang_id) div_des,
             ACS_FUNCTION.GetAccountNumber(imf.imf_acs_division_account_id) div_acc,
             ACS_FUNCTION.GetAccountNumber(imf.acs_financial_account_id) fin_acc
        FROM
             act_financial_imputation imf,
             act_document doc,
             act_job job
       WHERE doc.act_document_id = imf.act_document_id(+)
         AND EXISTS (
                SELECT 1
                  FROM act_etat_event eve
                 WHERE eve.c_type_event = '9'
                   AND eve.act_job_id = doc.act_job_id)
         AND doc.ACT_JOB_ID = job.ACT_JOB_ID
         AND (PARAMETER_00 =0 OR JOB.ACT_JOB_ID = TO_NUMBER(PARAMETER_00))
         AND (PARAMETER_01 =0 OR JOB.ACJ_JOB_TYPE_ID = TO_NUMBER(PARAMETER_01))
         AND (PARAMETER_02 IS NULL OR JOB.JOB_DESCRIPTION >= PARAMETER_02)
         AND (PARAMETER_03 IS NULL OR JOB.JOB_DESCRIPTION <= PARAMETER_03)
         AND (PARAMETER_04 =0 OR JOB.ACS_FINANCIAL_YEAR_ID = TO_NUMBER(PARAMETER_04))
;
END rpt_act_interest_detail;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_INTEREST_DOCUMENT" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, Proccompany_owner      IN     pcs.pc_scrip.scrdbowner%TYPE
, PARAMETER_00           in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is

/**
*DESCRIPTION
USED FOR REPORT ACT_INTEREST_DOCUMENT
*author JLI
*lastUpdate 2009-4-7
*public
*@param PARAMETER_00:  JOB ID
*/

TMP NUMBER;
VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT DISTINCT
job.act_job_id,
JOB.JOB_DESCRIPTION,
icm.acs_int_calc_method_id,
icm.icm_description,
typ.c_type_cumul,
(SELECT MAX (cal.act_calc_period_id)
     FROM act_calc_period cal
     WHERE cal.act_job_id = job.act_job_id) act_calc_period_id,
(SELECT MAX (cal.acs_period_id)
     FROM act_calc_period cal
     WHERE cal.act_job_id = job.act_job_id) acs_period_id,
fye.acs_financial_year_id,
fye.fye_no_exercice,
mel.acs_financial_account_id,
mel.acs_financial_currency_id mel_acs_financial_currency_id,
fin.acc_number fin_number,
fin.pac_person_id,
PER.PER_NAME,
imp.imf_acs_division_account_id
acs_division_account_id,
(SELECT acc.acc_number
     FROM acs_account acc
     WHERE acc.acs_account_id =imp.imf_acs_division_account_id) div_number,
doc.act_document_id,
doc.doc_number,
imp.imf_description,
imp.imf_amount_lc_d,
imp.imf_amount_lc_c,
imp.imf_amount_fc_d,
imp.imf_amount_fc_c,
imp.act_financial_imputation_id,
imp.c_genre_transaction,
imp.IMF_EXCHANGE_RATE,
imp.ACS_FINANCIAL_CURRENCY_ID ACS_FINANCIAL_CURRENCY_ID,
cur_me.CURRENCY currency_me,
imp.ACS_ACS_FINANCIAL_CURRENCY_ID ACS_ACS_FINANCIAL_CURRENCY_ID,
cur_mb.CURRENCY currency_mb,
des.DES_DESCRIPTION_SUMMARY,
(SELECT com.com_logo_large
 FROM pcs.pc_comp com, pcs.pc_scrip scr
 WHERE scr.pc_scrip_id = com.pc_scrip_id
 AND scr.scrdbowner = proccompany_owner) com_logo_large
FROM
act_financial_imputation imp,
act_document doc,
acs_account fin,
acs_method_elem mel,
act_calc_period cal,
acs_financial_year fye,
act_job job,
acs_calc_cumul_type typ,
acs_int_calc_method icm,
acs_description des,
acs_financial_currency fur_mb,
PCS.PC_CURR cur_mb,
acs_financial_currency fur_me,
PCS.PC_CURR cur_me,
pac_person per
WHERE
(PARAMETER_00 =0 OR JOB.ACT_JOB_ID = TO_NUMBER(PARAMETER_00))
AND job.act_job_id = cal.act_job_id
AND job.acs_financial_year_id = fye.acs_financial_year_id
AND cal.acs_int_calc_method_id = icm.acs_int_calc_method_id
AND icm.acs_int_calc_method_id = mel.acs_int_calc_method_id
AND typ.acs_int_calc_method_id = icm.acs_int_calc_method_id
AND mel.acs_financial_account_id = fin.acs_account_id
AND job.act_job_id = doc.act_job_id
AND doc.act_document_id = imp.act_document_id
AND mel.acs_financial_account_id = imp.acs_financial_account_id
AND des.ACS_ACCOUNT_ID = imp.acs_financial_account_id
AND des.PC_LANG_ID = VPC_LANG_ID
AND imp.ACS_FINANCIAL_CURRENCY_ID = fur_me.ACS_FINANCIAL_CURRENCY_ID
AND fur_me.PC_CURR_ID = cur_me.PC_CURR_ID
AND imp.ACS_ACS_FINANCIAL_CURRENCY_ID = fur_mb.ACS_FINANCIAL_CURRENCY_ID
AND fur_mb.PC_CURR_ID = cur_mb.PC_CURR_ID
AND FIN.PAC_PERSON_ID =  PER.PAC_PERSON_ID(+)


;
END RPT_ACT_INTEREST_DOCUMENT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description - used for report ACT_JOB
* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_0: ACT_JOB_ID
* @param PARAMETER_4: ACS_FINANCIAL_YEAR_ID
*/

IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cat.acj_catalogue_document_id,
             acj_functions.translatecatdescr
                              (cat.acj_catalogue_document_id,
                               vpc_lang_id
                              ) cat_description,
             fur.fin_local_currency,
                                    doc.act_document_id, doc.doc_number,
             doc.doc_total_amount_dc, doc.doc_document_date,
             doc.act_journal_id, doc.act_act_journal_id, job.act_job_id,
             job.job_description, job.acs_financial_year_id, job.a_datecre,
             job.a_datemod, job.a_idcre, job.a_idmod, cur.currency
        FROM acj_catalogue_document cat,
             acj_job_type typ,
             acs_financial_currency fur,
             acs_financial_year yea,
             act_document doc,
             act_job job,
             pcs.pc_curr cur
       WHERE job.act_job_id = doc.act_job_id(+)
         AND doc.acs_financial_currency_id = fur.acs_financial_currency_id(+)
         AND fur.pc_curr_id = cur.pc_curr_id(+)
         AND doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND job.acs_financial_year_id = yea.acs_financial_year_id
         AND JOB.ACS_FINANCIAL_YEAR_ID = TO_NUMBER (parameter_4)
         AND (parameter_0 =0 OR job.act_job_id = TO_NUMBER (parameter_0));
END rpt_act_job;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOB_AUX_CTRL" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_00     IN       NUMBER,
   parameter_01     IN       NUMBER,
   parameter_02     IN       VARCHAR2,
   parameter_03     IN       VARCHAR2,
   parameter_04     IN       NUMBER,
   parameter_05     IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description - used in report ACT_JOB_BATCH
* @author JLIU 18 Nov 2008
* @lastupdate 12 Feb 20009
* @public
* @PARAM PARAMETER_0: ACT_JOB_ID
* @PARAM PARAMETER_1: ACJ_JOB_TYPE_ID
* @PARAM PARAMETER_2: Job description from
* @PARAM PARAMETER_3: Job description to
* @PARAM PARAMETER_4: ACS_FINANCIAL_YEAR_ID
* @PARAM PARAMETER_5: PC_USER_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acj_functions.translatecatdescr
                              (cat.acj_catalogue_document_id,
                               vpc_lang_id
                              ) cat_description,
             typ.acj_job_type_id, acc.acs_account_id, acc.acc_number,
             acc_aux.acs_account_id aux_account_id,
             acc_aux.acc_number aux_acc_number,
             acc_div.acs_account_id div_account_id,
             acc_div.acc_number div_acc_number, div.acs_division_account_id,
             fcc.acs_financial_account_id, fcc.fin_collective,
             atd.act_document_id, atd.doc_number, imp.imf_amount_lc_d,
             imp.imf_amount_lc_c, imp.imf_amount_fc_d, imp.imf_amount_fc_c,
             imp.imf_transaction_date, job.act_job_id, job.job_description,
             job.acj_job_type_id, job.acs_financial_year_id,
             par.par_document, par.doc_date_delivery,
             cus.per_short_name cus_short_name,
             cus.pac_person_id cus_person_id, cus.per_name cus_name,
             sup.per_short_name sup_short_name,
             sup.pac_person_id sup_person_id, sup.per_name sup_name,
             cur_me.currency currency_me, cur_mb.currency currency_mb,
             des_div.des_description_summary div_description_summary,
             des_fin.des_description_summary fin_description_summary,
             acs_function.getlocalcurrencyname c_monnaie_mb
        FROM act_job job,
             act_document atd,
             act_financial_imputation imp,
             act_financial_distribution dis,
             acs_financial_account fcc,
             acs_division_account div,
             acs_account acc,
             acs_account acc_div,
             acs_account acc_aux,
             act_part_imputation par,
             acs_financial_currency fcr_me,
             acs_financial_currency fcr_mb,
             pcs.pc_curr cur_me,
             pcs.pc_curr cur_mb,
             pac_person cus,
             pac_person sup,
             acj_catalogue_document cat,
             acj_job_type typ,
             acs_description des_fin,
             acs_description des_div
       WHERE job.act_job_id = atd.act_job_id(+)
         AND atd.act_document_id = imp.act_document_id(+)
         AND imp.act_financial_imputation_id = dis.act_financial_imputation_id(+)
         AND dis.acs_division_account_id = div.acs_division_account_id(+)
         AND dis.acs_division_account_id = acc_div.acs_account_id(+)
         AND imp.acs_financial_account_id = fcc.acs_financial_account_id(+)
         AND imp.acs_financial_account_id = acc.acs_account_id(+)
         AND imp.acs_auxiliary_account_id = acc_aux.acs_account_id(+)
         AND imp.acs_financial_currency_id = fcr_me.acs_financial_currency_id(+)
         AND imp.acs_acs_financial_currency_id = fcr_mb.acs_financial_currency_id(+)
         AND fcr_me.pc_curr_id = cur_me.pc_curr_id(+)
         AND fcr_mb.pc_curr_id = cur_mb.pc_curr_id(+)
         AND atd.act_document_id = par.act_document_id(+)
         AND par.pac_custom_partner_id = cus.pac_person_id(+)
         AND par.pac_supplier_partner_id = sup.pac_person_id(+)
         AND atd.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id(+)
         AND fcc.acs_financial_account_id = des_fin.acs_account_id(+)
         AND des_fin.pc_lang_id(+) = vpc_lang_id
         AND div.acs_division_account_id = des_div.acs_account_id(+)
         AND des_div.pc_lang_id(+) = vpc_lang_id
         AND job.acs_financial_year_id = parameter_04
         AND act_functions.isuserautorizedforjobtype (parameter_05,
                                                      job.acj_job_type_id
                                                     ) = 1
         AND (   (    (parameter_02 <> parameter_03)
                  AND (parameter_02 IS NOT NULL AND parameter_03 IS NOT NULL
                      )
                  AND (    job.job_description >= parameter_02
                       AND job.job_description <= parameter_03
                      )
                 )
              OR (    (parameter_02 <> parameter_03)
                  AND (parameter_02 IS NOT NULL AND parameter_03 IS NULL)
                  AND (job.job_description >= parameter_02)
                 )
              OR (    (parameter_02 <> parameter_03)
                  AND (parameter_02 IS NULL AND parameter_03 IS NOT NULL)
                  AND (job.job_description <= parameter_03)
                 )
              OR (    (parameter_02 = parameter_03
                       AND parameter_02 IS NOT NULL
                      )
                  AND (job.job_description = parameter_02)
                 )
              OR (    parameter_02 IS NULL
                  AND parameter_03 IS NULL
                  AND job.act_job_id = parameter_00
                 )
             );
END rpt_act_job_aux_ctrl;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOB_BATCH" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0   in     varchar2
, parameter_1    in     number
, parameter_2    in     varchar2
, parameter_3    in     varchar2
, parameter_4    in     number
, parameter_5    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
/**
*Description - used for report ACT_JOB_BATCH.rpt and ACT_JOB.rpt
* @author jliu 18th Nov 2008
* @lastupdate VHA 07 Mai 2014
* @public
* @PARAM parameter_0: act_job_id
* @PARAM parameter_1: acj_job_type_id
* @PARAM parameter_2: Job description from
* @PARAM parameter_3: Job description to
* @PARAM parameter_4: acs_financial_year_id
* @PARAM parameter_5: pc_user_id
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select info
         , acj_catalogue_document_id
         , cat_description
         , fin_local_currency
         , act_document_id
         , doc_number
         , doc_total_amount_dc
         , doc_document_date
         , act_journal_id
         , act_act_journal_id
         , jou_number_fin
         , jou_number_mgm
         , act_job_id
         , job_description
         , acs_financial_year_id
         , a_datecre
         , a_datemod
         , a_idcre
         , a_idmod
         , currency
         , act_part_imputation_id
         , partner_name
         , part_amount
         , par_document
         , currency_imp
         , acs_financial_currency_id
         , acs_acs_financial_currency_id
         , doc_number_rem
         , exp_adapted
         , exp_amount_lc
         , exp_amount_fc
         , imf_primary
         , imf_transaction_date
         , rem_payable_amount_lc
         , rem_payable_amount_fc
         , rem_number
      from (select 'JOB_BATCH' info
                 , cat.acj_catalogue_document_id
                 , acj_functions.translatecatdescr(cat.acj_catalogue_document_id, vpc_lang_id) cat_description
                 , fur.fin_local_currency
                 , doc.act_document_id
                 , doc.doc_number
                 , case when row_number() over(partition by doc.act_document_id order by doc.act_document_id) = 1
                        then doc_total_amount_dc
                        else 0
                   end  doc_total_amount_dc
                 , doc.doc_document_date
                 , doc.act_journal_id
                 , doc.act_act_journal_id
                 , (select jou_number
                      from act_journal
                     where act_journal_id = doc.act_journal_id) jou_number_fin
                 , (select jou_number
                      from act_journal
                     where act_journal_id = doc.act_act_journal_id) jou_number_mgm
                 , job.act_job_id
                 , job.job_description
                 , job.acs_financial_year_id
                 , job.a_datecre
                 , job.a_datemod
                 , job.a_idcre
                 , job.a_idmod
                 , cur.currency
                 , imp.act_part_imputation_id
                 , (select nvl2(cus.per_name
                              , nvl2(cus.per_forename, cus.per_name || ' ' || cus.per_forename, cus.per_name)
                              , nvl2(sup.per_forename, sup.per_name || ' ' || sup.per_forename, sup.per_name)
                               )
                      from pac_person cus
                         , pac_person sup
                     where cus.pac_person_id(+) = imp.pac_custom_partner_id
                       and sup.pac_person_id(+) = imp.pac_custom_partner_id) partner_name
                 , (select sum(case
                                 when(fmp.acs_financial_currency_id <> fmp.acs_acs_financial_currency_id) then nvl2
                                                                                                                 (fmp.imf_amount_fc_d
                                                                                                                , nvl2(fmp.imf_amount_fc_c
                                                                                                                     , (fmp.imf_amount_fc_c
                                                                                                                        - fmp.imf_amount_fc_d
                                                                                                                       )
                                                                                                                     , -fmp.imf_amount_fc_d
                                                                                                                      )
                                                                                                                , null
                                                                                                                 )   --part_amount_me
                                 else nvl2(fmp.imf_amount_lc_d, nvl2(fmp.imf_amount_lc_c,(fmp.imf_amount_lc_c - fmp.imf_amount_lc_d), -fmp.imf_amount_lc_d)
                                         , null)   --part_amount_mb
                               end
                              )
                      from act_financial_imputation fmp
                     where fmp.act_part_imputation_id = imp.act_part_imputation_id
                       and fmp.acs_auxiliary_account_id is not null) part_amount
                 , imp.par_document
                 , (select max(case
                                 when(fmp.acs_financial_currency_id = fmp.acs_acs_financial_currency_id) then cmb.currency
                                 else cme.currency
                               end)
                      from act_financial_imputation fmp
                         , acs_financial_currency fmb
                         , acs_financial_currency fme
                         , pcs.pc_curr cmb
                         , pcs.pc_curr cme
                     where fmp.act_part_imputation_id = imp.act_part_imputation_id
                       and fmp.acs_acs_financial_currency_id = fmb.acs_financial_currency_id
                       and fmp.acs_financial_currency_id = fme.acs_financial_currency_id
                       and fmb.pc_curr_id = cmb.pc_curr_id
                       and fme.pc_curr_id = cme.pc_curr_id) currency_imp
                 , imp.acs_financial_currency_id
                 , imp.acs_acs_financial_currency_id
                 , null doc_number_rem
                 , null exp_adapted
                 , null exp_amount_lc
                 , null exp_amount_fc
                 , null imf_primary
                 , null imf_transaction_date
                 , null rem_payable_amount_lc
                 , null rem_payable_amount_fc
                 , null rem_number
              from acj_catalogue_document cat
                 , acj_job_type typ
                 , acs_financial_currency fur
                 , acs_financial_year yea
                 , act_document doc
                 , act_job job
                 , act_part_imputation imp
                 , pcs.pc_curr cur
             where job.act_job_id = doc.act_job_id(+)
               and doc.acs_financial_currency_id = fur.acs_financial_currency_id(+)
               and fur.pc_curr_id = cur.pc_curr_id(+)
               and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
               and job.acj_job_type_id = typ.acj_job_type_id
               and job.acs_financial_year_id = yea.acs_financial_year_id
               and imp.act_document_id(+) = doc.act_document_id
               and job.acs_financial_year_id = parameter_4
               and typ.acj_job_type_id = parameter_1
               and act_functions.isuserautorizedforjobtype(parameter_5, job.acj_job_type_id) = 1
               and (        (parameter_2 <> parameter_3)
                       and (    parameter_2 is not null
                            and parameter_3 is not null)
                       and (    job.job_description >= parameter_2
                            and job.job_description <= parameter_3)
                    or (     (parameter_2 <> parameter_3)
                        and (    parameter_2 is not null
                             and parameter_3 is null)
                        and (job.job_description >= parameter_2) )
                    or (     (parameter_2 <> parameter_3)
                        and (    parameter_2 is null
                             and parameter_3 is not null)
                        and (job.job_description <= parameter_3) )
                    or (    parameter_2 is null
                        and parameter_3 is null
                        and parameter_0 = 0)
                    or (    not(    parameter_2 is null
                                and parameter_3 is null
                                and parameter_0= 0)
                        and job.act_job_id = parameter_0)
                   ) )
    union all
    (select 'REMINDER' INFO
          , cat.acj_catalogue_document_id
          , acj_functions.translatecatdescr(cat.acj_catalogue_document_id, vpc_lang_id) cat_description
          , fur.fin_local_currency
          , doc.act_document_id
          , doc.doc_number
          , null doc_total_amount_dc
          , doc.doc_document_date
          , doc.act_journal_id
          , doc.act_act_journal_id
          , null jou_number_fin
          , null jou_number_mgm
          , job.act_job_id
          , job.job_description
          , job.acs_financial_year_id
          , job.a_datecre
          , job.a_datemod
          , job.a_idcre
          , job.a_idmod
          , cur.currency
          , null act_part_imputation_id
          , null partner_name
          , null part_amount
          , null par_document
          , null currency_imp
          , imp.acs_financial_currency_id
          , imp.acs_acs_financial_currency_id
          , atd.doc_number doc_number_rem
          , exp.exp_adapted
          , exp.exp_amount_lc
          , exp.exp_amount_fc
          , imp.imf_primary
          , imp.imf_transaction_date
          , rmd.rem_payable_amount_lc
          , rmd.rem_payable_amount_fc
          , rmd.rem_number
       from acj_catalogue_document cat
          , acj_job_type typ
          , acs_financial_currency fur
          , acs_financial_year yea
          , act_document doc
          , act_job job
          , pcs.pc_curr cur
          , act_reminder rmd
          , act_expiry exp
          , act_part_imputation par
          , act_document atd
          , pac_person cus
          , pac_person sup
          , act_financial_imputation imp
      where job.act_job_id = doc.act_job_id(+)
        and doc.acs_financial_currency_id = fur.acs_financial_currency_id(+)
        and fur.pc_curr_id = cur.pc_curr_id(+)
        and doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
        and job.acj_job_type_id = typ.acj_job_type_id
        and job.acs_financial_year_id = yea.acs_financial_year_id
        and job.acs_financial_year_id = parameter_4
        and typ.acj_job_type_id = parameter_1
        and act_functions.isuserautorizedforjobtype(parameter_5, job.acj_job_type_id) = 1
        and (        (parameter_2 <> parameter_3)
                and (    parameter_2 is not null
                     and parameter_3 is not null)
                and (    job.job_description >= parameter_2
                     and job.job_description <= parameter_3)
             or (     (parameter_2 <> parameter_3)
                 and (    parameter_2 is not null
                      and parameter_3 is null)
                 and (job.job_description >= parameter_2) )
             or (     (parameter_2 <> parameter_3)
                 and (    parameter_2 is null
                      and parameter_3 is not null)
                 and (job.job_description <= parameter_3) )
             or (    parameter_2 is null
                 and parameter_3 is null
                 and parameter_0 = 0)
             or (    not(    parameter_2 is null
                         and parameter_3 is null
                         and parameter_0 = 0)
                 and job.act_job_id = parameter_0)
            )
        and rmd.act_expiry_id = exp.act_expiry_id
        and exp.act_part_imputation_id = par.act_part_imputation_id
        and par.act_document_id = atd.act_document_id
        and atd.act_document_id = imp.act_document_id
        and par.pac_custom_partner_id = cus.pac_person_id(+)
        and par.pac_supplier_partner_id = sup.pac_person_id(+)
        and imp.imf_primary = 1
        and rmd.act_document_id = doc.act_document_id);
end rpt_act_job_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOB_PRE_BATCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1      IN       NUMBER,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       NUMBER,
   parameter_5      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**

*Description - used for report ACT_JOB_PRE_BATCH

* @author jliu 18 Nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1: ACJ_JOB_TYPE_ID
* @PARAM PARAMETER_2: Job description from
* @PARAM PARAMETER_3: Job description to
* @PARAM PARAMETER_4: ACS_FINANCIAL_YEAR_ID
* @PARAM PARAMETER_5: PC_USER_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cat.acj_catalogue_document_id, cat.c_type_catalogue,
             acj_functions.translatecatdescr
                              (cat.acj_catalogue_document_id,
                               vpc_lang_id
                              ) cat_description,
             typ.acj_job_type_id, typ.typ_supplier_permanent,
             yea.fye_no_exercice, doc.act_document_id, doc.doc_number,
             doc.doc_total_amount_dc, doc.doc_document_date,
             doc.doc_pre_entry_expiry, doc.doc_pre_entry_validation,
             doc.doc_pre_entry_ini, job.act_job_id, job.job_description,
             job.acs_financial_year_id, cur.currency, usr.pc_user_id,
             usr.use_name, usr.use_descr, imp.par_document,
             per.per_name cus_name, per.per_forename cus_forname,
             per2.per_name sup_name, per2.per_forename sup_forname
        FROM acj_catalogue_document cat,
             acj_job_type typ,
             acs_financial_currency fur,
             acs_financial_year yea,
             act_document doc,
             act_job job,
             pcs.pc_curr cur,
             pcs.pc_user usr,
             act_part_imputation imp,
             pac_person per,
             pac_person per2
       WHERE job.act_job_id = doc.act_job_id(+)
         AND doc.pc_user_id = usr.pc_user_id(+)
         AND doc.acs_financial_currency_id = fur.acs_financial_currency_id(+)
         AND fur.pc_curr_id = cur.pc_curr_id(+)
         AND doc.acj_catalogue_document_id = cat.acj_catalogue_document_id(+)
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND job.acs_financial_year_id = yea.acs_financial_year_id
         AND doc.act_document_id = imp.act_document_id
         AND imp.pac_custom_partner_id = per.pac_person_id(+)
         AND imp.pac_supplier_partner_id = per2.pac_person_id(+)
         AND job.acs_financial_year_id = parameter_4
         AND typ.typ_supplier_permanent = 1
         AND job.job_description >= parameter_2
         AND job.job_description <= parameter_3
         AND act_functions.isuserautorizedforjobtype (parameter_5,
                                                      job.acj_job_type_id
                                                     ) = 1
         AND (parameter_1 = 0 OR typ.acj_job_type_id = parameter_1);
END rpt_act_job_pre_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_AUX" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, aJOU_NUMBER_From       in     varchar2
, aJOU_NUMBER_To         in     varchar2
, aACS_FINANCIAL_YEAR_ID in     varchar2
, PARAMETER_0            in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_JOURNAL_AUX

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_0     C_SUB_SET
*/

is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin
if (aJOU_NUMBER_From is not null) and (Length(Trim(aJOU_NUMBER_From)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER1 := aJOU_NUMBER_From;
  else
    ACR_FUNCTIONS.JOU_NUMBER1 := ' ';
  end if;
  if (aJOU_NUMBER_To is not null) and (Length(Trim(aJOU_NUMBER_To)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER2 := aJOU_NUMBER_To;
  end if;
  if (aACS_FINANCIAL_YEAR_ID is not null) and (Length(Trim(aACS_FINANCIAL_YEAR_ID)) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID := aACS_FINANCIAL_YEAR_ID;
  end if;

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
DES.PC_LANG_ID,
DES.DES_DESCRIPTION_SUMMARY,
FUR_ME.PC_CURR_ID ME_CURR_ID,
FUR_MB.PC_CURR_ID MB_CURR_ID,
ATD.ACT_DOCUMENT_ID,
ATD.ACT_JOB_ID,
ATD.DOC_NUMBER,
ATD.DOC_DOCUMENT_DATE,
DIS.ACS_DIVISION_ACCOUNT_ID,
PAR.ACT_PART_IMPUTATION_ID,
PAR.PAR_DOCUMENT,
PAR.PAC_CUSTOM_PARTNER_ID,
PAR.PAC_SUPPLIER_PARTNER_ID,
PAR.DOC_DATE_DELIVERY,
CUR_MB.CURRENCY MB_CURRENCY,
CUR_ME.CURRENCY ME_CURRENCY,
PTJ.ACT_FINANCIAL_IMPUTATION_ID,
PTJ.ACT_DOCUMENT_ID,
PTJ.ACS_FINANCIAL_ACCOUNT_ID,
PTJ.IMF_PRIMARY,
PTJ.IMF_DESCRIPTION,
PTJ.IMF_AMOUNT_LC_D,
PTJ.IMF_AMOUNT_LC_C,
PTJ.IMF_AMOUNT_FC_D,
PTJ.IMF_AMOUNT_FC_C,
PTJ.IMF_EXCHANGE_RATE,
PTJ.IMF_VALUE_DATE,
PTJ.ACS_TAX_CODE_ID,
PTJ.IMF_TRANSACTION_DATE,
PTJ.ACS_AUXILIARY_ACCOUNT_ID,
JOU.ACT_JOURNAL_ID,
JOU.PC_USER_ID,
JOU.JOU_DESCRIPTION,
JOU.JOU_NUMBER,
JOU.ACS_FINANCIAL_YEAR_ID,
JOU.C_ETAT_JOURNAL,
JOU.C_SUB_SET,
ACS_FUNCTION.GetAccountNumber(PTJ.ACS_AUXILIARY_ACCOUNT_ID) AUX_ACC_NUMBER,
ACS_FUNCTION.GetAccountNumber(DIS.ACS_DIVISION_ACCOUNT_ID) DIV_ACC_NUMBER,
ACS_FUNCTION.GetAccountNumber(PTJ.ACS_FINANCIAL_ACCOUNT_ID) ACC_NUMBER,
ACS_FUNCTION.GetAccountNumber(PTJ.ACS_TAX_CODE_ID) TAX_ACC_NUMBER
FROM
V_ACT_IMPUTATION_JOU PTJ,
ACS_DESCRIPTION DES,
ACT_FINANCIAL_DISTRIBUTION DIS,
ACT_DOCUMENT ATD,
V_ACT_JOURNAL JOU,
ACS_FINANCIAL_CURRENCY FUR_MB,
ACS_FINANCIAL_CURRENCY FUR_ME,
PCS.PC_CURR CUR_MB,
PCS.PC_CURR CUR_ME,
ACT_PART_IMPUTATION PAR
WHERE
PTJ.ACS_AUXILIARY_ACCOUNT_ID = DES.ACS_ACCOUNT_ID(+)
AND PTJ.ACT_FINANCIAL_IMPUTATION_ID = DIS.ACT_FINANCIAL_IMPUTATION_ID(+)
AND PTJ.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
AND ATD.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
AND PTJ.ACS_FINANCIAL_CURRENCY_ID = FUR_ME.ACS_FINANCIAL_CURRENCY_ID(+)
AND PTJ.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_MB.ACS_FINANCIAL_CURRENCY_ID(+)
AND FUR_ME.PC_CURR_ID = CUR_ME.PC_CURR_ID(+)
AND FUR_MB.PC_CURR_ID = CUR_MB.PC_CURR_ID(+)
AND PTJ.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID(+)
AND (JOU.C_SUB_SET = PARAMETER_0 OR PARAMETER_0 IS NULL)
AND (DES.PC_LANG_ID IS NULL OR DES.PC_LANG_ID = VPC_LANG_ID)
;
END RPT_ACT_JOURNAL_AUX;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_COND" (
   arefcursor               IN OUT   crystal_cursor_types.dualcursortyp,
   ajou_number_from         IN       VARCHAR2,
   ajou_number_to           IN       VARCHAR2,
   aacs_financial_year_id   IN       VARCHAR2,
   procuser_lanid           IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report act_journal_cond

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   IF     (ajou_number_from IS NOT NULL)
      AND (LENGTH (TRIM (ajou_number_from)) > 0)
   THEN
      acr_functions.jou_number1 := ajou_number_from;
   ELSE
      acr_functions.jou_number1 := ' ';
   END IF;

   IF (ajou_number_to IS NOT NULL) AND (LENGTH (TRIM (ajou_number_to)) > 0)
   THEN
      acr_functions.jou_number2 := ajou_number_to;
   END IF;

   IF     (aacs_financial_year_id IS NOT NULL)
      AND (LENGTH (TRIM (aacs_financial_year_id)) > 0)
   THEN
      acr_functions.fin_year_id := aacs_financial_year_id;
   END IF;

   OPEN arefcursor FOR
      SELECT acj_functions.translatecatdescr
                              (cat.acj_catalogue_document_id,
                               vpc_lang_id
                              ) cat_description,
             acj_functions.translatetypdescr
                                        (typ.acj_job_type_id,
                                         vpc_lang_id
                                        ) typ_description,
             yea.fye_no_exercice, prd.per_no_period, eta.c_etat_journal,
             eta.c_sub_set, job.job_description, jou.act_journal_id,
             jou.a_idmod, jou.a_idcre, jou.a_datemod, jou.a_datecre,
             jou.jou_number, jou.jou_description, des.des_description_summary,
             cur_mb.currency currency_mb, cur_me.currency currency_me,
             v_jou.act_journal_id, v_jou.imf_transaction_date,
             v_jou.acs_financial_account_id, v_jou.acs_division_account_id,
             v_jou.imf_amount_lc_d_sum, v_jou.imf_amount_lc_c_sum,
             v_jou.imf_amount_fc_d_sum, v_jou.imf_amount_fc_c_sum,
             v_jou.imf_amount_eur_d_sum, v_jou.imf_amount_eur_c_sum,
             acs_function.getaccountnumber
                                (v_jou.acs_division_account_id)
                                                               div_acc_number,
             acs_function.getaccountnumber
                                   (v_jou.acs_financial_account_id)
                                                                   acc_number,
             acs_function.getaccountnumber
                                        (v_jou.acs_tax_code_id)
                                                               tax_acc_number
        FROM v_act_journal_cond v_jou,
             act_journal jou,
             act_job job,
             acs_financial_year yea,
             acj_job_type typ,
             act_etat_journal eta,
             acs_financial_currency fur_mb,
             acs_financial_currency fur_me,
             pcs.pc_curr cur_mb,
             pcs.pc_curr cur_me,
             acj_catalogue_document cat,
             acs_period prd,
             acs_description des
       WHERE v_jou.act_journal_id = jou.act_journal_id
         AND jou.act_job_id = job.act_job_id
         AND jou.acs_financial_year_id = yea.acs_financial_year_id
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND v_jou.act_journal_id = eta.act_journal_id
         AND v_jou.acs_acs_financial_currency_id =
                                              fur_mb.acs_financial_currency_id
         AND fur_mb.pc_curr_id = cur_mb.pc_curr_id
         AND v_jou.acs_financial_currency_id =
                                              fur_me.acs_financial_currency_id
         AND fur_me.pc_curr_id = cur_me.pc_curr_id
         AND v_jou.acj_catalogue_document_id = cat.acj_catalogue_document_id
         AND v_jou.acs_period_id = prd.acs_period_id
         AND eta.c_sub_set = 'ACC'
         AND v_jou.acs_financial_account_id = des.acs_account_id
         AND des.pc_lang_id = vpc_lang_id;
END rpt_act_journal_cond;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_GEN" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, aJOU_NUMBER_From       in     varchar2
, aJOU_NUMBER_To         in     varchar2
, aACS_FINANCIAL_YEAR_ID in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
/**
* description used for report act_journal_gen.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
*/

is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin
if (aJOU_NUMBER_From is not null) and (Length(Trim(aJOU_NUMBER_From)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER1 := aJOU_NUMBER_From;
  else
    ACR_FUNCTIONS.JOU_NUMBER1 := ' ';
  end if;
  if (aJOU_NUMBER_To is not null) and (Length(Trim(aJOU_NUMBER_To)) > 0) then
    ACR_FUNCTIONS.JOU_NUMBER2 := aJOU_NUMBER_To;
  end if;
  if (aACS_FINANCIAL_YEAR_ID is not null) and (Length(Trim(aACS_FINANCIAL_YEAR_ID)) > 0) then
    ACR_FUNCTIONS.FIN_YEAR_ID := aACS_FINANCIAL_YEAR_ID;
  end if;

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
FUR_MB.PC_CURR_ID MB_CURR_ID,
FUR_ME.PC_CURR_ID ME_CURR_ID,
ATD.ACT_DOCUMENT_ID,
ATD.DOC_NUMBER,
ATD.DOC_DOCUMENT_DATE,
JOB.JOB_DESCRIPTION,
PAR.ACT_PART_IMPUTATION_ID,
PAR.PAR_DOCUMENT,
CUR_MB.CURRENCY MB_CURRENCY,
CUR_ME.CURRENCY ME_CURRENCY,
USR.USE_DESCR,
V_IMU.ACT_FINANCIAL_IMPUTATION_ID,
V_IMU.ACT_DOCUMENT_ID,
V_IMU.IMF_PRIMARY,
V_IMU.IMF_DESCRIPTION,
V_IMU.IMF_AMOUNT_LC_D,
V_IMU.IMF_AMOUNT_LC_C,
V_IMU.IMF_EXCHANGE_RATE,
V_IMU.IMF_AMOUNT_FC_D,
V_IMU.IMF_AMOUNT_FC_C,
V_IMU.IMF_VALUE_DATE,
V_IMU.IMF_TRANSACTION_DATE,
V_JOU.ACT_JOURNAL_ID,
V_JOU.JOU_DESCRIPTION,
V_JOU.JOU_NUMBER,
V_JOU.ACS_FINANCIAL_YEAR_ID,
V_JOU.C_ETAT_JOURNAL,
V_JOU.C_SUB_SET,
ACC_DIS.ACC_NUMBER ACC_NUMBER_DIV,
DES_AUX.DES_DESCRIPTION_SUMMARY AUX_DESCRIPTION_SUMMARY,
ACS_FUNCTION.GetAccountNumber(V_IMU.ACS_FINANCIAL_ACCOUNT_ID) FIN_ACC_NUMBER,
ACS_FUNCTION.GetAccountNumber(V_IMU.ACS_TAX_CODE_ID) TAX_ACC_NUMBER,
ACS_FUNCTION.GetAccountNumber(V_IMU.ACS_AUXILIARY_ACCOUNT_ID) AUX_ACC_NUMBER
FROM
V_ACT_IMPUTATION_JOU V_IMU,
V_ACT_JOURNAL V_JOU,
ACT_FINANCIAL_DISTRIBUTION DIS,
ACS_ACCOUNT ACC_DIS,
ACT_DOCUMENT ATD,
ACT_PART_IMPUTATION PAR,
ACT_JOB JOB,
PCS.PC_USER USR,
ACS_FINANCIAL_YEAR YEA,
ACJ_JOB_TYPE TYP,
ACS_FINANCIAL_CURRENCY FUR_MB,
ACS_FINANCIAL_CURRENCY FUR_ME,
PCS.PC_CURR CUR_MB,
PCS.PC_CURR CUR_ME,
ACS_DESCRIPTION DES_AUX
WHERE
V_IMU.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
AND V_IMU.ACT_FINANCIAL_IMPUTATION_ID = DIS.ACT_FINANCIAL_IMPUTATION_ID(+)
AND DIS.ACS_DIVISION_ACCOUNT_ID = ACC_DIS.ACS_ACCOUNT_ID(+)
AND ATD.ACT_JOB_ID = JOB.ACT_JOB_ID
AND JOB.ACJ_JOB_TYPE_ID = TYP.ACJ_JOB_TYPE_ID
AND ATD.ACT_JOURNAL_ID = V_JOU.ACT_JOURNAL_ID
AND V_JOU.PC_USER_ID = USR.PC_USER_ID(+)
AND V_JOU.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
AND V_IMU.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID(+)
AND V_IMU.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_MB.ACS_FINANCIAL_CURRENCY_ID(+)
AND FUR_MB.PC_CURR_ID = CUR_MB.PC_CURR_ID(+)
AND V_IMU.ACS_FINANCIAL_CURRENCY_ID = FUR_ME.ACS_FINANCIAL_CURRENCY_ID(+)
AND FUR_ME.PC_CURR_ID = CUR_ME.PC_CURR_ID(+)
AND V_IMU.ACS_AUXILIARY_ACCOUNT_ID = DES_AUX.ACS_ACCOUNT_ID(+)
AND DES_AUX.PC_LANG_ID(+) = VPC_LANG_ID
AND V_JOU.C_SUB_SET ='ACC'
;
END RPT_ACT_JOURNAL_GEN;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_GEN_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
--, PARAMETER_1            in     VARCHAR2
, PARAMETER_2            in     VARCHAR2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)

/**
* description used for report act_journal_gen.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
--* @PARAM PARAMETER_1    PC_USELANG_ID
* @PARAM PARAMETER_2    ACT_JOURNAL_ID
*/

is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
ACC_DIV.ACC_NUMBER DIV_NUMBER,
ACC_FIN.ACC_NUMBER FIN_NUMBER,
DES_DIV.PC_LANG_ID DIV_PC_LAN_ID,
DES_DIV.DES_DESCRIPTION_SUMMARY DIV_DESCRIPTION_SUMMARY,
DES_FIN.PC_LANG_ID FIN_PC_LAN_ID,
DES_FIN.DES_DESCRIPTION_SUMMARY FIN_DESCRIPTION_SUMMARY,
FUR_MB.PC_CURR_ID MB_CURR_ID,
FUR_ME.PC_CURR_ID ME_CURR_ID,
IMP.IMF_AMOUNT_LC_D,
IMP.IMF_AMOUNT_LC_C,
IMP.IMF_AMOUNT_FC_D,
IMP.IMF_AMOUNT_FC_C,
CUR_MB.CURRENCY CURRENCY_MB,
CUR_ME.CURRENCY CURRENCY_ME,
JOU.ACT_JOURNAL_ID,
JOU.C_SUB_SET
FROM
ACT_FINANCIAL_IMPUTATION IMP,
ACT_FINANCIAL_DISTRIBUTION DIS,
ACS_ACCOUNT ACC_DIV,
ACS_DESCRIPTION DES_DIV,
ACT_DOCUMENT ATD,
V_ACT_JOURNAL JOU,
ACS_ACCOUNT ACC_FIN,
ACS_DESCRIPTION DES_FIN,
ACS_FINANCIAL_CURRENCY FUR_MB,
ACS_FINANCIAL_CURRENCY FUR_ME,
PCS.PC_CURR CUR_MB,
PCS.PC_CURR CUR_ME
WHERE
IMP.ACT_FINANCIAL_IMPUTATION_ID = DIS.ACT_FINANCIAL_IMPUTATION_ID(+)
AND DIS.ACS_DIVISION_ACCOUNT_ID = ACC_DIV.ACS_ACCOUNT_ID(+)
AND ACC_DIV.ACS_ACCOUNT_ID = DES_DIV.ACS_ACCOUNT_ID(+)
AND IMP.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
AND ATD.ACT_JOURNAL_ID = JOU.ACT_JOURNAL_ID
AND IMP.ACS_FINANCIAL_ACCOUNT_ID = ACC_FIN.ACS_ACCOUNT_ID
AND ACC_FIN.ACS_ACCOUNT_ID = DES_FIN.ACS_ACCOUNT_ID(+)
AND IMP.ACS_FINANCIAL_CURRENCY_ID = FUR_ME.ACS_FINANCIAL_CURRENCY_ID(+)
AND IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_MB.ACS_FINANCIAL_CURRENCY_ID(+)
AND FUR_ME.PC_CURR_ID = CUR_ME.PC_CURR_ID(+)
AND FUR_MB.PC_CURR_ID = CUR_MB.PC_CURR_ID(+)
AND JOU.C_SUB_SET = 'ACC'
AND JOU.ACT_JOURNAL_ID = TO_NUMBER(PARAMETER_2)
AND DES_FIN.PC_LANG_ID = VPC_LANG_ID
AND ((DES_DIV.PC_LANG_ID IS NULL )OR (DES_DIV.PC_LANG_ID IS NOT NULL AND DES_DIV.PC_LANG_ID = VPC_LANG_ID))
;
END RPT_ACT_JOURNAL_GEN_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_LIST" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       NUMBER,
   parameter_1      IN       NUMBER,
   parameter_2      IN       NUMBER,
   parameter_3      IN       NUMBER,
   parameter_4      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description - used for report act_journal_list.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_0: ACS_FINANCIAL_YEAR_ID
* @PARAM PARAMETER_1: PC_USELANG_ID
* @PARAM PARAMETER_2: Journal from (Nr)
* @PARAM PARAMETER_3: Journal to (Nr)
* @PARAM PARAMETER_4: C_TYPE_ACCOUNTING (FIN/MAN/BUD)
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT des.des_description_summary, eta.c_etat_journal, job.act_job_id,
             jou.act_journal_id, jou.jou_description, jou.jou_number,
             jou.a_datecre, jou.a_datemod, jou.a_idcre, jou.a_idmod,
             (select count(*) from ACT_DOCUMENT WHERE ACT_JOB_ID = JOB.ACT_JOB_ID) doc_count
        FROM act_journal jou,
             act_etat_journal eta,
             acs_accounting atg,
             act_job job,
             acs_financial_year yea,
             acs_description des,
             acj_job_type typ,
             pcs.pc_lang lan
       WHERE jou.act_journal_id = eta.act_journal_id
         AND jou.acs_accounting_id = atg.acs_accounting_id
         AND atg.acs_accounting_id = des.acs_accounting_id
         AND des.pc_lang_id = lan.pc_lang_id
         AND jou.act_job_id = job.act_job_id
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND jou.acs_financial_year_id = yea.acs_financial_year_id
         AND lan.pc_lang_id = vpc_lang_id
         AND yea.acs_financial_year_id = parameter_0
         AND act_functions.isuserautorizedforjobtype (parameter_1,
                                                      job.acj_job_type_id
                                                     ) = 1
         AND (jou.jou_number >= parameter_2 AND jou.jou_number <= parameter_3
             )
         AND atg.c_type_accounting = parameter_4
         AND eta.c_sub_set <> 'REC'
         AND eta.c_sub_set <> 'PAY';
END rpt_act_journal_list;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_LIST_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description - used for report act_journal_list.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1: ACT_JOB_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT atd.act_document_id, job.act_job_id
        FROM act_job job, act_document atd
       WHERE job.act_job_id = TO_NUMBER (parameter_1)
         AND job.act_job_id = atd.act_job_id;
END rpt_act_journal_list_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_MGM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       NUMBER,
   parameter_1      IN       NUMBER,
   parameter_2      IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report act_journal_mgm.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_0    ACS_FINANCIAL_YEAR_ID
* @PARAM PARAMETER_1    journal from (Nr)
* @PARAM PARAMETER_2    journal to(Nr)
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT aux_acc.acc_number aux_acc_number,
             cda_acc.acc_number cda_acc_number,
             cpn_acc.acc_number cpn_acc_number,
             pf_acc.acc_number pf_acc_number,
             qty_acc.acc_number qty_acc_number, cur_mb.currency currency_mb,
             cur_me.currency currency_me, mgm.act_journal_id, mgm.jou_number,
             mgm.jou_description, mgm.pc_user_id, mgm.c_etat_journal,
             mgm.c_sub_set, mgm.acs_financial_year_id, mgm.job_description,
             mgm.act_document_id, mgm.doc_document_date, mgm.doc_number,
             mgm.imm_transaction_date, mgm.act_mgm_imputation_id,
             mgm.imm_value_date, mgm.imm_primary, mgm.imm_description,
             mgm.acs_cpn_account_id, mgm.acs_cda_account_id,
             mgm.acs_pf_account_id, mgm.acs_qty_unit_id,
             mgm.acs_acs_financial_currency_id, mgm.imm_amount_lc_d,
             mgm.imm_amount_lc_c, mgm.acs_financial_currency_id,
             mgm.imm_amount_fc_d, mgm.imm_amount_fc_c, mgm.imm_exchange_rate,
             mgm.imm_quantity_d, mgm.imm_quantity_c,
             mgm.act_mgm_distribution_id, mgm.acs_auxiliary_account_id,
             des.des_description_summary
        FROM v_act_rep_mgm_imputation mgm,
             acs_account aux_acc,
             acs_account cda_acc,
             acs_account cpn_acc,
             acs_account pf_acc,
             acs_account qty_acc,
             acs_description des,
             acs_financial_currency fur_mb,
             acs_financial_currency fur_me,
             pcs.pc_curr cur_mb,
             pcs.pc_curr cur_me
       WHERE mgm.acs_cpn_account_id = cpn_acc.acs_account_id
         AND mgm.acs_cda_account_id = cda_acc.acs_account_id(+)
         AND mgm.acs_pf_account_id = pf_acc.acs_account_id(+)
         AND mgm.acs_qty_unit_id = qty_acc.acs_account_id(+)
         AND mgm.acs_auxiliary_account_id = des.acs_account_id(+)
         AND des.pc_lang_id(+) = vpc_lang_id
         AND mgm.acs_acs_financial_currency_id =
                                              fur_mb.acs_financial_currency_id
         AND fur_mb.pc_curr_id = cur_mb.pc_curr_id
         AND mgm.acs_financial_currency_id = fur_me.acs_financial_currency_id
         AND fur_me.pc_curr_id = cur_me.pc_curr_id
         AND mgm.acs_auxiliary_account_id = aux_acc.acs_account_id(+)
         AND mgm.c_sub_set = 'CPN'
         AND mgm.acs_financial_year_id = parameter_0
         AND mgm.jou_number >= parameter_1
         AND mgm.jou_number <= parameter_2;
END rpt_act_journal_mgm;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOURNAL_OPT_TYP" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   afrom            IN       VARCHAR2,
   ato              IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACT_JOURNAL_OPERATION_TYP

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_0    ACS_FINANCIAL_YEAR_ID
* @PARAM PARAMETER_1    journal from (Nr)
* @PARAM PARAMETER_2    journal to(Nr)
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   IF (afrom IS NOT NULL) AND (LENGTH (TRIM (afrom)) > 0)
   THEN
      act_functions.date_from := TO_DATE (afrom, 'yyyymmdd');
   END IF;

   IF (ato IS NOT NULL) AND (LENGTH (TRIM (ato)) > 0)
   THEN
      act_functions.date_to := TO_DATE (ato, 'yyyymmdd');
   END IF;

   OPEN arefcursor FOR
      SELECT NVL(cat.dic_operation_typ_id,pcs.pc_functions.translateword2 ('Pas d opération', vpc_lang_id)) dic_operation_typ_id,
             tax_acc.acc_number tax_acc_number,
             aux_acc.acc_number aux_acc_number,
             div_acc.acc_number div_acc_number,
             fin_acc.acc_number fin_acc_number, des.des_description_summary,
             atd.act_document_id, atd.doc_number, atd.doc_document_date,
             par.act_part_imputation_id, par.par_document,
             cur_me.pc_curr_id pc_curr_id_me, cur_me.currency currency_me,
             cur_mb.pc_curr_id pc_curr_id_mb, cur_mb.currency currency_mb,
             v_imp.act_financial_imputation_id, v_imp.act_document_id,
             v_imp.imf_primary, v_imp.imf_description, v_imp.imf_amount_lc_d,
             v_imp.imf_amount_lc_c, v_imp.imf_exchange_rate,
             v_imp.imf_amount_fc_d, v_imp.imf_amount_fc_c,
             v_imp.imf_value_date, v_imp.imf_transaction_date,
             v_jou.jou_number, v_jou.acs_financial_year_id
        FROM acj_catalogue_document cat,
             acj_job_type typ,
             acs_account tax_acc,
             acs_account aux_acc,
             acs_account div_acc,
             acs_account fin_acc,
             acs_description des,
             acs_financial_currency fur_mb,
             acs_financial_currency fur_me,
             acs_financial_year yea,
             act_document atd,
             act_financial_distribution dis,
             act_job job,
             act_part_imputation par,
             pcs.pc_curr cur_mb,
             pcs.pc_curr cur_me,
             pcs.pc_user usr,
             v_act_fin_imputation_date v_imp,
             v_act_journal v_jou
       WHERE v_imp.act_financial_imputation_id = dis.act_financial_imputation_id(+)
         AND dis.acs_division_account_id = div_acc.acs_account_id(+)
         AND v_imp.act_document_id = atd.act_document_id
         AND atd.act_job_id = job.act_job_id
         AND job.acj_job_type_id = typ.acj_job_type_id
         AND atd.acj_catalogue_document_id = cat.acj_catalogue_document_id
         AND atd.act_journal_id = v_jou.act_journal_id
         AND v_jou.pc_user_id = usr.pc_user_id(+)
         AND v_jou.acs_financial_year_id = yea.acs_financial_year_id
         AND v_imp.acs_financial_account_id = fin_acc.acs_account_id
         AND v_imp.acs_tax_code_id = tax_acc.acs_account_id(+)
         AND v_imp.acs_financial_currency_id = fur_me.acs_financial_currency_id(+)
         AND fur_me.pc_curr_id = cur_me.pc_curr_id(+)
         AND v_imp.acs_auxiliary_account_id = aux_acc.acs_account_id(+)
         AND aux_acc.acs_account_id = des.acs_account_id(+)
         AND v_imp.acs_acs_financial_currency_id = fur_mb.acs_financial_currency_id(+)
         AND fur_mb.pc_curr_id = cur_mb.pc_curr_id(+)
         AND v_imp.act_part_imputation_id = par.act_part_imputation_id(+)
         AND (des.pc_lang_id IS NULL OR des.pc_lang_id = vpc_lang_id)
         AND v_jou.c_sub_set = 'ACC'
         AND (       (parameter_1 <> parameter_2)
                 AND (parameter_1 IS NOT NULL AND parameter_2 IS NOT NULL)
                 AND (    cat.dic_operation_typ_id >= parameter_1
                      AND cat.dic_operation_typ_id <= parameter_2
                     )
              OR (    (parameter_1 <> parameter_2)
                  AND (parameter_1 IS NOT NULL AND parameter_2 IS NULL)
                  AND (cat.dic_operation_typ_id >= parameter_1)
                 )
              OR (    (parameter_1 <> parameter_2)
                  AND (parameter_1 IS NULL AND parameter_2 IS NOT NULL)
                  AND (cat.dic_operation_typ_id <= parameter_2)
                 )
              OR (    (    parameter_1 = parameter_2
                       AND parameter_1 IS NOT NULL
                       AND parameter_2 IS NOT NULL
                      )
                  AND (cat.dic_operation_typ_id = parameter_1)
                 )
              OR (parameter_1 IS NULL AND parameter_2 IS NULL)
             );
END rpt_act_journal_opt_typ;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_JOU_OPT_TYP_VAT_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
* description used for report ACT_JOURNAL_OPERATION_TYP

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1     DIC_OPERATION_TYP_ID from
* @PARAM PARAMETER_2     DIC_OPERATION_TYP_ID to
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cat.dic_operation_typ_id, vat_acc.acc_number,
             v_tax.tax_vat_amount_lc, v_tax.ht_lc, v_tax.ttc_lc,
             v_imp.act_financial_imputation_id, v_imp.imf_primary,
             v_imp.c_genre_transaction
        FROM v_act_fin_imputation_date v_imp,
             v_act_det_tax v_tax,
             act_document atd,
             acj_catalogue_document cat,
             acs_account vat_acc
       WHERE v_imp.act_financial_imputation_id = v_tax.act_financial_imputation_id(+)
         AND v_imp.act_document_id = atd.act_document_id
         AND atd.acj_catalogue_document_id = cat.acj_catalogue_document_id
         AND v_imp.acs_tax_code_id = vat_acc.acs_account_id(+)
         AND (       (parameter_1 <> parameter_2)
                 AND (parameter_1 IS NOT NULL AND parameter_2 IS NOT NULL)
                 AND (    cat.dic_operation_typ_id >= parameter_1
                      AND cat.dic_operation_typ_id <= parameter_2
                     )
              OR (    (parameter_1 <> parameter_2)
                  AND (parameter_1 IS NOT NULL AND parameter_2 IS NULL)
                  AND (cat.dic_operation_typ_id >= parameter_1)
                 )
              OR (    (parameter_1 <> parameter_2)
                  AND (parameter_1 IS NULL AND parameter_2 IS NOT NULL)
                  AND (cat.dic_operation_typ_id <= parameter_2)
                 )
              OR (    (    parameter_1 = parameter_2
                       AND parameter_1 IS NOT NULL
                       AND parameter_2 IS NOT NULL
                      )
                  AND (cat.dic_operation_typ_id = parameter_1)
                 )
              OR (parameter_1 IS NULL AND parameter_2 IS NULL)
             )
         AND (v_tax.act_det_tax_id IS NULL OR nvl(v_tax.tax_tmp_vat_encashment, 0) = 0
             );
END rpt_act_jou_opt_typ_vat_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_MGM_DIS_RECAP_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_1            in     VARCHAR2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_JOURNAL_MGM

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1: ACT_JOURNAL_ID
*/
is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
CPN_ACC.ACC_NUMBER CPN_ACC_NUMBER,
PJ_ACC.ACC_NUMBER PJ_ACC_NUMBER,
QTY_ACC.ACC_NUMBER QTY_ACC_NUMBER,
CUR_MB.CURRENCY CURRENCY_MB,
CUR_ME.CURRENCY CURRENCY_ME,
ATD.ACT_ACT_JOURNAL_ID,
DIS.MGM_AMOUNT_LC_D,
DIS.MGM_AMOUNT_FC_D,
DIS.MGM_AMOUNT_LC_C,
DIS.MGM_AMOUNT_FC_C,
DIS.MGM_QUANTITY_D,
DIS.MGM_QUANTITY_C,
IMP.ACS_FINANCIAL_CURRENCY_ID,
IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
IMP.ACS_QTY_UNIT_ID,
CUR_MB.CURRENCY CURRENCY_MB,
CUR_ME.CURRENCY CURRENCY_ME
FROM
ACS_ACCOUNT CPN_ACC,
ACS_ACCOUNT PJ_ACC,
ACS_ACCOUNT QTY_ACC,
ACS_FINANCIAL_CURRENCY FUR_MB,
ACS_FINANCIAL_CURRENCY FUR_ME,
PCS.PC_CURR CUR_MB,
PCS.PC_CURR CUR_ME,
ACT_MGM_IMPUTATION IMP,
ACT_MGM_DISTRIBUTION DIS,
ACT_DOCUMENT ATD
WHERE
DIS.ACT_MGM_IMPUTATION_ID = IMP.ACT_MGM_IMPUTATION_ID
AND IMP.ACS_FINANCIAL_CURRENCY_ID = FUR_ME.ACS_FINANCIAL_CURRENCY_ID
AND FUR_ME.PC_CURR_ID = CUR_ME.PC_CURR_ID
AND IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_MB.ACS_FINANCIAL_CURRENCY_ID
AND FUR_MB.PC_CURR_ID = CUR_MB.PC_CURR_ID
AND IMP.ACS_CPN_ACCOUNT_ID = CPN_ACC.ACS_ACCOUNT_ID
AND IMP.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
AND IMP.ACS_QTY_UNIT_ID = QTY_ACC.ACS_ACCOUNT_ID(+)
AND DIS.ACS_PJ_ACCOUNT_ID= PJ_ACC.ACS_ACCOUNT_ID
AND ATD.ACT_ACT_JOURNAL_ID = TO_NUMBER(PARAMETER_1)
;
END RPT_ACT_MGM_DIS_RECAP_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_MGM_DIS_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_1            in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
/**
* description used for report ACT_JOURNAL_MGM

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1:  ACT_MGM_DISTRIBUTION_ID
*/

is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
PJ_ACC.ACC_NUMBER,
DIS.ACT_MGM_DISTRIBUTION_ID,
DIS.MGM_AMOUNT_LC_D,
DIS.MGM_AMOUNT_FC_D,
DIS.MGM_AMOUNT_LC_C,
DIS.MGM_AMOUNT_FC_C
FROM
ACT_MGM_DISTRIBUTION DIS,
ACT_MGM_IMPUTATION IMP,
ACS_ACCOUNT PJ_ACC
WHERE
DIS.ACT_MGM_IMPUTATION_ID = IMP.ACT_MGM_IMPUTATION_ID
AND DIS.ACS_PJ_ACCOUNT_ID = PJ_ACC.ACS_ACCOUNT_ID(+)
AND DIS.ACT_MGM_DISTRIBUTION_ID = to_number(PARAMETER_1)
;
END RPT_ACT_MGM_DIS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_MGM_RECAP_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_1            in     VARCHAR2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
/**
* description used for report act_mgm_recap.rpt,sub report of act_journal_mgm.rpt

* @author jliu 18 nov 2008
* @lastupdate 12 Feb 2009
* @public
* @PARAM PARAMETER_1    ACT_JOURNAL_ID
*/
is

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


begin

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

open aRefCursor for
SELECT
CDA_ACC.ACC_NUMBER CDA_ACC_NUMBER,
CPN_ACC.ACC_NUMBER CPN_ACC_NUMBER,
PF_ACC.ACC_NUMBER PF_ACC_NUMBER,
QTY_ACC.ACC_NUMBER QTY_ACC_NUMBER,
CUR_MB.CURRENCY CURRENCY_MB,
CUR_ME.CURRENCY CURRENCY_ME,
IMP.ACS_CDA_ACCOUNT_ID,
IMP.ACS_CPN_ACCOUNT_ID,
IMP.ACS_PF_ACCOUNT_ID,
IMP.ACS_QTY_UNIT_ID,
IMP.ACS_ACS_FINANCIAL_CURRENCY_ID,
IMP.IMM_AMOUNT_LC_D,
IMP.IMM_AMOUNT_LC_C,
IMP.ACS_FINANCIAL_CURRENCY_ID,
IMP.IMM_AMOUNT_FC_D,
IMP.IMM_AMOUNT_FC_C,
IMP.IMM_QUANTITY_D,
IMP.IMM_QUANTITY_C
FROM
ACS_ACCOUNT CDA_ACC,
ACS_ACCOUNT CPN_ACC,
ACS_ACCOUNT PF_ACC,
ACS_ACCOUNT QTY_ACC,
ACS_FINANCIAL_CURRENCY FUR_MB,
ACS_FINANCIAL_CURRENCY FUR_ME,
PCS.PC_CURR CUR_MB,
PCS.PC_CURR CUR_ME,
V_ACT_REP_MGM_IMPUTATION IMP
WHERE
IMP.ACS_CDA_ACCOUNT_ID = CDA_ACC.ACS_ACCOUNT_ID(+)
AND IMP.ACS_FINANCIAL_CURRENCY_ID = FUR_ME.ACS_FINANCIAL_CURRENCY_ID
AND FUR_ME.PC_CURR_ID = CUR_ME.PC_CURR_ID
AND IMP.ACS_ACS_FINANCIAL_CURRENCY_ID = FUR_MB.ACS_FINANCIAL_CURRENCY_ID
AND FUR_MB.PC_CURR_ID = CUR_MB.PC_CURR_ID
AND IMP.ACS_CPN_ACCOUNT_ID = CPN_ACC.ACS_ACCOUNT_ID
AND IMP.ACS_QTY_UNIT_ID = QTY_ACC.ACS_ACCOUNT_ID(+)
AND IMP.ACS_PF_ACCOUNT_ID= PF_ACC.ACS_ACCOUNT_ID(+)
AND IMP.ACT_JOURNAL_ID = TO_NUMBER(PARAMETER_1)
AND IMP.C_SUB_SET = 'CPN'
;
END RPT_ACT_MGM_RECAP_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_PART_IMPUTATION_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
/**
*Description  Used for report ACT_DOC_PRE_CTRL
*
*@created AWU 20 MAY 2009
*@lastUpdate
*@public
*@param PARAMETER_0 ACT_DOCUMENT_ID
*/
IS
BEGIN
   OPEN arefcursor FOR
      SELECT par.par_document, perc.per_name per_name_cus,
             perc.per_forename per_forname_cus, pers.per_name per_name_sup,
             pers.per_forename per_forename_sup
        FROM act_part_imputation par, pac_person perc, pac_person pers
       WHERE par.pac_custom_partner_id = perc.pac_person_id(+)
         AND par.pac_supplier_partner_id = pers.pac_person_id(+)
         AND par.act_document_id = parameter_99;
END rpt_act_part_imputation_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_PART_IMP_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description - used in report act_part_imputation
* @author jliu 18 Nov 2008
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_1: ACT_DOCUMENT_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT fmp.imf_amount_lc_d, fmp.imf_amount_lc_c, fmp.imf_amount_fc_d,
             fmp.imf_amount_fc_c, fmp.acs_auxiliary_account_id,
             fmp.acs_financial_currency_id,
             fmp.acs_acs_financial_currency_id, imp.par_document,
             cus.pac_person_id cus_person_id, cus.per_name cus_name,
             cus.per_forename cus_forename, sup.pac_person_id sup_person_id,
             sup.per_name sup_name, sup.per_forename sup_forename,
             cmb.currency currency_mb, cme.currency currency_me
        FROM act_part_imputation imp,
             pac_person cus,
             pac_person sup,
             act_financial_imputation fmp,
             acs_financial_currency fmb,
             acs_financial_currency fme,
             pcs.pc_curr cmb,
             pcs.pc_curr cme
       WHERE imp.act_document_id = TO_NUMBER (parameter_1)
         AND imp.pac_custom_partner_id = cus.pac_person_id(+)
         AND imp.pac_supplier_partner_id = sup.pac_person_id(+)
         AND imp.act_part_imputation_id = fmp.act_part_imputation_id(+)
         AND fmp.acs_acs_financial_currency_id = fmb.acs_financial_currency_id(+)
         AND fmp.acs_financial_currency_id = fme.acs_financial_currency_id(+)
         AND fmb.pc_curr_id = cmb.pc_curr_id(+)
         AND fme.pc_curr_id = cme.pc_curr_id(+)
         AND fmp.acs_auxiliary_account_id IS NOT NULL;
END rpt_act_part_imp_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_REMINDER_LIST" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_00           in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is
/**
* description used for report ACT_REMINDER_LIST  and  ACT_REMINDER_LIST_SI

* @author JLI  16 Sep 2009
* @lastupdate VHA 19 October 2012
* public
* @param PARAMETER_0   ACT_JOB_ID

*/


VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;


open aRefCursor for
SELECT
    ATD.ACT_DOCUMENT_ID ,
    ATD.ACT_JOB_ID ACT_JOB_ID_ATD,
    ATD.DOC_NUMBER DOC_NUMBER_ATD,
    ATD.DOC_DOCUMENT_DATE DOC_DOCUMENT_DATE_ATD,
    ATD_1.DOC_NUMBER DOC_NUMBER,
    ATD_1.DOC_DOCUMENT_DATE,
    (select max(IMP.IMF_NUMBER2)
       from ACT_FINANCIAL_IMPUTATION IMP
      where IMP.ACT_DOCUMENT_ID = ATD_1.ACT_DOCUMENT_ID
          and IMP.IMF_PRIMARY + 0 = 0
          and IMP.IMF_TYPE <> 'VAT') IMF_NUMBER2,
    EPY_2.EXP_ADAPTED,
    AJB.ACT_JOB_ID ACT_JOB_ID,
    AJB.JOB_DESCRIPTION,
    PAR.ACS_FINANCIAL_CURRENCY_ID,
    PAR.ACS_ACS_FINANCIAL_CURRENCY_ID,
    RED.REM_PAYABLE_AMOUNT_LC,
    RED.REM_PAYABLE_AMOUNT_FC,
    RED.REM_NUMBER,
    RPT_FUNCTIONS.FORMATADDRESSCONVERTION(ADR.PAC_ADDRESS_ID) ADD_FORMAT,
    PER.PAC_PERSON_ID,
    PER.PER_NAME,
    PER.PER_SHORT_NAME,
    CUR.CURRENCY,
    RED.REM_CHARGE_AMOUNT_RC,
    RED.REM_INTEREST_AMOUNT_RC
    FROM
    ACS_FINANCIAL_CURRENCY FUR,
    ACT_DOCUMENT ATD,
    ACT_DOCUMENT ATD_1,
    ACT_EXPIRY EPY,
    ACT_EXPIRY EPY_2,
    ACT_JOB AJB,
    ACT_PART_IMPUTATION PAR,
    ACT_PART_IMPUTATION PAR_1,
    ACT_REMINDER RED,
    PAC_ADDRESS ADR,
    PAC_CUSTOM_PARTNER CUS,
    PAC_PERSON PER,
    PCS.PC_CURR CUR
WHERE
AJB.ACT_JOB_ID = PARAMETER_00
AND ATD.ACT_JOB_ID = AJB.ACT_JOB_ID
AND RED.ACT_DOCUMENT_ID = ATD.ACT_DOCUMENT_ID
AND RED.ACT_EXPIRY_ID = EPY.ACT_EXPIRY_ID
AND EPY.ACT_PART_IMPUTATION_ID = PAR_1.ACT_PART_IMPUTATION_ID
AND PAR_1.ACT_DOCUMENT_ID = ATD_1.ACT_DOCUMENT_ID
AND RED.ACT_PART_IMPUTATION_ID = PAR.ACT_PART_IMPUTATION_ID
AND PAR.ACT_PART_IMPUTATION_ID = EPY_2.ACT_PART_IMPUTATION_ID
AND PAR.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
AND PAR.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
AND PAR.PAC_ADDRESS_ID = ADR.PAC_ADDRESS_ID
AND ADR.PAC_PERSON_ID = PER.PAC_PERSON_ID
;
END RPT_ACT_REMINDER_LIST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_REMINDER_LIST_SUB" (
  aRefCursor             in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0            in     varchar2
, PROCUSER_LANID         in     pcs.pc_lang.lanid%type
)
is
/**
* description used for sub report of ACT_REMINDER_LIST  and  ACT_REMINDER_LIST_SI

* @author JLI  16 Sep 2009
* public
* @param PARAMETER_0   ACT_JOB_ID
*/


VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN

pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;


open aRefCursor for
select
       JOB.ACT_JOB_ID,
       PART.PAR_REMIND_DATE,
       PART.DOC_DATE_DELIVERY,
       CAT.ACJ_CATALOGUE_DOCUMENT_ID,
       IMP.ACS_PERIOD_ID,
       REM.REM_NUMBER,
       REM.ACS_ACS_FINANCIAL_CURRENCY_ID,
       count (*) NUMBER_OF_REMINDER,
       sum(EXP.EXP_AMOUNT_LC)          AMOUNT_LC,
       sum(REM.REM_PAYABLE_AMOUNT_LC)  PAYABLE_AMOUNT_LC,
       sum(EXP.EXP_AMOUNT_FC)          AMOUNT_FC,
       sum(REM.REM_PAYABLE_AMOUNT_FC)  PAYABLE_AMOUNT_FC,
       sum(EXP.EXP_AMOUNT_EUR)         AMOUNT_EUR,
       sum(REM.REM_PAYABLE_AMOUNT_EUR) PAYABLE_AMOUNT_EUR,
       sum(REM.REM_CHARGE_AMOUNT_RC)   REM_CHARGE_AMOUNT_RC,
       sum(REM.REM_INTEREST_AMOUNT_RC) REM_INTEREST_AMOUNT_RC
from
     ACT_FINANCIAL_IMPUTATION IMP,
     ACT_PART_IMPUTATION PART,
     ACT_DOCUMENT DOC,
     ACT_EXPIRY EXP,
     ACT_REMINDER REM,
     ACT_JOB JOB,
     ACJ_CATALOGUE_DOCUMENT CAT
where
  JOB.ACT_JOB_ID = PARAMETER_0
  and CAT.C_TYPE_CATALOGUE = '8'
  and JOB.JOB_ACI_CONTROL_DATE is not null
  and IMP.IMF_PRIMARY+0 = 1
  and CAT.ACJ_CATALOGUE_DOCUMENT_ID = DOC.ACJ_CATALOGUE_DOCUMENT_ID
  and DOC.ACT_JOB_ID = JOB.ACT_JOB_ID
  and DOC.ACT_DOCUMENT_ID = PART.ACT_DOCUMENT_ID
  and PART.ACT_PART_IMPUTATION_ID = REM.ACT_PART_IMPUTATION_ID
  and DOC.ACT_DOCUMENT_ID = REM.ACT_DOCUMENT_ID
  and REM.ACT_EXPIRY_ID = EXP.ACT_EXPIRY_ID
  and EXP.ACT_DOCUMENT_ID = IMP.ACT_DOCUMENT_ID
group by
         JOB.ACT_JOB_ID,
         PART.PAR_REMIND_DATE,
         PART.DOC_DATE_DELIVERY,
         CAT.ACJ_CATALOGUE_DOCUMENT_ID,
         IMP.ACS_PERIOD_ID,
         REM.REM_NUMBER,
         REM.ACS_ACS_FINANCIAL_CURRENCY_ID
         ;
END RPT_ACT_REMINDER_LIST_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ACT_REMINDER_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
/**
*Description - used for report ACT_REMINDER, ACT_JOB

* @author jliu 18 Nov 2009
* @lastupdate 12 Feb 2009
* @public
* @param PARAMETER_1: ACT_DOCUMENT_ID
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT atd.doc_number, EXP.exp_adapted, EXP.exp_amount_lc,
             EXP.exp_amount_fc, imp.imf_primary, imp.imf_transaction_date,
             rmd.acs_financial_currency_id,
             rmd.acs_acs_financial_currency_id, rmd.rem_payable_amount_lc,
             rmd.rem_payable_amount_fc, rmd.rem_number,
             cus.pac_person_id cus_person_id, cus.per_name cus_name,
             sup.pac_person_id sup_person_id, sup.per_name sup_name
        FROM act_reminder rmd,
             act_expiry EXP,
             act_part_imputation par,
             act_document atd,
             pac_person cus,
             pac_person sup,
             act_financial_imputation imp
       WHERE rmd.act_expiry_id = EXP.act_expiry_id
         AND EXP.act_part_imputation_id = par.act_part_imputation_id
         AND par.act_document_id = atd.act_document_id
         AND atd.act_document_id = imp.act_document_id
         AND par.pac_custom_partner_id = cus.pac_person_id(+)
         AND par.pac_supplier_partner_id = sup.pac_person_id(+)
         AND imp.imf_primary = 1
         AND rmd.act_document_id = TO_NUMBER (parameter_1);
END rpt_act_reminder_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_ACKNOWLEDGEMENT_3" (
   arefcursor      IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0     IN       VARCHAR2,
   company_owner   IN       VARCHAR2,
   output_mode     IN       NUMBER
)
IS
/*
* Description STORED PROCEDURE USED FOR REPORT ASA_ACKNOWLEDGEMENT_3

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZHU 06 Dec 2008
* @lastupdate VHA 26 JUNE 2013
* @PUBLIC
* @PARAM PROCPARAM_0: Document number (Repair Acknowledgement)
*/
   vcom_vfields_record_id   NUMBER (12);
   vvfi_date_01             DATE;
   vcom_logo_large          pcs.pc_comp.com_logo_large%TYPE := null;
BEGIN
   BEGIN
      SELECT vfi.com_vfields_record_id, vfi.vfi_date_01
        INTO vcom_vfields_record_id, vvfi_date_01
        FROM asa_record ARE, com_vfields_record vfi
       WHERE ARE.asa_record_id = vfi.vfi_rec_id
         AND ARE.are_number = parameter_0;

      IF (vvfi_date_01 IS NULL) AND output_mode <> 0 AND output_mode <> 100
      THEN
         UPDATE com_vfields_record vfi
            SET vfi.vfi_date_01 = SYSDATE
          WHERE vfi.com_vfields_record_id = vcom_vfields_record_id;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   if (company_owner is not null) then
       SELECT com.com_logo_large
         INTO vcom_logo_large
         FROM pcs.pc_comp com, pcs.pc_scrip scr
        WHERE com.pc_scrip_id = scr.pc_scrip_id AND scr.scrdbowner = company_owner;
    end if;

   OPEN arefcursor FOR
      SELECT vcom_logo_large com_logo_large,
      ARE.are_number,
             ARE.are_address_fin_cust,
             ARE.are_format_city_fin_cust,
             ARE.are_char1_value,
             ARE.are_customer_ref,
             ARE.a_datecre,
             ARE.a_idcre,
             ARE.a_idmod,
             ARE.are_gco_short_descr,
             ARE.are_gco_long_descr,
             ARE.are_gco_free_descr,
             vfi.com_vfields_record_id,
             vfi.vfi_char_01,
             vfi.vfi_date_01,
             goo.goo_major_reference,
             per_fin.per_name per_name_fin,
             per_fin.per_forename per_forename_fin,
             per_fin.per_key1 per_key1_fin,
             lan.lanid,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      1,
                                      1,
                                      ARE.pc_asa_cust_lang_id
                                     ) block1_title,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      2,
                                      1,
                                      ARE.pc_asa_cust_lang_id
                                     ) block1_name,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      3,
                                      1,
                                      ARE.pc_asa_cust_lang_id
                                     ) block1_info,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      1,
                                      2,
                                      ARE.pc_asa_cust_lang_id
                                     ) block2_title,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      2,
                                      2,
                                      ARE.pc_asa_cust_lang_id
                                     ) block2_name,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      3,
                                      2,
                                      ARE.pc_asa_cust_lang_id
                                     ) block2_info,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      1,
                                      3,
                                      ARE.pc_asa_cust_lang_id
                                     ) block3_title,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      2,
                                      3,
                                      ARE.pc_asa_cust_lang_id
                                     ) block3_name,
             rpt_functions.getasaadr (ARE.asa_record_id,
                                      3,
                                      3,
                                      ARE.pc_asa_cust_lang_id
                                     ) block3_info
        FROM asa_record ARE,
             com_vfields_record vfi,
             gco_good goo,
             gco_good goo_exc,
             pac_person per,
             pac_person per_fin,
             pcs.pc_lang lan
       WHERE ARE.asa_record_id = vfi.vfi_rec_id(+)
         AND ARE.pac_custom_partner_id = per.pac_person_id
         AND ARE.pac_asa_fin_cust_id = per_fin.pac_person_id(+)
         AND ARE.pc_asa_cust_lang_id = lan.pc_lang_id
         AND ARE.gco_asa_to_repair_id = goo.gco_good_id
         AND ARE.gco_asa_exchange_id = goo_exc.gco_good_id(+)
         AND ARE.are_number = parameter_0;
END rpt_asa_acknowledgement_3;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_INSTALLATION_FORM" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PROCPARAM_0   in  varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)

is
/**
 Procédure stockée utilisée pour le rapport ASA_INSTALLATION_FORM (Fiche d'installation)
* replace the procedure ASA_INSTALLATION_FORM_RPT
 @author JSC
 @lastUpdate
 @version 2003
 @public
 @param PROCPARAM_0    Numéro d'insallation RCO_TITLE
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin
pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

  open aRefCursor for
    SELECT CAT.RCY_DESCR
     , RCO.RCO_TITLE
     , GCO.GOO_MAJOR_REFERENCE
     , SEN.SEM_VALUE
     , RCO.C_ASA_MACHINE_STATE
     , (SELECT DCOD.GCDTEXT1
         FROM PCS.PC_GCODES DCOD
        WHERE DCOD.GCGNAME = 'C_ASA_MACHINE_STATE'
          AND DCOD.GCLCODE = RCO.C_ASA_MACHINE_STATE
          AND DCOD.PC_LANG_ID = VPC_LANG_ID) C_ASA_MACHINE_STATE_DESCR
     , RCO.C_RCO_STATUS
     , (SELECT DCOD.GCDTEXT1
         FROM PCS.PC_GCODES DCOD
        WHERE DCOD.GCGNAME = 'C_RCO_STATUS'
          AND DCOD.GCLCODE = RCO.C_RCO_STATUS
          AND DCOD.PC_LANG_ID = VPC_LANG_ID) C_RCO_STATUS_DESCR
     , RCO.RCO_MACHINE_LONG_DESCR
     , RCO.RCO_MACHINE_FREE_DESCR
     , RCO.RCO_MACHINE_COMMENT
     , PER_SUP.PER_NAME
     , DMT.DMT_NUMBER
     , POS.POS_NUMBER
     , DMT.DMT_DATE_DOCUMENT
     , RCO.RCO_SUPPLIER_SERIAL_NUMBER
     , RCO.RCO_SUPPLIER_WARRANTY_START
     , RCO.RCO_SUPPLIER_WARRANTY_END
     , RCO.RCO_SUPPLIER_WARRANTY_TERM
     , (SELECT DCOD.GCDTEXT1
         FROM PCS.PC_GCODES DCOD
        WHERE DCOD.GCGNAME = 'C_ASA_GUARANTY_UNIT'
          AND DCOD.GCLCODE = RCO.C_ASA_GUARANTY_UNIT
          AND DCOD.PC_LANG_ID = VPC_LANG_ID) C_ASA_GUARANTY_UNIT_DESCR
     , RCO.RCO_WARRANTY_TEXT
     , RCO.RCO_MACHINE_REMARK
     , RCO.RCO_ESTIMATE_PRICE
     , RCO.RCO_SALE_PRICE
     , RCO.RCO_COST_PRICE
     , PER_CUS.PER_NAME
     , DEP.DEP_DESCRIPTION
     , ADR.ADD_CARE_OF
     , ADR.ADD_ADDRESS1
     , ADR.ADD_PO_BOX
     , ADR.ADD_PO_BOX_NBR
     , ADR.ADD_ZIPCODE
     , ADR.ADD_CITY
     , ADR.ADD_FORMAT
     , ADR.ADD_STATE
     , ADR.ADD_COUNTY
     , MOV.AIM_CUSTOM_NUMBER
     , MOV.AIM_MOVEMENT_DATE
     , MOV.AIM_GUARANTEE_END_DATE
     , MOV.AIM_NEXT_MISSION_COUNTER
     , MOV.AIM_NEXT_MISSION_DATE
     , MOV.DIC_AIM_LOCK_CODE_ID
     , MOV.AIM_LOCATION_COMMENT1
     , MOV.AIM_LOCATION_COMMENT2
     , MOV.AIM_COMMENT
      FROM DOC_RECORD RCO
         , DOC_RECORD_CATEGORY CAT
         , GCO_GOOD GCO
         , STM_ELEMENT_NUMBER SEN
         , PAC_PERSON PER_SUP
         , PAC_PERSON PER_CUS
         , PAC_DEPARTMENT DEP
         , PAC_ADDRESS ADR
         , DOC_DOCUMENT DMT
         , DOC_POSITION POS
         , ASA_INSTALLATION_MOVEMENT MOV
     WHERE RCO.DOC_RECORD_ID = MOV.DOC_RECORD_ID (+)
       AND RCO.DOC_RECORD_CATEGORY_ID = CAT.DOC_RECORD_CATEGORY_ID (+)
       AND RCO.RCO_MACHINE_GOOD_ID = GCO.GCO_GOOD_ID (+)
       AND RCO.STM_ELEMENT_NUMBER_ID = SEN.STM_ELEMENT_NUMBER_ID (+)
       AND RCO.PAC_THIRD_ID = PER_SUP.PAC_PERSON_ID (+)
       AND RCO.DOC_PURCHASE_POSITION_ID = POS.DOC_POSITION_ID (+)
       AND POS.DOC_DOCUMENT_ID = DMT.DOC_DOCUMENT_ID (+)
       AND MOV.PAC_DEPARTMENT_ID = DEP.PAC_DEPARTMENT_ID (+)
       AND MOV.PAC_ADDRESS_ID = ADR.PAC_ADDRESS_ID (+)
       AND MOV.C_ASA_AIM_HISTORY_CODE (+) = 1
       AND MOV.PAC_CUSTOM_PARTNER_ID = PER_CUS.PAC_PERSON_ID (+)
       AND RCO.RCO_TITLE = PROCPARAM_0
       AND RCO.C_RCO_TYPE = '11';

end RPT_ASA_INSTALLATION_FORM;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_INSTALLATION_FORM_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, ANYTHING       in varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/* description used for report ASA_INSTALLATION_FORM

* @AUTHOR SMA
* @LASTUPDATE Oktober 2013
* @PUBLIC
* @param PROCPARAM_0: Numero d'insallation DOC_RECORD_ID
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select RCL.DOC_RECORD_LINK_ID
         , rco_father.rco_title rco_father
         , dcl.rlt_upward_semantic
         , rco_son.rco_title rco_son
         , (select goo_major_reference
              from gco_good goo
             where goo.gco_good_id = rco_son.rco_machine_good_id) goo_major_reference
         , rco_son.rco_machine_long_descr
         , rco_son.rco_machine_free_descr
         , rcl_comment
         , rco_father.rco_title
      from doc_record rco_father
         , doc_record_link rcl
         , doc_record rco_son
         , doc_record_category_link rlt
         , doc_record_cat_link_type dcl
     where rco_father.doc_record_id = rcl.doc_record_father_id
       and rcl.doc_record_son_id = rco_son.doc_record_id
       and rcl.doc_record_category_link_id = rlt.doc_record_category_link_id
       and rlt.doc_record_cat_link_type_id = dcl.doc_record_cat_link_type_id
       and rco_father.rco_title = ANYTHING;
end RPT_ASA_INSTALLATION_FORM_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_INVOICE_DOC_TOTAL_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
* Description - used for the report ASA_INVOICING_DOCUMENTS

* @AUTHOR AWU 23 JUL 2009
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     ASA_INVOICING_JOB_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT   dmt.currency,
               SUM (dmt.foo_document_total_amount) currency_total
          FROM (SELECT DISTINCT doc.doc_document_id, cur.currency,
                                foo.foo_document_total_amount
                           FROM asa_invoicing_job aij,
                                asa_invoicing_process aip,
                                doc_document doc,
                                doc_foot foo,
                                acs_financial_currency acs,
                                pcs.pc_curr cur
                          WHERE aij.asa_invoicing_job_id =
                                                      aip.asa_invoicing_job_id
                            AND aip.doc_document_id = doc.doc_document_id
                            AND doc.doc_document_id = foo.doc_document_id
                            AND doc.acs_financial_currency_id =
                                                 acs.acs_financial_currency_id
                            AND acs.pc_curr_id = cur.pc_curr_id
                            AND aij.asa_invoicing_job_id = parameter_0) dmt
      GROUP BY dmt.currency;
END rpt_asa_invoice_doc_total_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_INVOICING_DOCUMENTS" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
* Description - used for the report ASA_INVOICING_DOCUMENTS

* @AUTHOR AWU 23 JUL 2009
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     ASA_INVOICING_JOB_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT DISTINCT aij.aij_description, aij.aij_date, doc.dmt_number,
                      per.pac_person_id, per.per_name, per.per_key1,
                      foo.foo_document_total_amount, cur.currency,
                      pco.pco_descr
                 FROM asa_invoicing_job aij,
                      asa_invoicing_process aip,
                      doc_document doc,
                      doc_foot foo,
                      pac_person per,
                      acs_financial_currency acs,
                      pcs.pc_curr cur,
                      pac_payment_condition pco
                WHERE aij.asa_invoicing_job_id = aip.asa_invoicing_job_id
                  AND aip.doc_document_id = doc.doc_document_id
                  AND doc.doc_document_id = foo.doc_document_id
                  AND doc.pac_third_id = per.pac_person_id
                  AND doc.acs_financial_currency_id =
                                                 acs.acs_financial_currency_id
                  AND acs.pc_curr_id = cur.pc_curr_id
                  AND doc.pac_payment_condition_id =
                                                  pco.pac_payment_condition_id
                  AND aij.asa_invoicing_job_id = parameter_0;
END rpt_asa_invoicing_documents;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_INVOICING_EXTRACTION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**
* Description - used for the report ASA_INVOICING_EXTRACTION

* @AUTHOR AWU 20 JUL 2009
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     ASA_INVOICING_JOB_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT per1.per_name, per1.per_key1, per2.per_name per_name_aci,
             cur.currency, pco.pco_descr, mis.asa_mission_id, mis.mis_number,
             itr.asa_intervention_id, itr.itr_number,
             NVL (itr.itr_description2, itr.itr_description1)
                                                             itr_description,
             goo.goo_major_reference, aid.aid_consumed_quantity,
             aid.aid_invoicing_qty,
             gco_functions.getdescription2 (goo.gco_good_id,
                                            vpc_lang_id,
                                            1,
                                            '01'
                                           ) goo_description,
             goo.dic_unit_of_measure_id, aid.aid_unit_price,
             itr.c_asa_itr_status, mit.mit_code
        FROM asa_invoicing_process aip,
             pac_person per1,
             pac_person per2,
             acs_financial_currency acs,
             pcs.pc_curr cur,
             pac_payment_condition pco,
             asa_mission mis,
             asa_intervention itr,
             asa_intervention_detail aid,
             gco_good goo,
             asa_mission_type mit
       WHERE aip.pac_custom_partner_id = per1.pac_person_id(+)
         AND aip.pac_custom_partner_aci_id = per2.pac_person_id(+)
         AND aip.acs_financial_currency_id = acs.acs_financial_currency_id(+)
         AND acs.pc_curr_id = cur.pc_curr_id
         AND aip.pac_payment_condition_id = pco.pac_payment_condition_id(+)
         AND aip.asa_mission_id = mis.asa_mission_id(+)
         AND aip.asa_intervention_id = itr.asa_intervention_id(+)
         AND aip.asa_intervention_detail_id = aid.asa_intervention_detail_id(+)
         AND NVL (aid.gco_service_id, aid.gco_good_id) = goo.gco_good_id(+)
         AND mis.asa_mission_type_id = mit.asa_mission_type_id(+)
         AND aip.doc_position_id IS NULL
         AND aip.aip_selection = 1
         AND aip.asa_invoicing_job_id = parameter_0;
END rpt_asa_invoicing_extraction;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_MISSION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2
)
IS
/*
* Description stored procedure used for the report ASA_MISSION_DET

* @created awu 01 nov 2008
* @lastupdate  15 feb 2010
* @public
* @param PARAMETER_0: ASA_MISSION_ID
* @param PARAMETER_1: ASA_INTERVENTION_ID
* @param PARAMETER_2: Printing all customer 0:no, 1:yes
* @param PARAMETER_3: COM_LIST.LIS_JOB_ID only if parameter_2 is 0
* @param PARAMETER_4: Date from
* @param PARAMETER_5: Date to
* @param PARAMETER_6: Customer option 0:invoiced custom 1:sold to party
* @param PARAMETER_7: status of mission
* @param PARAMETER_8: Detail 0:no 1:yes
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ams.mis_number, ams.c_asa_mis_status          /*Mission_Status*/
             ,amt.mit_code                                    /*Mission_Type*/
             ,ams.mis_accomplished                               /*Completed*/
             ,com_dic_functions.getdicodescr
                  ('DIC_ASA_MIS_DEMAND_KIND',
                   ams.dic_asa_mis_demand_kind_id,
                   vpc_lang_id
                  ) dic_asa_mis_demand_kind_id          /*Severity_Criteria*/
             ,com_dic_functions.getdicodescr
                      ('DIC_ASA_MIS_EMERGENCY',
                       ams.dic_asa_mis_emergency_id,
                       vpc_lang_id
                      ) dic_asa_mis_emergency_id             /*Request_Type*/
             ,rco1.rco_title files                                   /*Files*/
             ,ddm.dmt_number                               /*Linked_Document*/
             ,ams.mis_description                              /*Description*/
             ,ams.mis_comment                                     /*Comments*/
             ,pps.per_name                                        /*Customer*/
             ,rpt_functions.getpacadr (ams.pac_custom_partner_id,
                                      0
                                     ) add_address1
                                                   /*Address*/
             ,rpt_functions.getpacadr (ams.pac_custom_partner_id,
                                      1
                                     ) add_zipcode
                                                  /*ZIPCODE*/
             ,rpt_functions.getpacadr (ams.pac_custom_partner_id, 2) add_city     /*CITY*/
             ,ams.mis_location_comment1                 /*Locality_comments1*/
             ,ams.mis_location_comment2                 /*Locality_comments2*/
             ,pdp.dep_key                                       /*Department*/
             ,rco2.rco_title installation                          /*Install*/
             ,act.ctt_key                                          /*Counter*/
             ,gsp.dic_service_type_id                         /*Service_plan*/
             ,ams.mis_service_marker                         /*Service_maker*/
             ,per1.per_fullname per_fullname_ast               /*Assigned_to*/
             ,usr.use_name                                     /*Assigned_by*/
             ,ams.mis_request_date                            /*Request_date*/
             ,ams.mis_allocation_date                      /*Assignment_date*/
             ,ams.mis_completion_date                      /*Completion_date*/
             ,per2.per_fullname per_fullname_ilt              /*Interlocutor*/
             ,v.asa_intervention_id                        /*INTERVENTION_ID*/
             ,v.goo_major_reference                   /*Services or Products*/
             ,v.short_description                        /*Short description*/
             ,v.service_product               /*Services or Products Boolean*/
             ,v.itr_number                             /*Intervention Number*/
             ,v.dic_asa_itr_kind_id                     /*Service visit type*/
             ,v.itr_expected_date                            /*Expected date*/
             ,v.itr_start_date                                  /*Start date*/
             ,v.itr_end_date                                      /*End date*/
             ,v.itr_accomplished                             /*Completed_ITR*/
             ,v.itr_description1                      /*Internal Description*/
             ,v.itr_description2                      /*External Description*/
             ,v.itr_period                                        /*Duration*/
             ,v.aid_cost_price                                  /*Cost price*/
             ,v.aid_unit_price                                  /*Unit price*/
             ,v.aid_taken_quantity                 /*Standard Qty(Qty taken)*/
             ,v.aid_consumed_quantity             /*Actual Qty(Qty consumed)*/
             ,v.aid_returned_quantity                         /*Returned Qty*/
             ,v.aid_kept_quantity                                 /*Kept Qty*/
             ,v.aid_exchange                                      /*Exchange*/
             ,v.goo_exchange                                 /*Exchange Good*/
             ,v.description_exchange   /*Short description for exchange good*/
             ,v.aid_exch_cost_price               /*Exchange good cost price*/
             ,v.aid_invoicing_qty                            /*Invoicing Qty*/
             ,v.aid_guaranty                                      /*Warranty*/
             ,des.gcdtext1 itr_status                               /*Status*/
             ,v.AID_CHAR1_VALUE
             ,v.AID_CHAR2_VALUE
             ,v.AID_CHAR3_VALUE
             ,v.AID_CHAR4_VALUE
             ,v.AID_CHAR5_VALUE
             ,v.AID_EXCH_CHAR1_VALUE
             ,v.AID_EXCH_CHAR2_VALUE
             ,v.AID_EXCH_CHAR3_VALUE
             ,v.AID_EXCH_CHAR4_VALUE
             ,v.AID_EXCH_CHAR5_VALUE
        FROM asa_mission ams,
             asa_mission_type amt,
             doc_document ddm,
             pac_person pps,
             pac_department pdp,
             asa_counter cou,
             asa_counter_type act,
             gco_service_plan gsp,
             doc_record rco1,
             doc_record rco2,
             hrm_person per1,
             hrm_person per2,
             pcs.pc_user usr,
             (SELECT itr.asa_intervention_id, itr.asa_mission_id,
                     itr.c_asa_itr_status, itr.itr_number,
                     itr.dic_asa_itr_kind_id, itr.itr_expected_date,
                     itr.itr_start_date, itr.itr_end_date,
                     itr.itr_accomplished, itr.itr_description1,
                     itr.itr_description2, itr.itr_period, itr.itr_person_id,
                     aid.aid_cost_price, aid.aid_unit_price,
                     aid.aid_taken_quantity, aid.aid_consumed_quantity,
                     aid.aid_returned_quantity, aid.aid_kept_quantity,
                     aid.aid_exchange, aid.aid_exch_cost_price,
                     aid.aid_invoicing_qty, aid.aid_guaranty, aid.gco_good_id,
                     aid.gco_service_id, aid.gco_good_exch_id,
                     DECODE (aid.gco_good_id,
                             NULL, 'S',
                             'P'
                            ) service_product, goo.goo_major_reference,
                     gco_functions.getdescription2
                                          (goo.gco_good_id,
                                           vpc_lang_id,
                                           1,
                                           '01'
                                          ) short_description,
                     goo_exc.goo_major_reference goo_exchange,
                     gco_functions.getdescription2
                                   (goo_exc.gco_good_id,
                                    vpc_lang_id,
                                    1,
                                    '01'
                                   ) description_exchange,
                     AID.AID_CHAR1_VALUE,
                     AID.AID_CHAR2_VALUE,
                     AID.AID_CHAR3_VALUE,
                     AID.AID_CHAR4_VALUE,
                     AID.AID_CHAR5_VALUE,
                     AID.AID_EXCH_CHAR1_VALUE,
                     AID.AID_EXCH_CHAR2_VALUE,
                     AID.AID_EXCH_CHAR3_VALUE,
                     AID.AID_EXCH_CHAR4_VALUE,
                     AID.AID_EXCH_CHAR5_VALUE
                FROM asa_intervention itr,
                     asa_intervention_detail aid,
                     gco_good goo,
                     gco_good goo_exc
               WHERE itr.asa_intervention_id = aid.asa_intervention_id(+)
                 AND NVL (aid.gco_good_id, aid.gco_service_id) = goo.gco_good_id(+)
                 AND aid.gco_good_exch_id = goo_exc.gco_good_id(+)
                 AND (   itr.asa_intervention_id = TO_NUMBER (parameter_1)
                      OR TO_NUMBER (parameter_1) = 0
                     )) v,
             (SELECT gclcode, gcdtext1
                FROM pcs.v_pc_descodes des
               WHERE gcgname = 'C_ASA_ITR_STATUS' AND pc_lang_id = vpc_lang_id) des
       WHERE ams.asa_mission_type_id = amt.asa_mission_type_id(+)
         AND ams.mis_document_id = ddm.doc_document_id(+)
         AND ams.pac_custom_partner_id = pps.pac_person_id(+)
         AND ams.pac_department_id = pdp.pac_department_id(+)
         AND ams.asa_counter_id = cou.asa_counter_id(+)
         AND cou.asa_counter_type_id = act.asa_counter_type_id(+)
         AND ams.gco_service_plan_id = gsp.gco_service_plan_id(+)
         AND ams.asa_mission_id = v.asa_mission_id(+)
         AND v.c_asa_itr_status = des.gclcode(+)
         AND ams.doc_record_id = rco1.doc_record_id(+)
         AND ams.asa_machine_id = rco2.doc_record_id(+)
         AND ams.mis_responsible_person_id = per1.hrm_person_id(+)
         AND v.itr_person_id = per2.hrm_person_id(+)
         AND ams.mis_pc_user_id = usr.pc_user_id(+)
         AND (ams.asa_mission_id = TO_NUMBER (parameter_0)
              OR parameter_0 = '0'
             )
         AND (   TRUNC (ams.mis_request_date) >=
                                             TO_DATE (parameter_4, 'YYYYMMDD')
              OR parameter_4 IS NULL
             )
         AND (   TRUNC (ams.mis_request_date) <=
                                             TO_DATE (parameter_5, 'YYYYMMDD')
              OR parameter_5 IS NULL
             )
         AND (   DECODE (parameter_6,
                         '0', ams.pac_custom_partner_aci_id,
                         '1', ams.pac_custom_partner_id,
                         ams.pac_custom_partner_id
                        ) IN (
                    SELECT lis.lis_id_1 pac_custom_partner_id
                      FROM com_list lis
                     WHERE lis.lis_job_id = parameter_3
                       AND lis.lis_code = 'PAC_CUSTOM_PARTNER_ID')
              OR parameter_2 = '1'
             )
         AND (   parameter_7 IS NULL
              OR INSTR (',' || parameter_7 || ',',
                        ',' || ams.c_asa_mis_status || ','
                       ) > 0
             );
END rpt_asa_mission;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_MISSION_GOOD" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2
)
IS
/*
* Description stored procedure used for the report ASA_MISSION_GOOD

* @created awu 22 Jun 2008
* @lastupdate
* @public
* @param PARAMETER_0: Printing all products 0:no, 1:yes
* @param PARAMETER_1: COM_LIST_LIS_JOB_ID only if parameter_0 is 0
* @param PARAMETER_2: Printing all customers 0:no, 1:yes
* @param PARAMETER_3: COM_LIST.LIS_JOB_ID only if parameter_1 is 0
* @param PARAMETER_4: Date from
* @param PARAMETER_5: Date to
* @param PARAMETER_6: number of minmum intervention
* @param PARAMETER_7: status of mission
* @param PARAMETER_8: Detail 0:no 1:yes
*/
BEGIN
   OPEN arefcursor FOR
      SELECT rco.rco_machine_good_id, goo.goo_major_reference,
             gco_functions.getdescription
                                    (rco.rco_machine_good_id,
                                     procuser_lanid,
                                     1,
                                     '01'
                                    ) goo_description,
             mis.mis_number, rco.rco_title installation,
             mis.pac_custom_partner_id, per.per_name customer,
             itr.itr_number,
                emp.per_title
             || ' '
             || emp.per_first_name
             || ' '
             || emp.per_last_name interluctor,
             itr.itr_expected_date, itr.asa_intervention_id,
             mis.mis_description, mis.mis_request_date, mis.c_asa_mis_status
        FROM asa_mission mis,
             asa_intervention itr,
             doc_record rco,
             gco_good goo,
             asa_mission_type mit,
             pac_person per,
             hrm_person emp,
             (SELECT   rco1.rco_machine_good_id
                  FROM asa_mission mis1,
                       asa_intervention itr1,
                       doc_record rco1,
                       gco_good goo1,
                       asa_mission_type mit1,
                       pac_person per1,
                       hrm_person emp1
                 WHERE mis1.asa_machine_id = rco1.doc_record_id
                   AND mis1.asa_mission_id = itr1.asa_mission_id
                   AND rco1.rco_machine_good_id = goo1.gco_good_id
                   AND mis1.asa_mission_type_id = mit1.asa_mission_type_id
                   AND mis1.pac_custom_partner_id = per1.pac_person_id(+)
                   AND itr1.itr_person_id = emp1.hrm_person_id(+)
                   AND (   rco1.rco_machine_good_id IN (
                              SELECT glt1.lis_id_1
                                FROM com_list glt1
                               WHERE glt1.lis_job_id = TO_NUMBER (parameter_1)
                                 AND glt1.lis_code = 'GCO_GOOD_ID')
                        OR parameter_0 = '1'
                       )
                   AND (   mis1.pac_custom_partner_id IN (
                              SELECT clt1.lis_id_1
                                FROM com_list clt1
                               WHERE clt1.lis_job_id = TO_NUMBER (parameter_3)
                                 AND clt1.lis_code = 'PAC_CUSTOM_PARTNER_ID')
                        OR parameter_2 = '1'
                       )
                   AND (   parameter_7 IS NULL
                        OR INSTR (',' || parameter_7 || ',',
                                  ',' || mis1.c_asa_mis_status || ','
                                 ) > 0
                       )
                   AND (   mis1.mis_request_date >=
                                             TO_DATE (parameter_4, 'YYYYMMDD')
                        OR parameter_4 IS NULL
                       )
                   AND (   mis1.mis_request_date <=
                                             TO_DATE (parameter_5, 'YYYYMMDD')
                        OR parameter_5 IS NULL
                       )
              GROUP BY rco1.rco_machine_good_id
                HAVING COUNT (itr1.asa_intervention_id) >=
                                              NVL (TO_NUMBER (parameter_6), 0)) gct
       WHERE mis.asa_machine_id = rco.doc_record_id
         AND mis.asa_mission_id = itr.asa_mission_id
         AND rco.rco_machine_good_id = goo.gco_good_id
         AND mis.asa_mission_type_id = mit.asa_mission_type_id
         AND mis.pac_custom_partner_id = per.pac_person_id(+)
         AND itr.itr_person_id = emp.hrm_person_id(+)
         AND rco.rco_machine_good_id = gct.rco_machine_good_id
         AND (   rco.rco_machine_good_id IN (
                    SELECT glt.lis_id_1
                      FROM com_list glt
                     WHERE glt.lis_job_id = TO_NUMBER (parameter_1)
                       AND glt.lis_code = 'GCO_GOOD_ID')
              OR parameter_0 = '1'
             )
         AND (   mis.pac_custom_partner_id IN (
                    SELECT clt.lis_id_1
                      FROM com_list clt
                     WHERE clt.lis_job_id = TO_NUMBER (parameter_3)
                       AND clt.lis_code = 'PAC_CUSTOM_PARTNER_ID')
              OR parameter_2 = '1'
             )
         AND (   parameter_7 IS NULL
              OR INSTR (',' || parameter_7 || ',',
                        ',' || mis.c_asa_mis_status || ','
                       ) > 0
             )
         AND (   mis.mis_request_date >= TO_DATE (parameter_4, 'YYYYMMDD')
              OR parameter_4 IS NULL
             )
         AND (   mis.mis_request_date <= TO_DATE (parameter_5, 'YYYYMMDD')
              OR parameter_5 IS NULL
             );
END rpt_asa_mission_good;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_MISSION_GOOD_DET_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/*
* Description stored procedure used for the report ASA_MISSION_GOOD

* @created awu 23 Jun 2008
* @lastupdate
* @public
* @param PARAMETER_99: ASA_INTERVENTION_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT DECODE (aid.gco_good_id, NULL, 's', 'g') good_service,
             goo.goo_major_reference, aid.aid_taken_quantity,
             aid.aid_consumed_quantity, aid.aid_invoicing_qty,
             aid.aid_unit_price, aid.aid_cost_price
        FROM asa_intervention_detail aid, gco_good goo
       WHERE NVL (aid.gco_good_id, aid.gco_service_id) = goo.gco_good_id
         AND aid.asa_intervention_id = parameter_99;
END rpt_asa_mission_good_det_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_MISSION_OPEN" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2
)
IS
/*
* Description stored procedure used for the report ASA_MISSION_OPEN

* @created awu 25 Jun 2008
* @lastupdate awu 8 Feb 2010
* @public
* @param PARAMETER_0: Printing all Technician 0:No, 1:Yes
* @param PARAMETER_1: COM_LIST.LIS_JOB_ID only if parameter_0 is 0
* @param PARAMETER_2: Printing all Customer 0:No, 1:Yes
* @param PARAMETER_3: COM_LIST.LIS_JOB_ID only if parameter_2 is 0
* @param PARAMETER_4: Date from
* @param PARAMETER_5: Date to
* @param PARAMETER_6: Sort
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
   vpc_no_cust   dico_description.dit_descr%TYPE;
   vpc_no_tech   dico_description.dit_descr%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vpc_no_cust :=
                pcs.pc_functions.translateword2 ('Pas de client', vpc_lang_id);
   vpc_no_tech :=
            pcs.pc_functions.translateword2 ('Pas de technicien', vpc_lang_id);

   OPEN arefcursor FOR
      SELECT mis.asa_mission_id, mis.mis_number, rco.rco_title installation,
             goo.goo_major_reference, mis.pac_custom_partner_id,
             NVL (per.per_name, vpc_no_cust) customer, itr.itr_number,
             itr.itr_person_id,
             NVL (emp.per_fullname, vpc_no_tech) interluctor,
             emp.per_initials, itr.itr_expected_date,
             itr.asa_intervention_id, mis.mis_request_date,
             mis.mis_description,
             (SELECT MAX (dmt.dmt_number)
                FROM asa_invoicing_process aip, doc_document dmt
               WHERE aip.doc_document_id = dmt.doc_document_id
                 AND aip.asa_intervention_id = itr.asa_intervention_id)
                                                                  dmt_number,
             (SELECT MAX (dmt.dmt_date_document)
                FROM asa_invoicing_process aip,
                     doc_document dmt
               WHERE aip.doc_document_id = dmt.doc_document_id
                 AND aip.asa_intervention_id = itr.asa_intervention_id)
                                                           dmt_date_document
        FROM asa_mission mis,
             asa_intervention itr,
             doc_record rco,
             gco_good goo,
             asa_mission_type mit,
             pac_person per,
             hrm_person emp
       WHERE mis.asa_machine_id = rco.doc_record_id
         AND mis.asa_mission_id = itr.asa_mission_id
         AND rco.rco_machine_good_id = goo.gco_good_id
         AND mis.asa_mission_type_id = mit.asa_mission_type_id
         AND mis.pac_custom_partner_id = per.pac_person_id(+)
         AND itr.itr_person_id = emp.hrm_person_id(+)
         AND (   itr.itr_person_id IN (
                    SELECT lis.lis_id_1
                      FROM com_list lis
                     WHERE lis.lis_job_id = TO_NUMBER (parameter_1)
                       AND lis.lis_code = 'HRM_PERSON_ID')
              OR parameter_0 = '1'
             )
         AND (   mis.pac_custom_partner_id IN (
                    SELECT lis.lis_id_1
                      FROM com_list lis
                     WHERE lis.lis_job_id = TO_NUMBER (parameter_3)
                       AND lis.lis_code = 'PAC_CUSTOM_PARTNER_ID')
              OR parameter_2 = '1'
             )
         AND (   TRUNC (mis.mis_request_date) >=
                                             TO_DATE (parameter_4, 'YYYYMMDD')
              OR parameter_4 IS NULL
             )
         AND (   TRUNC (mis.mis_request_date) <=
                                             TO_DATE (parameter_5, 'YYYYMMDD')
              OR parameter_5 IS NULL
             )
         AND mis.mis_accomplished = 0;
END rpt_asa_mission_open;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_MISSION_TECHNICIAN" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2
)
IS
/*
* Description stored procedure used for the report ASA_MISSION_TECHNICIAN

* @created awu 24 Jun 2008
* @lastupdate awu 8 Feb 2010
* @public
* @param PARAMETER_0: Technician list
* @param PARAMETER_1: DATE
* @param PARAMETER_2: DATE
* @param PARAMETER_3: STATUS LIST
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
   vpc_no_cust   dico_description.dit_descr%TYPE;
   vpc_no_tech   dico_description.dit_descr%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vpc_no_cust :=
                pcs.pc_functions.translateword2 ('Pas de client', vpc_lang_id);
   vpc_no_tech :=
            pcs.pc_functions.translateword2 ('Pas de technicien', vpc_lang_id);

   OPEN arefcursor FOR
      SELECT mis.mis_number, rco.rco_title installation,
             NVL (per.per_name, vpc_no_cust) customer, itr.itr_number,
             itr.itr_person_id,
             NVL (emp.per_fullname, vpc_no_tech) interluctor,
             mis.c_asa_mis_status, itr.itr_expected_date,
             itr.asa_intervention_id, mis.mis_request_date,
             mis.mis_description
        FROM asa_mission mis,
             asa_intervention itr,
             doc_record rco,
             asa_mission_type mit,
             pac_person per,
             hrm_person emp
       WHERE mis.asa_machine_id = rco.doc_record_id
         AND mis.asa_mission_id = itr.asa_mission_id
         AND mis.asa_mission_type_id = mit.asa_mission_type_id
         AND mis.pac_custom_partner_id = per.pac_person_id(+)
         AND itr.itr_person_id = emp.hrm_person_id(+)
         AND (   itr.itr_person_id IN (
                    SELECT lis.lis_id_1
                      FROM com_list lis
                     WHERE lis.lis_job_id = TO_NUMBER (parameter_1)
                       AND lis.lis_code = 'HRM_PERSON_ID')
              OR parameter_0 = '1'
             )
         AND (   TRUNC (mis.mis_request_date) >=
                                             TO_DATE (parameter_2, 'YYYYMMDD')
              OR parameter_2 IS NULL
             )
         AND (   TRUNC (mis.mis_request_date) <=
                                             TO_DATE (parameter_3, 'YYYYMMDD')
              OR parameter_3 IS NULL
             )
         AND (   parameter_4 IS NULL
              OR INSTR (',' || parameter_4 || ',',
                        ',' || mis.c_asa_mis_status || ','
                       ) > 0
             );
END rpt_asa_mission_technician;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3" (
   arefcursor      IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0     IN       asa_record.are_number%TYPE,
   company_owner   IN       pcs.pc_comp.com_name%TYPE,
   user_lanid      IN       VARCHAR2
)
IS
/*
* description used for report asa_report_form3

*@created pna 21.08.2007 proconcept china
*@lastupdate mzh 3 Jun. 2010
*@version
*@public
*@param param procparam_0: asa_record.are_number
*/
   vpc_lang_id   NUMBER (12);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ARE.asa_record_id, ARE.asa_record_events_id, ARE.are_number,
             ARE.are_customer_ref, ARE.are_datecre, ARE.are_char1_value,
             goo.goo_major_reference,
                goo.goo_major_reference
             || ' / '
             || ARE.are_char1_value goo_goo_char,
             exc.goo_major_reference exc_major_reference,
                exc.goo_major_reference
             || ' / '
             || ARE.are_new_char1_value exc_goo_char,
             ARE.are_new_char1_value, ARE.gco_asa_exchange_id,
             ARE.are_exch_char1_value, ARE.c_asa_rep_status,
             com_functions.getdescodedescr
                                ('C_ASA_REP_STATUS',
                                 ARE.c_asa_rep_status,
                                 vpc_lang_id
                                ) c_asa_rep_status_descr,
             ARE.are_gco_short_descr_ex, ARE.are_gco_free_descr_ex,
             ARE.are_date_end_rep, ARE.are_date_end_ctrl,
             ARE.are_gco_short_descr, ARE.are_gco_long_descr,
             ARE.are_date_end_sending, ARE.gco_asa_to_repair_id,
             ARE.dic_garanty_code_id,
             com_dic_functions.getdicodescr
                               ('DIC_GARANTY_CODE',
                                ARE.dic_garanty_code_id,
                                vpc_lang_id
                               ) dic_garanty_code_des,
             per.per_name, ARE.are_address1,
             pcs.extractline (ARE.are_address1, 1) are_address1_extract,
             per.per_short_name, ARE.gco_new_good_id, ARE.asa_rep_type_id,
             lan.lanid, ret.c_asa_rep_type_kind,

             --for showing the picture
             rpt_functions.get_asa_img_path (ARE.asa_record_id) asa_picture,
             TO_CHAR (NVL (dlo.offer_datecre, SYSDATE),
                      'YYYYMMDD HH24:MI:SS'
                     ) offer_datecre,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_task ret
                    WHERE ret.asa_record_id = ARE.asa_record_id
                      AND ret.asa_record_events_id = ARE.asa_record_events_id
                      AND ret.ret_optional = 0
                      AND (ret.a_datecre) <=
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) ope_req,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_comp arc
                    WHERE arc.asa_record_id = ARE.asa_record_id
                      AND arc.asa_record_events_id = ARE.asa_record_events_id
                      AND arc.arc_optional = 0
                      AND (arc.a_datecre) <=
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) comp_req,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_task ret
                    WHERE ret.asa_record_id = ARE.asa_record_id
                      AND ret.asa_record_events_id = ARE.asa_record_events_id
                      AND ret.ret_optional = 1
                      AND (ret.a_datecre) <=
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) ope_opt,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_comp arc
                    WHERE arc.asa_record_id = ARE.asa_record_id
                      AND arc.asa_record_events_id = ARE.asa_record_events_id
                      AND arc.arc_optional = 1
                      AND (arc.a_datecre) <=
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) comp_opt,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_task ret
                    WHERE ret.asa_record_id = ARE.asa_record_id
                      AND ret.asa_record_events_id = ARE.asa_record_events_id
                      AND (ret.a_datecre) >
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) ope_add,
             NVL ((SELECT COUNT (*)
                     FROM asa_record_comp arc
                    WHERE arc.asa_record_id = ARE.asa_record_id
                      AND arc.asa_record_events_id = ARE.asa_record_events_id
                      AND (arc.a_datecre) >
                                           (NVL (dlo.offer_datecre, SYSDATE)
                                           )),
                  0
                 ) comp_add
        FROM asa_record ARE,
             gco_good goo,
             gco_good exc,
             pac_person per,
             (SELECT   MAX (rre1.a_datecre) offer_datecre, are1.asa_record_id
                  FROM asa_record are1, asa_record_events rre1
                 WHERE are1.asa_record_id = rre1.asa_record_id
                   AND are1.c_asa_rep_status = '02'
              GROUP BY are1.asa_record_id) dlo,
             pcs.pc_lang lan,
             asa_rep_type ret
       WHERE ARE.pac_custom_partner_id = per.pac_person_id
         AND ARE.gco_asa_to_repair_id = goo.gco_good_id(+)
         AND ARE.gco_asa_exchange_id = exc.gco_good_id(+)
         AND dlo.asa_record_id(+) = ARE.asa_record_id
         AND ARE.pc_asa_cust_lang_id = lan.pc_lang_id(+)
         AND ARE.asa_rep_type_id = ret.asa_rep_type_id(+)
         AND ARE.are_number = parameter_0;
END rpt_asa_record_form3;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_COMP_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2,
   parameter_1   IN       asa_record_comp.asa_record_events_id%TYPE,
   parameter_2   IN       asa_record_comp.arc_optional%TYPE,
   parameter_3   IN       VARCHAR2,
   parameter_4   IN       NUMBER
)
IS
/*
* description used for report asa_report_form3

* @created in proconcept china
* @created pna 3 sep 2007
* @lastupdate VHA 26 JUNE 2013
* @public
* @param parameter_0: asa_record.asa_record_id
* @param parameter_1: asa_record_events.asa_record_events_id
* @param parameter_2: arc_optional
* @param parameter_3: a_datecre of last offer
* @param parameter_4: boolean 0  date is smaller or equal, 1 - date is bigger or equal
*/
   optional   VARCHAR2 (10) := null;
BEGIN
    if (parameter_2 is not null) then
       CASE parameter_2
          WHEN 0
          THEN
             optional := '0';
          WHEN 1
          THEN
             optional := '1';
          WHEN 2
          THEN
             optional := '0,1';
       END CASE;
    end if;

   OPEN arefcursor FOR
      SELECT arc.asa_record_comp_id, arc.asa_record_id, arc.arc_position,
             arc.gco_component_id, arc.arc_sale_price, arc.arc_quantity,
             arc.arc_sale_price * arc.arc_quantity arc_total_price,
             arc.stm_comp_location_id, arc.a_datecre, arc.arc_optional,
             arc.asa_record_events_id, arc.arc_descr, arc.arc_descr2,
             arc.stm_comp_stock_mvt_id, arc.c_asa_accept_option,
             goo.goo_major_reference, goo.dic_good_family_id,
             goo.goo_number_of_decimal, cat.dic_category_free_1_id
        FROM asa_record_comp arc, gco_good goo, gco_good_category cat
       WHERE arc.gco_component_id = goo.gco_good_id
         AND goo.gco_good_category_id = cat.gco_good_category_id(+)
         AND arc.asa_record_id = TO_NUMBER (parameter_0)
         AND arc.asa_record_events_id = parameter_1
         AND INSTR (optional, TO_CHAR (arc.arc_optional)) > 0
         AND (   (    parameter_4 = '0'
                  AND (arc.a_datecre) <=
                               (TO_DATE (parameter_3, 'YYYYMMDD HH24:MI:SS')
                               )
                 )
              OR (    parameter_4 = '1'
                  AND (arc.a_datecre) >
                               (TO_DATE (parameter_3, 'YYYYMMDD HH24:MI:SS')
                               )
                 )
             );
END rpt_asa_record_form3_comp_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_EVE_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/*
* Description used for report asa_report_form3

* @created pna 05.09.2007 proconcept china
* @lastupdate mzhu 19 Feb 2009
* @public
* @param parameter_0: asa_record.are_number
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   rre.rre_seq, rre.rre_date,
               com_functions.getdescodedescr
                                            ('C_ASA_REP_STATUS',
                                             rre.c_asa_rep_status,
                                             vpc_lang_id
                                            ) rep_status,
               dmt.dmt_number
          FROM asa_record_events rre, doc_position pos, doc_document dmt
         WHERE rre.doc_position_id = pos.doc_position_id(+)
           AND pos.doc_document_id = dmt.doc_document_id(+)
           AND rre.asa_record_id = TO_NUMBER(parameter_0)
      ORDER BY rre_seq;
END rpt_asa_record_form3_eve_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_II" (
   AREFCURSOR      IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PARAMETER_0     IN       ASA_RECORD.ARE_NUMBER%TYPE,
   COMPANY_OWNER   IN       PCS.PC_COMP.COM_NAME%TYPE,
   USER_LANID      IN       VARCHAR2
)
IS
/*
* description used for report ASA_RECORD_FORM3_II

*@created VHA 02.09.2011
*@version
*@public
*@param param procparam_0: asa_record.are_number
*/
   VPC_LANG_ID   NUMBER (12);

BEGIN
   PCS.PC_I_LIB_SESSION.SETLANID (USER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

   OPEN AREFCURSOR FOR
      SELECT ARE.ASA_RECORD_ID,
            ARE.ASA_RECORD_EVENTS_ID,
            ARE.ARE_NUMBER,
             ARE.ARE_CUSTOMER_REF,
             ARE.ARE_DATECRE,
             ARE.ARE_CHAR1_VALUE,
             GOO.GOO_MAJOR_REFERENCE,
                GOO.GOO_MAJOR_REFERENCE || ' / ' || ARE.ARE_CHAR1_VALUE GOO_GOO_CHAR,
             EXC.GOO_MAJOR_REFERENCE EXC_MAJOR_REFERENCE,
                EXC.GOO_MAJOR_REFERENCE || ' / ' || ARE.ARE_NEW_CHAR1_VALUE EXC_GOO_CHAR,
             ARE.ARE_NEW_CHAR1_VALUE,
             ARE.GCO_ASA_EXCHANGE_ID,
             ARE.ARE_EXCH_CHAR1_VALUE,
             ARE.C_ASA_REP_STATUS,
             COM_FUNCTIONS.GETDESCODEDESCR('C_ASA_REP_STATUS', ARE.C_ASA_REP_STATUS, VPC_LANG_ID) C_ASA_REP_STATUS_DESCR,
             ARE.ARE_GCO_SHORT_DESCR_EX,
             ARE.ARE_GCO_FREE_DESCR_EX,
             ARE.ARE_DATE_END_REP,
             ARE.ARE_DATE_END_CTRL,
             ARE.ARE_GCO_SHORT_DESCR,
             ARE.ARE_GCO_LONG_DESCR,
             ARE.ARE_DATE_END_SENDING,
             ARE.GCO_ASA_TO_REPAIR_ID,
             ARE.DIC_GARANTY_CODE_ID,
             COM_DIC_FUNCTIONS.GETDICODESCR('DIC_GARANTY_CODE', ARE.DIC_GARANTY_CODE_ID, VPC_LANG_ID) DIC_GARANTY_CODE_DES,
             PER.PER_NAME, ARE.ARE_ADDRESS1,
             PCS.EXTRACTLINE (ARE.ARE_ADDRESS1, 1) ARE_ADDRESS1_EXTRACT,
             PER.PER_SHORT_NAME, ARE.GCO_NEW_GOOD_ID, ARE.ASA_REP_TYPE_ID,
             LAN.LANID, RET.C_ASA_REP_TYPE_KIND,
             --for showing the picture
             RPT_FUNCTIONS.GET_ASA_IMG_PATH (ARE.ASA_RECORD_ID) ASA_PICTURE,
             TO_CHAR (NVL (DLO.OFFER_DATECRE, SYSDATE), 'YYYYMMDD HH24:MI:SS') OFFER_DATECRE,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_TASK RET
                    WHERE RET.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND RET.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND RET.RET_OPTIONAL = 0
                      AND (RET.A_DATECRE) <=(NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) OPE_REQ,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_COMP ARC
                    WHERE ARC.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND ARC.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND ARC.ARC_OPTIONAL = 0
                      AND (ARC.A_DATECRE) <= (NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) COMP_REQ,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_TASK RET
                    WHERE RET.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND RET.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND RET.RET_OPTIONAL = 1
                      AND (RET.A_DATECRE) <= (NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) OPE_OPT,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_COMP ARC
                    WHERE ARC.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND ARC.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND ARC.ARC_OPTIONAL = 1
                      AND (ARC.A_DATECRE) <= (NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) COMP_OPT,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_TASK RET
                    WHERE RET.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND RET.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND (RET.A_DATECRE) > (NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) OPE_ADD,
             NVL ((SELECT COUNT (*)
                     FROM ASA_RECORD_COMP ARC
                    WHERE ARC.ASA_RECORD_ID = ARE.ASA_RECORD_ID
                      AND ARC.ASA_RECORD_EVENTS_ID = ARE.ASA_RECORD_EVENTS_ID
                      AND (ARC.A_DATECRE) > (NVL (DLO.OFFER_DATECRE, SYSDATE))), 0
                 ) COMP_ADD,
             COM_DIC_FUNCTIONS.GETDICODESCR('DIC_RECEPTION_MODE', ARE.DIC_RECEPTION_MODE_ID, VPC_LANG_ID) DIC_RECEPTION_MODE_DESC,
             ARE.ARE_INTERNAL_REMARK,
             ARE.ARE_CUSTOMER_REMARK,
             ARE.ARE_REQ_DATE_TEXT,
             COM_FUNCTIONS.GETDESCODEDESCR('C_PRIORITY', ARE.C_PRIORITY, VPC_LANG_ID) C_PRIORITY_DESC,
             ARE.ARE_ADDITIONAL_ITEMS,
             ARE.ARE_CUSTOMS_VALUE,
             ARE.ACS_CUSTOM_FIN_CURR_ID,
             ARE.ARE_CONTACT_COMMENT
        FROM ASA_RECORD ARE,
             GCO_GOOD GOO,
             GCO_GOOD EXC,
             PAC_PERSON PER,
             (SELECT   MAX (RRE1.A_DATECRE) OFFER_DATECRE, ARE1.ASA_RECORD_ID
                  FROM ASA_RECORD ARE1, ASA_RECORD_EVENTS RRE1
                 WHERE ARE1.ASA_RECORD_ID = RRE1.ASA_RECORD_ID
                   AND ARE1.C_ASA_REP_STATUS = '02'
              GROUP BY ARE1.ASA_RECORD_ID) DLO,
             PCS.PC_LANG LAN,
             ASA_REP_TYPE RET
       WHERE ARE.PAC_CUSTOM_PARTNER_ID = PER.PAC_PERSON_ID
         AND ARE.GCO_ASA_TO_REPAIR_ID = GOO.GCO_GOOD_ID(+)
         AND ARE.GCO_ASA_EXCHANGE_ID = EXC.GCO_GOOD_ID(+)
         AND DLO.ASA_RECORD_ID(+) = ARE.ASA_RECORD_ID
         AND ARE.PC_ASA_CUST_LANG_ID = LAN.PC_LANG_ID(+)
         AND ARE.ASA_REP_TYPE_ID = RET.ASA_REP_TYPE_ID(+)
         AND ARE.ARE_NUMBER = PARAMETER_0;
END RPT_ASA_RECORD_FORM3_II;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_II_COMP" (
   AREFCURSOR    IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PARAMETER_0   IN       VARCHAR2,
   PARAMETER_1   IN       ASA_RECORD_COMP.ASA_RECORD_EVENTS_ID%TYPE,
   PARAMETER_2   IN       ASA_RECORD_COMP.ARC_OPTIONAL%TYPE,
   PARAMETER_3   IN       VARCHAR2,
   PARAMETER_4   IN       NUMBER
)
IS
/*
* description used for report ASA_RECORD_FORM3_II

* @created VHA 05.09.2011
* @public
* @param parameter_0: asa_record.asa_record_id
* @param parameter_1: asa_record_events.asa_record_events_id
* @param parameter_2: arc_optional
* @param parameter_3: a_datecre of last offer
* @param parameter_4: boolean 0  date is smaller or equal, 1 - date is bigger or equal
*/

   OPTIONAL   VARCHAR2 (10);

BEGIN
   CASE PARAMETER_2
      WHEN '0'
      THEN
         OPTIONAL := '0';
      WHEN '1'
      THEN
         OPTIONAL := '1';
      WHEN '2'
      THEN
         OPTIONAL := '0,1';
      ELSE NULL;
   END CASE;

   OPEN AREFCURSOR FOR
      SELECT ARC.ASA_RECORD_COMP_ID,
             ARC.ASA_RECORD_ID,
             ARC.ARC_POSITION,
             ARC.GCO_COMPONENT_ID,
             ARC.ARC_SALE_PRICE,
             ARC.ARC_QUANTITY,
             ARC.ARC_SALE_PRICE * ARC.ARC_QUANTITY ARC_TOTAL_PRICE,
             ARC.STM_COMP_LOCATION_ID,
             ARC.A_DATECRE,
             ARC.ARC_OPTIONAL,
             ARC.ASA_RECORD_EVENTS_ID,
             ARC.ARC_DESCR, ARC.ARC_DESCR2,
             ARC.STM_COMP_STOCK_MVT_ID,
             ARC.C_ASA_ACCEPT_OPTION,
             ARC.DIC_ASA_OPTION_ID,
             GOO.GOO_MAJOR_REFERENCE,
             GOO.DIC_GOOD_FAMILY_ID,
             GOO.GOO_NUMBER_OF_DECIMAL,
             CAT.DIC_CATEGORY_FREE_1_ID
      FROM   ASA_RECORD_COMP ARC,
             GCO_GOOD GOO,
             GCO_GOOD_CATEGORY CAT
      WHERE  ARC.GCO_COMPONENT_ID = GOO.GCO_GOOD_ID
        AND  GOO.GCO_GOOD_CATEGORY_ID = CAT.GCO_GOOD_CATEGORY_ID(+)
        AND  ARC.ASA_RECORD_ID = TO_NUMBER (PARAMETER_0)
        AND  ARC.ASA_RECORD_EVENTS_ID = PARAMETER_1
        AND  INSTR (OPTIONAL, TO_CHAR (ARC.ARC_OPTIONAL)) > 0
        AND  ((PARAMETER_4 = '0'
              AND (ARC.A_DATECRE) <=(TO_DATE (PARAMETER_3, 'YYYYMMDD HH24:MI:SS')))
              OR ( PARAMETER_4 = '1'
                  AND (ARC.A_DATECRE) > (TO_DATE (PARAMETER_3, 'YYYYMMDD HH24:MI:SS'))
                 )
             );
END RPT_ASA_RECORD_FORM3_II_COMP;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_II_DIAG" (
   AREFCURSOR      IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PARAMETER_0     IN       VARCHAR2,
   COMPANY_OWNER   IN       PCS.PC_COMP.COM_NAME%TYPE,
   PROCUSER_LANID   IN       PCS.PC_LANG.LANID%TYPE
)
IS
/*
* description used for report ASA_RECORD_FORM3_II

*@created VHA 06.09.2011
*@version
*@public
*@param PARAMETER_0: ASA_RECORD.ASA_RECORD_ID
*/
   VPC_LANG_ID   PCS.PC_LANG.PC_LANG_ID%TYPE;

BEGIN
   PCS.PC_I_LIB_SESSION.SETLANID (PROCUSER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

   OPEN AREFCURSOR FOR
      SELECT DIA.ASA_DIAGNOSTICS_ID,
                  DIA.ASA_RECORD_ID,
                  DIA.C_ASA_CONTEXT,
                  COM_FUNCTIONS.GETDESCODEDESCR('C_ASA_CONTEXT', DIA.C_ASA_CONTEXT, VPC_LANG_ID) DIA_CONTEXT_DESCR,
                  DIA.DIC_DIAGNOSTICS_TYPE_ID,
                  COM_DIC_FUNCTIONS.GETDICODESCR('DIC_DIAGNOSTICS_TYPE', DIA.DIC_DIAGNOSTICS_TYPE_ID, VPC_LANG_ID) DIA_TYPE_DESCR,
                  DIA.DIC_OPERATOR_ID,
                  COM_DIC_FUNCTIONS.GETDICODESCR('DIC_OPERATOR_ID', DIA.DIC_OPERATOR_ID, VPC_LANG_ID) DIA_OPERATOR_DESCR,
                  DIA.DIA_SEQUENCE,
                  DIA.DIA_DIAGNOSTICS_TEXT,
                  DIA.A_DATECRE,
                  DIA.A_DATEMOD,
                  DIA.A_IDCRE,
                  DIA.A_IDMOD,
                  DIA.A_RECLEVEL,
                  DIA.A_RECSTATUS,
                  DIA.A_CONFIRM
      FROM ASA_DIAGNOSTICS DIA
      WHERE DIA.ASA_RECORD_ID = TO_NUMBER(PARAMETER_0);


END RPT_ASA_RECORD_FORM3_II_DIAG;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_II_TAS" (
   AREFCURSOR    IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PARAMETER_0   IN       VARCHAR2,
   PARAMETER_1   IN       ASA_RECORD_EVENTS.ASA_RECORD_EVENTS_ID%TYPE,
   PARAMETER_2   IN       ASA_RECORD_TASK.RET_OPTIONAL%TYPE,
   PARAMETER_3   IN       VARCHAR2,
   PARAMETER_4   IN       NUMBER
)
IS
/*
* description used for report ASA_RECORD_FORM3_II

* @created VHA 05.09.2011
* @public
* @public
* @param parameter_0: asa_record.asa_record_id
* @param parameter_1: asa_record_events.asa_record_events_id
* @param parameter_2: ret_optional
* @param parameter_3: a_datecre of last offer
* @param parameter_4: boolean 0  date is smaller or equal, 1 - date is bigger or equal
*/
   OPTIONAL   VARCHAR2 (10);
BEGIN
   CASE PARAMETER_2
      WHEN 0
      THEN
         OPTIONAL := '0';
      WHEN 1
      THEN
         OPTIONAL := '1';
      WHEN 2
      THEN
         OPTIONAL := '0,1';
      ELSE NULL;
   END CASE;

   OPEN AREFCURSOR FOR
      SELECT RET.ASA_RECORD_TASK_ID,
             RET.ASA_RECORD_ID, RET.GCO_BILL_GOOD_ID,
             RET.RET_POSITION,
             RET.RET_OPTIONAL,
             RET.RET_FINISHED,
             RET.RET_TIME,
             RET.RET_DESCR,
             RET.RET_SALE_AMOUNT,
             RET.RET_SALE_AMOUNT * RET.RET_TIME RET_TOTAL_AMOUNT,
             RET.RET_DESCR2,
             RET.A_DATECRE,
             RET.C_ASA_ACCEPT_OPTION,
             RET.DIC_ASA_OPTION_ID,
             GOO.GOO_MAJOR_REFERENCE
        FROM ASA_RECORD_TASK RET,
             GCO_GOOD GOO
       WHERE RET.GCO_BILL_GOOD_ID = GOO.GCO_GOOD_ID(+)
         AND RET.ASA_RECORD_ID = TO_NUMBER (PARAMETER_0)
         AND RET.ASA_RECORD_EVENTS_ID = PARAMETER_1
         AND INSTR (OPTIONAL, TO_CHAR (RET.RET_OPTIONAL)) > 0
         AND ((PARAMETER_4 = '0'
                  AND (RET.A_DATECRE) <=(TO_DATE (PARAMETER_3, 'YYYYMMDD  HH24:MI:SS'))
              )
              OR (PARAMETER_4 = '1'
                  AND (RET.A_DATECRE) >(TO_DATE (PARAMETER_3, 'YYYYMMDD  HH24:MI:SS'))
                 )
             );
END RPT_ASA_RECORD_FORM3_II_TAS;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_JOBS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2,
   parameter_1   IN       asa_record_events.c_asa_rep_status%TYPE,
   parameter_2   IN       asa_record_task.c_asa_accept_option%TYPE
)
IS
/*
* description used for report asa_report_form3

* @created pna 09.05.2007 proconcept china
* @lastupdate mzhu 19 feb 2009
* @public
* @param parameter_0: asa_record.asa_record_id
* @param parameter_1: repair file status
* @param parameter_2: c_asa_accept_option
*/
BEGIN
   OPEN arefcursor FOR
      SELECT ret.asa_record_task_id, ret.asa_record_id, rre.c_asa_rep_status,
             ret.c_asa_accept_option, ret.gco_bill_good_id, ret.ret_position,
             ret.ret_optional, ret.ret_finished, ret.ret_time,
             ret.ret_time_used, ret.ret_descr, ret.ret_sale_amount,
             ret.ret_sale_amount * ret.ret_time ret_total_amount,
             ret.ret_descr2, ret.a_datecre, goo.goo_major_reference
        FROM asa_record_task ret, asa_record_events rre, gco_good goo
       WHERE ret.asa_record_events_id = rre.asa_record_events_id
         AND ret.gco_bill_good_id = goo.gco_good_id(+)
         AND rre.asa_record_id = TO_NUMBER(parameter_0)
         AND rre.c_asa_rep_status = parameter_1
         AND ret.c_asa_accept_option <> parameter_2;
END rpt_asa_record_form3_jobs_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_RECORD_FORM3_TAS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2,
   parameter_1   IN       asa_record_events.asa_record_events_id%TYPE,
   parameter_2   IN       asa_record_task.ret_optional%TYPE,
   parameter_3   IN       VARCHAR2,
   parameter_4   IN       NUMBER
)
IS
/*
* description used for report asa_report_form3

* @created pna 03.09.2007 proconcept china
* @lastupdate VHA 26 JUNE 2013
* @public
* @param parameter_0: asa_record.asa_record_id
* @param parameter_1: asa_record_events.asa_record_events_id
* @param parameter_2: ret_optional
* @param parameter_3: a_datecre of last offer
* @param parameter_4: boolean 0  date is smaller or equal, 1 - date is bigger or equal
*/
   optional   VARCHAR2 (10) := null;
BEGIN
    if (parameter_2 is not null) then
       CASE parameter_2
          WHEN 0
          THEN
             optional := '0';
          WHEN 1
          THEN
             optional := '1';
          WHEN 2
          THEN
             optional := '0,1';
       END CASE;
    end if;

   OPEN arefcursor FOR
      SELECT ret.asa_record_task_id, ret.asa_record_id, ret.gco_bill_good_id,
             ret.ret_position, ret.ret_optional, ret.ret_finished,
             ret.ret_time, ret.ret_descr, ret.ret_sale_amount,
             ret.ret_sale_amount * ret.ret_time ret_total_amount,
             ret.ret_descr2, ret.a_datecre, ret.c_asa_accept_option,
             goo.goo_major_reference
        FROM asa_record_task ret, gco_good goo
       WHERE ret.gco_bill_good_id = goo.gco_good_id(+)
         AND ret.asa_record_id = TO_NUMBER (parameter_0)
         AND ret.asa_record_events_id = parameter_1
         AND INSTR (optional, TO_CHAR (ret.ret_optional)) > 0
         AND (   (    parameter_4 = '0'
                  AND (ret.a_datecre) <=
                              (TO_DATE (parameter_3, 'YYYYMMDD  HH24:MI:SS')
                              )
                 )
              OR (    parameter_4 = '1'
                  AND (ret.a_datecre) >
                              (TO_DATE (parameter_3, 'YYYYMMDD  HH24:MI:SS')
                              )
                 )
             );
END rpt_asa_record_form3_tas_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_ASA_WARRANTY_CARD" (
   AREFCURSOR       IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCPARAM_0      IN       varchar2
)
IS
/**
 Description - used for the report RPT_ASA_WARRANTY_CARD


 @param PROCPARAM_0: AGC_NUMBER

 @author VHA 22.08.2011
 @public
*/

BEGIN

   OPEN AREFCURSOR FOR

      SELECT
        AGC.ASA_GUARANTY_CARDS_ID,
        AGC.AGC_NUMBER,
        GCO.GOO_MAJOR_REFERENCE,
        (SELECT GCO_DESC.DES_SHORT_DESCRIPTION
          FROM GCO_DESCRIPTION GCO_DESC
          WHERE GCO_DESC.GCO_GOOD_ID = GCO.GCO_GOOD_ID AND
                GCO_DESC.PC_LANG_ID = COALESCE (AGC.PC_ASA_FIN_CUST_LANG_ID,PC_ASA_DISTRIB_LANG_ID,PC_ASA_AGENT_LANG_ID) AND
                GCO_DESC.C_DESCRIPTION_TYPE = '01' ) GOO_SECONDARY_REFERENCE,
        COALESCE ((SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR1_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR2_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR3_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR4_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR5_ID)) CHAR_DESC_1,
        COALESCE ((SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR2_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR3_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR4_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR5_ID)) CHAR_DESC_2,
        COALESCE ((SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                   WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR3_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR4_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR5_ID)) CHAR_DESC_3,
        COALESCE ((SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR4_ID),
                  (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
                    FROM GCO_CHARACTERIZATION CHA
                    WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR5_ID)) CHAR_DESC_4,
        (SELECT CHA.CHA_CHARACTERIZATION_DESIGN
          FROM GCO_CHARACTERIZATION CHA
          WHERE CHA.GCO_CHARACTERIZATION_ID = AGC.GCO_CHAR5_ID) CHAR_DESC_5,
        COALESCE (AGC.AGC_CHAR1_VALUE,AGC.AGC_CHAR2_VALUE,AGC.AGC_CHAR3_VALUE,AGC.AGC_CHAR4_VALUE,AGC.AGC_CHAR5_VALUE) CHAR_VALUE_1,
        COALESCE (AGC.AGC_CHAR2_VALUE,AGC.AGC_CHAR3_VALUE,AGC.AGC_CHAR4_VALUE,AGC.AGC_CHAR5_VALUE) CHAR_VALUE_2,
        COALESCE (AGC.AGC_CHAR3_VALUE,AGC.AGC_CHAR4_VALUE,AGC.AGC_CHAR5_VALUE) CHAR_VALUE_3,
        COALESCE (AGC.AGC_CHAR4_VALUE,AGC.AGC_CHAR5_VALUE) CHAR_VALUE_4,
        AGC.AGC_CHAR5_VALUE CHAR_VALUE_5,
        AGC.AGC_BEGIN,
        AGC.AGC_DAYS,
        AGC.AGC_END,
        (SELECT DCOD.GCDTEXT1
          FROM PCS.PC_GCODES DCOD
          WHERE DCOD.GCGNAME = 'C_ASA_GUARANTY_UNIT'
          AND DCOD.GCLCODE = AGC.C_ASA_GUARANTY_UNIT
          AND DCOD.PC_LANG_ID = COALESCE (AGC.PC_ASA_FIN_CUST_LANG_ID,PC_ASA_DISTRIB_LANG_ID,PC_ASA_AGENT_LANG_ID)) C_ASA_GUARANTY_UNIT_DESCR,
        AGC.AGC_SER_PERIODICITY,
        (SELECT DCOD.GCDTEXT1
          FROM PCS.PC_GCODES DCOD
          WHERE DCOD.GCGNAME = 'C_ASA_SERVICE_UNIT'
          AND DCOD.GCLCODE = AGC.C_ASA_SERVICE_UNIT
          AND DCOD.PC_LANG_ID = COALESCE (AGC.PC_ASA_FIN_CUST_LANG_ID,PC_ASA_DISTRIB_LANG_ID,PC_ASA_AGENT_LANG_ID)) C_ASA_SERVICE_UNIT_DESCR,
        AGC.AGC_LAST_SERVICE_DATE,
        AGC.AGC_NEXT_SERVICE_DATE,
        AGC.AGC_MEMO,
        COALESCE (AGC.AGC_SALEDATE,AGC.AGC_SALEDATE_DET,AGC.AGC_SALEDATE_AGENT) SALEDATE,
        COALESCE (AGC.PAC_ASA_FIN_CUST_ID,AGC.PAC_ASA_DISTRIB_ID,AGC.PAC_ASA_AGENT_ID) CUST_ID,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                (SELECT PAC.PER_NAME
                  FROM PAC_PERSON PAC
                  WHERE AGC.PAC_ASA_AGENT_ID = PAC.PAC_PERSON_ID)
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                (SELECT PAC.PER_NAME
                  FROM PAC_PERSON PAC
                  WHERE AGC.PAC_ASA_DISTRIB_ID = PAC.PAC_PERSON_ID)
            ELSE
              (SELECT PAC.PER_NAME
                FROM PAC_PERSON PAC
                WHERE AGC.PAC_ASA_FIN_CUST_ID =  PAC.PAC_PERSON_ID)
        END CUST_NAME,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                (SELECT LAN.LANID
                  FROM PCS.PC_LANG LAN
                  WHERE AGC.PC_ASA_AGENT_LANG_ID = LAN.PC_LANG_ID)
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                (SELECT LAN.LANID
                  FROM PCS.PC_LANG LAN
                  WHERE AGC.PC_ASA_DISTRIB_LANG_ID = LAN.PC_LANG_ID)
             ELSE
              (SELECT LAN.LANID
                  FROM PCS.PC_LANG LAN
                  WHERE AGC.PC_ASA_FIN_CUST_LANG_ID = LAN.PC_LANG_ID)
        END CUST_LANID,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_CARE_OF_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_CARE_OF_DET
             ELSE
                AGC.AGC_CARE_OF_CUST
        END CUST_CARE_OF,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_ADDRESS_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_ADDRESS_DISTRIB
             ELSE
                AGC.AGC_ADDRESS_FIN_CUST
        END CUST_ADDRESS,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_PO_BOX_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_PO_BOX_DET
             ELSE
                AGC.AGC_PO_BOX_CUST
        END CUST_PO_BOX,
         CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_PO_BOX_NBR_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_PO_BOX_NBR_DET
             ELSE
                AGC.AGC_PO_BOX_NBR_CUST
        END CUST_PO_BOX_NBR,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_POSTCODE_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_POSTCODE_DISTRIB
             ELSE
                AGC.AGC_POSTCODE_FIN_CUST
        END CUST_POSTCODE,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_TOWN_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_TOWN_DISTRIB
             ELSE
                AGC.AGC_TOWN_FIN_CUST
        END CUST_TOWN,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_FORMAT_CITY_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_FORMAT_CITY_DISTRIB
             ELSE
                AGC.AGC_FORMAT_CITY_FIN_CUST
        END CUST_FORMAT_CITY,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                AGC.AGC_STATE_AGENT
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                AGC.AGC_STATE_DISTRIB
             ELSE
                AGC.AGC_STATE_FIN_CUST
        END CUST_STATE,
        CASE WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NULL) THEN
                (SELECT CNTNAME
                  FROM PCS.PC_CNTRY CNT
                  WHERE AGC.PC_ASA_AGENT_CNTRY_ID = CNT.PC_CNTRY_ID)
             WHEN (AGC.PAC_ASA_FIN_CUST_ADDR_ID IS NULL) AND (AGC.PAC_ASA_DISTRIB_ADDR_ID IS NOT NULL) THEN
                (SELECT CNTNAME
                  FROM PCS.PC_CNTRY CNT
                  WHERE AGC.PC_ASA_DISTRIB_CNTRY_ID = CNT.PC_CNTRY_ID)
             ELSE
                (SELECT CNTNAME
                  FROM PCS.PC_CNTRY CNT
                  WHERE AGC.PC_ASA_FIN_CUST_CNTRY_ID = CNT.PC_CNTRY_ID)
        END CUST_COUNTRY
      FROM
        ASA_GUARANTY_CARDS AGC,
        GCO_GOOD GCO
      WHERE
        GCO.GCO_GOOD_ID =  AGC.GCO_GOOD_ID AND
        AGC.AGC_NUMBER = PROCPARAM_0;

END RPT_ASA_WARRANTY_CARD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_CTRL_LIST" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2,
   parameter_1   IN       VARCHAR2,
   parameter_2   IN       VARCHAR2,
   parameter_3   IN       VARCHAR2,
   parameter_4   IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
* Description - used for the report CML_CTRL_LIST

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 27 MAY 2009
* @LAST UPDATE 28 jan 2010
* @PUBLIC

* @PARAM PARAMETER_0    Customers (1 All)
* @PARAM PARAMETER_1    Com_list des id des Customers (si PARAMETER_0 = 0 )
* @PARAM PARAMETER_2    Contracts (1 All)
* @PARAM PARAMETER_3    Com_list des id des Contrats (si PARAMETER_2 = 0 )
* @PARAM PARAMETER_4    Status of the position of contract
*/


  vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

IF PARAMETER_2 = 0 --selection de contrats
THEN
   OPEN arefcursor FOR
        SELECT
        DMT.CCO_NUMBER,
        DMT.C_CML_CONTRACT_STATUS,
        DMT.PC_LANG_ID,
        POS.CPO_SEQUENCE,
        POS.C_CML_POS_STATUS,
        POS.C_CML_POS_TYPE,
        POS.C_CML_RENT_TYPE,
        POS.C_CML_MAINT_TYPE,
        POS.CPO_RENT_PRICE,
        POS.CPO_MAINT_PRICE,
        POS.CPO_RENT_AMOUNT,
        POS.CPO_MAINT_AMOUNT,
        POS.CPO_RENT_LOSS,
        POS.CPO_MAINT_LOSS,
        POS.CPO_RENT_ADDED_AMOUNT,
        POS.CPO_MAIN_ADDED_AMOUNT,
        POS.CPO_BEGIN_CONTRACT_DATE,
        POS.CPO_END_CONTRACT_DATE,
        POS.CPO_END_EXTENDED_DATE,
        POS.CPO_RESILIATION_DATE,
        POS.CPO_DEPOT_AMOUNT,
        POS.CPO_DEPOT_BILL_DATE,
        POS.CPO_PENALITY_AMOUNT,
        POS.CPO_PENALITY_BILL_DATE,
        POS.CPO_BILL_TEXT,
        POS.CPO_FREE_TEXT_1,
        POS.CPO_FREE_TEXT_2,
        POS.CPO_FREE_TEXT_3,
        POS.CPO_FREE_TEXT_4,
        POS.CPO_FREE_TEXT_5,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01') DES_SHORT_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01') DES_LONG_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01') DES_FREE_DESCRIPTION,
        GOO.GOO_MAJOR_REFERENCE,
        ADR.ADD_ADDRESS1,
        ADR.ADD_FORMAT,
        PER.PER_NAME,
        PER.PER_FORENAME,
        PER.PER_ACTIVITY,
        CUR.CURRENCY,
        vpc_lang_id LANID
        FROM
        ACS_FINANCIAL_CURRENCY FUR,
        ( SELECT CML_DOCUMENT_ID,
                 PAC_CUSTOM_PARTNER_ID,
                 PAC_REPRESENTATIVE_ID,
                 PAC_PAYMENT_CONDITION_ID,
                 PC_LANG_ID,
                 C_CML_CONTRACT_STATUS,
                 CCO_NUMBER
          FROM CML_DOCUMENT DOC, COM_LIST COM
          WHERE CML_DOCUMENT_ID = COM.LIS_ID_1
                AND COM.LIS_JOB_ID = PARAMETER_3
                AND COM.LIS_CODE = 'CML_DOCUMENT_ID'
        ) DMT,
        CML_FREE_DATA DAT,
        CML_POSITION POS,
        GCO_GOOD GOO,
        PAC_ADDRESS ADR,
        PAC_CUSTOM_PARTNER CUS,
        PAC_PAYMENT_CONDITION PON,
        PAC_PERSON PER,
        PAC_REPRESENTATIVE REP,
        PAC_THIRD THI,
        PCS.PC_CURR CUR
        WHERE
        DMT.CML_DOCUMENT_ID = DAT.CML_DOCUMENT_ID(+)
        AND DMT.CML_DOCUMENT_ID = POS.CML_DOCUMENT_ID
        AND POS.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
        AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
        AND POS.CPO_POS_GOOD_ID = GOO.GCO_GOOD_ID
        AND DMT.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
        AND CUS.PAC_CUSTOM_PARTNER_ID = THI.PAC_THIRD_ID
        AND THI.PAC_THIRD_ID = PER.PAC_PERSON_ID
        AND PER.PAC_PERSON_ID = ADR.PAC_PERSON_ID
        AND DMT.PAC_REPRESENTATIVE_ID = REP.PAC_REPRESENTATIVE_ID(+)
        AND DMT.PAC_PAYMENT_CONDITION_ID = PON.PAC_PAYMENT_CONDITION_ID(+)
        AND ADR.ADD_PRINCIPAL = 1
        AND (PARAMETER_4 = '#' OR INSTR(',' || PARAMETER_4 || ',', ',' || POS.C_CML_POS_STATUS ||',') > 0 );

ELSE
IF PARAMETER_0 = 0 --selection de CLIENTS
THEN
  OPEN arefcursor FOR
        SELECT
        DMT.CCO_NUMBER,
        DMT.C_CML_CONTRACT_STATUS,
        DMT.PC_LANG_ID,
        DMT.CPO_SEQUENCE,
        DMT.C_CML_POS_STATUS,
        DMT.C_CML_POS_TYPE,
        DMT.C_CML_RENT_TYPE,
        DMT.C_CML_MAINT_TYPE,
        DMT.CPO_RENT_PRICE,
        DMT.CPO_MAINT_PRICE,
        DMT.CPO_RENT_AMOUNT,
        DMT.CPO_MAINT_AMOUNT,
        DMT.CPO_RENT_LOSS,
        DMT.CPO_MAINT_LOSS,
        DMT.CPO_RENT_ADDED_AMOUNT,
        DMT.CPO_MAIN_ADDED_AMOUNT,
        DMT.CPO_BEGIN_CONTRACT_DATE,
        DMT.CPO_END_CONTRACT_DATE,
        DMT.CPO_END_EXTENDED_DATE,
        DMT.CPO_RESILIATION_DATE,
        DMT.CPO_DEPOT_AMOUNT,
        DMT.CPO_DEPOT_BILL_DATE,
        DMT.CPO_PENALITY_AMOUNT,
        DMT.CPO_PENALITY_BILL_DATE,
        DMT.CPO_BILL_TEXT,
        DMT.CPO_FREE_TEXT_1,
        DMT.CPO_FREE_TEXT_2,
        DMT.CPO_FREE_TEXT_3,
        DMT.CPO_FREE_TEXT_4,
        DMT.CPO_FREE_TEXT_5,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01') DES_SHORT_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01') DES_LONG_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01') DES_FREE_DESCRIPTION,
        GOO.GOO_MAJOR_REFERENCE,
        ADR.ADD_ADDRESS1,
        ADR.ADD_FORMAT,
        PER.PER_NAME,
        PER.PER_FORENAME,
        PER.PER_ACTIVITY,
        CUR.CURRENCY,
        vpc_lang_id LANID
        FROM
        ACS_FINANCIAL_CURRENCY FUR,
        ( SELECT DOC.CML_DOCUMENT_ID,
                 DOC.PAC_REPRESENTATIVE_ID,
                 DOC.PAC_PAYMENT_CONDITION_ID,
                 PC_LANG_ID,
                 C_CML_CONTRACT_STATUS,
                 CCO_NUMBER,
                 CUS.PAC_CUSTOM_PARTNER_ID,
                 POS.ACS_FINANCIAL_CURRENCY_ID,
                 POS.CPO_POS_GOOD_ID,POS.CPO_SEQUENCE,
                 POS.C_CML_POS_STATUS,
                 POS.C_CML_POS_TYPE,
                 POS.C_CML_RENT_TYPE,
                 POS.C_CML_MAINT_TYPE,
                 POS.CPO_RENT_PRICE,
                 POS.CPO_MAINT_PRICE,
                 POS.CPO_RENT_AMOUNT,
                 POS.CPO_MAINT_AMOUNT,
                 POS.CPO_RENT_LOSS,
                 POS.CPO_MAINT_LOSS,
                 POS.CPO_RENT_ADDED_AMOUNT,
                 POS.CPO_MAIN_ADDED_AMOUNT,
                 POS.CPO_BEGIN_CONTRACT_DATE,
                 POS.CPO_END_CONTRACT_DATE,
                 POS.CPO_END_EXTENDED_DATE,
                 POS.CPO_RESILIATION_DATE,
                 POS.CPO_DEPOT_AMOUNT,
                 POS.CPO_DEPOT_BILL_DATE,
                 POS.CPO_PENALITY_AMOUNT,
                 POS.CPO_PENALITY_BILL_DATE,
                 POS.CPO_BILL_TEXT,
                 POS.CPO_FREE_TEXT_1,
                 POS.CPO_FREE_TEXT_2,
                 POS.CPO_FREE_TEXT_3,
                 POS.CPO_FREE_TEXT_4,
                 POS.CPO_FREE_TEXT_5
          FROM  PAC_CUSTOM_PARTNER CUS,CML_DOCUMENT DOC, COM_LIST COM, CML_POSITION POS
          WHERE CUS.PAC_CUSTOM_PARTNER_ID = COM.LIS_ID_1
                AND COM.LIS_JOB_ID = PARAMETER_1
                AND COM.LIS_CODE = 'PAC_CUSTOM_PARTNER_ID'
                AND CUS.PAC_CUSTOM_PARTNER_ID = DOC.PAC_CUSTOM_PARTNER_ID
                AND DOC.CML_DOCUMENT_ID = POS.CML_DOCUMENT_ID
                AND (PARAMETER_4 = '#' OR INSTR(',' || PARAMETER_4 || ',', ',' || POS.C_CML_POS_STATUS ||',') > 0 )
        ) DMT,
        CML_FREE_DATA DAT,
        GCO_GOOD GOO,
        PAC_ADDRESS ADR,
        PAC_PAYMENT_CONDITION PON,
        PAC_PERSON PER,
        PAC_REPRESENTATIVE REP,
        PAC_THIRD THI,
        PCS.PC_CURR CUR
        WHERE
            DMT.CML_DOCUMENT_ID = DAT.CML_DOCUMENT_ID(+)
        AND DMT.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
        AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
        AND DMT.CPO_POS_GOOD_ID = GOO.GCO_GOOD_ID
        AND DMT.PAC_CUSTOM_PARTNER_ID = THI.PAC_THIRD_ID
        AND THI.PAC_THIRD_ID = PER.PAC_PERSON_ID
        AND PER.PAC_PERSON_ID = ADR.PAC_PERSON_ID
        AND DMT.PAC_REPRESENTATIVE_ID = REP.PAC_REPRESENTATIVE_ID(+)
        AND DMT.PAC_PAYMENT_CONDITION_ID = PON.PAC_PAYMENT_CONDITION_ID(+)
        AND ADR.ADD_PRINCIPAL = 1;
ELSE  -- TOUS  LES CONTRATS ET CLIENTS
   OPEN arefcursor FOR
        SELECT
        DMT.CCO_NUMBER,
        DMT.C_CML_CONTRACT_STATUS,
        DMT.PC_LANG_ID,
        POS.CPO_SEQUENCE,
        POS.C_CML_POS_STATUS,
        POS.C_CML_POS_TYPE,
        POS.C_CML_RENT_TYPE,
        POS.C_CML_MAINT_TYPE,
        POS.CPO_RENT_PRICE,
        POS.CPO_MAINT_PRICE,
        POS.CPO_RENT_AMOUNT,
        POS.CPO_MAINT_AMOUNT,
        POS.CPO_RENT_LOSS,
        POS.CPO_MAINT_LOSS,
        POS.CPO_RENT_ADDED_AMOUNT,
        POS.CPO_MAIN_ADDED_AMOUNT,
        POS.CPO_BEGIN_CONTRACT_DATE,
        POS.CPO_END_CONTRACT_DATE,
        POS.CPO_END_EXTENDED_DATE,
        POS.CPO_RESILIATION_DATE,
        POS.CPO_DEPOT_AMOUNT,
        POS.CPO_DEPOT_BILL_DATE,
        POS.CPO_PENALITY_AMOUNT,
        POS.CPO_PENALITY_BILL_DATE,
        POS.CPO_BILL_TEXT,
        POS.CPO_FREE_TEXT_1,
        POS.CPO_FREE_TEXT_2,
        POS.CPO_FREE_TEXT_3,
        POS.CPO_FREE_TEXT_4,
        POS.CPO_FREE_TEXT_5,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01') DES_SHORT_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01') DES_LONG_DESCRIPTION,
        gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01') DES_FREE_DESCRIPTION,
        GOO.GOO_MAJOR_REFERENCE,
        ADR.ADD_ADDRESS1,
        ADR.ADD_FORMAT,
        PER.PER_NAME,
        PER.PER_FORENAME,
        PER.PER_ACTIVITY,
        CUR.CURRENCY,
        vpc_lang_id LANID
        FROM
        ACS_FINANCIAL_CURRENCY FUR,
        ( SELECT CPO_SEQUENCE,
                 C_CML_POS_STATUS,
                 C_CML_POS_TYPE,
                 C_CML_RENT_TYPE,
                 C_CML_MAINT_TYPE,
                 CPO_RENT_PRICE,
                 CPO_MAINT_PRICE,
                 CPO_RENT_AMOUNT,
                 CPO_MAINT_AMOUNT,
                 CPO_RENT_LOSS,
                 CPO_MAINT_LOSS,
                 CPO_RENT_ADDED_AMOUNT,
                 CPO_MAIN_ADDED_AMOUNT,
                 CPO_BEGIN_CONTRACT_DATE,
                 CPO_END_CONTRACT_DATE,
                 CPO_END_EXTENDED_DATE,
                 CPO_RESILIATION_DATE,
                 CPO_DEPOT_AMOUNT,
                 CPO_DEPOT_BILL_DATE,
                 CPO_PENALITY_AMOUNT,
                 CPO_PENALITY_BILL_DATE,
                 CPO_BILL_TEXT,
                 CPO_FREE_TEXT_1,
                 CPO_FREE_TEXT_2,
                 CPO_FREE_TEXT_3,
                 CPO_FREE_TEXT_4,
                 CPO_FREE_TEXT_5,
                 CPO_POS_GOOD_ID,
                 ACS_FINANCIAL_CURRENCY_ID,
                 CML_DOCUMENT_ID
          FROM CML_POSITION
          WHERE (PARAMETER_4 = '#' OR INSTR(',' || PARAMETER_4 || ',', ',' || C_CML_POS_STATUS ||',') > 0 )
        ) POS,
        CML_DOCUMENT DMT,
        CML_FREE_DATA DAT,
        GCO_GOOD GOO,
        PAC_ADDRESS ADR,
        PAC_CUSTOM_PARTNER CUS,
        PAC_PAYMENT_CONDITION PON,
        PAC_PERSON PER,
        PAC_REPRESENTATIVE REP,
        PAC_THIRD THI,
        PCS.PC_CURR CUR
        WHERE
            POS.CML_DOCUMENT_ID = DMT.CML_DOCUMENT_ID
        AND DMT.CML_DOCUMENT_ID = DAT.CML_DOCUMENT_ID(+)
        AND POS.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
        AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
        AND POS.CPO_POS_GOOD_ID = GOO.GCO_GOOD_ID
        AND DMT.PAC_CUSTOM_PARTNER_ID = CUS.PAC_CUSTOM_PARTNER_ID
        AND CUS.PAC_CUSTOM_PARTNER_ID = THI.PAC_THIRD_ID
        AND THI.PAC_THIRD_ID = PER.PAC_PERSON_ID
        AND PER.PAC_PERSON_ID = ADR.PAC_PERSON_ID
        AND DMT.PAC_REPRESENTATIVE_ID = REP.PAC_REPRESENTATIVE_ID(+)
        AND DMT.PAC_PAYMENT_CONDITION_ID = PON.PAC_PAYMENT_CONDITION_ID(+)
        AND ADR.ADD_PRINCIPAL = 1;



END IF;
END IF;
END RPT_CML_CTRL_LIST;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_INVOICE_DOC_TOTAL_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
* Description - used for the report CML_INVOICING_DOCUMENTS

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZHU 01 DEC 2006
* @LASTUPDATE  24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     CML_INVOICING_JOB.CML_INVOICING_JOB_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT   cur.currency,
               SUM (foo.foo_document_total_amount) currency_total
          FROM cml_invoicing_job inj,
               doc_document doc,
               doc_foot foo,
               acs_financial_currency acs,
               pcs.pc_curr cur
         WHERE inj.cml_invoicing_job_id = doc.cml_invoicing_job_id
           AND doc.doc_document_id = foo.doc_document_id
           AND doc.acs_financial_currency_id = acs.acs_financial_currency_id
           AND acs.pc_curr_id = cur.pc_curr_id
           AND inj.cml_invoicing_job_id = TO_NUMBER (parameter_0)
      GROUP BY cur.currency;
END rpt_cml_invoice_doc_total_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_INVOICING_DOCUMENTS" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
* Description - used for the report CML_INVOICING_DOCUMENTS

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZHU 01 DEC 2006
* @LASTUPDATE  24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     CML_INVOICING_JOB.CML_INVOICING_JOB_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT inj.inj_description, inj_date, doc.dmt_number,
             per.pac_person_id, per.per_name, per.per_key1,
             foo.foo_document_total_amount, cur.currency, pco.pco_descr
        FROM cml_invoicing_job inj,
             doc_document doc,
             doc_foot foo,
             pac_person per,
             acs_financial_currency acs,
             pcs.pc_curr cur,
             pac_payment_condition pco
       WHERE inj.cml_invoicing_job_id = doc.cml_invoicing_job_id
         AND doc.doc_document_id = foo.doc_document_id
         AND doc.pac_third_id = per.pac_person_id
         AND doc.acs_financial_currency_id = acs.acs_financial_currency_id
         AND acs.pc_curr_id = cur.pc_curr_id
         AND doc.pac_payment_condition_id = pco.pac_payment_condition_id
         AND inj.cml_invoicing_job_id = TO_NUMBER (parameter_0);
END rpt_cml_invoicing_documents;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_INVOICING_EXTRACTION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
* Description - used for the report CML_INVOICING_EXTRACTION

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZHU 01 DEC 2006
* @LASTUPDATE  24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PROCPARAM_0     CML_INVOICING_JOB.CML_INVOICING_JOB_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   inp.inp_selection, inp.pac_custom_partner_id, per.per_name,
               per.per_key1,
               (SELECT per_name
                  FROM pac_person per_aci
                 WHERE per_aci.pac_person_id =
                          NVL (inp.pac_custom_partner_aci_id,
                               inp.pac_custom_partner_id
                              )) per_name_aci,
               cco.cco_number, cco.cco_description, cpo.cpo_sequence,
               cpo.cpo_description, cpo.c_cml_pos_type,
               com_functions.getdescodedescr
                                    ('C_CML_POS_TYPE',
                                     cpo.c_cml_pos_type,
                                     vpc_lang_id
                                    ) c_cml_pos_type_descr,
               cpo.c_cml_pos_status,
               com_functions.getdescodedescr
                                ('C_CML_POS_STATUS',
                                 cpo.c_cml_pos_status,
                                 vpc_lang_id
                                ) c_cml_pos_status_descr,
               cpo.cpo_init_period_price, cpo.cpo_extend_period_price,
               CASE
                  WHEN inp.c_invoicing_process_type =
                                            'FIXEDPRICE'
                     THEN cpo.cpo_bill_text
                  WHEN inp.c_invoicing_process_type =
                                                'EVENTS'
                     THEN cev.cev_text
                  WHEN inp.c_invoicing_process_type =
                                               'DEPOSIT'
                     THEN cpo.cpo_depot_text
                  WHEN inp.c_invoicing_process_type =
                                              'PENALITY'
                     THEN cpo.cpo_penality_text
               END pos_free_description,
               cev.cev_sequence, cev.cml_position_service_detail_id,
               ctt.ctt_descr, ctt.dic_asa_unit_of_measure_id,
               (SELECT des.dit_descr
                  FROM dico_description des
                 WHERE des.dit_code =
                          ctt.dic_asa_unit_of_measure_id
                   AND des.dit_table = 'DIC_UNIT_OF_MEASURE'
                   AND des.pc_lang_id = vpc_lang_id)
                                               dic_asa_unit_of_measure_descr,
               cur.currency, pco.pco_descr, inp.c_invoicing_process_type,
               com_functions.getdescodedescr
                     ('C_INVOICING_PROCESS_TYPE',
                      inp.c_invoicing_process_type,
                      vpc_lang_id
                     ) c_invoicing_process_descr,
               inp.cml_document_id, cou.cou_comment,
               inp.inp_begin_period_date, inp.inp_end_period_date,
               inp.inp_amount, inp.inp_counter_begin_qty,
               inp.inp_counter_end_qty, inp.inp_free_qty,
               inp.inp_gross_consumed_qty, inp.inp_net_consumed_qty,
               inp.inp_balance_qty, inp.inp_invoicing_qty,
               cpd.cpd_unit_value, cmd.cmd_last_invoice_statement,
               cmd.cmd_initial_statement, cpm.cpm_weight, rco_inst.rco_title,
               goo.goo_major_reference, inp.inp_regroup_id
                                                          --, SUM(INP_AMOUNT) OVER (PARTITION BY INP_REGROUP_ID) SUM_INP_AMOUNT
               ,
               SUM (inp_amount) OVER (PARTITION BY per.per_key1, cco.cco_number, cpo.cpo_sequence, inp.c_invoicing_process_type)
                                                              sum_inp_amount
          FROM cml_invoicing_process inp,
               cml_invoicing_job inj,
               pac_person per,
               acs_financial_currency fin,
               pcs.pc_curr cur,
               pac_payment_condition pco,
               cml_document cco,
               cml_position cpo,
               cml_events cev,
               asa_counter_statement cst,
               asa_counter cou,
               asa_counter_type ctt,
               cml_position_service_detail cpd,
               cml_position_machine_detail cmd,
               cml_position_machine cpm,
               doc_record rco_inst,
               gco_good goo
         WHERE inp.cml_invoicing_job_id = inj.cml_invoicing_job_id
           AND inp.cml_invoicing_job_id = parameter_0
           AND inp.cml_events_id = cev.cml_events_id(+)
           AND cev.cml_events_id = cst.cml_events_id(+)
           AND cst.asa_counter_id = cou.asa_counter_id(+)
           AND cou.asa_counter_type_id = ctt.asa_counter_type_id(+)
           AND cev.cml_position_service_detail_id = cpd.cml_position_service_detail_id(+)
           AND cev.cml_position_machine_detail_id = cmd.cml_position_machine_detail_id(+)
           AND cmd.cml_position_machine_id = cpm.cml_position_machine_id(+)
           AND cpm.doc_rco_machine_id = rco_inst.doc_record_id(+)
           AND rco_inst.rco_machine_good_id = goo.gco_good_id(+)
           AND inp.doc_position_id IS NULL
           AND per.pac_person_id = inp.pac_custom_partner_id
           AND inp.cml_position_id = cpo.cml_position_id
           AND cpo.cml_document_id = cco.cml_document_id
           AND inp.acs_financial_currency_id = fin.acs_financial_currency_id
           AND fin.pc_curr_id = cur.pc_curr_id
           AND per.pac_person_id = inp.pac_custom_partner_id
           AND inp.pac_payment_condition_id = pco.pac_payment_condition_id(+)
           AND inp.inp_selection = 1
      ORDER BY inp.inp_order_by;
END rpt_cml_invoicing_extraction;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_POSITION_STD" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       cml_position.cml_position_id%TYPE,
   parameter_1      IN       CML_DOCUMENT.CML_DOCUMENT_ID%TYPE
)
IS
/*
* Description stored procedure used for the report CML_POSITION_STD

* @created AWU 01 NOV 2008
* @update AWU 23 Apr 2009
* @lastupdate cliu 23 July 2010  added PARAMETER_1 CML_DOCUMENT_ID
* @public
* @param PARAMETER_0: CML_POSITION_ID
* @param PARAMETER_1: CML_DOCUMENT_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cco.cco_number,                                   /*No contrat*/
             cco.cco_initdate,

             /*Date*/
             cco.cco_description,                                   /*Descr*/
             pcs.pc_functions.getdescodedescr
                            ('C_CML_CONTRACT_STATUS',
                             cco.c_cml_contract_status,
                             vpc_lang_id
                            ) c_cml_contract_status,               /*Statut*/
             (SELECT per1.per_name
                FROM pac_person per1
               WHERE per1.pac_person_id = cco.pac_custom_partner_id) client,

             /*Client*/
             (SELECT per2.per_name
                FROM pac_person per2
               WHERE per2.pac_person_id =
                                    cco.pac_custom_partner_aci_id)
                                                                 client_fact,

             /*Client fact*/
             (SELECT per3.per_name
                FROM pac_person per3
               WHERE per3.pac_person_id =
                                cco.pac_custom_partner_tariff_id)
                                                                client_tarif,

             /*Client tarif*/
             cco.dic_tariff_id,                                /*Code tarif*/
                               cpo.cpo_sequence,                   /*No pos*/
                                                cpo.cpo_description,

             /*Descr pos*/
             pcs.pc_functions.getdescodedescr
                                          ('C_CML_POS_TYPE',
                                           cpo.c_cml_pos_type,
                                           vpc_lang_id
                                          ) c_cml_pos_type,          /*Type*/
             cpo.cpo_cost_price,                                       /*PR*/
             (SELECT rco1.rco_title
                FROM doc_record rco1
               WHERE rco1.doc_record_id = cpo.doc_record_id) dossier,

             /*Dossier*/
             (SELECT rep.rep_descr
                FROM pac_representative rep
               WHERE rep.pac_representative_id =
                                               cpo.pac_representative_id)
                                                                        repr,

             /*Repr.*/
             (SELECT pus.use_name
                FROM pcs.pc_user pus
               WHERE pus.pc_user_id = cpo.cpo_pc_user_id) visa_ctrl,

             /*Visa ctrl*/
             cpo.cpo_sale_price,                                       /*PV*/
             cpo.cpo_conclusion_date,

             /*Date Conclusion*/
             cpo.cpo_begin_contract_date,

             /*Date d?ut*/
             cpo.cpo_extended_monthes,                 /*Prol. Contrat/mois*/
                                      cpo.cpo_extension_period_nb,

             /*Prol autoris?*/
             cpo.cpo_begin_service_date,

             /*Date mise service*/
             cpo.cpo_contract_monthes,                               /*Dur?*/
                                      cpo.cpo_extension_time,   /*Dur? prol*/
             cpo.cpo_ext_period_nb_done,                    /*Prol effectu?*/
             cpo.cpo_end_contract_date,

             /*Date fin pr?ue*/
             cpo.cpo_end_extended_date,

             /*Date fin pr?ue prol*/
             cpo.cpo_init_period_price,                  /*Prix p?iode init*/
                                       cpo.cpo_extend_period_price,

             /*Prix prolongation*/
             cpo.cpo_position_cost_price,               /*Prix revient pos.*/
                                         cpo.cpo_position_amount,

             /*Montant factur?/*/
             cpo.cpo_position_added_amount,           /*Montant suppl fact.*/
                                           cpo.cpo_position_loss,

             /*Perte position*/
             cpr.cpr_january, cpr.cpr_february, cpr.cpr_march, cpr.cpr_april,
             cpr.cpr_may, cpr.cpr_june, cpr.cpr_july, cpr.cpr_august,
             cpr.cpr_september, cpr.cpr_october, cpr.cpr_november,
             cpr.cpr_december,
             cpo.cpo_last_period_begin,

             /*D?ut derni?e p?iode*/
             cpo.cpo_last_period_end,

             /*Fin derni?e p?iode*/
             cpo.cpo_next_date,

             /*Prochaine ?h?nce*/
             cpo.dic_cml_invoice_regrouping_id,    /*Code regroupement fact*/
                                               cpo.cpo_bill_text,

             /*Texte facturation*/
             cpo.cpo_suspension_date,

             /*Date suspension*/
             cpo.dic_cml_suspension_reason_id,           /*Motif suspension*/
             cpo.cpo_resiliation_date,

             /*Date r?iliation*/
             cpo.dic_cml_resiliation_reason_id,          /*Motif r?iliation*/
                                               cpo.cpo_depot_amount,

             /*Montant d??t*/
             cpo.cpo_depot_bill_date,

             /*Date facture d??t*/
             cpo.cpo_depot_cn_date,

             /*Date NC d??t*/
             cpo.cpo_penality_amount,                    /*Montant p?alit?/*/
             cpo.cpo_penality_bill_date,
        /*Date fact. P?alit?/*/
        cpo.CML_POSITION_ID
      FROM   cml_position cpo, cml_document cco, cml_processing cpr
       WHERE cpo.cml_document_id = cco.cml_document_id
         AND cpo.cml_position_id = cpr.cml_position_id(+)
         AND ((nvl(parameter_1,0) = 0 and  cpo.cml_position_id = parameter_0)
         OR CCO.CML_DOCUMENT_ID = parameter_1);
END rpt_cml_position_std;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_POS_MACHINE_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       cml_position.cml_position_id%TYPE
)
IS
/*
* Description stored procedure used for the report CML_POSITION_STD

* @created AWU 01 NOV 2008
* @lastupdate AWU 23 Apr 2009
* @public
* @param PARAMETER_0: CML_POSITION_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cpm.cml_position_machine_id,
             (SELECT rco2.rco_title
                FROM doc_record rco2
               WHERE rco2.doc_record_id =
                                       cpm.doc_rco_machine_id)
                                                             no_installation,

             /*No installation*/
             cpm.cpm_weight,                                   /*Pond?ation*/
             (SELECT ctt.ctt_key
                FROM asa_counter cou, asa_counter_type ctt
               WHERE cou.asa_counter_type_id =
                                             ctt.asa_counter_type_id
                 AND cou.asa_counter_id = cmd.asa_counter_id) compteur,

             /*Compteur*/
             cmd.cmd_initial_statement,             /*Compteur d?ut contrat*/
             cmd.cmd_last_invoice_statement         /*Compteur derni?e fact*/
        FROM cml_position_machine cpm, cml_position_machine_detail cmd
       WHERE cpm.cml_position_machine_id = cmd.cml_position_machine_id(+)
         AND cpm.cml_position_id = parameter_0;
END rpt_cml_pos_machine_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_CML_POS_SERVICES_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       cml_position.cml_position_id%TYPE
)
IS
/*
* Description stored procedure used for the report CML_POSITION_STD

* @created AWU 01 NOV 2008
* @lastupdate AWU 23 Apr 2009
* @public
* @param PARAMETER_0: CML_POSITION_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cps.cml_position_service_id,
             (SELECT goo_major_reference
                FROM gco_good goo
               WHERE goo.gco_good_id = cps.gco_cml_service_id)
                                                              ref_prestation,
                                                           /*Ref prestation*/
             cps.cps_long_description                       /*Descr. Longue*/
        FROM cml_position_service cps
       WHERE cps.cml_position_id = parameter_0;
END rpt_cml_pos_services_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_BVR_3" (
   arefcursor          IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0         IN       VARCHAR2,
   proccompany_owner   IN       pcs.pc_scrip.scrdbowner%TYPE,
   proccompany_name    IN       pcs.pc_comp.com_name%TYPE
)
IS
/*
* Description stored procedure used for the report DOC_BVR_3

* @created MZHU 5 DEC 2008
* @lastupdate VHA 26 JUNE 2013
* @public
* @param PARAMETER_0 DMT_NUMBER
*/

vcom_adr                    VARCHAR2 (4000) := null;
vcomp_id                    pcs.pc_comp.pc_comp_id%TYPE := null;

BEGIN

   if (proccompany_name is not null) then
      SELECT com.com_adr || CHR (13) || com.com_zip || ' - ' || com.com_city, pc_comp_id
         INTO vcom_adr, vcomp_id
         FROM pcs.pc_comp com
        WHERE com.com_name = proccompany_name;
    end if;

    OPEN arefcursor FOR
           SELECT dmt.doc_document_id, pad.doc_payment_date_id, lan.pc_lang_id,
             (SELECT des.gad_describe
                FROM doc_gauge_description des
               WHERE des.doc_gauge_id = dmt.doc_gauge_id
                 AND des.pc_lang_id = DMT.PC_LANG_ID ) gad_describe,
             GAU.GAU_DESCRIBE,
             vcom_adr com_adr,
             lan.lanname, lan.lanid, dmt.dmt_number, dmt.dmt_title_text,
             dmt.dmt_date_document, per.per_name, per.per_forename,
             per.per_activity, dmt.dmt_address3 dmt_address1,
             dmt.dmt_postcode3 dmt_postcode1, dmt.dmt_town3 dmt_town1,
             dmt.dmt_format_city3 dmt_format_city1,
             foo.c_bvr_generation_method, foo.foo_generate_bvr_number,
             pad.pad_band_number, pad.pad_payment_date,
             pad.pad_discount_amount, pad.pad_bvr_reference_num,
             pad.pad_bvr_coding_line, pad.pad_net_date_amount,
             pcs.pc_functions.getappltxtlabel (pco.pc_appltxt_id,
                                               lan.pc_lang_id
                                              ) apt_label,
             pme.pme_sbvr, ban.ban_name1, ban.ban_zip, ban.ban_city,
             (SELECT com.com_logo_large
                FROM pcs.pc_comp com
               WHERE com.pc_comp_id = vcomp_id
                 ) com_logo_large,
             (   DECODE (NVL (dmt.dmt_forename1, per.per_forename),
                         NULL, '',
                         NVL (dmt.dmt_forename1, per.per_forename) || CHR (13)
                        )
              || DECODE (NVL (dmt.dmt_activity1, per.per_activity),
                         NULL, '',
                         NVL (dmt.dmt_activity1, per.per_activity) || CHR (13)
                        )
              || DECODE (dmt.dmt_care_of1,
                         NULL, '',
                         dmt.dmt_care_of1 || CHR (13)
                        )
              || DECODE (dmt.dmt_address1,
                         NULL, '',
                         dmt.dmt_address1 || CHR (13)
                        )
              || DECODE (dmt.dmt_format_city1,
                         NULL, '',
                         dmt.dmt_format_city1
                        )
             ) add_1
        FROM doc_document dmt,
             doc_foot foo,
             pac_person per,
             pac_payment_condition pco,
             doc_payment_date pad,
             acs_fin_acc_s_payment asp,
             acs_payment_method pme,
             pcs.pc_lang lan,
             acs_financial_account fin,
             pcs.pc_bank ban,
             doc_gauge gau
       WHERE dmt.doc_document_id = foo.doc_document_id(+)
         AND dmt.pc_lang_id = lan.pc_lang_id
         AND dmt.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
         AND dmt.pac_third_aci_id = per.pac_person_id(+)
         AND dmt.pac_payment_condition_id = pco.pac_payment_condition_id(+)
         AND foo.doc_foot_id = pad.doc_foot_id
         AND dmt.acs_fin_acc_s_payment_id = asp.acs_fin_acc_s_payment_id(+)
         AND asp.acs_payment_method_id = pme.acs_payment_method_id(+)
         AND asp.acs_financial_account_id = fin.acs_financial_account_id(+)
         AND fin.pc_bank_id = ban.pc_bank_id(+)
         AND dmt.dmt_number = parameter_0;

END rpt_doc_bvr_3;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_CAN_CUSTOMER" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
  /**
  * procedure rpt_doc_can_customer
  * Description
  *    Utilisation pour le rapport DOC_CAN_CUSTOMER
  * @created mzh 14.11.2006
  * @lastUpdate age 20.09.2012
  * @public
  * @param parameter_0  : PAC_PERSON.PER_KEY1(MIN)
  * @param parameter_1  : PAC_PERSON.PER_KEY1(MAX)
  * @param parameter_17 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_18 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_19 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_20 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_21 : Prise en compte matiÃ¨re prÃ©cieuse
  */
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.GetUserLangId;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , doc.DMT_NUMBER
         , doc.DMT_DATE_DOCUMENT
         , doc.DMT_DATE_VALUE
         , str.C_GAUGE_TITLE
         , pos.C_GAUGE_TYPE_POS
         , pos.C_DOC_POS_STATUS
         , pos.POS_FINAL_QUANTITY
         , pos.POS_FINAL_QUANTITY_SU
         , pos.DIC_UNIT_OF_MEASURE_ID
         , pos.POS_UNIT_COST_PRICE
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL_B
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
           end POS_NET_VALUE_EXCL_B
         , goo.GCO_GOOD_ID
         , goo.DIC_GOOD_LINE_ID
         , goo.DIC_GOOD_FAMILY_ID
         , goo.DIC_GOOD_MODEL_ID
         , goo.DIC_GOOD_GROUP_ID
         , goo.GOO_MAJOR_REFERENCE
         , goo.GOO_NUMBER_OF_DECIMAL
         , cus.DIC_TYPE_PARTNER_ID
         , per.PER_NAME
         , per.PER_KEY1
         , rep.REP_DESCR
         , thi.DIC_THIRD_ACTIVITY_ID
         , thi.DIC_THIRD_AREA_ID
         , des.DES_SHORT_DESCRIPTION
      from DOC_DOCUMENT doc
         , DOC_GAUGE_STRUCTURED str
         , DOC_POSITION pos
         , GCO_GOOD goo
         , GCO_DESCRIPTION des
         , PAC_CUSTOM_PARTNER cus
         , PAC_PERSON per
         , PAC_REPRESENTATIVE rep
         , PAC_THIRD thi
     where doc.DOC_GAUGE_ID = str.DOC_GAUGE_ID
       and doc.DOC_DOCUMENT_ID = pos.DOC_DOCUMENT_ID
       and pos.GCO_GOOD_ID = goo.GCO_GOOD_ID
       and goo.GCO_GOOD_ID = des.GCO_GOOD_ID
       and des.C_DESCRIPTION_TYPE = '01'
       and des.PC_LANG_ID = vpc_lang_id
       and doc.PAC_THIRD_ID = cus.PAC_CUSTOM_PARTNER_ID
       and doc.PAC_THIRD_ID = per.PAC_PERSON_ID
       and doc.PAC_THIRD_ID = thi.PAC_THIRD_ID
       and doc.PAC_REPRESENTATIVE_ID = rep.pac_representative_id(+)
       and str.C_GAUGE_TITLE in('8', '9', '30')
       and (   parameter_0 = '%'
            or (per.PER_KEY1 >= parameter_0) )
       and (   parameter_1 = '%'
            or (per.PER_KEY1 <= parameter_1) )
       and (pos.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10', '101') )
       and pos.C_DOC_POS_STATUS = '04'
       and (    (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_17, 'YYYYMMDD')
                 and doc.DMT_DATE_DOCUMENT <= to_date(parameter_18, 'YYYYMMDD') )
            or (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_19, 'YYYYMMDD')
                and doc.DMT_DATE_DOCUMENT <= to_date(parameter_20, 'YYYYMMDD') )
           );
end rpt_doc_can_customer;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_CAN_GOOD" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procuser_lanid in     pcs.PC_LANG.LANID%type
)
is
  /**
  * procedure rpt_doc_can_good
  * Description
  *    Utilisation pour le rapport DOC_CAN_GOOD
  * @created mzh 29.11.2006
  * @lastUpdate age 24.09.2012
  * @public
  * @param parameter_0  : GCO_GOOD.GOO_MAJOR_REFERENCE(MIN)
  * @param parameter_1  : GCO_GOOD.GOO_MAJOR_REFERENCE(MAX)
  * @param parameter_17 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_18 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_19 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_20 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_21 : Prise en compte matiÃ¨re prÃ©cieuse
  */
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.GetUserLangId;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , doc.DMT_NUMBER
         , doc.DMT_DATE_DOCUMENT
         , doc.DMT_DATE_VALUE
         , str.C_GAUGE_TITLE
         , pos.C_GAUGE_TYPE_POS
         , pos.C_DOC_POS_STATUS
         , pos.POS_FINAL_QUANTITY
         , pos.POS_FINAL_QUANTITY_SU
         , pos.DIC_UNIT_OF_MEASURE_ID
         , pos.POS_UNIT_COST_PRICE
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL_B
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
           end POS_NET_VALUE_EXCL_B
         , goo.GCO_GOOD_ID
         , goo.DIC_GOOD_LINE_ID
         , goo.DIC_GOOD_FAMILY_ID
         , goo.DIC_GOOD_MODEL_ID
         , goo.DIC_GOOD_GROUP_ID
         , goo.GOO_MAJOR_REFERENCE
         , goo.GOO_NUMBER_OF_DECIMAL
         , cus.DIC_TYPE_PARTNER_ID
         , per.PER_NAME
         , per.PER_KEY1
         , rep.REP_DESCR
         , thi.DIC_THIRD_ACTIVITY_ID
         , thi.DIC_THIRD_AREA_ID
         , des.DES_SHORT_DESCRIPTION
      from DOC_DOCUMENT doc
         , DOC_GAUGE_STRUCTURED str
         , DOC_POSITION pos
         , GCO_GOOD goo
         , GCO_DESCRIPTION des
         , PAC_CUSTOM_PARTNER cus
         , PAC_PERSON per
         , PAC_REPRESENTATIVE rep
         , PAC_THIRD thi
     where doc.DOC_GAUGE_ID = str.DOC_GAUGE_ID
       and doc.DOC_DOCUMENT_ID = pos.DOC_DOCUMENT_ID
       and pos.GCO_GOOD_ID = goo.GCO_GOOD_ID
       and goo.GCO_GOOD_ID = des.GCO_GOOD_ID
       and des.C_DESCRIPTION_TYPE = '01'
       and des.PC_LANG_ID = vpc_lang_id
       and doc.PAC_THIRD_ID = cus.PAC_CUSTOM_PARTNER_ID
       and doc.PAC_THIRD_ID = per.PAC_PERSON_ID
       and doc.PAC_THIRD_ID = thi.PAC_THIRD_ID
       and doc.PAC_REPRESENTATIVE_ID = rep.PAC_REPRESENTATIVE_ID(+)
       and str.C_GAUGE_TITLE in('8', '9', '30')
       and (   parameter_0 = '%'
            or (goo.GOO_MAJOR_REFERENCE >= parameter_0) )
       and (   parameter_1 = '%'
            or (goo.GOO_MAJOR_REFERENCE <= parameter_1) )
       and (pos.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10', '101') )
       and pos.C_DOC_POS_STATUS = '04'
       and (    (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_17, 'YYYYMMDD')
                 and doc.DMT_DATE_DOCUMENT <= to_date(parameter_18, 'YYYYMMDD') )
            or (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_19, 'YYYYMMDD')
                and doc.DMT_DATE_DOCUMENT <= to_date(parameter_20, 'YYYYMMDD') )
           );
end rpt_doc_can_good;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_CAN_GOOD_SUPPLIER" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
  /**
  * procedure rpt_doc_can_good_supplier
  * Description
  *    Utilisation pour le rapport DOC_CAN_GOOD_SUPPLIER
  * @created mzh 18.12.2006
  * @lastUpdate age 20.09.2012
  * @public
  * @param parameter_0  : PAC_PERSON.PER_KEY1(MIN)
  * @param parameter_1  : PAC_PERSON.PER_KEY1(MAX)
  * @param parameter_17 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_18 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_19 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_20 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_21 : Prise en compte matiÃ¨re prÃ©cieuse
  */
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.GetUserLangId;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , doc.DMT_NUMBER
         , doc.DMT_DATE_DOCUMENT
         , doc.DMT_DATE_VALUE
         , str.C_GAUGE_TITLE
         , str.GAS_FINANCIAL_CHARGE
         , pos.C_GAUGE_TYPE_POS
         , pos.C_DOC_POS_STATUS
         , pos.POS_FINAL_QUANTITY
         , pos.POS_FINAL_QUANTITY_SU
         , pos.DIC_UNIT_OF_MEASURE_ID
         , pos.POS_UNIT_COST_PRICE
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL_B
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
           end POS_NET_VALUE_EXCL_B
         , goo.GCO_GOOD_ID
         , goo.DIC_GOOD_LINE_ID
         , goo.DIC_GOOD_FAMILY_ID
         , goo.DIC_GOOD_MODEL_ID
         , goo.DIC_GOOD_GROUP_ID
         , goo.GOO_MAJOR_REFERENCE
         , goo.GOO_NUMBER_OF_DECIMAL
         , sup.DIC_TYPE_PARTNER_F_ID
         , per.PER_NAME
         , per.PER_KEY1
         , rep.REP_DESCR
         , thi.DIC_THIRD_ACTIVITY_ID
         , thi.DIC_THIRD_AREA_ID
         , des.DES_SHORT_DESCRIPTION
      from DOC_DOCUMENT doc
         , DOC_GAUGE_STRUCTURED str
         , DOC_POSITION pos
         , GCO_GOOD goo
         , GCO_DESCRIPTION des
         , PAC_SUPPLIER_PARTNER sup
         , PAC_PERSON per
         , PAC_REPRESENTATIVE rep
         , PAC_THIRD thi
     where doc.DOC_GAUGE_ID = str.DOC_GAUGE_ID
       and doc.DOC_DOCUMENT_ID = pos.DOC_DOCUMENT_ID
       and pos.GCO_GOOD_ID = goo.GCO_GOOD_ID
       and goo.GCO_GOOD_ID = des.GCO_GOOD_ID
       and des.C_DESCRIPTION_TYPE = '01'
       and des.PC_LANG_ID = vpc_lang_id
       and doc.PAC_THIRD_ID = sup.PAC_SUPPLIER_PARTNER_ID
       and doc.PAC_THIRD_ID = per.PAC_PERSON_ID
       and doc.PAC_THIRD_ID = thi.PAC_THIRD_ID
       and doc.PAC_REPRESENTATIVE_ID = rep.PAC_REPRESENTATIVE_ID(+)
       and (   str.C_GAUGE_TITLE = '4'
            or (    str.C_GAUGE_TITLE = '5'
                and str.GAS_FINANCIAL_CHARGE = 1) )
       and (   parameter_0 = '%'
            or goo.GOO_MAJOR_REFERENCE >= parameter_0)
       and (   parameter_1 = '%'
            or goo.GOO_MAJOR_REFERENCE <= parameter_1)
       and (pos.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10') )
       and pos.C_DOC_POS_STATUS = '04'
       and (    (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_17, 'YYYYMMDD')
                 and doc.DMT_DATE_DOCUMENT <= to_date(parameter_18, 'YYYYMMDD') )
            or (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_19, 'YYYYMMDD')
                and doc.DMT_DATE_DOCUMENT <= to_date(parameter_20, 'YYYYMMDD') )
           );
end rpt_doc_can_good_supplier;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_CAN_SUPPLIER" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_17   in     varchar2
, parameter_18   in     varchar2
, parameter_19   in     varchar2
, parameter_20   in     varchar2
, parameter_21   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
  /**
  * procedure rpt_doc_can_supplier
  * Description
  *    Utilisation pour le rapport DOC_CAN_SUPPLIER
  * @created mzh 19.12.2006
  * @lastUpdate age 20.09.2012
  * @public
  * @param parameter_0  : PAC_PERSON.PER_KEY1(MIN)
  * @param parameter_1  : PAC_PERSON.PER_KEY1(MAX)
  * @param parameter_17 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_18 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_19 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MIN)
  * @param parameter_20 : DOC_DOCUMENT.DMT_DATE_DOCUMENT(MAX)
  * @param parameter_21 : Prise en compte matiÃ¨re prÃ©cieuse
  */
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.GetUserLangId;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , doc.DMT_NUMBER
         , doc.DMT_DATE_DOCUMENT
         , doc.DMT_DATE_VALUE
         , str.C_GAUGE_TITLE
         , str.GAS_FINANCIAL_CHARGE
         , pos.C_GAUGE_TYPE_POS
         , pos.C_DOC_POS_STATUS
         , pos.POS_FINAL_QUANTITY
         , pos.DIC_UNIT_OF_MEASURE_ID
         , pos.POS_UNIT_COST_PRICE
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL_B
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
           end POS_NET_VALUE_EXCL_B
         , goo.GCO_GOOD_ID
         , goo.DIC_GOOD_LINE_ID
         , goo.DIC_GOOD_FAMILY_ID
         , goo.DIC_GOOD_MODEL_ID
         , goo.DIC_GOOD_GROUP_ID
         , goo.GOO_MAJOR_REFERENCE
         , goo.GOO_NUMBER_OF_DECIMAL
         , sup.DIC_TYPE_PARTNER_F_ID
         , per.PER_NAME
         , per.PER_KEY1
         , rep.REP_DESCR
         , thi.DIC_THIRD_ACTIVITY_ID
         , thi.DIC_THIRD_AREA_ID
         , des.DES_SHORT_DESCRIPTION
      from DOC_DOCUMENT doc
         , DOC_GAUGE_STRUCTURED str
         , DOC_POSITION pos
         , GCO_GOOD goo
         , GCO_DESCRIPTION des
         , PAC_SUPPLIER_PARTNER sup
         , PAC_PERSON per
         , PAC_REPRESENTATIVE rep
         , PAC_THIRD thi
     where doc.DOC_GAUGE_ID = str.DOC_GAUGE_ID
       and doc.DOC_DOCUMENT_ID = pos.DOC_DOCUMENT_ID
       and pos.GCO_GOOD_ID = goo.GCO_GOOD_ID
       and goo.GCO_GOOD_ID = des.GCO_GOOD_ID
       and des.C_DESCRIPTION_TYPE = '01'
       and des.PC_LANG_ID = vpc_lang_id
       and doc.PAC_THIRD_ID = sup.PAC_SUPPLIER_PARTNER_ID
       and doc.PAC_THIRD_ID = per.PAC_PERSON_ID
       and doc.PAC_THIRD_ID = thi.PAC_THIRD_ID
       and doc.PAC_REPRESENTATIVE_ID = rep.PAC_REPRESENTATIVE_ID(+)
       and (   str.C_GAUGE_TITLE = '4'
            or (    str.C_GAUGE_TITLE = '5'
                and str.GAS_FINANCIAL_CHARGE = 1) )
       and (   parameter_0 = '%'
            or per.PER_KEY1 >= parameter_0)
       and (   parameter_1 = '%'
            or per.PER_KEY1 <= parameter_1)
       and (pos.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10') )
       and pos.C_DOC_POS_STATUS = '04'
       and (    (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_17, 'YYYYMMDD')
                 and doc.DMT_DATE_DOCUMENT <= to_date(parameter_18, 'YYYYMMDD') )
            or (    doc.DMT_DATE_DOCUMENT >= to_date(parameter_19, 'YYYYMMDD')
                and doc.DMT_DATE_DOCUMENT <= to_date(parameter_20, 'YYYYMMDD') )
           );
end rpt_doc_can_supplier;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_DUE_DATE_MASTER" (
  arefcursor           in out crystal_cursor_types.dualcursortyp
, parameter_0          in     varchar2
, parameter_1          in     varchar2
, parameter_2          in     varchar2
, parameter_3          in     varchar2
, parameter_4          in     varchar2
, parameter_5          in     varchar2
, parameter_6          in     varchar2
, parameter_7          in     varchar2
, parameter_8          in     varchar2
, parameter_9          in     varchar2
, parameter_10         in     varchar2
, parameter_11         in     varchar2
, parameter_12         in     varchar2
, parameter_13         in     varchar2
, parameter_14         in     varchar2
, parameter_15         in     varchar2
, procuser_lanid       in     pcs.pc_lang.lanid%type
, report_name          in     varchar2
, calling_pc_object_id in     pcs.pc_object.pc_object_id%type
, company_owner        in     pcs.pc_scrip.scrdbowner%type
)
is
/**
*Description
 Used for the reports  DOC_CUST_ECHEANCIER_CUST_BATCH, DOC_SUPPL_ECHEANCIER_SUPPL_BATCH
                               DOC_CUST_ECHEANCIER_GOOD_BATCH, DOC_SUPPL_ECHEANCIER_GOOD_BATCH

*@created PNA 27 Mar 2007
*@lastUpdate sma 30.10.2013
*@public
*@param PARAMETER_0 : minimun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_1 : maximun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_2 : used in Crystal report - use activity (yes or no)
*@param PARAMETER_3 : used in Crystal report - use region (yes or no)
*@param PARAMETER_4 : used in Crystal report - use partner type (yes or no)
*@param PARAMETER_5 : used in Crystal report - use sales person (yes or no)
*@param PARAMETER_6 : Final delay for detail information of document
*@param PARAMETER_7 : used in Crystal report - show value (yes or no)
*@param PARAMETER_8 : used in Crystal report - due date type (0 = day or 1 = week)
*@param PARAMETER_9 : document gauge title
*@param PARAMETER_10 : position status of document
*@param PARAMETER_11 : for parameter Allocation
*@param PARAMETER_12 : for parameter Parcel
*@param PARAMETER_13 : for parameter Lateness
*@param PARAMETER_14 : minimum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PARAMETER_15 : maximum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PROCUSER_LANID : user language
*@param REPORT_NAME : crystal report name
*@param CALLING_PC_OBJECT_ID : crystal calling object id
*@param COMPANY_OWNER : crystal company owner
*/
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  report_names            varchar2(100);
  report_names_1          varchar2(100);
  report_names_2          varchar2(100);
  param_c_gauge_title     varchar2(30);
  param_pos_status        varchar2(30);
  param_doc_status        varchar2(30);
  param_dmt_date_start    date;
  param_dmt_date_end      date;
  param_final_delay       date;
  vpc_pas_ligne           dico_description.dit_descr%type;
  vpc_pas_famille         dico_description.dit_descr%type;
  vpc_pas_modele          dico_description.dit_descr%type;
  vpc_pas_groupe          dico_description.dit_descr%type;
  vpc_pas_activite        dico_description.dit_descr%type;
  vpc_pas_region          dico_description.dit_descr%type;
  vpc_pas_type_partenaire dico_description.dit_descr%type;
  vpc_pas_representant    dico_description.dit_descr%type;
  nDocDelayWeekstart      number;
begin
--Initialize the name of the report
  report_names             := substr(substr(report_name, instr(report_name, '\', -1) + 1), 1, length(substr(report_name, instr(report_name, '\', -1) + 1) ) - 4);
  report_names             := RPT_FUNCTIONS.GetStdReportName(report_names, CALLING_PC_OBJECT_ID);
  report_names_1           := substr(report_names, instr(report_names, '_') + 1, instr(report_names, '_', 1, 2) - instr(report_names, '_') - 1);
  report_names_2           := substr(report_names, instr(report_names, '_', -1, 2) + 1, instr(report_names, '_', -1) - instr(report_names, '_', -1, 2) - 1);

--
  begin
    if parameter_6 = '0' then
      param_final_delay  := to_date('30001231', 'YYYYMMDD');
    else
      param_final_delay  := to_date(parameter_6, 'YYYYMMDD');
    end if;
  exception
    when others then
      param_final_delay  := to_date('22001231', 'YYYYMMDD');
  end;

  begin
    if parameter_14 = '0' then
      param_dmt_date_start  := to_date('19800101', 'YYYYMMDD');
    else
      param_dmt_date_start  := to_date(parameter_14, 'YYYYMMDD');
    -- parameter_14  ************************************
    end if;
  exception
    when others then
      param_dmt_date_start  := to_date('19801231', 'YYYYMMDD');
  end;

  begin
    if parameter_15 = '0' then
      param_dmt_date_end  := to_date('22001231', 'YYYYMMDD');
    else
      param_dmt_date_end  := to_date(parameter_15, 'YYYYMMDD');
    -- parameter_15  ************************************
    end if;
  exception
    when others then
      param_dmt_date_end  := to_date('22001231', 'YYYYMMDD');
  end;

  if report_names in('DOC_CUST_ECHEANCIER_CUST_BATCH', 'DOC_CUST_ECHEANCIER_GOOD_BATCH') then
    case parameter_9
      when '0' then
        param_c_gauge_title  := '6,30';
      when '1' then
        param_c_gauge_title  := '6';
      when '2' then
        param_c_gauge_title  := '30';
    end case;
  elsif report_names in('DOC_SUPPL_ECHEANCIER_SUPPL_BATCH', 'DOC_SUPPL_ECHEANCIER_GOOD_BATCH') then
    case parameter_9
      when '0' then
        param_c_gauge_title  := '1,5';
      when '1' then
        param_c_gauge_title  := '1';
      when '2' then
        param_c_gauge_title  := '5';
    end case;
  end if;

  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id              := pcs.PC_I_LIB_SESSION.getuserlangid;
  vpc_pas_ligne            := pcs.pc_functions.translateword2('Pas de ligne produit', vpc_lang_id);
  vpc_pas_famille          := pcs.pc_functions.translateword2('Pas de famille produit', vpc_lang_id);
  vpc_pas_modele           := pcs.pc_functions.translateword2('Pas de modèle produit', vpc_lang_id);
  vpc_pas_groupe           := pcs.pc_functions.translateword2('Pas de groupe produit', vpc_lang_id);
  vpc_pas_activite         := pcs.pc_functions.translateword2('Pas activité', vpc_lang_id);
  vpc_pas_region           := pcs.pc_functions.translateword2('Pas de région', vpc_lang_id);
  vpc_pas_type_partenaire  := pcs.pc_functions.translateword2('Pas de type de partenaire', vpc_lang_id);

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , to_char(sysdate, 'YYYYIW') year_week
         , to_char(sysdate, 'YYYYMM') year_month
         , dmt.dmt_number
         , dmt.dmt_date_document
         , dmt.dmt_rate_euro
         , dmt.dmt_base_price
         , dmt.dmt_rate_of_exchange
         , gas.c_gauge_title
         , pos.c_doc_pos_status
         , pos.gco_good_id
         , pos.pos_number
         , gco_functions.getdescription2(goo.gco_good_id, vpc_lang_id, 1, '01') des_short_description
         , gco_functions.getdescription2(goo.gco_good_id, vpc_lang_id, 2, '01') des_long_description
         , pos.pos_net_unit_value
         , pos.pos_net_value_excl
         , pos.pos_final_quantity
         , pos.dic_unit_of_measure_id
         , pos.pos_net_value_excl_b
         , pos.pos_balance_quantity
         , goo.goo_major_reference
         , goo.goo_secondary_reference
         , gco_functions.getcostpricewithmanagementmode(goo.gco_good_id) cost_price
         , goo.goo_number_of_decimal
         , goo.dic_good_line_id
         , nvl( (select dit_descr
                   from dico_description dit
                  where dit.dit_table = 'DIC_GOOD_LINE'
                    and dit_code = goo.dic_good_line_id
                    and dit.pc_lang_id = vpc_lang_id), vpc_pas_ligne) dic_good_line_descr
         ,
           --1 differentiate  lines which are null or not in crystal
           goo.dic_good_family_id
         , nvl( (select dit_descr
                   from dico_description dit
                  where dit.dit_table = 'DIC_GOOD_FAMILY'
                    and dit_code = goo.dic_good_family_id
                    and dit.pc_lang_id = vpc_lang_id), vpc_pas_famille) dic_good_family_descr
         ,
           --1 differentiate between families which are null or not in crystal
           goo.dic_good_model_id
         , nvl( (select dit_descr
                   from dico_description dit
                  where dit.dit_table = 'DIC_GOOD_MODEL'
                    and dit_code = goo.dic_good_model_id
                    and dit.pc_lang_id = vpc_lang_id), vpc_pas_modele) dic_good_model_descr
         ,
           --1 differentiate between models which are null or not in crystal
           goo.dic_good_group_id
         , nvl( (select dit_descr
                   from dico_description dit
                  where dit.dit_table = 'DIC_GOOD_GROUP'
                    and dit_code = goo.dic_good_group_id
                    and dit.pc_lang_id = vpc_lang_id), vpc_pas_groupe) dic_good_group_descr
         ,
           --1 differentiate between groups which are null or not in crystal
           pde.pde_final_delay
         , to_char(pde.pde_final_delay, 'YYYYIW') pde_year_week
         , to_char(pde.pde_final_delay, 'YYYYMM') pde_year_month
         , pde.pde_final_quantity
         , pde.pde_balance_quantity
         , pde.pde_characterization_value_1
         , pde.pde_characterization_value_2
         , pde.pde_characterization_value_3
         , pde.pde_characterization_value_4
         , pde.pde_characterization_value_5
         , decode(report_names, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_netw_qty, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_netw_qty, fnn.fan_netw_qty)
                                                                                                                                                   fan_netw_qty
         , decode(report_names, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_stk_qty, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_stk_qty, fnn.fan_stk_qty)
                                                                                                                                                    fan_stk_qty
         , per.per_name
         , (select adr.add_address1 || '  ' || adr.add_format
              from pac_address adr
             where adr.pac_person_id = dmt.pac_third_id
               and adr.add_principal = 1) inv_address
         , per.per_key1
         , thi.pac_third_id
         , thi.dic_third_activity_id
         , decode(thi.dic_third_activity_id, null, vpc_pas_activite, (select thi.dic_third_activity_id || ' - ' || act.act_descr
                                                                        from dic_third_activity act
                                                                       where act.dic_third_activity_id = thi.dic_third_activity_id) ) act_descr
         , decode(thi.dic_third_area_id, null, vpc_pas_region, (select thi.dic_third_area_id || ' - ' || are.are_descr
                                                                  from dic_third_area are
                                                                 where are.dic_third_area_id = thi.dic_third_area_id) ) are_descr
         , decode(report_names_1, 'CUST', cus.dic_type_partner_id, 'SUPPL', sup.dic_type_partner_f_id) dic_type_partner_id
         , decode(report_names_1
                , 'CUST', decode(cus.dic_type_partner_id
                               , null, vpc_pas_type_partenaire
                               , (select (select dit.dit_descr
                                            from dico_description dit
                                           where dit.dit_table = 'DIC_TYPE_PARTNER'
                                             and dit.pc_lang_id = vpc_lang_id
                                             and dit.dit_code = dtp.dic_type_partner_id)
                                    from dic_type_partner dtp
                                   where dtp.dic_type_partner_id = cus.dic_type_partner_id)
                                )
                , 'SUPPL', decode(sup.dic_type_partner_f_id
                                , null, vpc_pas_type_partenaire
                                , (select (select dit.dit_descr
                                             from dico_description dit
                                            where dit.dit_table = 'DIC_TYPE_PARTNER'
                                              and dit.pc_lang_id = vpc_lang_id
                                              and dit.dit_code = dtp.dic_type_partner_f_id)
                                     from dic_type_partner_f dtp
                                    where dtp.dic_type_partner_f_id = sup.dic_type_partner_f_id)
                                 )
                 ) dic_descr
         , decode(dmt.pac_representative_id, null, vpc_pas_representant, (select rep.rep_descr
                                                                            from pac_representative rep
                                                                           where rep.pac_representative_id = dmt.pac_representative_id) ) rep_descr
         , (select max(cre.cre_amount_limit)
              from pac_credit_limit cre
                 , acs_financial_currency acs
             where cre.pac_supplier_partner_id || cre.pac_custom_partner_id = dmt.pac_third_id
               and cre.acs_financial_currency_id = dmt.acs_financial_currency_id) cre_amount_limit
         , (select max(curr.currency)
              from acs_financial_currency acs
                 , pcs.pc_curr curr
             where dmt.acs_financial_currency_id = acs.acs_financial_currency_id
               and acs.pc_curr_id = curr.pc_curr_id) currency
         , vgq.spo_available_quantity
      from acs_financial_currency fin
         , doc_document dmt
         , doc_gauge_structured gas
         , doc_position pos
         , doc_position_detail pde
         , gco_good goo
         , pac_person per
         , pac_third thi
         , pcs.pc_curr cur
         , pac_representative pac
         , pac_custom_partner cus
         , pac_supplier_partner sup
         , fal_network_need fnn
         , fal_network_supply fns
         , v_stm_gco_good_qty vgq
     where dmt.acs_financial_currency_id = fin.acs_financial_currency_id
       and fin.pc_curr_id = cur.pc_curr_id
       and dmt.doc_gauge_id = gas.doc_gauge_id
       and dmt.doc_document_id = pos.doc_document_id
       and pos.doc_position_id = pde.doc_position_id
       and pos.gco_good_id = goo.gco_good_id
       and pos.pac_representative_id = pac.pac_representative_id(+)
       and pde.doc_position_detail_id = fnn.doc_position_detail_id(+)
       and pde.doc_position_detail_id = fns.doc_position_detail_id(+)
       and goo.gco_good_id = vgq.gco_good_id(+)
       and dmt.pac_third_id = thi.pac_third_id
       and thi.pac_third_id = per.pac_person_id
       and per.pac_person_id = cus.pac_custom_partner_id(+)
       and per.pac_person_id = sup.pac_supplier_partner_id(+)
       and pos.c_gauge_type_pos in('1', '7', '8', '91', '10')
       and rpt_functions.check_cust_suppl(report_names_1, per.pac_person_id) = 1
       --According to report name to define customer or supplier
       and rpt_functions.check_record_in_range(report_names_2, goo.goo_major_reference, per.per_key1, parameter_0, parameter_1) = 1
       and pos.c_doc_pos_status in('01', '02', '03', '04')
       and dmt.dmt_date_document >= param_dmt_date_start
       and dmt.dmt_date_document <= param_dmt_date_end
       and instr(',' || param_c_gauge_title || ',', ',' || gas.c_gauge_title || ',') > 0
       and c_document_status in('01', '02', '03')
       --{@TEST_RETARD} Lateness
       and rpt_functions.order_echeancier_batch(report_names, param_final_delay, pde.pde_final_delay, gas.c_gauge_title) = 1;
end rpt_doc_due_date_master;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAUGE_FLOW" (AREFCURSOR in out Crystal_Cursor_Types.DUALCURSORTYP, PROCUSER_LANID in PCS.PC_LANG.LANID%type)
is
  VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;
begin
  PCS.PC_I_LIB_SESSION.SETLANID(PROCUSER_LANID);
  VPC_LANG_ID  := pcs.PC_I_LIB_SESSION.GetUserLangId;

  open AREFCURSOR for
    select 'DISCHARGE' code
         , dgf.gaf_describe
         , dgf.gaf_version
         , c_gaf_flow_status
         , gaf_comment
         , gad.gad_seq
         , des.gad_describe src
         , gad.gad_seq seq_dst
         , des_dst.gad_describe dst
         , gar_quantity_exceed
         , gar_good_changing
         , gar_partner_changing
         , gar_extourne_mvt
         , gar_balance_parent
         , gar_transfert_price
         , gar_transfert_quantity
         , gar_init_price_mvt
         , gar_init_qty_mvt
         , gar_part_discharge
         , gar_transfert_stock
         , gar_transfert_descr
         , gar_transfert_remise_taxe
         , gar_init_cost_price
         , gar_transfer_mvmt_swap
         , gar_invert_amount
         , gar_transfert_record
         , gar_transfert_represent
         , gar_transfert_free_data
         , gar_transfert_price_mvt
         , gar_transfert_precious_mat
         , null gac_transfert_price
         , null gac_transfert_quantity
         , null gac_init_price_mvt
         , null gac_init_qty_mvt
         , null gac_bond
         , null gac_part_copy
         , null gac_transfert_stock
         , null gac_transfert_descr
         , null gac_transfert_remise_taxe
         , null gac_transfert_record
         , null gac_transfert_represent
         , null gac_transfert_free_data
         , null gac_transfert_price_mvt
         , null gac_init_cost_price
         , null gac_transfert_charact
         , null gac_transfert_precious_mat
         , gau.doc_gauge_id gauge_src_id
         , gau_dst.doc_gauge_id gauge_dst_id
         , gar.doc_gauge_receipt_id
         , gad.doc_gauge_flow_docum_id flow_docum_src_id
         , dgf.doc_gauge_flow_id
      from doc_gauge gau
         , doc_gauge gau_dst
         , doc_gauge_receipt gar
         , doc_gauge_flow_docum gad
         , doc_gauge_flow dgf
         , doc_gauge_description des
         , doc_gauge_description des_dst
     where gad.doc_gauge_id = gau.doc_gauge_id
       and gar.doc_gauge_flow_docum_id = gad.doc_gauge_flow_docum_id
       and gau_dst.doc_gauge_id = gar.doc_doc_gauge_id
       and gad.doc_gauge_flow_id = dgf.doc_gauge_flow_id
       and gau.doc_gauge_id = des.doc_gauge_id(+)
       and des.pc_lang_id(+) = pcs.pc_public.getuserlangid
       and gau_dst.doc_gauge_id = des_dst.doc_gauge_id(+)
       and des_dst.pc_lang_id(+) = VPC_LANG_ID
    union all
    select 'COPY' code
         , dgf.gaf_describe
         , gaf_version
         , c_gaf_flow_status
         , gaf_comment
         , gad.gad_seq
         , des.gad_describe src
         , gad.gad_seq seq_dst
         , des_dst.gad_describe dst
         , null gar_quantity_exceed
         , null gar_good_changing
         , null gar_partner_changing
         , null gar_extourne_mvt
         , null gar_balance_parent
         , null gar_transfert_price
         , null gar_transfert_quantity
         , null gar_init_price_mvt
         , null gar_init_qty_mvt
         , null gar_part_discharge
         , null gar_transfert_stock
         , null gar_transfert_descr
         , null gar_transfert_remise_taxe
         , null gar_init_cost_price
         , null gar_transfer_mvmt_swap
         , null gar_invert_amount
         , null gar_transfert_record
         , null gar_transfert_represent
         , null gar_transfert_free_data
         , null gar_transfert_price_mvt
         , null gar_transfert_precious_mat
         , gac_transfert_price
         , gac_transfert_quantity
         , gac_init_price_mvt
         , gac_init_qty_mvt
         , gac_bond
         , gac_part_copy
         , gac_transfert_stock
         , gac_transfert_descr
         , gac_transfert_remise_taxe
         , gac_transfert_record
         , gac_transfert_represent
         , gac_transfert_free_data
         , gac_transfert_price_mvt
         , gac_init_cost_price
         , gac_transfert_charact
         , gac_transfert_precious_mat
         , gau.doc_gauge_id
         , gau_dst.doc_gauge_id
         , gar.doc_gauge_copy_id
         , gad.doc_gauge_flow_docum_id
         , dgf.doc_gauge_flow_id
      from doc_gauge gau
         , doc_gauge gau_dst
         , doc_gauge_copy gar
         , doc_gauge_flow_docum gad
         , doc_gauge_flow dgf
         , doc_gauge_description des
         , doc_gauge_description des_dst
     where gad.doc_gauge_id = gau.doc_gauge_id
       and gar.doc_gauge_flow_docum_id = gad.doc_gauge_flow_docum_id
       and gau_dst.doc_gauge_id = gar.doc_doc_gauge_id
       and gad.doc_gauge_flow_id = dgf.doc_gauge_flow_id
       and gau.doc_gauge_id = des.doc_gauge_id(+)
       and des.pc_lang_id(+) = pcs.pc_public.getuserlangid
       and gau_dst.doc_gauge_id = des_dst.doc_gauge_id(+)
       and des_dst.pc_lang_id(+) = VPC_LANG_ID;
end RPT_DOC_GAUGE_FLOW;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_FLOW_DATA" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
* Description
*    STORED PROCEDURE USED FOR THE REPORT DOC_GAUGE_FLOW_DATA

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JAN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT 'DISCHARGE' code, dgf.gaf_describe, dgf.gaf_version,
             c_gaf_flow_status, gaf_comment, gad.gad_seq,
             des.gad_describe src, gad.gad_seq seq_dst,
             des_dst.gad_describe dst, gar_quantity_exceed,
             gar_good_changing, gar_partner_changing, gar_extourne_mvt,
             gar_balance_parent, gar_transfert_price, gar_transfert_quantity,
             gar_init_price_mvt, gar_init_qty_mvt, gar_part_discharge,
             gar_transfert_stock, gar_transfert_descr,
             gar_transfert_remise_taxe, gar_init_cost_price,
             gar_transfer_mvmt_swap, gar_invert_amount, gar_transfert_record,
             gar_transfert_represent, gar_transfert_free_data,
             gar_transfert_price_mvt, gar_transfert_precious_mat,
             NULL gac_transfert_price, NULL gac_transfert_quantity,
             NULL gac_init_price_mvt, NULL gac_init_qty_mvt, NULL gac_bond,
             NULL gac_part_copy, NULL gac_transfert_stock,
             NULL gac_transfert_descr, NULL gac_transfert_remise_taxe,
             NULL gac_transfert_record, NULL gac_transfert_represent,
             NULL gac_transfert_free_data, NULL gac_transfert_price_mvt,
             NULL gac_init_cost_price, NULL gac_transfert_charact,
             NULL gac_transfert_precious_mat, gau.doc_gauge_id gauge_src_id,
             gau_dst.doc_gauge_id gauge_dst_id, gar.doc_gauge_receipt_id,
             gad.doc_gauge_flow_docum_id flow_docum_src_id,
             dgf.doc_gauge_flow_id
        FROM doc_gauge gau,
             doc_gauge gau_dst,
             doc_gauge_receipt gar,
             doc_gauge_flow_docum gad,
             doc_gauge_flow dgf,
             doc_gauge_description des,
             doc_gauge_description des_dst
       WHERE gad.doc_gauge_id = gau.doc_gauge_id
         AND gar.doc_gauge_flow_docum_id = gad.doc_gauge_flow_docum_id
         AND gau_dst.doc_gauge_id = gar.doc_doc_gauge_id
         AND gad.doc_gauge_flow_id = dgf.doc_gauge_flow_id
         AND gau.doc_gauge_id = des.doc_gauge_id(+)
         AND des.pc_lang_id(+) = pcs.pc_public.getuserlangid
         AND gau_dst.doc_gauge_id = des_dst.doc_gauge_id(+)
         AND des_dst.pc_lang_id(+) = vpc_lang_id
      UNION ALL
      SELECT 'COPY' code, dgf.gaf_describe, gaf_version, c_gaf_flow_status,
             gaf_comment, gad.gad_seq, des.gad_describe src,
             gad.gad_seq seq_dst, des_dst.gad_describe dst,
             NULL gar_quantity_exceed, NULL gar_good_changing,
             NULL gar_partner_changing, NULL gar_extourne_mvt,
             NULL gar_balance_parent, NULL gar_transfert_price,
             NULL gar_transfert_quantity, NULL gar_init_price_mvt,
             NULL gar_init_qty_mvt, NULL gar_part_discharge,
             NULL gar_transfert_stock, NULL gar_transfert_descr,
             NULL gar_transfert_remise_taxe, NULL gar_init_cost_price,
             NULL gar_transfer_mvmt_swap, NULL gar_invert_amount,
             NULL gar_transfert_record, NULL gar_transfert_represent,
             NULL gar_transfert_free_data, NULL gar_transfert_price_mvt,
             NULL gar_transfert_precious_mat, gac_transfert_price,
             gac_transfert_quantity, gac_init_price_mvt, gac_init_qty_mvt,
             gac_bond, gac_part_copy, gac_transfert_stock,
             gac_transfert_descr, gac_transfert_remise_taxe,
             gac_transfert_record, gac_transfert_represent,
             gac_transfert_free_data, gac_transfert_price_mvt,
             gac_init_cost_price, gac_transfert_charact,
             gac_transfert_precious_mat, gau.doc_gauge_id,
             gau_dst.doc_gauge_id, gar.doc_gauge_copy_id,
             gad.doc_gauge_flow_docum_id, dgf.doc_gauge_flow_id
        FROM doc_gauge gau,
             doc_gauge gau_dst,
             doc_gauge_copy gar,
             doc_gauge_flow_docum gad,
             doc_gauge_flow dgf,
             doc_gauge_description des,
             doc_gauge_description des_dst
       WHERE gad.doc_gauge_id = gau.doc_gauge_id
         AND gar.doc_gauge_flow_docum_id = gad.doc_gauge_flow_docum_id
         AND gau_dst.doc_gauge_id = gar.doc_doc_gauge_id
         AND gad.doc_gauge_flow_id = dgf.doc_gauge_flow_id
         AND gau.doc_gauge_id = des.doc_gauge_id(+)
         AND des.pc_lang_id(+) = pcs.pc_public.getuserlangid
         AND gau_dst.doc_gauge_id = des_dst.doc_gauge_id(+)
         AND des_dst.pc_lang_id(+) = vpc_lang_id;
END rpt_doc_gau_flow_data;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_FORM_SIM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_SIMPLE

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT v_dg.doc_gauge_id, v_dg.gau_describe,
             v_dg.c_gauge_status_wording, v_dg.c_admin_domain,
             v_dg.c_admin_domain_wording, v_dg.c_gauge_type,
             v_dg.c_gauge_type_wording, v_dg.dic_gauge_categ_id,
             com_dic_functions.getdicodescr
                                ('DIC_GAUGE_CATEG',
                                 v_dg.dic_gauge_categ_id,
                                 vpc_lang_id
                                ) gauge_categ_wording,
             v_dg.dic_gauge_type_doc_id,
             com_dic_functions.getdicodescr
                          ('DIC_GAUGE_TYPE_DOC',
                           v_dg.dic_gauge_type_doc_id,
                           vpc_lang_id
                          ) gauge_type_doc_wording,
             v_dg.gau_numbering, v_dg.gau_ref_partner, v_dg.gau_traveller,
             v_dg.gau_dossier, v_dg.gau_expiry, v_dg.gau_edifact,
             v_dg.gau_expiry_nbr, v_dg.per_name, v_dg.gan_describe,
             v_dg.titel_text, v_dg.gau_edit_name, v_dg.gau_edit_name1,
             v_dg.gau_edit_name2, v_dg.gau_edit_name3, v_dg.gau_edit_name4,
             v_dg.gau_edit_name5, v_dg.gau_edit_text, v_dg.gau_edit_text1,
             v_dg.gau_edit_text2, v_dg.gau_edit_text3, v_dg.gau_edit_text4,
             v_dg.gau_edit_text5, v_dg.c_gauge_form_type,
             v_dg.gauge_form_type1, v_dg.gauge_form_type2,
             v_dg.gauge_form_type3, v_dg.gauge_form_type4,
             v_dg.gauge_form_type5, v_dg.gau_edit_bool1, v_dg.gau_edit_bool2,
             v_dg.gau_edit_bool3, v_dg.gau_edit_bool4, v_dg.gau_edit_bool5,
             v_dg.a_datecre, v_dg.a_datemod, dgd.gad_describe
        FROM v_doc_gauge v_dg, doc_gauge_description dgd
       WHERE v_dg.doc_gauge_id = dgd.doc_gauge_id(+)
         AND v_dg.pc_lang_id = vpc_lang_id
         AND dgd.pc_lang_id(+) = vpc_lang_id;
END rpt_doc_gau_form_sim;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_FORM_STR" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_STRUCTURED

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT dgd.gad_describe, v_dg.doc_gauge_id, v_dg.gau_describe,
             v_dg.c_gauge_status_wording, v_dg.c_admin_domain,
             v_dg.c_admin_domain_wording, v_dg.c_gauge_type,
             v_dg.c_gauge_type_wording, v_dg.dic_gauge_categ_id,
             com_dic_functions.getdicodescr
                                ('DIC_GAUGE_CATEG',
                                 v_dg.dic_gauge_categ_id,
                                 vpc_lang_id
                                ) gauge_categ_wording,
             v_dg.dic_gauge_type_doc_id,
             com_dic_functions.getdicodescr
                          ('DIC_GAUGE_TYPE_DOC',
                           v_dg.dic_gauge_type_doc_id,
                           vpc_lang_id
                          ) gauge_type_doc_wording,
             v_dg.gau_numbering, v_dg.gau_ref_partner, v_dg.gau_traveller,
             v_dg.gau_dossier, v_dg.gau_expiry, v_dg.gau_edifact,
             v_dg.gau_expiry_nbr, v_dg.per_name, v_dg.gan_describe,
             v_dg.pc__pc_appltxt_id, v_dg.titel_text, v_dg.gau_edit_name,
             v_dg.gau_edit_name1, v_dg.gau_edit_name2, v_dg.gau_edit_name3,
             v_dg.gau_edit_name4, v_dg.gau_edit_name5, v_dg.gau_edit_name6,
             v_dg.gau_edit_name7, v_dg.gau_edit_name8, v_dg.gau_edit_name9,
             v_dg.gau_edit_name10, v_dg.gau_edit_text, v_dg.gau_edit_text1,
             v_dg.gau_edit_text2, v_dg.gau_edit_text3, v_dg.gau_edit_text4,
             v_dg.gau_edit_text5, v_dg.gau_edit_text6, v_dg.gau_edit_text7,
             v_dg.gau_edit_text8, v_dg.gau_edit_text9, v_dg.gau_edit_text10,
             v_dg.c_gauge_form_type, v_dg.gauge_form_type1,
             v_dg.gauge_form_type2, v_dg.gauge_form_type3,
             v_dg.gauge_form_type4, v_dg.gauge_form_type5,
             v_dg.gauge_form_type6, v_dg.gauge_form_type7,
             v_dg.gauge_form_type8, v_dg.gauge_form_type9,
             v_dg.gauge_form_type10, v_dg.gau_edit_bool1,
             v_dg.gau_edit_bool2, v_dg.gau_edit_bool3, v_dg.gau_edit_bool4,
             v_dg.gau_edit_bool5, v_dg.gau_edit_bool6, v_dg.gau_edit_bool7,
             v_dg.gau_edit_bool8, v_dg.gau_edit_bool9, v_dg.gau_edit_bool10,
             v_dg.gau_confirm_cancel, v_dg.c_gauge_record_verify,
             v_dg.c_gau_auto_create_record, v_dg.gau_show_forms_on_insert,
             v_dg.gau_show_forms_on_update, v_dg.dic_gauge_group_id,
             v_dg.gau_incoterms, v_dg.gau_collate_printed_reports,
             v_dg.c_gauge_type_comment_visible, v_dg.gau_always_show_comment,
             v_dg.gau_cancel_status, v_dg.gau_show_forms_on_confirm,
             v_dg.gau_asa_record, v_dg.gau_confirm_status, v_dg.gau_history,
             v_dg.a_datecre, v_dg.a_datemod, v_dgs.gas_differed_confirmation,
             v_dgs.gas_auth_balance_return, v_dgs.gas_auth_balance_no_return,
             pcs.pc_functions.getappltxtlabel
                                             (v_dg.pc__pc_appltxt_id,
                                              vpc_lang_id
                                             ) appltxt
        FROM doc_gauge_description dgd,
             v_doc_gauge v_dg,
             v_doc_gauge_structured v_dgs
       WHERE v_dg.doc_gauge_id = dgd.doc_gauge_id(+)
         AND v_dg.doc_gauge_id = v_dgs.doc_gauge_id(+)
         AND v_dg.pc_lang_id = vpc_lang_id
         AND dgd.pc_lang_id = vpc_lang_id
         AND v_dgs.pc_lang_id = vpc_lang_id;
END rpt_doc_gau_form_str;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_FT_SUB" (
   arefcursor        IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid    IN       pcs.pc_lang.lanid%TYPE,
   pm_doc_gauge_id   IN       VARCHAR2
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_STRUCTURED, GAU_FORM_SIMPLE

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM pm_doc_gauge_id     DOC_GAUGE_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT '1' group_string, --used for display of header in subreport
             dgs.doc_gauge_signatory_id, dgs.gag_name, dgs.gag_function,
             dgs1.doc_gauge_signatory_id, dgs1.gag_name, dgs1.gag_function,
             v_pap.aph_code, v_pap.apt_label
        FROM doc_gauge dga,
             doc_gauge_signatory dgs,
             doc_gauge_signatory dgs1,
             pcs.v_pc_appltxt v_pap
       WHERE dga.doc_gauge_signatory_id = dgs.doc_gauge_signatory_id(+)
         AND dga.doc_doc_gauge_signatory_id = dgs1.doc_gauge_signatory_id(+)
         AND dga.pc_3_pc_appltxt_id = v_pap.pc_appltxt_id(+)
         AND v_pap.pc_lang_id = vpc_lang_id
         AND dga.doc_gauge_id = TO_NUMBER (pm_doc_gauge_id);
END rpt_doc_gau_ft_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_HEADER_SUB" (
   arefcursor        IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid    IN       pcs.pc_lang.lanid%TYPE,
   pm_doc_gauge_id   IN       VARCHAR2
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_STRUCTURED, GAU_FORM_SIMPLE

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM pm_doc_gauge_id     DOC_GAUGE_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT '1' group_string, --used for display of header in subreport
             v_dg.header_text, v_dg.doc_text, v_dg.dic_address_type_id,
             v_dg.dic_add_typ_wording, v_dg.dic_address_type1_id,
             v_dg.dic_add_typ1_wording, v_dg.dic_address_type2_id,
             v_dg.dic_add_typ2_wording
        FROM v_doc_gauge v_dg
       WHERE v_dg.pc_lang_id = vpc_lang_id
         AND v_dg.doc_gauge_id = TO_NUMBER (pm_doc_gauge_id);
END rpt_doc_gau_header_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_POS_SUB" (
   arefcursor        IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid    IN       pcs.pc_lang.lanid%TYPE,
   pm_doc_gauge_id   IN       VARCHAR2
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_STRUCTURED

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM pm_doc_gauge_id     DOC_GAUGE_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT '1' group_string, --used for display of header in subreport
             ddgp.gap_designation, dgp.c_gauge_type_pos,
             dgp.c_gauge_init_price_pos, dgp.gap_value,
             dgp.gap_bloc_access_value, dgp.gap_delay,
             dgp.c_gauge_show_delay, dgp.c_round_application,
             dgp.gap_pos_delay, dgp.gap_pcent, dgp.gap_txt, dgp.gap_default,
             dgp.gap_stock_access, dgp.gap_mvt_utility, dgp.gap_trans_access,
             dgp.gap_init_stock_place, dgp.gap_direct_remis,
             dgp.gap_designation, dgp.gap_delay_copy_prev_pos,
             dgp.gap_value_quantity, dgp.gap_include_tax_tariff,
             dgp.dic_tariff_id, dgp.gap_forced_tariff, dgp.gap_stock_mvt,
             dgp.dic_delay_update_type_id, dgp.stm_stock_id,
             dgp.stm_location_id, dgp.doc_doc_gauge_position_id, dgp.gap_mrp,
             dgp.gap_sqm_show_dflt, dgp.c_sqm_eval_type,
             dgp.gap_transfert_proprietor, dgp.gap_asa_task_imput,
             dgp.dic_type_movement_id, ggd.goo_major_reference,
             ggd.goo_secondary_reference, pap.aph_code, slo.loc_description,
             smk.c_movement_code, smk.mok_abbreviation, sst.sto_description,
             v_pde.gcdtext1, v_pde1.gcdtext1,
             pcs.pc_functions.getappltxtlabel (dgp.pc_appltxt_id,
                                               vpc_lang_id
                                              ) appltxt
        FROM doc_gauge_position ddgp,
             doc_gauge_position dgp,
             gco_good ggd,
             pcs.pc_appltxt pap,
             stm_location slo,
             stm_movement_kind smk,
             stm_stock sst,
             pcs.v_pc_descodes v_pde,
             pcs.v_pc_descodes v_pde1
       WHERE dgp.c_gauge_type_pos = v_pde.gclcode
         AND dgp.c_gauge_init_price_pos = v_pde1.gclcode
         AND dgp.stm_movement_kind_id = smk.stm_movement_kind_id(+)
         AND dgp.gco_good_id = ggd.gco_good_id(+)
         AND dgp.pc_appltxt_id = pap.pc_appltxt_id(+)
         AND dgp.stm_stock_id = sst.stm_stock_id(+)
         AND dgp.stm_location_id = slo.stm_location_id(+)
         AND dgp.doc_doc_gauge_position_id = ddgp.doc_gauge_position_id(+)
         AND v_pde.pc_lang_id = vpc_lang_id
         AND v_pde1.pc_lang_id = vpc_lang_id
         AND v_pde.gcgname = 'C_GAUGE_TYPE_POS'
         AND v_pde1.gcgname = 'C_GAUGE_INIT_PRICE_POS'
         AND dgp.doc_gauge_id = TO_NUMBER (pm_doc_gauge_id);
END rpt_doc_gau_pos_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GAU_STR_SUB" (
   arefcursor        IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid    IN       pcs.pc_lang.lanid%TYPE,
   pm_doc_gauge_id   IN       VARCHAR2
)
IS
/**
*    STORED PROCEDURE USED FOR THE REPORT GAU_FORM_STRUCTURED

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR AWU 1 JUN 2009
* @LASTUPDATE 20 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM pm_doc_gauge_id     DOC_GAUGE_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT '1' group_string, --used for display of header in subreport
             v_afa.acc_number, v_afa.des_description_summary,
             v_dg.c_direction_number, v_dg.gau_use_managed_data,
             v_dg.dic_type_doc_custom_id, v_dgs.c_gauge_title,
             v_dgs.gcdtext1, v_dgs.dic_type_movement_id,
             v_dgs.dic_description, v_dgs.c_round_type,
             v_dgs.c_round_type_wording, v_dgs.gas_round_amount,
             v_dgs.gas_position__numbering, v_dgs.gas_modify_numbering,
             v_dgs.gas_increment, v_dgs.gas_first_no,
             v_dgs.gas_increment_nbr, v_dgs.gas_balance_status,
             v_dgs.gas_pcent, v_dgs.gas_financial_charge,
             v_dgs.gas_total_doc, v_dgs.acs_fin_acc_s_payment_id,
             v_dgs.cat_description, v_dgs.gas_financial_ref,
             v_dgs.acs_financial_account_id, v_dgs.gas_good_third,
             v_dgs.gas_weight, v_dgs.gas_correlation, v_dgs.gas_substitute,
             v_dgs.gas_characterization, v_dgs.gas_pay_condition,
             v_dgs.gas_vat, v_dgs.gas_taxe, v_dgs.c_type_edi,
             v_dgs.c_controle_date_docum,
             v_dgs.c_controle_date_docum_wording, v_dgs.gas_anal_charge,
             v_dgs.gas_sending_condition, v_dgs.gas_change_acc_s_payment,
             v_dgs.gas_visible_count, v_dgs.c_credit_limit,
             v_dgs.gas_commission_management, v_dgs.gas_calculate_commission,
             v_dgs.gas_cash_register, v_dgs.gas_form_cash_register,
             v_dgs.gas_vat_det_account_visible, v_dgs.gas_init_free_data,
             v_dgs.gas_auto_attribution, v_dgs.pac_payment_condition_wording,
             v_dgs.c_bvr_generation_method, v_dgs.c_start_control_date,
             v_dgs.c_start_control_date_wording, v_dgs.c_doc_pre_entry,
             v_dgs.c_doc_pre_entry_third, v_dgs.gas_calcul_credit_limit,
             v_dgs.gas_credit_limit_status_01,
             v_dgs.gas_credit_limit_status_02,
             v_dgs.gas_credit_limit_status_03,
             v_dgs.gas_credit_limit_status_04, v_dgs.cat_pmt_description,
             v_dgs.gas_unit_price_decimal, v_dgs.gas_pos_qty_decimal,
             v_dgs.gas_all_characterization, v_dgs.gas_cpn_account_modify,
             v_dgs.gas_auto_mrp, v_dgs.c_doc_creditlimit_mode,
             v_dgs.gas_weighing_mgm, v_dgs.gas_weight_mat,
             v_dgs.gas_use_partner_date, v_dgs.gas_cost, v_dgs.gas_discount,
             v_dgs.gas_charge, v_dgs.gas_cash_multiple_transaction,
             v_dgs.c_pic_forecast_control, v_dgs.gas_previous_periods_nb,
             v_dgs.gas_following_periods_nb, v_dgs.gas_multisourcing_mgm
        FROM v_doc_gauge v_dg,
             v_doc_gauge_structured v_dgs,
             v_acs_financial_account v_afa,
             v_acs_division_account v_ada,
             acs_description ade
       WHERE v_dg.doc_gauge_id = v_dgs.doc_gauge_id
         AND v_dgs.pc_lang_id = v_afa.pc_lang_id(+)
         AND v_dgs.acs_financial_account_id = v_afa.acs_financial_account_id(+)
         AND v_dgs.pc_lang_id = v_ada.pc_lang_id(+)
         AND v_dgs.acs_division_account_id = v_ada.acs_division_account_id(+)
         AND v_dgs.pc_lang_id = ade.pc_lang_id(+)
         AND v_dgs.acs_payment_method_id = ade.acs_payment_method_id(+)
         AND v_dgs.pc_lang_id = vpc_lang_id
         AND v_dg.pc_lang_id = vpc_lang_id
         AND v_dg.doc_gauge_id = TO_NUMBER (pm_doc_gauge_id);
END rpt_doc_gau_str_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_GLOB_GOOD_BATCH" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_6    in     varchar2
, parameter_7    in     varchar2
, parameter_9    in     varchar2
, parameter_14   in     varchar2
, parameter_15   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
*Description
        Used for report DOC_GLOB_ECHEANCIER_GOOD_BATCH

*@created
*@lastUpdate  sma 30.10.2013
*@public
*/
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , DDO.C_DOCUMENT_STATUS
         , DGA.C_GAUGE_TITLE
         , DPO.C_GAUGE_TYPE_POS
         , DPO.GCO_GOOD_ID P_GCO_GOOD_ID
         , DPD.PDE_FINAL_DELAY
         , DPD.PDE_BALANCE_QUANTITY
         , GGO.GCO_GOOD_ID G_GCO_GOOD_ID
         , GGO.DIC_GOOD_LINE_ID
         , GGO.DIC_GOOD_FAMILY_ID
         , GGO.DIC_GOOD_MODEL_ID
         , GGO.DIC_GOOD_GROUP_ID
         , GCO_FUNCTIONS.GetDescription2(GGO.GCO_GOOD_ID, vpc_lang_id, 1, '01') DES_SHORT_DESCRIPTION
         , nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION DIT
                  where DIT.DIT_TABLE = 'DIC_GOOD_LINE'
                    and DIT_CODE = GGO.DIC_GOOD_LINE_ID
                    and DIT.PC_LANG_Id = 3)
             , PCS.PC_FUNCTIONS.translateword2('Pas de ligne produit', vpc_lang_id)
              ) DIC_GOOD_LINE_DESCR
         ,
           --used to differentiate between lines which are null or not in crystal
           nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION DIT
                  where DIT.DIT_TABLE = 'DIC_GOOD_FAMILY'
                    and DIT_CODE = GGO.DIC_GOOD_FAMILY_ID
                    and DIT.PC_LANG_ID = 3)
             , PCS.PC_FUNCTIONS.translateword2('Pas de famille produit', vpc_lang_id)
              ) DIC_GOOD_FAMILY_DESCR
         ,
           --used to differentiate between families which are null or not in crystal
           nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION DIT
                  where DIT.DIT_TABLE = 'DIC_GOOD_MODEL'
                    and DIT_CODE = GGO.DIC_GOOD_MODEL_ID
                    and DIT.PC_LANG_Id = 3)
             , PCS.PC_FUNCTIONS.translateword2('Pas de modèle produit', vpc_lang_id)
              ) DIC_GOOD_MODEL_DESCR
         ,
           --used to differentiate between models which are null or not in crystal
           nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION DIT
                  where DIT.DIT_TABLE = 'DIC_GOOD_GROUP'
                    and DIT_CODE = GGO.DIC_GOOD_GROUP_ID
                    and DIT.PC_LANG_ID = 3)
             , PCS.PC_FUNCTIONS.translateword2('Pas de group produit', vpc_lang_id)
              ) DIC_GOOD_GROUP_DESCR
         , GGO.GOO_MAJOR_REFERENCE
         , GGO.GOO_SECONDARY_REFERENCE
         , GGO.GOO_NUMBER_OF_DECIMAL
         , PPE.PER_NAME
         , PPE.PER_KEY1
         , PTH.PAC_THIRD_ID
         , GCO_FUNCTIONS.getcostpricewithmanagementmode(GGO.GCO_GOOD_ID) COSTPRICE
      from DOC_DOCUMENT DDO
         , DOC_POSITION DPO
         , DOC_GAUGE_STRUCTURED DGA
         , ACS_FINANCIAL_CURRENCY AFI
         , PAC_THIRD PTH
         , DOC_POSITION_DETAIL DPD
         , GCO_GOOD GGO
         , PCS.PC_CURR PCU
         , PAC_PERSON PPE
         , FAL_NETWORK_NEED FNE
         , V_STM_GCO_GOOD_QTY V_STM
     where DDO.DOC_DOCUMENT_ID = DPO.DOC_DOCUMENT_ID
       and DPO.DOC_POSITION_ID = DPD.DOC_POSITION_ID
       and DPD.DOC_POSITION_DETAIL_ID = FNE.DOC_POSITION_DETAIL_ID(+)
       and DPO.GCO_GOOD_ID = GGO.GCO_GOOD_ID
       and GGO.GCO_GOOD_ID = V_STM.GCO_GOOD_ID(+)
       and DDO.DOC_GAUGE_ID = DGA.DOC_GAUGE_ID
       and DDO.ACS_FINANCIAL_CURRENCY_ID = AFI.ACS_FINANCIAL_CURRENCY_ID
       and AFI.PC_CURR_ID = PCU.PC_CURR_ID
       and DDO.PAC_THIRD_ID = PTH.PAC_THIRD_ID
       and PTH.PAC_THIRD_ID = PPE.PAC_PERSON_ID
       and DDO.dmt_date_document >= decode(parameter_14, '0', to_date('19800101', 'YYYYMMDD'), to_date(parameter_14, 'YYYYMMDD') )
       and DDO.dmt_date_document <= decode(parameter_15, '0', to_date('30001231', 'YYYYMMDD'), to_date(parameter_15, 'YYYYMMDD') )
       and (   DGA.C_GAUGE_TITLE = decode(parameter_9, '0', '6', '1', '6', '30')
            or DGA.C_GAUGE_TITLE = decode(parameter_9, '0', '30', '2', '30', '6')
            or DGA.C_GAUGE_TITLE = decode(parameter_7, '0', '1', '1', '1', '5')
            or DGA.C_GAUGE_TITLE = decode(parameter_7, '0', '5', '2', '5', '1')
           )
       and (   DGA.C_GAUGE_TITLE = '30'
            or DPD.PDE_FINAL_DELAY <= decode(parameter_6, '0', to_date('30001231', 'YYYYMMDD'), to_date(parameter_6, 'YYYYMMDD') ) )
       and DDO.C_DOCUMENT_STATUS in('01', '02', '03')
       and DPO.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10')
       and GGO.GOO_MAJOR_REFERENCE >= parameter_0
       and GGO.GOO_MAJOR_REFERENCE <= parameter_1;
end RPT_DOC_GLOB_GOOD_BATCH;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_PORT_3RD_PAR_MASTER" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       VARCHAR2,
   parameter_13     IN       VARCHAR2,
   parameter_14     IN       VARCHAR2,
   parameter_15     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   report_name      IN       VARCHAR2,
   calling_pc_object_id  IN  pcs.pc_object.pc_object_id%type,
   company_owner    IN       pcs.pc_scrip.scrdbowner%type
)
IS
/**
*Description
 Used for the reports

 Group 1 - PORTFOLIO BY THIRD PARTY
 DOC_CUST_ORDER_PORT_CUST_BATCH
 DOC_CUST_CONSIG_PORT_CUST_BATCH
 DOC_CUST_DELIVERY_PORT_CUST_BATCH
 DOC_SUPPL_ORDER_PORT_SUPPL_BATCH
 DOC_SUPPL_DELIVERY_PORT_SUPPL_BATCH

*@created PNA 1 JUN 2007
*@lastUpdate VHA 4 February 2013
*@public
*@param PARAMETER_0 : minimun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_1 : maximun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_2 : used in Crystal report - use activity (yes or no)
*@param PARAMETER_3 : used in Crystal report - use region (yes or no)
*@param PARAMETER_4 : used in Crystal report - use partner type (yes or no)
*@param PARAMETER_5 : used in Crystal report - use sales person (yes or no)
*@param PARAMETER_6 : Final delay for detail information of document
*@param PARAMETER_7 : used in Crystal report - show value (yes or no)
*@param PARAMETER_8 : used in Crystal report - due date type (0 = day or 1 = week)
*@param PARAMETER_9 : document gauge title
*@param PARAMETER_10 : position status of document
*@param PARAMETER_11 : for parameter Allocation
*@param PARAMETER_12 : for parameter Parcel
*@param PARAMETER_13 : for parameter Lateness
*@param PARAMETER_14 : minimum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PARAMETER_15 : maximum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PROCUSER_LANID : user language
*@param REPORT_NAME : crystal report name
*@param CALLING_PC_OBJECT_ID : crystal calling object id
*@param COMPANY_OWNER : crystal company owner
*/
   vpc_lang_id               pcs.pc_lang.pc_lang_id%TYPE;
   report_names              VARCHAR2 (100 CHAR);
   report_names_1            VARCHAR2 (100 CHAR);
   report_names_2            VARCHAR2 (100 CHAR);
   param_c_gauge_title       VARCHAR2 (30 CHAR);
   param_pos_status          VARCHAR2 (30 CHAR);
   param_doc_status          VARCHAR2 (30 CHAR);
   param_dmt_date_start      DATE;
   param_dmt_date_end        DATE;
   param_final_delay         DATE;
   param_0                   VARCHAR2 (30 CHAR);
   param_1                   VARCHAR2 (30 CHAR);
   param_6                   VARCHAR2 (8 CHAR);
   param_9                   VARCHAR2 (1 CHAR);
   param_10                  VARCHAR2 (1 CHAR);
   param_11                  VARCHAR2 (30 CHAR);
   param_12                  VARCHAR2 (30 CHAR);
   param_13                  VARCHAR2 (30 CHAR);
   param_14                  VARCHAR2 (8 CHAR);
   param_15                  VARCHAR2 (8 CHAR);
   vpc_pas_ligne             dico_description.dit_descr%TYPE;
   vpc_pas_famille           dico_description.dit_descr%TYPE;
   vpc_pas_modele            dico_description.dit_descr%TYPE;
   vpc_pas_groupe            dico_description.dit_descr%TYPE;
   vpc_pas_activite          dico_description.dit_descr%TYPE;
   vpc_pas_region            dico_description.dit_descr%TYPE;
   vpc_pas_type_partenaire   dico_description.dit_descr%TYPE;
   vpc_pas_representant      dico_description.dit_descr%TYPE;
   nDocDelayWeekstart        number;
BEGIN
--Initialize the parameter, remove all the space in the parameter
   param_0 := TRIM (parameter_0);
   param_1 := TRIM (parameter_1);
   param_6 := TRIM (parameter_6);
   param_9 := TRIM (parameter_9);
   param_10 := TRIM (parameter_10);
   param_11 := TRIM (parameter_11);
   param_12 := TRIM (parameter_12);
   param_13 := TRIM (parameter_13);
   param_14 := NVL (TRIM (parameter_14), '0');
   param_15 := NVL (TRIM (parameter_15), '0');
--Initialize the name of the report
   report_names :=
      SUBSTR (SUBSTR (report_name, INSTR (report_name, '\', -1) + 1),
              1,
              LENGTH (SUBSTR (report_name, INSTR (report_name, '\', -1) + 1))
              - 4
             );
   report_names := RPT_FUNCTIONS.GetStdReportName(report_names,CALLING_PC_OBJECT_ID);
   report_names_1 :=
      SUBSTR (report_names,
              INSTR (report_names, '_') + 1,
              INSTR (report_names, '_', 1, 2) - INSTR (report_names, '_') - 1
             );
   report_names_2 :=
      SUBSTR (report_names,
              INSTR (report_names, '_', -1, 2) + 1,
              INSTR (report_names, '_', -1) - INSTR (report_names, '_', -1, 2)
              - 1
             );

--Final delay for detail information of document
   BEGIN
      IF param_6 = '0'
      THEN
         param_final_delay := TO_DATE ('22001231', 'YYYYMMDD');
      ELSE
         param_final_delay := TO_DATE (param_6, 'YYYYMMDD');
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         param_final_delay := TO_DATE ('22001231', 'YYYYMMDD');
   END;

   BEGIN
      IF param_14 = '0'
      THEN
         param_dmt_date_start := TO_DATE (19800101, 'YYYYMMDD');
      ELSE
         param_dmt_date_start := TO_DATE (param_14, 'YYYYMMDD');
      -- parameter_14  ************************************
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         param_dmt_date_start := TO_DATE ('19801231', 'YYYYMMDD');
   END;

   BEGIN
      IF param_15 = '0'
      THEN
         param_dmt_date_end := TO_DATE (22001231, 'YYYYMMDD');
      ELSE
         param_dmt_date_end := TO_DATE (param_15, 'YYYYMMDD');
      -- parameter_15  ************************************
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         param_dmt_date_end := TO_DATE ('22001231', 'YYYYMMDD');
   END;

   IF report_names IN ('DOC_CUST_ORDER_PORT_CUST_BATCH')
   THEN
      CASE param_9
         WHEN '0'
         THEN
            param_c_gauge_title := '6,30';
         WHEN '1'
         THEN
            param_c_gauge_title := '6';
         WHEN '2'
         THEN
            param_c_gauge_title := '30';
      END CASE;

      CASE param_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';
   ELSIF report_names = 'DOC_CUST_CONSIG_PORT_CUST_BATCH'
   THEN
      param_c_gauge_title := '20';
      param_pos_status := '02,03';
      param_doc_status := '02,03';
      param_dmt_date_start := TO_DATE (19800101, 'YYYYMMDD');
      param_dmt_date_end := TO_DATE (22001231, 'YYYYMMDD');
   ELSIF report_names IN ('DOC_CUST_DELIVERY_PORT_CUST_BATCH')
   THEN
      param_c_gauge_title := '7';

      CASE param_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';
   ELSIF report_names IN ('DOC_SUPPL_ORDER_PORT_SUPPL_BATCH')
   THEN
      CASE param_9
         WHEN '0'
         THEN
            param_c_gauge_title := '1,5';             --both order and return
         WHEN '1'
         THEN
            param_c_gauge_title := '1';                          --only order
         WHEN '2'
         THEN
            param_c_gauge_title := '5';                         --only return
      END CASE;

      CASE param_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';
   ELSIF report_names IN ('DOC_SUPPL_DELIVERY_PORT_SUPPL_BATCH')
   THEN
      param_c_gauge_title := '2,3';

      CASE param_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';
   END IF;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vpc_pas_ligne :=
         pcs.pc_functions.translateword2 ('Pas de ligne produit', vpc_lang_id);
   vpc_pas_famille :=
       pcs.pc_functions.translateword2 ('Pas de famille produit', vpc_lang_id);
   vpc_pas_modele :=
        pcs.pc_functions.translateword2 ('Pas de modèle produit', vpc_lang_id);
   vpc_pas_groupe :=
        pcs.pc_functions.translateword2 ('Pas de groupe produit', vpc_lang_id);
   vpc_pas_activite :=
                 pcs.pc_functions.translateword2 ('Pas activité', vpc_lang_id);
   vpc_pas_region :=
                pcs.pc_functions.translateword2 ('Pas de région', vpc_lang_id);
   vpc_pas_type_partenaire :=
      pcs.pc_functions.translateword2 ('Pas de type de partenaire',
                                       vpc_lang_id
                                      );
   vpc_pas_representant :=
          pcs.pc_functions.translateword2 ('Pas de représentant', vpc_lang_id);

   -- Premier jour de la semaine
   nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

   OPEN arefcursor FOR
      SELECT nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
           , rpt_functions.cust_order_port_batch
                                  (report_names,
                                   param_11,
                                   fnn.fan_stk_qty,
                                   fnn.fan_netw_qty
                                  ) test_customer_allocations,
             rpt_functions.suppl_order_port_batch
                                  (report_names,
                                   param_11,
                                   fns.fan_stk_qty,
                                   fns.fan_netw_qty
                                  ) test_supplier_allocations,
             TO_CHAR (SYSDATE, 'YYYYIW') year_week,
             TO_CHAR (SYSDATE, 'YYYYMM') year_month, dmt.dmt_number,
             dmt.dmt_date_document, dmt.dmt_rate_euro, dmt.dmt_base_price,
             dmt.dmt_rate_of_exchange, gas.c_gauge_title,
             pos.c_doc_pos_status, pos.gco_good_id, pos.pos_number,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        1,
                                        '01'
                                       ) des_short_description,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        2,
                                        '01'
                                       ) des_long_description,
             pos.pos_net_unit_value, pos.pos_net_value_excl,
             pos.pos_final_quantity, pos.dic_unit_of_measure_id,
             pos.pos_net_value_excl_b, pos.pos_balance_quantity,
             goo.goo_major_reference, goo.goo_secondary_reference,
             gco_functions.getcostpricewithmanagementmode
                                                  (goo.gco_good_id)
                                                                   cost_price,
             goo.goo_number_of_decimal, goo.dic_good_line_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_LINE'
                      AND dit_code = goo.dic_good_line_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_ligne
                 ) dic_good_line_descr,

             --1 differentiate  lines which are null or not in crystal
             goo.dic_good_family_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_FAMILY'
                      AND dit_code = goo.dic_good_family_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_famille
                 ) dic_good_family_descr,

--1 differentiate between families which are null or not in crystal
             goo.dic_good_model_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_MODEL'
                      AND dit_code = goo.dic_good_model_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_modele
                 ) dic_good_model_descr,

             --1 differentiate between models which are null or not in crystal
             goo.dic_good_group_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_GROUP'
                      AND dit_code = goo.dic_good_group_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_groupe
                 ) dic_good_group_descr,

             --1 differentiate between groups which are null or not in crystal
             pde.pde_final_delay,
             TO_CHAR (pde.pde_final_delay, 'YYYYIW') pde_year_week,
             TO_CHAR (pde.pde_final_delay, 'YYYYMM') pde_year_month,
             pde.pde_final_quantity, pde.pde_basis_quantity,
             pde.pde_balance_quantity, pde.pde_characterization_value_1,
             pde.pde_characterization_value_2,
             pde.pde_characterization_value_3,
             pde.pde_characterization_value_4,
             pde.pde_characterization_value_5,
             NVL (DECODE (report_names,
                          'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_netw_qty,
                          fnn.fan_netw_qty
                         ),
                  0
                 ) fan_netw_qty,
             NVL (DECODE (report_names,
                          'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.fan_stk_qty,
                          fnn.fan_stk_qty
                         ),
                  0
                 ) fan_stk_qty,
             per.per_name, per.per_key1, thi.pac_third_id,
             (SELECT adr.add_address1
                FROM pac_address adr
               WHERE adr.pac_person_id = dmt.pac_third_id
                 AND adr.add_principal = 1) default_address,
             (SELECT    adr.add_zipcode
                     || DECODE (adr.add_zipcode,
                                NULL, adr.add_city,
                                ' ' || adr.add_city
                               )
                     || DECODE (adr.add_zipcode || adr.add_city,
                                NULL, cnt.cntname,
                                CHR (13) || cnt.cntname
                               )
                FROM pac_address adr, pcs.pc_cntry cnt
               WHERE adr.pac_person_id = dmt.pac_third_id
                 AND adr.pc_cntry_id = cnt.pc_cntry_id(+)
                 AND adr.add_principal = 1) default_adr_zipcode_city_cnt,
             DECODE (thi.dic_third_activity_id,
                     NULL, vpc_pas_activite,
                     (SELECT thi.dic_third_activity_id || ' - '
                             || act.act_descr
                        FROM dic_third_activity act
                       WHERE act.dic_third_activity_id =
                                                     thi.dic_third_activity_id)
                    ) act_descr,
             DECODE (thi.dic_third_area_id,
                     NULL, vpc_pas_region,
                     (SELECT thi.dic_third_area_id || ' - ' || ARE.are_descr
                        FROM dic_third_area ARE
                       WHERE ARE.dic_third_area_id = thi.dic_third_area_id)
                    ) are_descr,
             DECODE
                (report_names_1,
                 'CUST', DECODE (cus.dic_type_partner_id,
                                 NULL, vpc_pas_type_partenaire,
                                 (SELECT (SELECT dit.dit_descr
                                            FROM dico_description dit
                                           WHERE dit.dit_table =
                                                            'DIC_TYPE_PARTNER'
                                             AND dit.pc_lang_id = vpc_lang_id
                                             AND dit.dit_code =
                                                       dtp.dic_type_partner_id)
                                    FROM dic_type_partner dtp
                                   WHERE dtp.dic_type_partner_id =
                                                       cus.dic_type_partner_id)
                                ),
                 'SUPPL', DECODE (sup.dic_type_partner_f_id,
                                  NULL, vpc_pas_type_partenaire,
                                  (SELECT (SELECT dit.dit_descr
                                             FROM dico_description dit
                                            WHERE dit.dit_table =
                                                            'DIC_TYPE_PARTNER'
                                              AND dit.pc_lang_id = vpc_lang_id
                                              AND dit.dit_code =
                                                     dtp.dic_type_partner_f_id)
                                     FROM dic_type_partner_f dtp
                                    WHERE dtp.dic_type_partner_f_id =
                                                     sup.dic_type_partner_f_id)
                                 )
                ) dic_descr,
             DECODE (dmt.pac_representative_id,
                     NULL, vpc_pas_representant,
                     (SELECT rep.rep_descr
                        FROM pac_representative rep
                       WHERE rep.pac_representative_id =
                                                     dmt.pac_representative_id)
                    ) rep_descr,
             (SELECT MAX (cre.cre_amount_limit)
                FROM pac_credit_limit cre,
                     acs_financial_currency acs
               WHERE cre.pac_supplier_partner_id || cre.pac_custom_partner_id =
                                                              dmt.pac_third_id
                 AND cre.acs_financial_currency_id =
                                                 dmt.acs_financial_currency_id)
                                                             cre_amount_limit,
             (SELECT MAX (curr.currency)
                FROM acs_financial_currency acs, pcs.pc_curr curr
               WHERE dmt.acs_financial_currency_id =
                                       acs.acs_financial_currency_id
                 AND acs.pc_curr_id = curr.pc_curr_id) currency,
             acs_function.periodsoldeamount
                            (cus.acs_auxiliary_account_id,
                             NULL,
                             NULL,
                             'EXT',
                             1,
                             NULL
                            ) balance_amount_cus,
             acs_function.periodsoldeamount
                            (sup.acs_auxiliary_account_id,
                             NULL,
                             NULL,
                             'EXT',
                             1,
                             NULL
                            ) balance_amount_sup,
             vgq.spo_available_quantity
        FROM acs_financial_currency fin,
             doc_document dmt,
             doc_gauge_structured gas,
             doc_position pos,
             doc_position_detail pde,
             gco_good goo,
             pac_person per,
             pac_third thi,
             pcs.pc_curr cur,
             pac_representative pac,
             pac_custom_partner cus,
             pac_supplier_partner sup,
             fal_network_need fnn,
             fal_network_supply fns,
             v_stm_gco_good_qty vgq
       WHERE dmt.acs_financial_currency_id = fin.acs_financial_currency_id
         AND fin.pc_curr_id = cur.pc_curr_id
         AND dmt.doc_gauge_id = gas.doc_gauge_id
         AND dmt.doc_document_id = pos.doc_document_id
         AND pos.doc_position_id = pde.doc_position_id
         AND pos.gco_good_id = goo.gco_good_id
         AND pos.pac_representative_id = pac.pac_representative_id(+)
         AND pde.doc_position_detail_id = fnn.doc_position_detail_id(+)
         AND pde.doc_position_detail_id = fns.doc_position_detail_id(+)
         AND goo.gco_good_id = vgq.gco_good_id(+)
         AND dmt.pac_third_id = thi.pac_third_id
         AND thi.pac_third_id = per.pac_person_id
         AND per.pac_person_id = cus.pac_custom_partner_id(+)
         AND per.pac_person_id = sup.pac_supplier_partner_id(+)
         AND pos.c_gauge_type_pos IN ('1', '7', '8', '91', '10', '21')
         AND (CASE
                 WHEN report_names_1 = 'CUST'
                 AND cus.pac_custom_partner_id IS NOT NULL
                    THEN 1
                 WHEN report_names_1 = 'SUPPL'
                 AND sup.pac_supplier_partner_id IS NOT NULL
                    THEN 1
                 ELSE 0
              END
             ) = 1
         --According to report name to define customer or supplier
         AND rpt_functions.check_record_in_range (report_names_2,
                                                  goo.goo_major_reference,
                                                  per.per_key1,
                                                  param_0,
                                                  param_1
                                                 ) = 1
         AND INSTR (',' || param_pos_status || ',',
                    ',' || pos.c_doc_pos_status || ','
                   ) > 0
         AND INSTR (',' || param_c_gauge_title || ',',
                    ',' || gas.c_gauge_title || ','
                   ) > 0
         AND INSTR (',' || param_doc_status || ',',
                    ',' || dmt.c_document_status || ','
                   ) > 0
         AND dmt.dmt_date_document >= param_dmt_date_start
         AND dmt.dmt_date_document <= param_dmt_date_end
         --{@TEST_ATTRIB} Allocation customer orders
         AND rpt_functions.cust_order_port_batch (report_names,
                                                  param_11,
                                                  fnn.fan_stk_qty,
                                                  fnn.fan_netw_qty
                                                 ) = 1
         --{@TEST_COLIS} Packaging
         AND rpt_functions.cust_delivery_port_batch (report_names,
                                                     param_12,
                                                     dmt.doc_document_id
                                                    ) = 1
         --{@TEST_ATTRIB} Allocation supplier orders
         AND rpt_functions.suppl_order_port_batch (report_names,
                                                   param_11,
                                                   fns.fan_stk_qty,
                                                   fns.fan_netw_qty
                                                  ) = 1
         --{@TEST_RETARD} Lateness
         AND rpt_functions.suppl_order_port_batch_2 (report_names,
                                                     param_13,
                                                     pos.c_doc_pos_status,
                                                     pde.pde_final_delay
                                                    ) = 1
         AND rpt_functions.order_echeancier_batch (report_names,
                                                   param_final_delay,
                                                   pde.pde_final_delay,
                                                   gas.c_gauge_title
                                                  ) = 1;
END rpt_doc_port_3rd_par_master;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_PORT_GOOD_MASTER" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       VARCHAR2,
   parameter_13     IN       VARCHAR2,
   parameter_14     IN       VARCHAR2,
   parameter_15     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   report_name      IN       VARCHAR2,
   calling_pc_object_id  IN  pcs.pc_object.pc_object_id%type,
   company_owner    IN       pcs.pc_scrip.scrdbowner%type
)
IS
/**
*Description
 Used for the reports

 Group 2 - PORTFOLIO BY PRODUCT
 DOC_CUST_ORDER_PORT_GOOD_BATCH
 DOC_CUST_CONSIG_PORT_GOOD_BATCH
 DOC_CUST_DELIVERY_PORT_GOOD_BATCH
 DOC_SUPPL_ORDER_PORT_GOOD_BATCH
 DOC_SUPPL_DELIVERY_PORT_GOOD_BATCH

*@created PNA 1 Jun 2007
*@lastUpdate VHA 9 March 2012
*@public
*@param PARAMETER_0 : minimun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_1 : maximun value fro GCO_GOOD.GOO_MAJOR_REFERENCE or PAC_PERSON.PER_KEY1
*@param PARAMETER_2 : used in Crystal report - use activity (yes or no)
*@param PARAMETER_3 : used in Crystal report - use region (yes or no)
*@param PARAMETER_4 : used in Crystal report - use partner type (yes or no)
*@param PARAMETER_5 : used in Crystal report - use sales person (yes or no)
*@param PARAMETER_6 : Final delay for detail information of document
*@param PARAMETER_7 : used in Crystal report - show value (yes or no)
*@param PARAMETER_8 : used in Crystal report - due date type (0 = day or 1 = week)
*@param PARAMETER_9 : document gauge title
*@param PARAMETER_10 : position status of document
*@param PARAMETER_11 : for parameter Allocation
*@param PARAMETER_12 : for parameter Parcel
*@param PARAMETER_13 : for parameter Lateness
*@param PARAMETER_14 : minimum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PARAMETER_15 : maximum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PROCUSER_LANID : user language
*@param REPORT_NAME : crystal report name
*@param CALLING_PC_OBJECT_ID : crystal calling object id
*@param COMPANY_OWNER : crystal company owner
*/
   vpc_lang_id               pcs.pc_lang.pc_lang_id%TYPE;
   report_names              VARCHAR2 (100);
   report_names_1            VARCHAR2 (100);
   report_names_2            VARCHAR2 (100);
   param_c_gauge_title       VARCHAR2 (30);
   param_pos_status          VARCHAR2 (30);
   param_doc_status          VARCHAR2 (30);
   param_dmt_date_start      DATE;
   param_dmt_date_end        DATE;
   param_final_delay         DATE;
   vpc_pas_ligne             dico_description.dit_descr%TYPE;
   vpc_pas_famille           dico_description.dit_descr%TYPE;
   vpc_pas_modele            dico_description.dit_descr%TYPE;
   vpc_pas_groupe            dico_description.dit_descr%TYPE;
   vpc_pas_activite          dico_description.dit_descr%TYPE;
   vpc_pas_region            dico_description.dit_descr%TYPE;
   vpc_pas_type_partenaire   dico_description.dit_descr%TYPE;
   vpc_pas_representant      dico_description.dit_descr%TYPE;
   nDocDelayWeekstart        number;
BEGIN
--Initialize the name of the report
   report_names :=
      SUBSTR (SUBSTR (report_name, INSTR (report_name, '\', -1) + 1),
              1,
              LENGTH (SUBSTR (report_name, INSTR (report_name, '\', -1) + 1))
              - 4
             );
   report_names := RPT_FUNCTIONS.GetStdReportName(report_names,CALLING_PC_OBJECT_ID);
   report_names_1 :=
      SUBSTR (report_names,
              INSTR (report_names, '_') + 1,
              INSTR (report_names, '_', 1, 2) - INSTR (report_names, '_') - 1
             );
   report_names_2 :=
      SUBSTR (report_names,
              INSTR (report_names, '_', -1, 2) + 1,
              INSTR (report_names, '_', -1) - INSTR (report_names, '_', -1, 2)
              - 1
             );

--
   BEGIN
      IF parameter_6 = '0'
      THEN
         param_final_delay := TO_DATE ('22001231', 'YYYYMMDD');
      ELSE
         param_final_delay := TO_DATE (parameter_6, 'YYYYMMDD');
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         param_final_delay := TO_DATE ('22001231', 'YYYYMMDD');
   END;

   BEGIN
         IF parameter_14 = '0'
         THEN
            param_dmt_date_start := TO_DATE ('19800101', 'YYYYMMDD');
         ELSE
            param_dmt_date_start := TO_DATE (parameter_14, 'YYYYMMDD');
         -- parameter_14  ************************************
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            param_dmt_date_start := TO_DATE ('19801231', 'YYYYMMDD');
      END;

      BEGIN
         IF parameter_15 = '0'
         THEN
            param_dmt_date_end := TO_DATE ('22001231', 'YYYYMMDD');
         ELSE
            param_dmt_date_end := TO_DATE (parameter_15, 'YYYYMMDD');
         -- parameter_15  ************************************
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            param_dmt_date_end := TO_DATE ('22001231', 'YYYYMMDD');
      END;

   IF report_names IN
         ('DOC_CUST_ORDER_PORT_GOOD_BATCH')
   THEN
      CASE parameter_9
         WHEN '0'
         THEN
            param_c_gauge_title := '6,30';
         WHEN '1'
         THEN
            param_c_gauge_title := '6';
         WHEN '2'
         THEN
            param_c_gauge_title := '30';
      END CASE;

      CASE parameter_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';


   ELSIF report_names = 'DOC_CUST_CONSIG_PORT_GOOD_BATCH'
   THEN
      param_c_gauge_title := '20';
      param_pos_status := '02,03';
      param_doc_status := '01,02,03,04,05';
      param_dmt_date_start := TO_DATE (19800101, 'YYYYMMDD');
      param_dmt_date_end := TO_DATE (22001231, 'YYYYMMDD');



   ELSIF report_names IN
           ('DOC_CUST_DELIVERY_PORT_GOOD_BATCH')
   THEN
      param_c_gauge_title := '7';

      CASE parameter_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';


   ELSIF report_names IN
           ('DOC_SUPPL_ORDER_PORT_GOOD_BATCH')
   THEN
      CASE parameter_9
         WHEN '0'
         THEN
            param_c_gauge_title := '1,5';             --both order and return
         WHEN '1'
         THEN
            param_c_gauge_title := '1';                          --only order
         WHEN '2'
         THEN
            param_c_gauge_title := '5';                         --only return
      END CASE;

      CASE parameter_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';




   ELSIF report_names IN
           ('DOC_SUPPL_DELIVERY_PORT_GOOD_BATCH')
   THEN
      param_c_gauge_title := '2,3';

      CASE parameter_10
         WHEN 0
         THEN
            param_pos_status := '01,02,03,04';                          --All
         WHEN 1
         THEN
            param_pos_status := '01';                            --To Confirm
         WHEN 2
         THEN
            param_pos_status := '02,03';  --To Balance and Partially Balanced
         WHEN 3
         THEN
            param_pos_status := '01,02,03';
         --To Confirm, To Balance and Partially Balanced
      WHEN 4
         THEN
            param_pos_status := '04';                              --Finished
         WHEN 5
         THEN
            param_pos_status := '01,04';            --To Confirm and Finished
         WHEN 6
         THEN
            param_pos_status := '02,03,04';
         --To Balance and Partially Balanced and Finished
      WHEN 7
         THEN
            param_pos_status := '01,02,03,04';                          --All
      END CASE;

      param_doc_status := '01,02,03,04,05';


   END IF;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vpc_pas_ligne :=
         pcs.pc_functions.translateword2 ('Pas de ligne produit', vpc_lang_id);
   vpc_pas_famille :=
       pcs.pc_functions.translateword2 ('Pas de famille produit', vpc_lang_id);
   vpc_pas_modele :=
        pcs.pc_functions.translateword2 ('Pas de modèle produit', vpc_lang_id);
   vpc_pas_groupe :=
        pcs.pc_functions.translateword2 ('Pas de groupe produit', vpc_lang_id);
   vpc_pas_activite :=
                 pcs.pc_functions.translateword2 ('Pas activité', vpc_lang_id);
   vpc_pas_region :=
                pcs.pc_functions.translateword2 ('Pas de région', vpc_lang_id);
   vpc_pas_type_partenaire :=
      pcs.pc_functions.translateword2 ('Pas de type de partenaire',
                                       vpc_lang_id
                                      );

   -- Premier jour de la semaine
   nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

   OPEN arefcursor FOR
      SELECT nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG,
             TO_CHAR (SYSDATE, 'YYYYIW') year_week,
             TO_CHAR (SYSDATE, 'YYYYMM') year_month, dmt.dmt_number,
             dmt.dmt_date_document, dmt.dmt_rate_euro, dmt.dmt_base_price,
             dmt.dmt_rate_of_exchange, gas.c_gauge_title,
             pos.c_doc_pos_status, pos.gco_good_id, pos.pos_number,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        2,
                                        '01'
                                       ) des_long_description,
             pos.pos_net_unit_value, pos.pos_net_value_excl,
             pos.pos_final_quantity, pos.dic_unit_of_measure_id,
             pos.pos_net_value_excl_b, pos.pos_balance_quantity,
             goo.goo_major_reference, goo.goo_secondary_reference,
             gco_functions.getcostpricewithmanagementmode
                                                  (goo.gco_good_id)
                                                                   cost_price,
             goo.goo_number_of_decimal, goo.dic_good_line_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_LINE'
                      AND dit_code = goo.dic_good_line_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_ligne
                 ) dic_good_line_descr,

             --1 differentiate  lines which are null or not in crystal
             goo.dic_good_family_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_FAMILY'
                      AND dit_code = goo.dic_good_family_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_famille
                 ) dic_good_family_descr,

             --1 differentiate between families which are null or not in crystal
             goo.dic_good_model_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_MODEL'
                      AND dit_code = goo.dic_good_model_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_modele
                 ) dic_good_model_descr,

             --1 differentiate between models which are null or not in crystal
             goo.dic_good_group_id,
             NVL ((SELECT dit_descr
                     FROM dico_description dit
                    WHERE dit.dit_table = 'DIC_GOOD_GROUP'
                      AND dit_code = goo.dic_good_group_id
                      AND dit.pc_lang_id = vpc_lang_id),
                  vpc_pas_groupe
                 ) dic_good_group_descr,

             --1 differentiate between groups which are null or not in crystal
             pde.pde_final_delay,
             TO_CHAR (pde.pde_final_delay, 'YYYYIW') pde_year_week,
             TO_CHAR (pde.pde_final_delay, 'YYYYMM') pde_year_month,
             pde.pde_final_quantity, pde.pde_balance_quantity,
             pde.pde_basis_quantity, pde.pde_characterization_value_1,
             pde.pde_characterization_value_2,
             pde.pde_characterization_value_3,
             pde.pde_characterization_value_4,
             pde.pde_characterization_value_5,
             NVL (DECODE (report_names,
                          'DOC_SUPPL_ORDER_PORT_GOOD_BATCH', fns.fan_netw_qty,
                          fnn.fan_netw_qty
                         ),
                  0
                 ) fan_netw_qty,
             NVL (DECODE (report_names,
                          'DOC_SUPPL_ORDER_PORT_GOOD_BATCH', fns.fan_stk_qty,
                          fnn.fan_stk_qty
                         ),
                  0
                 ) fan_stk_qty,
             per.per_name,
             (SELECT adr.add_address1 || '  ' || adr.add_format
                FROM pac_address adr
               WHERE adr.pac_person_id = dmt.pac_third_id
                 AND adr.add_principal = 1) inv_address,
             per.per_key1, thi.pac_third_id, thi.dic_third_activity_id,
             (SELECT act.act_descr
                FROM dic_third_activity act
               WHERE act.dic_third_activity_id =
                                          thi.dic_third_activity_id)
                                                                    act_descr,
             thi.dic_third_area_id,
             (SELECT ARE.are_descr
                FROM dic_third_area ARE
               WHERE ARE.dic_third_area_id = thi.dic_third_area_id) are_descr,
             DECODE (report_names_1,
                     'CUST', cus.dic_type_partner_id,
                     'SUPPL', sup.dic_type_partner_f_id
                    ) dic_type_partner_id,
             DECODE (report_names_1,
                     'CUST', (SELECT dtp.tpa_descr
                                FROM dic_type_partner dtp
                               WHERE dtp.dic_type_partner_id =
                                                       cus.dic_type_partner_id),
                     'SUPPL', (SELECT dtp.dic_descr
                                 FROM dic_type_partner_f dtp
                                WHERE dtp.dic_type_partner_f_id =
                                                     sup.dic_type_partner_f_id)
                    ) dic_descr,
             DECODE (dmt.pac_representative_id,
                     NULL, vpc_pas_representant,
                     (SELECT rep.rep_descr
                        FROM pac_representative rep
                       WHERE rep.pac_representative_id =
                                                     dmt.pac_representative_id)
                    ) rep_descr,
             (SELECT MAX (cre.cre_amount_limit)
                FROM pac_credit_limit cre,
                     acs_financial_currency acs
               WHERE cre.pac_supplier_partner_id || cre.pac_custom_partner_id =
                                                              dmt.pac_third_id
                 AND cre.acs_financial_currency_id =
                                                 dmt.acs_financial_currency_id)
                                                             cre_amount_limit,
             (SELECT MAX (curr.currency)
                FROM acs_financial_currency acs, pcs.pc_curr curr
               WHERE dmt.acs_financial_currency_id =
                                       acs.acs_financial_currency_id
                 AND acs.pc_curr_id = curr.pc_curr_id) currency,
             vgq.spo_available_quantity
        FROM acs_financial_currency fin,
             doc_document dmt,
             doc_gauge_structured gas,
             doc_position pos,
             doc_position_detail pde,
             gco_good goo,
             pac_person per,
             pac_third thi,
             pcs.pc_curr cur,
             pac_representative pac,
             pac_custom_partner cus,
             pac_supplier_partner sup,
             fal_network_need fnn,
             fal_network_supply fns,
             v_stm_gco_good_qty vgq
       WHERE dmt.acs_financial_currency_id = fin.acs_financial_currency_id
         AND fin.pc_curr_id = cur.pc_curr_id
         AND dmt.doc_gauge_id = gas.doc_gauge_id
         AND dmt.doc_document_id = pos.doc_document_id
         AND pos.doc_position_id = pde.doc_position_id
         AND pos.gco_good_id = goo.gco_good_id
         AND pos.pac_representative_id = pac.pac_representative_id(+)
         AND pde.doc_position_detail_id = fnn.doc_position_detail_id(+)
         AND pde.doc_position_detail_id = fns.doc_position_detail_id(+)
         AND goo.gco_good_id = vgq.gco_good_id(+)
         AND dmt.pac_third_id = thi.pac_third_id
         AND thi.pac_third_id = per.pac_person_id
         AND per.pac_person_id = cus.pac_custom_partner_id(+)
         AND per.pac_person_id = sup.pac_supplier_partner_id(+)
         AND pos.c_gauge_type_pos IN ('1', '7', '8', '91', '10','21')
         AND rpt_functions.check_cust_suppl (report_names_1,
                                             per.pac_person_id) = 1
         --According to report name to define customer or supplier
         AND rpt_functions.check_record_in_range (report_names_2,
                                                  goo.goo_major_reference,
                                                  per.per_key1,
                                                  parameter_0,
                                                  parameter_1
                                                 ) = 1
         AND INSTR (',' || param_pos_status || ',',
                    ',' || pos.c_doc_pos_status || ','
                   ) > 0
         AND INSTR (',' || param_c_gauge_title || ',',
                    ',' || gas.c_gauge_title || ','
                   ) > 0
         AND INSTR (',' || param_doc_status || ',',
                    ',' || c_document_status || ','
                   ) > 0
         AND dmt.dmt_date_document >= param_dmt_date_start
         AND dmt.dmt_date_document <= param_dmt_date_end
         AND rpt_functions.cust_order_port_batch (report_names,
                                                  parameter_11,
                                                  fnn.fan_stk_qty,
                                                  fnn.fan_netw_qty
                                                 ) = 1
         --{@TEST_ATTRIB} Allocation
         AND rpt_functions.cust_delivery_port_batch (report_names,
                                                     parameter_12,
                                                     dmt.doc_document_id
                                                    ) = 1
         --{@TEST_COLIS} Packaging
         AND rpt_functions.suppl_order_port_batch (report_names,
                                                   parameter_11,
                                                   fns.fan_stk_qty,
                                                   fns.fan_netw_qty
                                                  ) = 1
         --{@TEST_ATTRIB} Allocation
         AND rpt_functions.suppl_order_port_batch_2 (report_names,
                                                     parameter_13,
                                                     pos.c_doc_pos_status,
                                                     pde.pde_final_delay
                                                    ) = 1
         --{@TEST_RETARD} Lateness
         AND rpt_functions.order_echeancier_batch (report_names,
                                                   param_final_delay,
                                                   pde.pde_final_delay,
                                                   gas.c_gauge_title
                                                  ) = 1;
END rpt_doc_port_good_master;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_2" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0 in     DOC_DOCUMENT.DMT_NUMBER%type
)
is
/**
* procedure RPT_DOC_STD_2
* Description
*   Procédure stockée utilisée pour le rapport DOC_STD_2.RPT (Document standard)
*  replace the procedure DOC_STD_2_RPT
* @created David Saadé 18.01.2007
* @param PARAMETER_0    Numéro de document    (DMT_NUMBER)
*/
begin
  open aRefCursor
   for
     select    DMT.DOC_DOCUMENT_ID
          , DMT.DMT_NUMBER DOCNUMBER
          , DETAIL.DMT_NUMBER
          , DMT.DMT_DATE_DOCUMENT
          , DMT.DMT_DATE_VALUE
          , DMT.DMT_DATE_FALLING_DUE
          , DMT.DMT_DATE_DELIVERY
          , DMT.C_DOCUMENT_STATUS
          , DMT.DMT_PARTNER_NUMBER
          , DMT.DMT_PARTNER_REFERENCE
          , DMT.DMT_DATE_PARTNER_DOCUMENT
          , DMT.DMT_REFERENCE
          , DMT.DMT_TITLE_TEXT
          , DMT.DMT_HEADING_TEXT
          , DMT.DMT_DOCUMENT_TEXT
          , DMT.DIC_DOC_FREE_1_ID
          , DMT.DIC_DOC_FREE_2_ID
          , DMT.DIC_DOC_FREE_3_ID
          , DMT.DIC_TYPE_SUBMISSION_ID
          , DMT.DIC_POS_FREE_TABLE_1_ID DOC_DIC_POS_FREE_TABLE_1_ID
          , DMT.DIC_POS_FREE_TABLE_2_ID DOC_DIC_POS_FREE_TABLE_2_ID
          , DMT.DIC_POS_FREE_TABLE_3_ID DOC_DIC_POS_FREE_TABLE_3_ID
          , DMT.DMT_DECIMAL_1
          , DMT.DMT_DECIMAL_2
          , DMT.DMT_DECIMAL_3
          , DMT.DMT_TEXT_1
          , DMT.DMT_TEXT_2
          , DMT.DMT_TEXT_3
          , DMT.DMT_DATE_1
          , DMT.DMT_DATE_2
          , DMT.DMT_DATE_3
          , DMT.DIC_GAUGE_FREE_CODE_1_ID
          , DMT.DIC_GAUGE_FREE_CODE_2_ID
          , DMT.DIC_GAUGE_FREE_CODE_3_ID
          , DMT.DMT_GAU_FREE_NUMBER1
          , DMT.DMT_GAU_FREE_NUMBER2
          , DMT.DMT_GAU_FREE_DATE1
          , DMT.DMT_GAU_FREE_DATE2
          , DMT.DMT_GAU_FREE_TEXT_LONG
          , DMT.DMT_GAU_FREE_TEXT_SHORT
          , DMT.DMT_GAU_FREE_BOOL1
          , DMT.DMT_GAU_FREE_BOOL2
          , DMT.DIC_TARIFF_ID
          , DMT.C_INCOTERMS
          , DMT.DMT_INCOTERMS_PLACE
          , REP.PAC_REPRESENTATIVE_ID
          , REP.REP_DESCR
          , REC.DIC_ACCOUNTABLE_GROUP_ID
          , REC.RCO_TITLE
          , REC.RCO_DESCRIPTION
          , DMT.PAC_THIRD_ID
          , THI.DIC_THIRD_ACTIVITY_ID
          , THI.DIC_THIRD_AREA_ID
          , THI.THI_NO_INTRA
          , THI.THI_NO_TVA
          , THI.THI_NO_SIREN
          , THI.THI_NO_SIRET
          , THI.THI_NO_FORMAT
          , CUS.C_DELIVERY_TYP
          , CUS.CUS_SUPPLIER_NUMBER
          , CUS.CUS_FREE_ZONE1
          , CUS.CUS_FREE_ZONE2
          , CUS.CUS_FREE_ZONE3
          , CUS.CUS_FREE_ZONE4
          , CUS.CUS_FREE_ZONE5
          , CUS.DIC_STATISTIC_1_ID
          , CUS.DIC_STATISTIC_2_ID
          , CUS.DIC_STATISTIC_3_ID
          , CUS.DIC_STATISTIC_4_ID
          , CUS.DIC_STATISTIC_5_ID
          , CUS.DIC_TYPE_PARTNER_ID
          , SUP.CRE_CUSTOMER_NUMBER
          , SUP.CRE_FREE_ZONE1
          , SUP.CRE_FREE_ZONE2
          , SUP.CRE_FREE_ZONE3
          , SUP.CRE_FREE_ZONE4
          , SUP.CRE_FREE_ZONE5
          , SUP.DIC_STATISTIC_F1_ID
          , SUP.DIC_STATISTIC_F2_ID
          , SUP.DIC_STATISTIC_F3_ID
          , SUP.DIC_STATISTIC_F4_ID
          , SUP.DIC_STATISTIC_F5_ID
          , SUP.DIC_TYPE_PARTNER_F_ID
          , PSC.PAC_SENDING_CONDITION_ID
          , PSC.PAC_ADDRESS_ID SENDING_ADDRESS_ID
          , PER_SEN.PER_NAME SEN_PER_NAME
          , PER_SEN.PER_FORENAME SEN_PER_FORENAME
          , PER_SEN.PER_ACTIVITY SEN_PER_ACTIVITY
          , PER_SEN.PER_COMMENT SEN_PER_COMMENT
          , PER_SEN.PER_KEY1 SEN_PER_KEY1
          , PER_SEN.PER_KEY2 SEN_PER_KEY2
          , ADR_SEN.ADD_ADDRESS1 SEN_ADD_ADDRESS1
          , ADR_SEN.ADD_FORMAT SEN_ADD_FORMAT
          , APM.ACS_PAYMENT_METHOD_ID
          , ACCC.ACC_NUMBER CUSTOMER_ACCOUNT
          , ACCS.ACC_NUMBER SUPPLIER_ACCOUNT
          , DMT.PC_LANG_ID
          , PMT.PAC_PAYMENT_CONDITION_ID
          , PMT.PCO_DESCR
          , PMT.PC_APPLTXT_ID PMT_PC_APPLTXT_ID
          , AFC.ACS_FINANCIAL_CURRENCY_ID
          , CUR.CURRENCY
          , CUR.CURRNAME
          , LANG.LANID
          , DMT.PAC_ADDRESS_ID ADDRESS_ID
          , nvl(DMT.DMT_NAME1,PER.PER_NAME) PER_NAME
          , nvl(DMT.DMT_FORENAME1,PER.PER_FORENAME) PER_FORENAME
          , nvl(DMT.DMT_ACTIVITY1,PER.PER_ACTIVITY) PER_ACTIVITY
          , PER.PER_COMMENT
          , PER.PER_KEY1
          , PER.PER_KEY2
          , DMT.DMT_ADDRESS1
          , DMT.DMT_FORMAT_CITY1
          , DMT.DMT_TOWN1
          , CNT.CNTID
          , CNT.CNTNAME
          , CNT.DIC_PC_CNTRY_GRP_ID
          , CNT.CNT_CE_CODE
          , CNT.CNT_CE_MEMBER
          , DMT.PAC_PAC_ADDRESS_ID ADDRESS2_ID
          , nvl(DMT.DMT_NAME2,PER2.PER_NAME) PER2_NAME
          , nvl(DMT.DMT_FORENAME2,PER2.PER_FORENAME) PER2_FORENAME
          , nvl(DMT.DMT_ACTIVITY2,PER2.PER_ACTIVITY) PER2_ACTIVITY
          , PER2.PER_COMMENT PER2_COMMENT
          , PER2.PER_KEY1 PER2_KEY1
          , PER2.PER_KEY2 PER2_KEY2
          , DMT.DMT_ADDRESS2
          , DMT.DMT_FORMAT_CITY2
          , DMT.DMT_TOWN2
          , CNT2.CNTID CNTID2
          , CNT2.CNTNAME CNTNAME2
          , CNT2.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID2
          , CNT2.CNT_CE_CODE CNT_CE_CODE2
          , CNT2.CNT_CE_MEMBER CNT_CE_MEMBER2
          , DMT.PAC2_PAC_ADDRESS_ID ADDRESS3_ID
          , nvl(DMT.DMT_NAME3,PER3.PER_NAME) PER3_NAME
          , nvl(DMT.DMT_FORENAME3,PER3.PER_FORENAME) PER3_FORENAME
          , nvl(DMT.DMT_ACTIVITY3,PER3.PER_ACTIVITY) PER3_ACTIVITY
          , PER3.PER_COMMENT PER3_COMMENT
          , PER3.PER_KEY1 PER3_KEY1
          , PER3.PER_KEY2 PER3_KEY2
          , DMT.DMT_ADDRESS3
          , DMT.DMT_FORMAT_CITY3
          , DMT.DMT_TOWN3
          , CNT3.CNTID CNTID3
          , CNT3.CNTNAME CNTNAME3
          , CNT3.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID3
          , CNT3.CNT_CE_CODE CNT_CE_CODE3
          , CNT3.CNT_CE_MEMBER CNT_CE_MEMBER3
          , GAU.C_GAUGE_TYPE
          , GST.C_GAUGE_TITLE
          , GST.GAS_FINANCIAL_CHARGE
          , GAU.C_ADMIN_DOMAIN
          , GAU.DIC_GAUGE_TYPE_DOC_ID
          , DFD.DIC_DOC_FREE_TABLE_1_ID
          , DFD.DIC_DOC_FREE_TABLE_2_ID
          , DFD.DIC_DOC_FREE_TABLE_3_ID
          , DFD.DIC_DOC_FREE_TABLE_4_ID
          , DFD.DIC_DOC_FREE_TABLE_5_ID
          , DFD.FRD_ALPHA_SHORT_1
          , DFD.FRD_ALPHA_SHORT_2
          , DFD.FRD_ALPHA_SHORT_3
          , DFD.FRD_ALPHA_SHORT_4
          , DFD.FRD_ALPHA_SHORT_5
          , DFD.FRD_ALPHA_LONG_1
          , DFD.FRD_ALPHA_LONG_2
          , DFD.FRD_ALPHA_LONG_3
          , DFD.FRD_ALPHA_LONG_4
          , DFD.FRD_ALPHA_LONG_5
          , DFD.FRD_INTEGER_1
          , DFD.FRD_INTEGER_2
          , DFD.FRD_INTEGER_3
          , DFD.FRD_INTEGER_4
          , DFD.FRD_INTEGER_5
          , DFD.FRD_DECIMAL_1
          , DFD.FRD_DECIMAL_2
          , DFD.FRD_DECIMAL_3
          , DFD.FRD_DECIMAL_4
          , DFD.FRD_DECIMAL_5
          , DFD.FRD_BOOLEAN_1
          , DFD.FRD_BOOLEAN_2
          , DFD.FRD_BOOLEAN_3
          , DFD.FRD_BOOLEAN_4
          , DFD.FRD_BOOLEAN_5
          , FOO.DOC_FOOT_ID
          , FOO.DOC_GAUGE_SIGNATORY_ID
          , DGS.GAG_NAME
          , DGS.GAG_FUNCTION
          , FOO.DOC_DOC_GAUGE_SIGNATORY_ID
          , DGS2.GAG_NAME GAG2_NAME
          , DGS2.GAG_FUNCTION GAG2_FUNCTION
          , FOO.FOO_FOOT_TEXT
          , FOO.FOO_FOOT_TEXT2
          , FOO.FOO_FOOT_TEXT3
          , FOO.FOO_FOOT_TEXT4
          , FOO.FOO_FOOT_TEXT5
          , FOO.FOO_DOCUMENT_TOTAL_AMOUNT
          , FOO.FOO_GOOD_TOTAL_AMOUNT
          , FOO.FOO_TOTAL_VAT_AMOUNT
          , FOO.FOO_CHARGE_TOTAL_AMOUNT
          , FOO.FOO_DISCOUNT_TOTAL_AMOUNT
          , FOO.FOO_COST_TOTAL_AMOUNT
          , FOO.FOO_GOOD_TOT_AMOUNT_EXCL
          , FOO.FOO_CHARG_TOT_AMOUNT_EXCL
          , FOO.FOO_DISC_TOT_AMOUNT_EXCL
          , FOO.FOO_COST_TOT_AMOUNT_EXCL
          , FOO.FOO_TOTAL_NET_WEIGHT
          , FOO.FOO_TOTAL_GROSS_WEIGHT
          , FOO.FOO_TOTAL_BASIS_QUANTITY
          , FOO.FOO_TOTAL_INTERM_QUANTITY
          , FOO.FOO_TOTAL_FINAL_QUANTITY
          , FOO.C_BVR_GENERATION_METHOD
          , FOO.FOO_GENERATE_BVR_NUMBER
          , FOO.FOO_REF_BVR_NUMBER
          , FOO.FOO_DOCUMENT_TOT_AMOUNT_B
          , FOO.FOO_DOCUMENT_TOT_AMOUNT_E
          , FOO.FOO_PAID_AMOUNT
          , FOO.FOO_RETURN_AMOUNT
          , FOO.FOO_PACKAGING
          , FOO.FOO_MARKING
          , FOO.FOO_MEASURE
          , FOO.DIC_TYPE_DOC_CUSTOM_ID
          , FOO.C_DIRECTION_NUMBER
          , FOO.FOO_TOT_VAT_AMOUNT_V
          , FOO.FOO_RECEIVED_AMOUNT
          , FOO.FOO_PAID_BALANCED_AMOUNT
          , POS.DOC_POSITION_ID
          , POS.POS_NUMBER
          , POS.C_DOC_POS_STATUS
          , POS.C_GAUGE_TYPE_POS
          , GOO.GCO_GOOD_ID
          , GOO.GOO_MAJOR_REFERENCE
          , GOO.GOO_SECONDARY_REFERENCE
          , GOO.GOO_NUMBER_OF_DECIMAL GOOD_NUMBER_OF_DECIMAL
          , case GAU.C_ADMIN_DOMAIN
              when '1' then GCO_FUNCTIONS.GETCDADECIMAL(POS.GCO_GOOD_ID, 'PURCHASE', THI.PAC_THIRD_ID)
              when '2' then GCO_FUNCTIONS.GETCDADECIMAL(POS.GCO_GOOD_ID, 'SALE', THI.PAC_THIRD_ID)
              else GCO_FUNCTIONS.GETCDADECIMAL(POS.GCO_GOOD_ID, ' ', THI.PAC_THIRD_ID)
            end GOO_NUMBER_OF_DECIMAL
          , GOO.DIC_GOOD_LINE_ID
          , GOO.DIC_GOOD_FAMILY_ID
          , GOO.DIC_GOOD_MODEL_ID
          , GOO.DIC_GOOD_GROUP_ID
          , PDT.PDT_STOCK_MANAGEMENT
          , DGP.C_GAUGE_SHOW_DELAY
          , DGP.GAP_POS_DELAY
          , POS.POS_REFERENCE
          , POS.POS_SHORT_DESCRIPTION
          , POS.POS_LONG_DESCRIPTION
          , POS.POS_FREE_DESCRIPTION
          , POS.POS_BODY_TEXT
          , POS.ASA_RECORD_ID
          , POS.ASA_RECORD_TASK_ID
          , POS.ASA_RECORD_COMP_ID
          , TVA.ACC_NUMBER TVA_ACC_NUMBER
          , REC_POS.RCO_TITLE POS_RCO_TITLE
          , REC_POS.DIC_ACCOUNTABLE_GROUP_ID POS_DIC_ACCOUNTABLE_GROUP_ID
          , REC_POS.RCO_DESCRIPTION POS_RCO_DESCRIPTION
          , REP_POS.PAC_REPRESENTATIVE_ID POS_PAC_REPRESENTATIVE_ID
          , REP_POS.REP_DESCR POS_REP_DESCR
          , GCE.CUS_CUSTONS_POSITION
          , GCE.CUS_KEY_TARIFF
          , GCE.CUS_LICENCE_NUMBER
          , GCE.CUS_RATE_FOR_VALUE
          , GCE.CUS_TRANSPORT_INFORMATION
          , GCE.DIC_REPAYMENT_CODE_ID
          , GCE.DIC_SUBJUGATED_LICENCE_ID
          , CNT_CUSTOMS.CNTID CNTID_CUSTOMS
          , CNT_CUSTOMS.CNTNAME CNTNAME_CUSTOMS
          , CNT_CUSTOMS.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID_CUSTOMS
          , CNT_CUSTOMS.CNT_CE_CODE CNT_CE_CODE_CUSTOMS
          , CNT_CUSTOMS.CNT_CE_MEMBER CNT_CE_MEMBER_CUSTOMS
          , CNT_ORIGIN.CNTID CNTID_ORIGIN
          , CNT_ORIGIN.CNTNAME CNTNAME_ORIGIN
          , CNT_ORIGIN.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID_ORIGIN
          , CNT_ORIGIN.CNT_CE_CODE CNT_CE_CODE_ORIGIN
          , CNT_ORIGIN.CNT_CE_MEMBER CNT_CE_MEMBER_ORIGIN
          , GFD.DATA_UNIT_PRICE_SALE
          , GFD.DIC_FREE_TABLE_1_ID
          , GFD.DIC_FREE_TABLE_2_ID
          , GFD.DIC_FREE_TABLE_3_ID
          , GFD.DIC_FREE_TABLE_4_ID
          , GFD.DIC_FREE_TABLE_5_ID
          , POS.POS_DISCOUNT_AMOUNT
          , POS.POS_CHARGE_AMOUNT
          , POS.POS_VAT_AMOUNT
          , POS.POS_VAT_BASE_AMOUNT
          , POS.POS_GROSS_UNIT_VALUE
          , POS.POS_GROSS_UNIT_VALUE_SU
          , POS.POS_NET_UNIT_VALUE
          , POS.POS_NET_UNIT_VALUE_INCL
          , POS.POS_REF_UNIT_VALUE
          , POS.POS_GROSS_VALUE
          , POS.POS_NET_VALUE_EXCL
          , POS.POS_NET_VALUE_INCL
          , POS.POS_BASIS_QUANTITY
          , POS.POS_INTERMEDIATE_QUANTITY
          , POS.POS_FINAL_QUANTITY
          , case
              when(DMT.DMT_ADDENDUM_INDEX is not null)
              and (POS.C_DOC_POS_STATUS = '04') then POS.POS_ADDENDUM_QTY_BALANCED
              else POS.POS_BALANCE_QUANTITY
            end POS_BALANCE_QUANTITY
          , POS.POS_RATE_FACTOR
          , POS.POS_NET_WEIGHT
          , POS.POS_GROSS_WEIGHT
          , POS.DIC_UNIT_OF_MEASURE_ID
          , POS.POS_NOM_TEXT
          , POS.POS_UNIT_COST_PRICE
          , POS.POS_EAN_CODE
          , POS.POS_EAN_UCC14_CODE
          , POS.POS_HIBC_PRIMARY_CODE
          , POS.DIC_POS_FREE_TABLE_1_ID
          , POS.DIC_POS_FREE_TABLE_2_ID
          , POS.DIC_POS_FREE_TABLE_3_ID
          , POS.POS_DECIMAL_1
          , POS.POS_DECIMAL_2
          , POS.POS_DECIMAL_3
          , POS.POS_TEXT_1
          , POS.POS_TEXT_2
          , POS.POS_TEXT_3
          , POS.POS_DATE_1
          , POS.POS_DATE_2
          , POS.POS_DATE_3
          , POS.POS_DISCOUNT_UNIT_VALUE
          , POS.POS_DISCOUNT_RATE
          , POS.POS_VALUE_QUANTITY
          , POS.POS_INCLUDE_TAX_TARIFF
          , POS.POS_GROSS_UNIT_VALUE_INCL
          , POS.POS_GROSS_UNIT_VALUE_INCL_SU
          , POS.POS_GROSS_VALUE_INCL
          , POS.POS_BALANCE_QTY_VALUE
          , POS.POS_UTIL_COEFF
          , POS.POS_GROSS_UNIT_VALUE2
          , POS.DIC_DIC_UNIT_OF_MEASURE_ID
          , POS.POS_CONVERT_FACTOR2
          , POS.POS_VAT_AMOUNT_V
          , POS.POS_NET_TARIFF
          , POS.POS_SPECIAL_TARIFF
          , POS.POS_FLAT_RATE
          , POS.POS_BASIS_QUANTITY_SU
          , POS.POS_INTERMEDIATE_QUANTITY_SU
          , POS.POS_FINAL_QUANTITY_SU
          , POS.C_POS_DELIVERY_TYP
          , POS.POS_BALANCED
          , DETAIL.DOC_POSITION_DETAIL_ID
          , DETAIL.PERE_DOC_POSITION_DETAIL_ID
          , DETAIL.PERE_DMT_NUMBER
          , DETAIL.PERE_DMT_DATE_DOCUMENT
          , DETAIL.PERE_C_GAUGE_TITLE
          , DETAIL.PERE_DMT_PARTNER_NUMBER
          , DETAIL.PERE_DMT_PARTNTER_REFERENCE
          , DETAIL.PERE_DATE_PARTNER_DOCUMENT
          , DETAIL.G_PERE_DOC_POSITION_DETAIL_ID
          , DETAIL.G_PERE_DMT_NUMBER
          , DETAIL.G_PERE_DMT_DATE_DOCUMENT
          , DETAIL.G_PERE_C_GAUGE_TITLE
          , DETAIL.G_PERE_DMT_PARTNER_NUMBER
          , DETAIL.G_PERE_DMT_PARTNTER_REFERENCE
          , DETAIL.G_PERE_DATE_PARTNER_DOCUMENT
          , DETAIL.STM_LOCATION_ID
          , LOC.LOC_DESCRIPTION
          , STM.STO_DESCRIPTION
          , DETAIL.STM_STM_LOCATION_ID
          , LOC_LOC.LOC_DESCRIPTION LOC_LOC_DESCRIPTION
          , STM_STM.STO_DESCRIPTION STO_STO_DESCRIPTION
          , DETAIL.DIC_DELAY_UPDATE_TYPE_ID
          , DETAIL.PDE_DELAY_UPDATE_TEXT
          , DETAIL.GCO1_CHARACTERIZATION_ID
          , DETAIL.GCO2_CHARACTERIZATION_ID
          , DETAIL.GCO3_CHARACTERIZATION_ID
          , DETAIL.GCO4_CHARACTERIZATION_ID
          , DETAIL.GCO5_CHARACTERIZATION_ID
          , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO1_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                                                                                                      GCO1_CHARAC_DESCR
          , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO2_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                                                                                                      GCO2_CHARAC_DESCR
          , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO3_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                                                                                                      GCO3_CHARAC_DESCR
          , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO4_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                                                                                                      GCO4_CHARAC_DESCR
          , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO5_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                                                                                                      GCO5_CHARAC_DESCR
          , DETAIL.PDE_CHARACTERIZATION_VALUE_1
          , DETAIL.PDE_CHARACTERIZATION_VALUE_2
          , DETAIL.PDE_CHARACTERIZATION_VALUE_3
          , DETAIL.PDE_CHARACTERIZATION_VALUE_4
          , DETAIL.PDE_CHARACTERIZATION_VALUE_5
          , DETAIL.PDE_PIECE
          , DETAIL.PDE_SET
          , DETAIL.PDE_VERSION
          , DETAIL.PDE_CHRONOLOGICAL
          , DETAIL.PDE_STD_CHAR_1
          , DETAIL.PDE_STD_CHAR_2
          , DETAIL.PDE_STD_CHAR_3
          , DETAIL.PDE_STD_CHAR_4
          , DETAIL.PDE_STD_CHAR_5
          , DETAIL.PDE_BASIS_DELAY
          , DETAIL.PDE_BASIS_DELAY_M
          , DETAIL.PDE_BASIS_DELAY_W
          , DETAIL.PDE_BASIS_QUANTITY
          , DETAIL.PDE_BASIS_QUANTITY_SU
          , DETAIL.PDE_INTERMEDIATE_DELAY
          , DETAIL.PDE_INTERMEDIATE_DELAY_M
          , DETAIL.PDE_INTERMEDIATE_DELAY_W
          , DETAIL.PDE_INTERMEDIATE_QUANTITY
          , DETAIL.PDE_INTERMEDIATE_QUANTITY_SU
          , DETAIL.PDE_FINAL_DELAY
          , DETAIL.PDE_FINAL_DELAY_M
          , DETAIL.PDE_FINAL_DELAY_W
          , DETAIL.PDE_FINAL_QUANTITY
          , DETAIL.PDE_FINAL_QUANTITY_SU
          , DETAIL.PDE_BALANCE_QUANTITY
          , DETAIL.P_PDE_BALANCE_QUANTITY
          , DETAIL.P_PDE_BALANCE_QUANTITY_PARENT
          , DETAIL.P_PDE_BASIS_QUANTITY
          , DETAIL.P_PDE_BASIS_QUANTITY_SU
          , DETAIL.P_PDE_INTERMEDIATE_QUANTITY
          , DETAIL.P_PDE_INTERMEDIATE_QUANTITY_SU
          , DETAIL.P_PDE_FINAL_QUANTITY
          , DETAIL.P_PDE_FINAL_QUANTITY_SU
          , DETAIL.NEED_FAN_EXCEED_QTY
          , DETAIL.NEED_FAN_FREE_QTY
          , DETAIL.NEED_FAN_FULL_QTY
          , DETAIL.NEED_FAN_NETW_QTY
          , DETAIL.NEED_FAN_PREV_QTY
          , DETAIL.NEED_FAN_REALIZE_QTY
          , DETAIL.NEED_FAN_RETURN_QTY
          , DETAIL.NEED_FAN_STK_QTY
          , DETAIL.NEED_FAL_NETWORK_NEED_ID
          , DETAIL.SUPPLY_FAN_EXCEED_QTY
          , DETAIL.SUPPLY_FAN_FREE_QTY
          , DETAIL.SUPPLY_FAN_FULL_QTY
          , DETAIL.SUPPLY_FAN_NETW_QTY
          , DETAIL.SUPPLY_FAN_PREV_QTY
          , DETAIL.SUPPLY_FAN_REALIZE_QTY
          , DETAIL.SUPPLY_FAN_RETURN_QTY
          , DETAIL.SUPPLY_FAN_STK_QTY
          , DETAIL.SUPPLY_FAL_NETWORK_SUPPLY_ID
          , DETAIL.LOT_REFCOMPL
          , DETAIL.GOO_MAJOR_REFERENCE COMP_MAJOR_REFERENCE
          , DETAIL.SCS_SHORT_DESCR
          , DETAIL.SCS_LONG_DESCR
          , DETAIL.SCS_FREE_DESCR
          , FOO.FOO_TOTAL_NET_WEIGHT_MEAS
          , FOO.FOO_TOTAL_GROSS_WEIGHT_MEAS
          , POS.POS_TARIFF_SET
          , DMT.DOC_RECORD_ID
          , REC.RCO_SUPPLIER_SERIAL_NUMBER
          , DMT.PAC_THIRD_ACI_ID
          , DMT.PAC_THIRD_DELIVERY_ID
          , DMT.PAC_THIRD_TARIFF_ID
          , DMT.PAC_REPR_ACI_ID
          , DMT.PAC_REPR_DELIVERY_ID
          , DMT.PC_LANG_ACI_ID
          , DMT.PC_LANG_DELIVERY_ID
          , DMT.DMT_NAME1
          , DMT.DMT_FORENAME1
          , DMT.DMT_ACTIVITY1
          , DMT.DMT_CARE_OF1
          , DMT.DMT_PO_BOX1
          , DMT.DMT_PO_BOX_NBR1
          , DMT.DMT_COUNTY1
          , DMT.DMT_CONTACT1
          , DMT.DMT_NAME2
          , DMT.DMT_FORENAME2
          , DMT.DMT_ACTIVITY2
          , DMT.DMT_CARE_OF2
          , DMT.DMT_PO_BOX2
          , DMT.DMT_PO_BOX_NBR2
          , DMT.DMT_COUNTY2
          , DMT.DMT_CONTACT2
          , DMT.DMT_NAME3
          , DMT.DMT_FORENAME3
          , DMT.DMT_ACTIVITY3
          , DMT.DMT_CARE_OF3
          , DMT.DMT_PO_BOX3
          , DMT.DMT_PO_BOX_NBR3
          , DMT.DMT_COUNTY3
          , DMT.DMT_CONTACT3
          , case
              when nvl(DMT.DMT_PO_BOX2,nvl(DMT.DMT_PO_BOX1,0)) = nvl(DMT.DMT_PO_BOX1,0)
               and nvl(DMT.DMT_PO_BOX_NBR2,nvl(DMT.DMT_PO_BOX_NBR1,0)) = nvl(DMT.DMT_PO_BOX_NBR1,0)
               and nvl(DMT.DMT_COUNTY2,nvl(DMT.DMT_COUNTY1,0)) = nvl(DMT.DMT_COUNTY1,0)
               and nvl(DMT.DMT_ADDRESS2,nvl(DMT.DMT_ADDRESS1,0)) = nvl(DMT.DMT_ADDRESS1,0)
               and nvl(DMT.DMT_FORMAT_CITY2,nvl(DMT.DMT_FORMAT_CITY1,0)) = nvl(DMT.DMT_FORMAT_CITY1,0)
               and nvl(DMT.DMT_TOWN2,nvl(DMT.DMT_TOWN1,0)) = nvl(DMT.DMT_TOWN1,0)
               and nvl(CNT2.CNTID,nvl(CNT.CNTID,0)) = nvl(CNT.CNTID,0)
              then 1
              else 0
            end ADR_DO_LIKE_LIVR
          , case
              when nvl(DMT.DMT_PO_BOX3,nvl(DMT.DMT_PO_BOX1,0)) = nvl(DMT.DMT_PO_BOX1,0)
               and nvl(DMT.DMT_PO_BOX_NBR3,nvl(DMT.DMT_PO_BOX_NBR1,0)) = nvl(DMT.DMT_PO_BOX_NBR1,0)
               and nvl(DMT.DMT_COUNTY3,nvl(DMT.DMT_COUNTY1,0)) = nvl(DMT.DMT_COUNTY1,0)
               and nvl(DMT.DMT_ADDRESS3,nvl(DMT.DMT_ADDRESS1,0)) = nvl(DMT.DMT_ADDRESS1,0)
               and nvl(DMT.DMT_FORMAT_CITY3,nvl(DMT.DMT_FORMAT_CITY1,0)) = nvl(DMT.DMT_FORMAT_CITY1,0)
               and nvl(DMT.DMT_TOWN3,nvl(DMT.DMT_TOWN1,0)) = nvl(DMT.DMT_TOWN1,0)
               and nvl(CNT3.CNTID,nvl(CNT.CNTID,0)) = nvl(CNT.CNTID,0)
              then 1
              else 0
            end ADR_DO_LIKE_FACT
          , REC_PDE.RCO_TITLE PDE_RCO_TITLE
          , REC_PDE.RCO_SUPPLIER_SERIAL_NUMBER PDE_RCO_SUPPLIER_SERIAL_NUMBER
          , POS.CML_EVENTS_ID
          , CEV.ASA_COUNTER_STATEMENT_ID
          , CEV.CML_POSITION_SERVICE_DETAIL_ID
          , CEV.CML_POSITION_MACHINE_DETAIL_ID
          , CEV.CEV_COUNTER_BEGIN_QTY
          , CEV.CEV_COUNTER_END_QTY
          , CEV.CEV_COUNTER_BEGIN_DATE
          , CEV.CEV_COUNTER_END_DATE
          , CEV.CEV_FREE_QTY
          , CEV.CEV_GROSS_CONSUMED_QTY
          , CEV.CEV_NET_CONSUMED_QTY
          , CEV.CEV_BALANCE_QTY
          , CEV.CEV_INVOICING_QTY
          , CEV.CEV_GLOBAL_EVENT
          , CEV.CEV_RENEWAL_GENERATED
          , CPO.CML_POSITION_ID
          , CPO.CPO_SEQUENCE
          , CCO.CCO_NUMBER
          , case
              when POS.POS_ADDENDUM_SRC_POS_ID is null then 1
              else 0
            end POS_NEW
          , case
              when DETAIL.PDE_ADDENDUM_SRC_PDE_ID is null then 1
              else 0
            end PDE_NEW
          , case
              when POS_ADD.POS_BASIS_QUANTITY <> POS.POS_BASIS_QUANTITY then 1
              else 0
            end POS_BASIS_QTY_UPDATED
          , case
              when POS_ADD.POS_INTERMEDIATE_QUANTITY <> POS.POS_INTERMEDIATE_QUANTITY then 1
              else 0
            end POS_INTER_QTY_UPDATED
          , case
              when POS_ADD.POS_FINAL_QUANTITY <> POS.POS_FINAL_QUANTITY then 1
              else 0
            end POS_FINAL_QTY_UPDATED
          , case
              when POS_ADD.POS_NET_UNIT_VALUE <> POS.POS_NET_UNIT_VALUE then 1
              else 0
            end POS_PRICE_UPDATED
          , case
              when POS_ADD.POS_REFERENCE <> POS.POS_REFERENCE then 1
              else 0
            end POS_REF_UPDATED
          , case
              when POS_ADD.POS_SHORT_DESCRIPTION <> POS.POS_SHORT_DESCRIPTION then 1
              else 0
            end POS_SHORT_DES_UPDATED
          , case
              when POS_ADD.POS_LONG_DESCRIPTION <> POS.POS_LONG_DESCRIPTION then 1
              else 0
            end POS_LONG_DES_UPDATED
          , case
              when POS_ADD.POS_FREE_DESCRIPTION <> POS.POS_FREE_DESCRIPTION then 1
              else 0
            end POS_FREE_DES_UPDATED
          , case
              when PDE_ADD.PDE_BASIS_DELAY <> DETAIL.PDE_BASIS_DELAY then 1
              else 0
            end PDE_BASIS_DELAY_UPDATED
          , case
              when PDE_ADD.PDE_INTERMEDIATE_DELAY <> DETAIL.PDE_INTERMEDIATE_DELAY then 1
              else 0
            end PDE_INTER_DELAY_UPDATED
          , case
              when PDE_ADD.PDE_FINAL_DELAY <> DETAIL.PDE_FINAL_DELAY then 1
              else 0
            end PDE_FINAL_DELAY_UPDATED
       from PCS.PC_LANG LANG
          , STM_LOCATION LOC
          , STM_LOCATION LOC_LOC
          , ACS_FIN_ACC_S_PAYMENT AFA
          , ACS_PAYMENT_METHOD APM
          , ACS_ACCOUNT TVA
          , DOC_RECORD REC
          , DOC_RECORD REC_POS
          , DOC_RECORD REC_PDE
          , DOC_FOOT FOO
          , GCO_FREE_DATA GFD
          , GCO_CUSTOMS_ELEMENT GCE
          , PCS.PC_CNTRY CNT_CUSTOMS
          , PCS.PC_CNTRY CNT_ORIGIN
          , PAC_SENDING_CONDITION PSC
          , PAC_PAYMENT_CONDITION PMT
          , ACS_FINANCIAL_CURRENCY AFC
          , DOC_FREE_DATA DFD
          , DOC_GAUGE_SIGNATORY DGS
          , DOC_GAUGE_SIGNATORY DGS2
          , DOC_GAUGE_POSITION DGP
          , PAC_CUSTOM_PARTNER CUS
          , ACS_ACCOUNT ACCC
          , PAC_ADDRESS ADR
          , PAC_ADDRESS ADR2
          , PAC_ADDRESS ADR3
          , PAC_REPRESENTATIVE REP
          , PAC_REPRESENTATIVE REP_POS
          , PAC_ADDRESS ADR_SEN
          , PAC_PERSON PER_SEN
          , PAC_PERSON PER
          , PAC_PERSON PER2
          , PAC_PERSON PER3
          , PAC_SUPPLIER_PARTNER SUP
          , ACS_ACCOUNT ACCS
          , PAC_THIRD THI
          , ACS_TAX_CODE ATC
          , PCS.PC_CURR CUR
          , PCS.PC_CNTRY CNT
          , PCS.PC_CNTRY CNT2
          , PCS.PC_CNTRY CNT3
          , DOC_GAUGE GAU
          , DOC_GAUGE_STRUCTURED GST
          , STM_STOCK STM
          , STM_STOCK STM_STM
          , GCO_GOOD GOO
          , GCO_PRODUCT PDT
          , DOC_POSITION POS
          , DOC_DOCUMENT DMT
          , CML_EVENTS CEV
          , CML_POSITION CPO
          , CML_DOCUMENT CCO
          , DOC_POSITION POS_ADD
          , DOC_POSITION_DETAIL PDE_ADD
          , (select DMT.DMT_NUMBER
                  , POS.DOC_POSITION_ID POSITIONID
                  , PDE.DOC_POSITION_DETAIL_ID
                  , (PDE.FAL_SCHEDULE_STEP_ID) FAL_SCHEDULE_STEP_ID
                  , (DMT_PERE.DMT_NUMBER) PERE_DMT_NUMBER
                  , (DMT_PERE.DMT_DATE_DOCUMENT) PERE_DMT_DATE_DOCUMENT
                  , (GAU_PERE.C_GAUGE_TITLE) PERE_C_GAUGE_TITLE
                  , (DMT_PERE.DMT_PARTNER_NUMBER) PERE_DMT_PARTNER_NUMBER
                  , (DMT_PERE.DMT_PARTNER_REFERENCE) PERE_DMT_PARTNTER_REFERENCE
                  , (DMT_PERE.DMT_DATE_PARTNER_DOCUMENT) PERE_DATE_PARTNER_DOCUMENT
                  , (DMT_G_PERE.DMT_NUMBER) G_PERE_DMT_NUMBER
                  , (DMT_G_PERE.DMT_DATE_DOCUMENT) G_PERE_DMT_DATE_DOCUMENT
                  , (GAU_G_PERE.C_GAUGE_TITLE) G_PERE_C_GAUGE_TITLE
                  , (DMT_G_PERE.DMT_PARTNER_NUMBER) G_PERE_DMT_PARTNER_NUMBER
                  , (DMT_G_PERE.DMT_PARTNER_REFERENCE) G_PERE_DMT_PARTNTER_REFERENCE
                  , (DMT_G_PERE.DMT_DATE_PARTNER_DOCUMENT) G_PERE_DATE_PARTNER_DOCUMENT
                  , (PDE.STM_LOCATION_ID) STM_LOCATION_ID
                  , (PDE.STM_STM_LOCATION_ID) STM_STM_LOCATION_ID
                  , (PDE.DIC_DELAY_UPDATE_TYPE_ID) DIC_DELAY_UPDATE_TYPE_ID
                  , (PDE.PDE_DELAY_UPDATE_TEXT) PDE_DELAY_UPDATE_TEXT
                  , PDE.GCO_CHARACTERIZATION_ID GCO1_CHARACTERIZATION_ID
                  , PDE.GCO_GCO_CHARACTERIZATION_ID GCO2_CHARACTERIZATION_ID
                  , PDE.GCO2_GCO_CHARACTERIZATION_ID GCO3_CHARACTERIZATION_ID
                  , PDE.GCO3_GCO_CHARACTERIZATION_ID GCO4_CHARACTERIZATION_ID
                  , PDE.GCO4_GCO_CHARACTERIZATION_ID GCO5_CHARACTERIZATION_ID
                  , (PDE.PDE_CHARACTERIZATION_VALUE_1) PDE_CHARACTERIZATION_VALUE_1
                  , (PDE.PDE_CHARACTERIZATION_VALUE_2) PDE_CHARACTERIZATION_VALUE_2
                  , (PDE.PDE_CHARACTERIZATION_VALUE_3) PDE_CHARACTERIZATION_VALUE_3
                  , (PDE.PDE_CHARACTERIZATION_VALUE_4) PDE_CHARACTERIZATION_VALUE_4
                  , (PDE.PDE_CHARACTERIZATION_VALUE_5) PDE_CHARACTERIZATION_VALUE_5
                  , PDE.PDE_PIECE
                  , PDE.PDE_SET
                  , PDE.PDE_VERSION
                  , PDE.PDE_CHRONOLOGICAL
                  , PDE.PDE_STD_CHAR_1
                  , PDE.PDE_STD_CHAR_2
                  , PDE.PDE_STD_CHAR_3
                  , PDE.PDE_STD_CHAR_4
                  , PDE.PDE_STD_CHAR_5
                  , (PDE.PDE_BASIS_DELAY) PDE_BASIS_DELAY
                  , (PDE.PDE_BASIS_DELAY_M) PDE_BASIS_DELAY_M
                  , (PDE.PDE_BASIS_DELAY_W) PDE_BASIS_DELAY_W
                  , (PDE.PDE_BASIS_QUANTITY) PDE_BASIS_QUANTITY
                  , (PDE.PDE_BASIS_QUANTITY_SU) PDE_BASIS_QUANTITY_SU
                  , (PDE.PDE_INTERMEDIATE_DELAY) PDE_INTERMEDIATE_DELAY
                  , (PDE.PDE_INTERMEDIATE_DELAY_M) PDE_INTERMEDIATE_DELAY_M
                  , (PDE.PDE_INTERMEDIATE_DELAY_W) PDE_INTERMEDIATE_DELAY_W
                  , (PDE.PDE_INTERMEDIATE_QUANTITY) PDE_INTERMEDIATE_QUANTITY
                  , (PDE.PDE_INTERMEDIATE_QUANTITY_SU) PDE_INTERMEDIATE_QUANTITY_SU
                  , (PDE.PDE_FINAL_DELAY) PDE_FINAL_DELAY
                  , (PDE.PDE_FINAL_DELAY_M) PDE_FINAL_DELAY_M
                  , (PDE.PDE_FINAL_DELAY_W) PDE_FINAL_DELAY_W
                  , (PDE.PDE_FINAL_QUANTITY) PDE_FINAL_QUANTITY
                  , (PDE.PDE_FINAL_QUANTITY_SU) PDE_FINAL_QUANTITY_SU
                  , case
                      when(DMT.DMT_ADDENDUM_INDEX is not null)
                      and (POS.C_DOC_POS_STATUS = '04') then PDE.PDE_ADDENDUM_QTY_BALANCED
                      else PDE.PDE_BALANCE_QUANTITY
                    end PDE_BALANCE_QUANTITY
                  , (PERE.DOC_POSITION_DETAIL_ID) PERE_DOC_POSITION_DETAIL_ID
                  , (PERE.PDE_BALANCE_QUANTITY) P_PDE_BALANCE_QUANTITY
                  , (PERE.PDE_BALANCE_QUANTITY_PARENT) P_PDE_BALANCE_QUANTITY_PARENT
                  , (PERE.PDE_BASIS_QUANTITY) P_PDE_BASIS_QUANTITY
                  , (PERE.PDE_BASIS_QUANTITY_SU) P_PDE_BASIS_QUANTITY_SU
                  , (PERE.PDE_INTERMEDIATE_QUANTITY) P_PDE_INTERMEDIATE_QUANTITY
                  , (PERE.PDE_INTERMEDIATE_QUANTITY_SU) P_PDE_INTERMEDIATE_QUANTITY_SU
                  , (PERE.PDE_FINAL_QUANTITY) P_PDE_FINAL_QUANTITY
                  , (PERE.PDE_FINAL_QUANTITY_SU) P_PDE_FINAL_QUANTITY_SU
                  , (G_PERE.DOC_POSITION_DETAIL_ID) G_PERE_DOC_POSITION_DETAIL_ID
                  , (NEE.FAN_EXCEED_QTY) NEED_FAN_EXCEED_QTY
                  , (NEE.FAN_FREE_QTY) NEED_FAN_FREE_QTY
                  , (NEE.FAN_FULL_QTY) NEED_FAN_FULL_QTY
                  , (NEE.FAN_NETW_QTY) NEED_FAN_NETW_QTY
                  , (NEE.FAN_PREV_QTY) NEED_FAN_PREV_QTY
                  , (NEE.FAN_REALIZE_QTY) NEED_FAN_REALIZE_QTY
                  , (NEE.FAN_RETURN_QTY) NEED_FAN_RETURN_QTY
                  , (NEE.FAN_STK_QTY) NEED_FAN_STK_QTY
                  , (NEE.FAL_NETWORK_NEED_ID) NEED_FAL_NETWORK_NEED_ID
                  , (SUPP.FAN_EXCEED_QTY) SUPPLY_FAN_EXCEED_QTY
                  , (SUPP.FAN_FREE_QTY) SUPPLY_FAN_FREE_QTY
                  , (SUPP.FAN_FULL_QTY) SUPPLY_FAN_FULL_QTY
                  , (SUPP.FAN_NETW_QTY) SUPPLY_FAN_NETW_QTY
                  , (SUPP.FAN_PREV_QTY) SUPPLY_FAN_PREV_QTY
                  , (SUPP.FAN_REALIZE_QTY) SUPPLY_FAN_REALIZE_QTY
                  , (SUPP.FAN_RETURN_QTY) SUPPLY_FAN_RETURN_QTY
                  , (SUPP.FAN_STK_QTY) SUPPLY_FAN_STK_QTY
                  , (SUPP.FAL_NETWORK_SUPPLY_ID) SUPPLY_FAL_NETWORK_SUPPLY_ID
                  , (LOT.LOT_REFCOMPL) LOT_REFCOMPL
                  , (COMP.GOO_MAJOR_REFERENCE) GOO_MAJOR_REFERENCE
                  , (LNK.SCS_SHORT_DESCR) SCS_SHORT_DESCR
                  , (LNK.SCS_LONG_DESCR) SCS_LONG_DESCR
                  , (LNK.SCS_FREE_DESCR) SCS_FREE_DESCR
                  , PDE.DOC_RECORD_ID
                  , PDE.PDE_ADDENDUM_SRC_PDE_ID
               from FAL_NETWORK_NEED NEE
                  , FAL_NETWORK_SUPPLY SUPP
                  , FAL_TASK_LINK LNK
                  , FAL_LOT LOT
                  , GCO_GOOD COMP
                  , DOC_GAUGE_STRUCTURED GAU_G_PERE
                  , DOC_GAUGE_STRUCTURED GAU_PERE
                  , DOC_POSITION_DETAIL G_PERE
                  , DOC_POSITION_DETAIL PERE
                  , DOC_POSITION_DETAIL PDE
                  , DOC_DOCUMENT DMT_G_PERE
                  , DOC_DOCUMENT DMT_PERE
                  , DOC_POSITION POS
                  , DOC_DOCUMENT DMT
              where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
                and POS.DOC_POSITION_ID = PDE.DOC_POSITION_ID (+)
                and PDE.DOC_DOC_POSITION_DETAIL_ID = PERE.DOC_POSITION_DETAIL_ID(+)
                and PERE.DOC_DOCUMENT_ID = DMT_PERE.DOC_DOCUMENT_ID(+)
                and PERE.DOC_DOC_POSITION_DETAIL_ID = G_PERE.DOC_POSITION_DETAIL_ID(+)
                and PDE.FAL_SCHEDULE_STEP_ID = LNK.FAL_SCHEDULE_STEP_ID(+)
                and LNK.FAL_LOT_ID = LOT.FAL_LOT_ID(+)
                and LOT.GCO_GOOD_ID = COMP.GCO_GOOD_ID(+)
                and PERE.DOC_GAUGE_ID = GAU_PERE.DOC_GAUGE_ID(+)
                and G_PERE.DOC_DOCUMENT_ID = DMT_G_PERE.DOC_DOCUMENT_ID(+)
                and G_PERE.DOC_GAUGE_ID = GAU_G_PERE.DOC_GAUGE_ID(+)
                and PDE.DOC_POSITION_DETAIL_ID = NEE.DOC_POSITION_DETAIL_ID(+)
                and PDE.DOC_POSITION_DETAIL_ID = SUPP.DOC_POSITION_DETAIL_ID(+)) DETAIL
      where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
        and POS.DOC_POSITION_ID = DETAIL.POSITIONID (+)
        and DMT.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
        and GAU.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
        and POS.DOC_GAUGE_POSITION_ID = DGP.DOC_GAUGE_POSITION_ID
        and DMT.PC_LANG_ID = LANG.PC_LANG_ID
        and POS.ACS_TAX_CODE_ID = TVA.ACS_ACCOUNT_ID(+)
        and DMT.ACS_FIN_ACC_S_PAYMENT_ID = AFA.ACS_FIN_ACC_S_PAYMENT_ID(+)
        and AFA.ACS_PAYMENT_METHOD_ID = APM.ACS_PAYMENT_METHOD_ID(+)
        and DMT.PAC_REPRESENTATIVE_ID = REP.PAC_REPRESENTATIVE_ID(+)
        and DMT.DOC_DOCUMENT_ID = DFD.DOC_DOCUMENT_ID(+)
        and DMT.DOC_DOCUMENT_ID = FOO.DOC_DOCUMENT_ID(+)
        and POS.ACS_TAX_CODE_ID = ATC.ACS_TAX_CODE_ID(+)
        and POS.GCO_GOOD_ID = GCE.GCO_GOOD_ID(+)
        and GCE.PC_CNTRY_ID = CNT_CUSTOMS.PC_CNTRY_ID(+)
        and GCE.PC_ORIGIN_PC_CNTRY_ID = CNT_ORIGIN.PC_CNTRY_ID(+)
        and GCE.C_CUSTOMS_ELEMENT_TYPE(+) = 'EXPORT'
        and POS.PAC_REPRESENTATIVE_ID = REP_POS.PAC_REPRESENTATIVE_ID(+)
        and FOO.DOC_GAUGE_SIGNATORY_ID = DGS.DOC_GAUGE_SIGNATORY_ID(+)
        and FOO.DOC_DOC_GAUGE_SIGNATORY_ID = DGS2.DOC_GAUGE_SIGNATORY_ID(+)
        and DMT.DOC_RECORD_ID = REC.DOC_RECORD_ID(+)
        and POS.DOC_RECORD_ID = REC_POS.DOC_RECORD_ID(+)
        and DETAIL.DOC_RECORD_ID = REC_PDE.DOC_RECORD_ID(+)
        and DMT.PAC_SENDING_CONDITION_ID = PSC.PAC_SENDING_CONDITION_ID(+)
        and PSC.PAC_ADDRESS_ID = ADR_SEN.PAC_ADDRESS_ID(+)
        and ADR_SEN.PAC_PERSON_ID = PER_SEN.PAC_PERSON_ID(+)
        and DMT.PAC_THIRD_ID = THI.PAC_THIRD_ID(+)
        and DMT.PAC_THIRD_ID = CUS.PAC_CUSTOM_PARTNER_ID(+)
        and CUS.ACS_AUXILIARY_ACCOUNT_ID = ACCC.ACS_ACCOUNT_ID(+)
        and SUP.ACS_AUXILIARY_ACCOUNT_ID = ACCS.ACS_ACCOUNT_ID(+)
        and DMT.PAC_THIRD_ID = SUP.PAC_SUPPLIER_PARTNER_ID(+)
        and DMT.PAC_ADDRESS_ID = ADR.PAC_ADDRESS_ID(+)
        and ADR.PAC_PERSON_ID = PER.PAC_PERSON_ID(+)
        and DMT.PAC_PAC_ADDRESS_ID = ADR2.PAC_ADDRESS_ID(+)
        and ADR2.PAC_PERSON_ID = PER2.PAC_PERSON_ID(+)
        and DMT.PAC2_PAC_ADDRESS_ID = ADR3.PAC_ADDRESS_ID(+)
        and ADR3.PAC_PERSON_ID = PER3.PAC_PERSON_ID(+)
        and DMT.PC_CNTRY_ID = CNT.PC_CNTRY_ID(+)
        and DMT.PC__PC_CNTRY_ID = CNT2.PC_CNTRY_ID(+)
        and DMT.PC_2_PC_CNTRY_ID = CNT3.PC_CNTRY_ID(+)
        and DMT.ACS_FINANCIAL_CURRENCY_ID = AFC.ACS_FINANCIAL_CURRENCY_ID(+)
        and AFC.PC_CURR_ID = CUR.PC_CURR_ID(+)
        and DMT.PAC_PAYMENT_CONDITION_ID = PMT.PAC_PAYMENT_CONDITION_ID(+)
        and DETAIL.STM_LOCATION_ID = LOC.STM_LOCATION_ID(+)
        and DETAIL.STM_STM_LOCATION_ID = LOC_LOC.STM_LOCATION_ID(+)
        and LOC.STM_STOCK_ID = STM.STM_STOCK_ID(+)
        and LOC_LOC.STM_STOCK_ID = STM_STM.STM_STOCK_ID(+)
        and POS.GCO_GOOD_ID = GOO.GCO_GOOD_ID(+)
        and GOO.GCO_GOOD_ID = PDT.GCO_GOOD_ID(+)
        and GOO.GCO_GOOD_ID = GFD.GCO_GOOD_ID(+)
        and POS.CML_EVENTS_ID = CEV.CML_EVENTS_ID(+)
        and DMT.DMT_NUMBER = PARAMETER_0
        and POS.CML_POSITION_ID = CPO.CML_POSITION_ID(+)
        and CPO.CML_DOCUMENT_ID = CCO.CML_DOCUMENT_ID(+)
        and POS.POS_ADDENDUM_SRC_POS_ID = POS_ADD.DOC_POSITION_ID(+)
        and PDE_ADD.DOC_POSITION_DETAIL_ID(+) = DETAIL.PDE_ADDENDUM_SRC_PDE_ID;
end RPT_DOC_STD_2;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3" (
  arefcursor        in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0       in     DOC_DOCUMENT.DMT_NUMBER%type
, proccompany_owner in     PCS.PC_SCRIP.SCRDBOWNER%type
, proccompany_name  in     PCS.PC_COMP.COM_NAME%type
, report_name       in     varchar2
, pc_comp_id        in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id       in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* Description - Used in report DOC_STD_3_RPT

* Stored procedure used in report DOC_STD_3 (Standard document)
* @created   John Schaer 05 JUN 2007
* @lastupdate VHA 14.05.2014
* @param      parameter_0    Numéro de document    (DMT_NUMBER)
*/
  vpc_lang_id               PCS.PC_LANG.PC_LANG_ID%type       := null;
  vpc_comp_id               PCS.PC_COMP.PC_COMP_ID%type;
  vpc_conli_id              PCS.PC_CONLI.PC_CONLI_ID%type;
  vlanid                    PCS.PC_LANG.LANID%type            := null;
  vcom_logo_large           PCS.PC_COMP.COM_LOGO_LARGE%type   := null;
  vcom_logo_small           PCS.PC_COMP.COM_LOGO_SMALL%type   := null;
  vcom_vatno                PCS.PC_COMP.COM_VATNO%type        := null;
  vcom_phone                PCS.PC_COMP.COM_PHONE%type        := null;
  vcom_fax                  PCS.PC_COMP.COM_FAX%type          := null;
  vcom_web                  PCS.PC_COMP.COM_TELEX%type        := null;
  vcom_email                PCS.PC_COMP.COM_EMAIl%type        := null;
  vcom_descr                PCS.PC_COMP.COM_DESCR%type        := null;
  vcom_socialname           PCS.PC_COMP.COM_SOCIALNAME%type   := null;
  vcom_ide                  PCS.PC_COMP.COM_IDE%type          := null;
  vcom_adr                  varchar2(4000)                    := null;
  vdiscount_surcharge_title varchar2(2)                       := null;
  vform_name                varchar2(4000)                    := null;
begin
  pcs.PC_I_LIB_SESSION.setcompanyid(pc_comp_id);
  pcs.PC_I_LIB_SESSION.setconliid(pc_conli_id);
  vpc_comp_id   := pcs.PC_I_LIB_SESSION.getcompanyid;
  vpc_conli_id  := pcs.PC_I_LIB_SESSION.getconliid;

  if (proccompany_name is not null) then
    select COM.COM_LOGO_LARGE
         , COM.COM_LOGO_SMALL
         , COM.COM_VATNO
         , COM.COM_DESCR
         , COM.COM_ADR || chr(13) || COM.COM_ZIP || ' - ' || COM.COM_CITY
         , COM.COM_PHONE
         , COM.COM_FAX
         , COM.COM_TELEX
         , COM.COM_EMAIL
         , COM.COM_SOCIALNAME
         , COM.COM_IDE
      into VCOM_LOGO_LARGE
         , VCOM_LOGO_SMALL
         , VCOM_VATNO
         , VCOM_DESCR
         , VCOM_ADR
         , VCOM_PHONE
         , VCOM_FAX
         , VCOM_WEB
         , VCOM_EMAIL
         , VCOM_SOCIALNAME
         , VCOM_IDE
      from PCS.PC_COMP COM
     where COM.COM_NAME = proccompany_name;
  end if;

  begin
    if (parameter_0 is not null) then
      select DMT.PC_LANG_ID
           , LAN.LANID
        into vpc_lang_id
           , VLANID
        from DOC_DOCUMENT DMT
           , PCS.PC_LANG LAN
       where DMT.PC_LANG_ID = LAN.PC_LANG_ID
         and DMT.DMT_NUMBER = parameter_0;
    end if;
  exception
    when no_data_found then
      vpc_lang_id  := '';
      vlanid       := '';
  end;

  case(substr(substr(report_name, instr(report_name, '\', -1) + 1), 1, length(substr(report_name, instr(report_name, '\', -1) + 1) ) - 4) )
    when 'DOC_STD_3' then
      vform_name  := 'SD';
    when 'DOC_STD_3_IMAGE' then
      vform_name  := 'SI';
    when 'DOC_STD_3_BL' then
      vform_name  := 'SB';
    when 'DOC_ASA_3' then
      vform_name  := 'AS';
    when 'DOC_STD_STOCK_3' then
      vform_name  := 'ST';
    when 'DOC_STD_STOCK_IMAGE_3' then
      vform_name  := 'SM';
    when 'DOC_STD_3_TTC' then
      vform_name  := 'TT';
    when 'DOC_STD_PICKING_3' then
      vform_name  := 'PK';
    when 'DOC_STD_MP_USH_3' then
      vform_name  := 'MP';
    else
      vform_name  := 'SD';
  end case;

  begin
    if (     (proccompany_name is not null)
        and (parameter_0 is not null) ) then
      case vform_name
        when 'PK' then
          select LAN.PC_LANG_ID
               , LAN.LANID
            into vpc_lang_id
               , vlanid
            from PCS.PC_COMP COM
               , PCS.PC_LANG LAN
           where COM.PC_LANG_ID = LAN.PC_LANG_ID
             and COM.COM_NAME = proccompany_name;
        else
          select DMT.PC_LANG_ID
               , LAN.LANID
            into vpc_lang_id
               , vlanid
            from DOC_DOCUMENT DMT
               , PCS.PC_LANG LAN
           where DMT.PC_LANG_ID = LAN.PC_LANG_ID
             and DMT.DMT_NUMBER = parameter_0;
      end case;
    end if;
  exception
    when no_data_found then
      vpc_lang_id  := '';
      vlanid       := '';
  end;

  /*This filed is used to control the title display for discount and surcharge
    If the document's position has no discount or surcharge, then return '0';
    If it only has discounet, then return '1';
    If it only has surcharge, then return '02;
    If it has discount and surcharge, then return '12'.
  */
  begin
    select   decode(max(PCH.PTC_DISCOUNT_ID), null, decode(max(PCH.PTC_CHARGE_ID), null, '0', '2'), decode(max(PCH.PTC_CHARGE_ID), null, '1', '12') )
        into vdiscount_surcharge_title
        from DOC_DOCUMENT DMT
           , DOC_POSITION POS
           , DOC_POSITION_CHARGE PCH
           , PTC_DISCOUNT DNT
           , PTC_CHARGE CRG
       where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
         and POS.DOC_POSITION_ID = PCH.DOC_POSITION_ID
         and DNT.PTC_DISCOUNT_ID(+) = PCH.PTC_DISCOUNT_ID
         and CRG.PTC_CHARGE_ID(+) = PCH.PTC_CHARGE_ID
         and DMT.DMT_NUMBER = PARAMETER_0
    group by DMT.DMT_NUMBER;
  exception
    when no_data_found then
      vdiscount_surcharge_title  := '';
  end;

  open arefcursor for
    select   vform_name FORM_NAME
           , vcom_phone COM_PHONE
           , vcom_fax COM_FAX
           , vcom_web COM_WEB
           , vcom_email COM_EMAIL
           , vcom_socialname COM_SOCIALNAME
           , DMT.DOC_DOCUMENT_ID
           , DMT.DOC_GAUGE_ID
           , DMT.DMT_NUMBER DOCNUMBER
           , DETAIL.DMT_NUMBER
           , DMT.DMT_DATE_DOCUMENT
           , DMT.DMT_DATE_VALUE
           , DMT.DMT_DATE_FALLING_DUE
           , DMT.DMT_DATE_DELIVERY
           , DMT.C_DOCUMENT_STATUS
           , DMT.DMT_PARTNER_NUMBER
           , DMT.DMT_PARTNER_REFERENCE
           , DMT.DMT_DATE_PARTNER_DOCUMENT
           , DMT.DMT_REFERENCE
           , DMT.DMT_TITLE_TEXT
           , DMT.DMT_HEADING_TEXT
           , DMT.DMT_DOCUMENT_TEXT
           , DMT.DIC_DOC_FREE_1_ID
           , DMT.DIC_DOC_FREE_2_ID
           , DMT.DIC_DOC_FREE_3_ID
           , DMT.DIC_TYPE_SUBMISSION_ID
           , DMT.DIC_POS_FREE_TABLE_1_ID DOC_DIC_POS_FREE_TABLE_1_ID
           , DMT.DIC_POS_FREE_TABLE_2_ID DOC_DIC_POS_FREE_TABLE_2_ID
           , DMT.DIC_POS_FREE_TABLE_3_ID DOC_DIC_POS_FREE_TABLE_3_ID
           , DMT.DMT_DECIMAL_1
           , DMT.DMT_DECIMAL_2
           , DMT.DMT_DECIMAL_3
           , DMT.DMT_TEXT_1
           , DMT.DMT_TEXT_2
           , DMT.DMT_TEXT_3
           , DMT.DMT_DATE_1
           , DMT.DMT_DATE_2
           , DMT.DMT_DATE_3
           , DMT.DIC_GAUGE_FREE_CODE_1_ID
           , DMT.DIC_GAUGE_FREE_CODE_2_ID
           , DMT.DIC_GAUGE_FREE_CODE_3_ID
           , DMT.DMT_GAU_FREE_NUMBER1
           , DMT.DMT_GAU_FREE_NUMBER2
           , DMT.DMT_GAU_FREE_DATE1
           , DMT.DMT_GAU_FREE_DATE2
           , DMT.DMT_GAU_FREE_TEXT_LONG
           , DMT.DMT_GAU_FREE_TEXT_SHORT
           , DMT.DMT_GAU_FREE_BOOL1
           , DMT.DMT_GAU_FREE_BOOL2
           , DMT.DIC_TARIFF_ID
           , DMT.C_INCOTERMS
           , DMT.DMT_INCOTERMS_PLACE
           , REP.PAC_REPRESENTATIVE_ID
           , REP.REP_DESCR
           , REC.DIC_ACCOUNTABLE_GROUP_ID
           , REC.RCO_TITLE
           , REC.RCO_DESCRIPTION
           , DMT.PAC_THIRD_ID
           , THI.DIC_THIRD_ACTIVITY_ID
           , THI.DIC_THIRD_AREA_ID
           , THI.THI_NO_INTRA
           , THI.THI_NO_TVA
           , THI.THI_NO_SIREN
           , THI.THI_NO_SIRET
           , THI.THI_NO_FORMAT
           , CUS.C_DELIVERY_TYP
           , CUS.CUS_SUPPLIER_NUMBER
           , CUS.CUS_FREE_ZONE1
           , CUS.CUS_FREE_ZONE2
           , CUS.CUS_FREE_ZONE3
           , CUS.CUS_FREE_ZONE4
           , CUS.CUS_FREE_ZONE5
           , CUS.DIC_STATISTIC_1_ID
           , CUS.DIC_STATISTIC_2_ID
           , CUS.DIC_STATISTIC_3_ID
           , CUS.DIC_STATISTIC_4_ID
           , CUS.DIC_STATISTIC_5_ID
           , CUS.DIC_TYPE_PARTNER_ID
           , SUP.CRE_CUSTOMER_NUMBER
           , SUP.CRE_FREE_ZONE1
           , SUP.CRE_FREE_ZONE2
           , SUP.CRE_FREE_ZONE3
           , SUP.CRE_FREE_ZONE4
           , SUP.CRE_FREE_ZONE5
           , SUP.DIC_STATISTIC_F1_ID
           , SUP.DIC_STATISTIC_F2_ID
           , SUP.DIC_STATISTIC_F3_ID
           , SUP.DIC_STATISTIC_F4_ID
           , SUP.DIC_STATISTIC_F5_ID
           , SUP.DIC_TYPE_PARTNER_F_ID
           , PSC.PAC_SENDING_CONDITION_ID
           , PSC.PAC_ADDRESS_ID SENDING_ADDRESS_ID
           , PER_SEN.PER_NAME SEN_PER_NAME
           , PER_SEN.PER_FORENAME SEN_PER_FORENAME
           , PER_SEN.PER_ACTIVITY SEN_PER_ACTIVITY
           , PER_SEN.PER_COMMENT SEN_PER_COMMENT
           , PER_SEN.PER_KEY1 SEN_PER_KEY1
           , PER_SEN.PER_KEY2 SEN_PER_KEY2
           , ADR_SEN.ADD_ADDRESS1 SEN_ADD_ADDRESS1
           , ADR_SEN.ADD_FORMAT SEN_ADD_FORMAT
           , APM.ACS_PAYMENT_METHOD_ID
           , ACCC.ACC_NUMBER CUSTOMER_ACCOUNT
           , ACCS.ACC_NUMBER SUPPLIER_ACCOUNT
           , vpc_lang_id pc_lang_id
           , PMT.PAC_PAYMENT_CONDITION_ID
           , PMT.PCO_DESCR
           , PMT.PC_APPLTXT_ID PMT_PC_APPLTXT_ID
           , AFC.ACS_FINANCIAL_CURRENCY_ID
           , CUR.CURRENCY
           , CUR.CURRNAME
           , vlanid lanid
           , DMT.PAC_ADDRESS_ID ADDRESS_ID
           , nvl(DMT.DMT_NAME1, PER.PER_NAME) PER_NAME
           , nvl(DMT.DMT_FORENAME1, PER.PER_FORENAME) PER_FORENAME
           , nvl(DMT.DMT_ACTIVITY1, PER.PER_ACTIVITY) PER_ACTIVITY
           , PER.PER_COMMENT
           , PER.PER_KEY1
           , PER.PER_KEY2
           , DMT.DMT_ADDRESS1
           , DMT.DMT_FORMAT_CITY1
           , DMT.DMT_TOWN1
           , CNT.CNTID
           , CNT.CNTNAME
           , CNT.DIC_PC_CNTRY_GRP_ID
           , CNT.CNT_CE_CODE
           , CNT.CNT_CE_MEMBER
           , DMT.PAC_PAC_ADDRESS_ID ADDRESS2_ID
           , nvl(DMT.DMT_NAME2, PER2.PER_NAME) PER2_NAME
           , nvl(DMT.DMT_FORENAME2, PER2.PER_FORENAME) PER2_FORENAME
           , nvl(DMT.DMT_ACTIVITY2, PER2.PER_ACTIVITY) PER2_ACTIVITY
           , PER2.PER_COMMENT PER2_COMMENT
           , PER2.PER_KEY1 PER2_KEY1
           , PER2.PER_KEY2 PER2_KEY2
           , DMT.DMT_ADDRESS2
           , DMT.DMT_FORMAT_CITY2
           , DMT.DMT_TOWN2
           , CNT2.CNTID CNTID2
           , CNT2.CNTNAME CNTNAME2
           , CNT2.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID2
           , CNT2.CNT_CE_CODE CNT_CE_CODE2
           , CNT2.CNT_CE_MEMBER CNT_CE_MEMBER2
           , DMT.PAC2_PAC_ADDRESS_ID ADDRESS3_ID
           , nvl(DMT.DMT_NAME3, PER3.PER_NAME) PER3_NAME
           , nvl(DMT.DMT_FORENAME3, PER3.PER_FORENAME) PER3_FORENAME
           , nvl(DMT.DMT_ACTIVITY3, PER3.PER_ACTIVITY) PER3_ACTIVITY
           , PER3.PER_COMMENT PER3_COMMENT
           , PER3.PER_KEY1 PER3_KEY1
           , PER3.PER_KEY2 PER3_KEY2
           , DMT.DMT_ADDRESS3
           , DMT.DMT_FORMAT_CITY3
           , DMT.DMT_TOWN3
           , CNT3.CNTID CNTID3
           , CNT3.CNTNAME CNTNAME3
           , CNT3.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID3
           , CNT3.CNT_CE_CODE CNT_CE_CODE3
           , CNT3.CNT_CE_MEMBER CNT_CE_MEMBER3
           , GAU.C_GAUGE_TYPE
           , GST.C_GAUGE_TITLE
           , GST.GAS_FINANCIAL_CHARGE
           , GAU.C_ADMIN_DOMAIN
           , GAU.DIC_GAUGE_TYPE_DOC_ID
           , DFD.DIC_DOC_FREE_TABLE_1_ID
           , DFD.DIC_DOC_FREE_TABLE_2_ID
           , DFD.DIC_DOC_FREE_TABLE_3_ID
           , DFD.DIC_DOC_FREE_TABLE_4_ID
           , DFD.DIC_DOC_FREE_TABLE_5_ID
           , DFD.FRD_ALPHA_SHORT_1
           , DFD.FRD_ALPHA_SHORT_2
           , DFD.FRD_ALPHA_SHORT_3
           , DFD.FRD_ALPHA_SHORT_4
           , DFD.FRD_ALPHA_SHORT_5
           , DFD.FRD_ALPHA_LONG_1
           , DFD.FRD_ALPHA_LONG_2
           , DFD.FRD_ALPHA_LONG_3
           , DFD.FRD_ALPHA_LONG_4
           , DFD.FRD_ALPHA_LONG_5
           , DFD.FRD_INTEGER_1
           , DFD.FRD_INTEGER_2
           , DFD.FRD_INTEGER_3
           , DFD.FRD_INTEGER_4
           , DFD.FRD_INTEGER_5
           , DFD.FRD_DECIMAL_1
           , DFD.FRD_DECIMAL_2
           , DFD.FRD_DECIMAL_3
           , DFD.FRD_DECIMAL_4
           , DFD.FRD_DECIMAL_5
           , DFD.FRD_BOOLEAN_1
           , DFD.FRD_BOOLEAN_2
           , DFD.FRD_BOOLEAN_3
           , DFD.FRD_BOOLEAN_4
           , DFD.FRD_BOOLEAN_5
           , FOO.DOC_FOOT_ID
           , FOO.DOC_GAUGE_SIGNATORY_ID
           , 'DOC' || to_char(DGS.DOC_GAUGE_SIGNATORY_ID) || '.BMP' DGS_FILE_NAME1
           , DGS.GAG_NAME
           , DGS.GAG_FUNCTION
           , FOO.DOC_DOC_GAUGE_SIGNATORY_ID
           , 'DOC' || to_char(DGS2.DOC_GAUGE_SIGNATORY_ID) || '.BMP' DGS_FILE_NAME2
           , DGS2.GAG_NAME GAG2_NAME
           , DGS2.GAG_FUNCTION GAG2_FUNCTION
           , FOO.FOO_FOOT_TEXT
           , FOO.FOO_FOOT_TEXT2
           , FOO.FOO_FOOT_TEXT3
           , FOO.FOO_FOOT_TEXT4
           , FOO.FOO_FOOT_TEXT5
           , FOO.FOO_DOCUMENT_TOTAL_AMOUNT
           , FOO.FOO_GOOD_TOTAL_AMOUNT
           , FOO.FOO_TOTAL_VAT_AMOUNT
           , FOO.FOO_CHARGE_TOTAL_AMOUNT
           , FOO.FOO_DISCOUNT_TOTAL_AMOUNT
           , FOO.FOO_COST_TOTAL_AMOUNT
           , FOO.FOO_GOOD_TOT_AMOUNT_EXCL
           , FOO.FOO_CHARG_TOT_AMOUNT_EXCL
           , FOO.FOO_DISC_TOT_AMOUNT_EXCL
           , FOO.FOO_COST_TOT_AMOUNT_EXCL
           , FOO.FOO_TOTAL_NET_WEIGHT
           , FOO.FOO_TOTAL_GROSS_WEIGHT
           , FOO.FOO_TOTAL_BASIS_QUANTITY
           , FOO.FOO_TOTAL_INTERM_QUANTITY
           , FOO.FOO_TOTAL_FINAL_QUANTITY
           , FOO.C_BVR_GENERATION_METHOD
           , FOO.FOO_GENERATE_BVR_NUMBER
           , FOO.FOO_REF_BVR_NUMBER
           , FOO.FOO_DOCUMENT_TOT_AMOUNT_B
           , FOO.FOO_DOCUMENT_TOT_AMOUNT_E
           , FOO.FOO_PAID_AMOUNT
           , FOO.FOO_RETURN_AMOUNT
           , FOO.FOO_PACKAGING
           , FOO.FOO_MARKING
           , FOO.FOO_MEASURE
           , FOO.DIC_TYPE_DOC_CUSTOM_ID
           , FOO.C_DIRECTION_NUMBER
           , FOO.FOO_TOT_VAT_AMOUNT_V
           , FOO.FOO_RECEIVED_AMOUNT
           , FOO.FOO_PAID_BALANCED_AMOUNT
           , FOO.FOO_PARCEL_QTY
           , GOO.GCO_GOOD_ID
           , GOO.GOO_MAJOR_REFERENCE
           , GOO.GOO_SECONDARY_REFERENCE
           , GOO.GOO_NUMBER_OF_DECIMAL GOOD_NUMBER_OF_DECIMAL
           , case GAU.C_ADMIN_DOMAIN
               when '1' then GCO_FUNCTIONS.GetCDADecimal(POS.GCO_GOOD_ID, 'PURCHASE', THI.PAC_THIRD_ID)
               when '2' then GCO_FUNCTIONS.GetCDADecimal(POS.GCO_GOOD_ID, 'SALE', THI.PAC_THIRD_ID)
               else GCO_FUNCTIONS.GetCDADecimal(POS.GCO_GOOD_ID, ' ', THI.PAC_THIRD_ID)
             end GOO_NUMBER_OF_DECIMAL
           , GOO.DIC_GOOD_LINE_ID
           , GOO.DIC_GOOD_FAMILY_ID
           , GOO.DIC_GOOD_MODEL_ID
           , GOO.DIC_GOOD_GROUP_ID
           , PDT.PDT_STOCK_MANAGEMENT
           , DGP.C_GAUGE_SHOW_DELAY
           , DGP.GAP_POS_DELAY
           , vdiscount_surcharge_title DISCOUNT_SURCHARGE_TITLE
           , TVA.ACC_NUMBER TVA_ACC_NUMBER
           , REC_POS.RCO_TITLE POS_RCO_TITLE
           , REC_POS.DIC_ACCOUNTABLE_GROUP_ID POS_DIC_ACCOUNTABLE_GROUP_ID
           , REC_POS.RCO_DESCRIPTION POS_RCO_DESCRIPTION
           , REP_POS.PAC_REPRESENTATIVE_ID POS_PAC_REPRESENTATIVE_ID
           , REP_POS.REP_DESCR POS_REP_DESCR
           , GCE.CUS_CUSTONS_POSITION
           , GCE.CUS_KEY_TARIFF
           , GCE.CUS_LICENCE_NUMBER
           , GCE.CUS_RATE_FOR_VALUE
           , GCE.CUS_TRANSPORT_INFORMATION
           , GCE.DIC_REPAYMENT_CODE_ID
           , GCE.DIC_SUBJUGATED_LICENCE_ID
           , CNT_CUSTOMS.CNTID CNTID_CUSTOMS
           , CNT_CUSTOMS.CNTNAME CNTNAME_CUSTOMS
           , CNT_CUSTOMS.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID_CUSTOMS
           , CNT_CUSTOMS.CNT_CE_CODE CNT_CE_CODE_CUSTOMS
           , CNT_CUSTOMS.CNT_CE_MEMBER CNT_CE_MEMBER_CUSTOMS
           , CNT_ORIGIN.CNTID CNTID_ORIGIN
           , CNT_ORIGIN.CNTNAME CNTNAME_ORIGIN
           , CNT_ORIGIN.DIC_PC_CNTRY_GRP_ID DIC_PC_CNTRY_GRP_ID_ORIGIN
           , CNT_ORIGIN.CNT_CE_CODE CNT_CE_CODE_ORIGIN
           , CNT_ORIGIN.CNT_CE_MEMBER CNT_CE_MEMBER_ORIGIN
           , GFD.DATA_UNIT_PRICE_SALE
           , GFD.DIC_FREE_TABLE_1_ID
           , GFD.DIC_FREE_TABLE_2_ID
           , GFD.DIC_FREE_TABLE_3_ID
           , GFD.DIC_FREE_TABLE_4_ID
           , GFD.DIC_FREE_TABLE_5_ID
           , POS.DOC_POSITION_ID
           , POS.POS_NUMBER
           , POS.C_DOC_POS_STATUS
           , POS.C_GAUGE_TYPE_POS
           , POS.POS_REFERENCE
           , POS.POS_SHORT_DESCRIPTION
           , POS.POS_LONG_DESCRIPTION
           , POS.POS_FREE_DESCRIPTION
           , POS.POS_BODY_TEXT
           , POS.ASA_RECORD_ID
           , POS.ASA_RECORD_TASK_ID
           , POS.ASA_RECORD_COMP_ID
           , POS.POS_DISCOUNT_AMOUNT
           , POS.POS_CHARGE_AMOUNT
           , POS.POS_VAT_AMOUNT
           , POS.POS_VAT_BASE_AMOUNT
           , POS.POS_GROSS_UNIT_VALUE
           , POS.POS_GROSS_UNIT_VALUE_SU
           , POS.POS_NET_UNIT_VALUE
           , POS.POS_NET_UNIT_VALUE_INCL
           , POS.POS_REF_UNIT_VALUE
           , POS.POS_GROSS_VALUE
           , POS.POS_NET_VALUE_EXCL
           , POS.POS_NET_VALUE_INCL
           , POS.POS_BASIS_QUANTITY
           , POS.POS_BALANCE_QUANTITY
           , POS.POS_INTERMEDIATE_QUANTITY
           , POS.POS_FINAL_QUANTITY
           , POS.POS_RATE_FACTOR
           , POS.POS_NET_WEIGHT
           , POS.POS_GROSS_WEIGHT
           , POS.DIC_UNIT_OF_MEASURE_ID
           , POS.POS_NOM_TEXT
           , POS.POS_UNIT_COST_PRICE
           , POS.POS_EAN_CODE
           , POS.POS_EAN_UCC14_CODE
           , POS.POS_HIBC_PRIMARY_CODE
           , POS.DIC_POS_FREE_TABLE_1_ID
           , POS.DIC_POS_FREE_TABLE_2_ID
           , POS.DIC_POS_FREE_TABLE_3_ID
           , POS.POS_DECIMAL_1
           , POS.POS_DECIMAL_2
           , POS.POS_DECIMAL_3
           , POS.POS_TEXT_1
           , POS.POS_TEXT_2
           , POS.POS_TEXT_3
           , POS.POS_DATE_1
           , POS.POS_DATE_2
           , POS.POS_DATE_3
           , POS.POS_DISCOUNT_UNIT_VALUE
           , POS.POS_DISCOUNT_RATE
           , POS.POS_VALUE_QUANTITY
           , POS.POS_INCLUDE_TAX_TARIFF
           , POS.POS_GROSS_UNIT_VALUE_INCL
           , POS.POS_GROSS_UNIT_VALUE_INCL_SU
           , POS.POS_GROSS_VALUE_INCL
           , POS.POS_BALANCE_QTY_VALUE
           , POS.POS_UTIL_COEFF
           , POS.POS_GROSS_UNIT_VALUE2
           , POS.DIC_DIC_UNIT_OF_MEASURE_ID
           , POS.POS_CONVERT_FACTOR2
           , POS.POS_VAT_AMOUNT_V
           , POS.POS_NET_TARIFF
           , POS.POS_SPECIAL_TARIFF
           , POS.POS_FLAT_RATE
           , POS.POS_BASIS_QUANTITY_SU
           , POS.POS_INTERMEDIATE_QUANTITY_SU
           , POS.POS_FINAL_QUANTITY_SU
           , POS.C_POS_DELIVERY_TYP
           , POS.POS_BALANCED
           , POS.POS_TARIFF_SET
           , POS.CML_EVENTS_ID
           , POS.DIC_IMP_FREE1_ID POS_DIC_IMP_FREE1_ID
           , POS.DIC_IMP_FREE2_ID POS_DIC_IMP_FREE2_ID
           , POS.DIC_IMP_FREE3_ID POS_DIC_IMP_FREE3_ID
           , POS.DIC_IMP_FREE4_ID POS_DIC_IMP_FREE4_ID
           , POS.DIC_IMP_FREE5_ID POS_DIC_IMP_FREE5_ID
           , DETAIL.DOC_POSITION_DETAIL_ID
           , DETAIL.PERE_DOC_POSITION_DETAIL_ID
           , DETAIL.PERE_DMT_NUMBER
           , DETAIL.PERE_DMT_DATE_DOCUMENT
           , DETAIL.PERE_C_GAUGE_TITLE
           , DETAIL.PERE_GAU_DESCRIBE
           , DETAIL.PERE_GAD_DESCRIBE
           , DETAIL.PERE_DMT_PARTNER_NUMBER
           , DETAIL.PERE_DMT_PARTNTER_REFERENCE
           , DETAIL.PERE_DATE_PARTNER_DOCUMENT
           , DETAIL.G_PERE_DOC_POSITION_DETAIL_ID
           , DETAIL.G_PERE_DMT_NUMBER
           , DETAIL.G_PERE_DMT_DATE_DOCUMENT
           , DETAIL.G_PERE_C_GAUGE_TITLE
           , DETAIL.G_PERE_GAU_DESCRIBE
           , DETAIL.G_PERE_GAD_DESCRIBE
           , DETAIL.G_PERE_DMT_PARTNER_NUMBER
           , DETAIL.G_PERE_DMT_PARTNTER_REFERENCE
           , DETAIL.G_PERE_DATE_PARTNER_DOCUMENT
           , DETAIL.STM_LOCATION_ID
           , DETAIL.DIC_IMP_FREE1_ID PDE_DIC_IMP_FREE1_ID
           , DETAIL.DIC_IMP_FREE2_ID PDE_DIC_IMP_FREE2_ID
           , DETAIL.DIC_IMP_FREE3_ID PDE_DIC_IMP_FREE3_ID
           , DETAIL.DIC_IMP_FREE4_ID PDE_DIC_IMP_FREE4_ID
           , DETAIL.DIC_IMP_FREE5_ID PDE_DIC_IMP_FREE5_ID
           , DETAIL.DIC_PDE_FREE_TABLE_1_ID
           , DETAIL.DIC_PDE_FREE_TABLE_2_ID
           , DETAIL.DIC_PDE_FREE_TABLE_3_ID
           , DETAIL.PDE_TEXT_1
           , DETAIL.PDE_TEXT_2
           , DETAIL.PDE_TEXT_3
           , DETAIL.PDE_DECIMAL_1
           , DETAIL.PDE_DECIMAL_2
           , DETAIL.PDE_DECIMAL_3
           , DETAIL.PDE_DATE_1
           , DETAIL.PDE_DATE_2
           , DETAIL.PDE_DATE_3
           , LOC.LOC_DESCRIPTION
           , STM.STO_DESCRIPTION
           , DETAIL.STM_STM_LOCATION_ID
           , LOC_LOC.LOC_DESCRIPTION LOC_LOC_DESCRIPTION
           , STM_STM.STO_DESCRIPTION STO_STO_DESCRIPTION
           , DETAIL.DIC_DELAY_UPDATE_TYPE_ID
           , DETAIL.PDE_DELAY_UPDATE_TEXT
           , DETAIL.GCO1_CHARACTERIZATION_ID
           , DETAIL.GCO2_CHARACTERIZATION_ID
           , DETAIL.GCO3_CHARACTERIZATION_ID
           , DETAIL.GCO4_CHARACTERIZATION_ID
           , DETAIL.GCO5_CHARACTERIZATION_ID
           , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO1_CHARACTERIZATION_ID, vpc_lang_id), 1, 30) GCO1_CHARAC_DESCR
           , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO2_CHARACTERIZATION_ID, vpc_lang_id), 1, 30) GCO2_CHARAC_DESCR
           , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO3_CHARACTERIZATION_ID, vpc_lang_id), 1, 30) GCO3_CHARAC_DESCR
           , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO4_CHARACTERIZATION_ID, vpc_lang_id), 1, 30) GCO4_CHARAC_DESCR
           , substr(GCO_FUNCTIONS.GetCharacDescr(DETAIL.GCO5_CHARACTERIZATION_ID, vpc_lang_id), 1, 30) GCO5_CHARAC_DESCR
           , decode(GCO_FUNCTIONS.GetCharacType(DETAIL.GCO1_CHARACTERIZATION_ID)
                  , 2, (select distinct GCO_DESC_LANGUAGE.DLA_DESCRIPTION
                                   from GCO_CHARACTERIZATION
                                      , GCO_CHARACTERISTIC_ELEMENT
                                      , GCO_DESC_LANGUAGE
                                  where GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERIZATION_ID = GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERISTIC_ELEMENT_ID = GCO_DESC_LANGUAGE.GCO_CHARACTERISTIC_ELEMENT_ID
                                    and GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID = DETAIL.GCO1_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.CHE_VALUE = DETAIL.PDE_CHARACTERIZATION_VALUE_1
                                    and GCO_DESC_LANGUAGE.PC_LANG_ID = vpc_lang_id)
                  , DETAIL.PDE_CHARACTERIZATION_VALUE_1
                   ) PDE_CHARACTERIZATION_VALUE_1
           , decode(GCO_FUNCTIONS.GetCharacType(DETAIL.GCO2_CHARACTERIZATION_ID)
                  , 2, (select distinct GCO_DESC_LANGUAGE.DLA_DESCRIPTION
                                   from GCO_CHARACTERIZATION
                                      , GCO_CHARACTERISTIC_ELEMENT
                                      , GCO_DESC_LANGUAGE
                                  where GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERIZATION_ID = GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERISTIC_ELEMENT_ID = GCO_DESC_LANGUAGE.GCO_CHARACTERISTIC_ELEMENT_ID
                                    and GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID = DETAIL.GCO2_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.CHE_VALUE = DETAIL.PDE_CHARACTERIZATION_VALUE_2
                                    and GCO_DESC_LANGUAGE.PC_LANG_ID = vpc_lang_id)
                  , DETAIL.PDE_CHARACTERIZATION_VALUE_2
                   ) PDE_CHARACTERIZATION_VALUE_2
           , decode(gco_functions.GetCharacType(DETAIL.GCO3_CHARACTERIZATION_ID)
                  , 2, (select distinct GCO_DESC_LANGUAGE.DLA_DESCRIPTION
                                   from GCO_CHARACTERIZATION
                                      , GCO_CHARACTERISTIC_ELEMENT
                                      , GCO_DESC_LANGUAGE
                                  where GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERIZATION_ID = GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERISTIC_ELEMENT_ID = GCO_DESC_LANGUAGE.GCO_CHARACTERISTIC_ELEMENT_ID
                                    and GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID = DETAIL.GCO3_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.CHE_VALUE = DETAIL.PDE_CHARACTERIZATION_VALUE_3
                                    and GCO_DESC_LANGUAGE.PC_LANG_ID = vpc_lang_id)
                  , DETAIL.PDE_CHARACTERIZATION_VALUE_3
                   ) PDE_CHARACTERIZATION_VALUE_3
           , decode(gco_functions.GetCharacType(DETAIL.GCO4_CHARACTERIZATION_ID)
                  , 2, (select distinct GCO_DESC_LANGUAGE.DLA_DESCRIPTION
                                   from GCO_CHARACTERIZATION
                                      , GCO_CHARACTERISTIC_ELEMENT
                                      , GCO_DESC_LANGUAGE
                                  where GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERIZATION_ID = GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERISTIC_ELEMENT_ID = GCO_DESC_LANGUAGE.GCO_CHARACTERISTIC_ELEMENT_ID
                                    and GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID = DETAIL.GCO4_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.CHE_VALUE = DETAIL.PDE_CHARACTERIZATION_VALUE_4
                                    and GCO_DESC_LANGUAGE.PC_LANG_ID = vpc_lang_id)
                  , DETAIL.PDE_CHARACTERIZATION_VALUE_4
                   ) PDE_CHARACTERIZATION_VALUE_4
           , decode(gco_functions.GetCharacType(DETAIL.GCO5_CHARACTERIZATION_ID)
                  , 2, (select distinct GCO_DESC_LANGUAGE.DLA_DESCRIPTION
                                   from GCO_CHARACTERIZATION
                                      , GCO_CHARACTERISTIC_ELEMENT
                                      , GCO_DESC_LANGUAGE
                                  where GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERIZATION_ID = GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.GCO_CHARACTERISTIC_ELEMENT_ID = GCO_DESC_LANGUAGE.GCO_CHARACTERISTIC_ELEMENT_ID
                                    and GCO_CHARACTERIZATION.GCO_CHARACTERIZATION_ID = DETAIL.GCO5_CHARACTERIZATION_ID
                                    and GCO_CHARACTERISTIC_ELEMENT.CHE_VALUE = DETAIL.PDE_CHARACTERIZATION_VALUE_5
                                    and GCO_DESC_LANGUAGE.PC_LANG_ID = vpc_lang_id)
                  , DETAIL.PDE_CHARACTERIZATION_VALUE_5
                   ) PDE_CHARACTERIZATION_VALUE_5
           , DETAIL.PDE_PIECE
           , DETAIL.PDE_SET
           , DETAIL.PDE_VERSION
           , DETAIL.PDE_CHRONOLOGICAL
           , DETAIL.PDE_STD_CHAR_1
           , DETAIL.PDE_STD_CHAR_2
           , DETAIL.PDE_STD_CHAR_3
           , DETAIL.PDE_STD_CHAR_4
           , DETAIL.PDE_STD_CHAR_5
           , DETAIL.PDE_BASIS_DELAY
           , DETAIL.PDE_BASIS_DELAY_M
           , DETAIL.PDE_BASIS_DELAY_W
           , DETAIL.PDE_BASIS_QUANTITY
           , DETAIL.PDE_BASIS_QUANTITY_SU
           , DETAIL.PDE_INTERMEDIATE_DELAY
           , DETAIL.PDE_INTERMEDIATE_DELAY_M
           , DETAIL.PDE_INTERMEDIATE_DELAY_W
           , DETAIL.PDE_INTERMEDIATE_QUANTITY
           , DETAIL.PDE_INTERMEDIATE_QUANTITY_SU
           , DETAIL.PDE_FINAL_DELAY
           , DETAIL.PDE_FINAL_DELAY_M
           , DETAIL.PDE_FINAL_DELAY_W
           , DETAIL.PDE_FINAL_QUANTITY
           , DETAIL.PDE_FINAL_QUANTITY_SU
           , DETAIL.PDE_BALANCE_QUANTITY
           , DETAIL.P_PDE_BALANCE_QUANTITY
           , DETAIL.P_PDE_BALANCE_QUANTITY_PARENT
           , DETAIL.P_PDE_BASIS_QUANTITY
           , DETAIL.P_PDE_BASIS_QUANTITY_SU
           , DETAIL.P_PDE_INTERMEDIATE_QUANTITY
           , DETAIL.P_PDE_INTERMEDIATE_QUANTITY_SU
           , DETAIL.P_PDE_FINAL_QUANTITY
           , DETAIL.P_PDE_FINAL_QUANTITY_SU
           , DETAIL.NEED_FAN_EXCEED_QTY
           , DETAIL.NEED_FAN_FREE_QTY
           , DETAIL.NEED_FAN_FULL_QTY
           , DETAIL.NEED_FAN_NETW_QTY
           , DETAIL.NEED_FAN_PREV_QTY
           , DETAIL.NEED_FAN_REALIZE_QTY
           , DETAIL.NEED_FAN_RETURN_QTY
           , DETAIL.NEED_FAN_STK_QTY
           , DETAIL.NEED_FAL_NETWORK_NEED_ID
           , DETAIL.SUPPLY_FAN_EXCEED_QTY
           , DETAIL.SUPPLY_FAN_FREE_QTY
           , DETAIL.SUPPLY_FAN_FULL_QTY
           , DETAIL.SUPPLY_FAN_NETW_QTY
           , DETAIL.SUPPLY_FAN_PREV_QTY
           , DETAIL.SUPPLY_FAN_REALIZE_QTY
           , DETAIL.SUPPLY_FAN_RETURN_QTY
           , DETAIL.SUPPLY_FAN_STK_QTY
           , DETAIL.SUPPLY_FAL_NETWORK_SUPPLY_ID
           , DETAIL.LOT_REFCOMPL
           , DETAIL.GOO_MAJOR_REFERENCE COMP_MAJOR_REFERENCE
           , DETAIL.COMP_GOOD_ID COMP_GOOD_ID
           , nvl(GCO_FUNCTIONS.GetDescription(DETAIL.COMP_GOOD_ID, vlanid, 1, '06'), GCO_FUNCTIONS.GetDescription(detail.comp_good_id, vlanid, 1, '01') )
                                                                                                                                               COMP_SHORT_DESCR
           , nvl(GCO_FUNCTIONS.GetDescription(DETAIL.COMP_GOOD_ID, vlanid, 2, '06'), GCO_FUNCTIONS.GetDescription(detail.comp_good_id, vlanid, 2, '01') )
                                                                                                                                                COMP_LONG_DESCR
           , nvl(GCO_FUNCTIONS.GetDescription(DETAIL.COMP_GOOD_ID, vlanid, 3, '06'), GCO_FUNCTIONS.GetDescription(detail.comp_good_id, vlanid, 3, '01') )
                                                                                                                                                COMP_FREE_DESCR
           , DETAIL.SCS_SHORT_DESCR
           , DETAIL.SCS_LONG_DESCR
           , DETAIL.SCS_FREE_DESCR
           , FOO.FOO_TOTAL_NET_WEIGHT_MEAS
           , FOO.FOO_TOTAL_GROSS_WEIGHT_MEAS
           , DMT.DOC_RECORD_ID
           , REC.RCO_SUPPLIER_SERIAL_NUMBER
           , DMT.PAC_THIRD_ACI_ID
           , DMT.PAC_THIRD_DELIVERY_ID
           , DMT.PAC_THIRD_TARIFF_ID
           , DMT.PAC_REPR_ACI_ID
           , DMT.PAC_REPR_DELIVERY_ID
           , DMT.PC_LANG_ACI_ID
           , DMT.PC_LANG_DELIVERY_ID
           , DMT.DMT_NAME1
           , DMT.DMT_FORENAME1
           , DMT.DMT_ACTIVITY1
           , DMT.DMT_CARE_OF1
           , DMT.DMT_PO_BOX1
           , DMT.DMT_PO_BOX_NBR1
           , DMT.DMT_COUNTY1
           , DMT.DMT_CONTACT1
           , DMT.DMT_NAME2
           , DMT.DMT_FORENAME2
           , DMT.DMT_ACTIVITY2
           , DMT.DMT_CARE_OF2
           , DMT.DMT_PO_BOX2
           , DMT.DMT_PO_BOX_NBR2
           , DMT.DMT_COUNTY2
           , DMT.DMT_CONTACT2
           , DMT.DMT_NAME3
           , DMT.DMT_FORENAME3
           , DMT.DMT_ACTIVITY3
           , DMT.DMT_CARE_OF3
           , DMT.DMT_PO_BOX3
           , DMT.DMT_PO_BOX_NBR3
           , DMT.DMT_COUNTY3
           , DMT.DMT_CONTACT3
           , REC_PDE.RCO_TITLE PDE_RCO_TITLE
           , REC_PDE.RCO_SUPPLIER_SERIAL_NUMBER PDE_RCO_SUPPLIER_SERIAL_NUMBER
           , CEV.ASA_COUNTER_STATEMENT_ID
           , CEV.CML_POSITION_SERVICE_DETAIL_ID
           , CEV.CML_POSITION_MACHINE_DETAIL_ID
           , CEV.CEV_COUNTER_BEGIN_QTY
           , CEV.CEV_COUNTER_END_QTY
           , CEV.CEV_COUNTER_BEGIN_DATE
           , CEV.CEV_COUNTER_END_DATE
           , CEV.CEV_FREE_QTY
           , CEV.CEV_GROSS_CONSUMED_QTY
           , CEV.CEV_NET_CONSUMED_QTY
           , CEV.CEV_BALANCE_QTY
           , CEV.CEV_INVOICING_QTY
           , CEV.CEV_GLOBAL_EVENT
           , CEV.CEV_RENEWAL_GENERATED
           , CPO.CML_POSITION_ID
           , CPO.CPO_SEQUENCE
           , CCO.CCO_NUMBER
           , vcom_logo_large COM_LOGO_LARGE
           , vcom_logo_small COM_LOGO_SMALL
           , vcom_vatno COM_VATNO
           , vcom_descr COM_DESCR
           , vcom_adr COM_ADR
           , vcom_ide COM_IDE
           , (select MOK.C_MOVEMENT_SORT || ' ' || MOK.C_MOVEMENT_TYPE
                from STM_MOVEMENT_KIND MOK
               where MOK.STM_MOVEMENT_KIND_ID = POS.STM_MOVEMENT_KIND_ID) C_MOVEMENT_TYPE
           , (select RET.RET_OPTIONAL
                from ASA_RECORD_TASK RET
               where RET.ASA_RECORD_TASK_ID = POS.ASA_RECORD_TASK_ID) RET_OPTIONAL
           , (select ARC.ARC_OPTIONAL
                from ASA_RECORD_COMP ARC
               where ARC.ASA_RECORD_COMP_ID = POS.ASA_RECORD_COMP_ID) ARC_OPTIONAL
           , nvl( (select RET.DIC_ASA_OPTION_ID
                     from ASA_RECORD_TASK RET
                    where RET.ASA_RECORD_TASK_ID = POS.ASA_RECORD_TASK_ID), (select ARC.DIC_ASA_OPTION_ID
                                                                               from ASA_RECORD_COMP ARC
                                                                              where ARC.ASA_RECORD_COMP_ID = POS.ASA_RECORD_COMP_ID) ) DIC_ASA_OPTION_ID
           , COM_DIC_FUNCTIONS.getDicoDescr('DIC_ASA_OPTION'
                                          , nvl( (select RET.DIC_ASA_OPTION_ID
                                                    from ASA_RECORD_TASK RET
                                                   where RET.ASA_RECORD_TASK_ID = POS.ASA_RECORD_TASK_ID)
                                              , (select ARC.DIC_ASA_OPTION_ID
                                                   from ASA_RECORD_COMP ARC
                                                  where ARC.ASA_RECORD_COMP_ID = POS.ASA_RECORD_COMP_ID)
                                               )
                                          , vpc_lang_id
                                           ) DIC_ASA_OPTION_DESC
           , GAU.GAU_DESCRIBE
           , (select DES.GAD_DESCRIBE
                from DOC_GAUGE_DESCRIPTION DES
               where DES.DOC_GAUGE_ID = DMT.DOC_GAUGE_ID
                 and DES.PC_LANG_ID = vpc_lang_id) GAD_DESCRIBE
           , (select are.ARE_NUMBER
                from ASA_RECORD are
               where are.ASA_RECORD_ID = DMT.ASA_RECORD_ID) ARE_NUMBER
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 1, 1, vpc_lang_id) BLOCK1_TITLE
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 2, 1, vpc_lang_id) BLOCK1_NAME
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 3, 1, vpc_lang_id) BLOCK1_INFO
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 1, 2, vpc_lang_id) BLOCK2_TITLE
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 2, 2, vpc_lang_id) BLOCK2_NAME
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 3, 2, vpc_lang_id) BLOCK2_INFO
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 1, 3, vpc_lang_id) BLOCK3_TITLE
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 2, 3, vpc_lang_id) BLOCK3_NAME
           , RPT_FUNCTIONS.getdocadr(DMT.DOC_DOCUMENT_ID, 3, 3, vpc_lang_id) BLOCK3_INFO
           , decode(PER.PER_FORENAME, null, '', PER.PER_FORENAME || chr(13) ) ||
             decode(DMT.DMT_ACTIVITY1, null, '', DMT.DMT_ACTIVITY1 || chr(13) ) ||
             decode(DMT.DMT_CARE_OF1, null, '', DMT.DMT_CARE_OF1 || chr(13) ) ||
             decode(DMT.DMT_ADDRESS1, null, '', DMT.DMT_ADDRESS1 || chr(13) ) ||
             decode(DMT.DMT_FORMAT_CITY1, null, '', DMT.DMT_FORMAT_CITY1 || chr(13) ) ADD_1
           , decode(PER2.PER_FORENAME, null, '', PER2.PER_FORENAME || chr(13) ) ||
             decode(DMT.DMT_ACTIVITY2, null, '', DMT.DMT_ACTIVITY2 || chr(13) ) ||
             decode(DMT.DMT_CARE_OF2, null, '', DMT.DMT_CARE_OF2 || chr(13) ) ||
             decode(DMT.DMT_ADDRESS2, null, '', DMT.DMT_ADDRESS2 || chr(13) ) ||
             decode(DMT.DMT_FORMAT_CITY2, null, '', DMT.DMT_FORMAT_CITY2 || chr(13) ) ADD_2
           , decode(PER3.PER_FORENAME, null, '', PER3.PER_FORENAME || chr(13) ) ||
             decode(DMT.DMT_ACTIVITY3, null, '', DMT.DMT_ACTIVITY3 || chr(13) ) ||
             decode(DMT.DMT_CARE_OF3, null, '', DMT.DMT_CARE_OF3 || chr(13) ) ||
             decode(DMT.DMT_ADDRESS3, null, '', DMT.DMT_ADDRESS3 || chr(13) ) ||
             decode(DMT.DMT_FORMAT_CITY3, null, '', DMT.DMT_FORMAT_CITY3 || chr(13) ) ADD_3
           , (select BIT.BIT_IMAGE
                from COM_BITMAP BIT
               where BIT.BIT_TABLE_ID = POS.GCO_GOOD_ID
                 and BIT.BIT_TABLE = 'GCO_PRODUCT') BIT_IMAGE
           , to_char(DETAIL.PDE_FINAL_DELAY, 'YYYYMM') PDE_FINAL_DELAY_YEAR_MONTH
        from STM_LOCATION LOC
           , STM_LOCATION LOC_LOC
           , ACS_FIN_ACC_S_PAYMENT AFA
           , ACS_PAYMENT_METHOD APM
           , ACS_ACCOUNT TVA
           , DOC_RECORD REC
           , DOC_RECORD REC_POS
           , DOC_RECORD REC_PDE
           , DOC_FOOT FOO
           , GCO_FREE_DATA GFD
           , GCO_CUSTOMS_ELEMENT GCE
           , PCS.PC_CNTRY CNT_CUSTOMS
           , PCS.PC_CNTRY CNT_ORIGIN
           , PAC_SENDING_CONDITION PSC
           , PAC_PAYMENT_CONDITION PMT
           , ACS_FINANCIAL_CURRENCY AFC
           , DOC_FREE_DATA DFD
           , DOC_GAUGE_SIGNATORY DGS
           , DOC_GAUGE_SIGNATORY DGS2
           , DOC_GAUGE_POSITION DGP
           , PAC_CUSTOM_PARTNER CUS
           , ACS_ACCOUNT ACCC
           , PAC_ADDRESS ADR
           , PAC_ADDRESS ADR2
           , PAC_ADDRESS ADR3
           , PAC_REPRESENTATIVE REP
           , PAC_REPRESENTATIVE REP_POS
           , PAC_ADDRESS ADR_SEN
           , PAC_PERSON PER_SEN
           , PAC_PERSON PER
           , PAC_PERSON PER2
           , PAC_PERSON PER3
           , PAC_SUPPLIER_PARTNER SUP
           , ACS_ACCOUNT ACCS
           , PAC_THIRD THI
           , ACS_TAX_CODE ATC
           , PCS.PC_CURR CUR
           , PCS.PC_CNTRY CNT
           , PCS.PC_CNTRY CNT2
           , PCS.PC_CNTRY CNT3
           , DOC_GAUGE GAU
           , DOC_GAUGE_STRUCTURED GST
           , STM_STOCK STM
           , STM_STOCK STM_STM
           , GCO_GOOD GOO
           , GCO_PRODUCT PDT
           , DOC_POSITION POS
           , DOC_DOCUMENT DMT
           , CML_EVENTS CEV
           , CML_POSITION CPO
           , CML_DOCUMENT CCO
           , DOC_POSITION POS_ADD
           , DOC_POSITION_DETAIL PDE_ADD
           , (select DMT.DMT_NUMBER
                   , POS.DOC_POSITION_ID POSITIONID
                   , DMT_PERE.DMT_NUMBER PERE_DMT_NUMBER
                   , DMT_PERE.DMT_DATE_DOCUMENT PERE_DMT_DATE_DOCUMENT
                   , GAS_PERE.C_GAUGE_TITLE PERE_C_GAUGE_TITLE
                   , GAU_PERE.GAU_DESCRIBE PERE_GAU_DESCRIBE
                   , GAU_PERE_DES.GAD_DESCRIBE PERE_GAD_DESCRIBE
                   , GAS_G_PERE.C_GAUGE_TITLE G_PERE_C_GAUGE_TITLE
                   , GAU_G_PERE.GAU_DESCRIBE G_PERE_GAU_DESCRIBE
                   , GAU_G_PERE_DES.GAD_DESCRIBE G_PERE_GAD_DESCRIBE
                   , DMT_PERE.DMT_PARTNER_NUMBER PERE_DMT_PARTNER_NUMBER
                   , DMT_PERE.DMT_PARTNER_REFERENCE PERE_DMT_PARTNTER_REFERENCE
                   , DMT_PERE.DMT_DATE_PARTNER_DOCUMENT PERE_DATE_PARTNER_DOCUMENT
                   , DMT_G_PERE.DMT_NUMBER G_PERE_DMT_NUMBER
                   , DMT_G_PERE.DMT_DATE_DOCUMENT G_PERE_DMT_DATE_DOCUMENT
                   , DMT_G_PERE.DMT_PARTNER_NUMBER G_PERE_DMT_PARTNER_NUMBER
                   , DMT_G_PERE.DMT_PARTNER_REFERENCE G_PERE_DMT_PARTNTER_REFERENCE
                   , DMT_G_PERE.DMT_DATE_PARTNER_DOCUMENT G_PERE_DATE_PARTNER_DOCUMENT
                   , PDE.DOC_POSITION_DETAIL_ID
                   , PDE.FAL_SCHEDULE_STEP_ID FAL_SCHEDULE_STEP_ID
                   , PDE.DOC_RECORD_ID
                   , PDE.PDE_ADDENDUM_SRC_PDE_ID
                   , PDE.STM_LOCATION_ID STM_LOCATION_ID
                   , PDE.STM_STM_LOCATION_ID STM_STM_LOCATION_ID
                   , PDE.DIC_DELAY_UPDATE_TYPE_ID DIC_DELAY_UPDATE_TYPE_ID
                   , PDE.PDE_DELAY_UPDATE_TEXT PDE_DELAY_UPDATE_TEXT
                   , PDE.GCO_CHARACTERIZATION_ID GCO1_CHARACTERIZATION_ID
                   , PDE.GCO_GCO_CHARACTERIZATION_ID GCO2_CHARACTERIZATION_ID
                   , PDE.GCO2_GCO_CHARACTERIZATION_ID GCO3_CHARACTERIZATION_ID
                   , PDE.GCO3_GCO_CHARACTERIZATION_ID GCO4_CHARACTERIZATION_ID
                   , PDE.GCO4_GCO_CHARACTERIZATION_ID GCO5_CHARACTERIZATION_ID
                   , PDE.PDE_CHARACTERIZATION_VALUE_1 PDE_CHARACTERIZATION_VALUE_1
                   , PDE.PDE_CHARACTERIZATION_VALUE_2 PDE_CHARACTERIZATION_VALUE_2
                   , PDE.PDE_CHARACTERIZATION_VALUE_3 PDE_CHARACTERIZATION_VALUE_3
                   , PDE.PDE_CHARACTERIZATION_VALUE_4 PDE_CHARACTERIZATION_VALUE_4
                   , PDE.PDE_CHARACTERIZATION_VALUE_5 PDE_CHARACTERIZATION_VALUE_5
                   , PDE.PDE_PIECE
                   , PDE.PDE_SET
                   , PDE.PDE_VERSION
                   , PDE.PDE_CHRONOLOGICAL
                   , PDE.PDE_STD_CHAR_1
                   , PDE.PDE_STD_CHAR_2
                   , PDE.PDE_STD_CHAR_3
                   , PDE.PDE_STD_CHAR_4
                   , PDE.PDE_STD_CHAR_5
                   , PDE.PDE_BASIS_DELAY PDE_BASIS_DELAY
                   , DOC_DELAY_FUNCTIONS.DateToMonth(PDE.PDE_BASIS_DELAY) PDE_BASIS_DELAY_M
                   , DOC_DELAY_FUNCTIONS.DateToWeek(PDE.PDE_BASIS_DELAY) PDE_BASIS_DELAY_W
                   , PDE.PDE_BASIS_QUANTITY PDE_BASIS_QUANTITY
                   , PDE.PDE_BASIS_QUANTITY_SU PDE_BASIS_QUANTITY_SU
                   , PDE.PDE_INTERMEDIATE_DELAY PDE_INTERMEDIATE_DELAY
                   , DOC_DELAY_FUNCTIONS.DateToMonth(PDE.PDE_INTERMEDIATE_DELAY) PDE_INTERMEDIATE_DELAY_M
                   , DOC_DELAY_FUNCTIONS.DateToWeek(PDE.PDE_INTERMEDIATE_DELAY) PDE_INTERMEDIATE_DELAY_W
                   , PDE.PDE_INTERMEDIATE_QUANTITY PDE_INTERMEDIATE_QUANTITY
                   , PDE.PDE_INTERMEDIATE_QUANTITY_SU PDE_INTERMEDIATE_QUANTITY_SU
                   , PDE.PDE_FINAL_DELAY PDE_FINAL_DELAY
                   , DOC_DELAY_FUNCTIONS.DateToMonth(PDE.PDE_FINAL_DELAY) PDE_FINAL_DELAY_M
                   , DOC_DELAY_FUNCTIONS.DateToWeek(PDE.PDE_FINAL_DELAY) PDE_FINAL_DELAY_W
                   , PDE.PDE_FINAL_QUANTITY PDE_FINAL_QUANTITY
                   , PDE.PDE_FINAL_QUANTITY_SU PDE_FINAL_QUANTITY_SU
                   , case
                       when(DMT.DMT_ADDENDUM_INDEX is not null)
                       and (POS.C_DOC_POS_STATUS = '04') then PDE.PDE_ADDENDUM_QTY_BALANCED
                       else PDE.PDE_BALANCE_QUANTITY
                     end PDE_BALANCE_QUANTITY
                   , PDE.DIC_IMP_FREE1_ID
                   , PDE.DIC_IMP_FREE2_ID
                   , PDE.DIC_IMP_FREE3_ID
                   , PDE.DIC_IMP_FREE4_ID
                   , PDE.DIC_IMP_FREE5_ID
                   , PDE.DIC_PDE_FREE_TABLE_1_ID
                   , PDE.DIC_PDE_FREE_TABLE_2_ID
                   , PDE.DIC_PDE_FREE_TABLE_3_ID
                   , PDE.PDE_TEXT_1
                   , PDE.PDE_TEXT_2
                   , PDE.PDE_TEXT_3
                   , PDE.PDE_DECIMAL_1
                   , PDE.PDE_DECIMAL_2
                   , PDE.PDE_DECIMAL_3
                   , PDE.PDE_DATE_1
                   , PDE.PDE_DATE_2
                   , PDE.PDE_DATE_3
                   , PERE.DOC_POSITION_DETAIL_ID PERE_DOC_POSITION_DETAIL_ID
                   , PERE.PDE_BALANCE_QUANTITY P_PDE_BALANCE_QUANTITY
                   , PERE.PDE_BALANCE_QUANTITY_PARENT P_PDE_BALANCE_QUANTITY_PARENT
                   , PERE.PDE_BASIS_QUANTITY P_PDE_BASIS_QUANTITY
                   , PERE.PDE_BASIS_QUANTITY_SU P_PDE_BASIS_QUANTITY_SU
                   , PERE.PDE_INTERMEDIATE_QUANTITY P_PDE_INTERMEDIATE_QUANTITY
                   , PERE.PDE_INTERMEDIATE_QUANTITY_SU P_PDE_INTERMEDIATE_QUANTITY_SU
                   , PERE.PDE_FINAL_QUANTITY P_PDE_FINAL_QUANTITY
                   , PERE.PDE_FINAL_QUANTITY_SU P_PDE_FINAL_QUANTITY_SU
                   , G_PERE.DOC_POSITION_DETAIL_ID G_PERE_DOC_POSITION_DETAIL_ID
                   , NEE.FAN_EXCEED_QTY NEED_FAN_EXCEED_QTY
                   , NEE.FAN_FREE_QTY NEED_FAN_FREE_QTY
                   , NEE.FAN_FULL_QTY NEED_FAN_FULL_QTY
                   , NEE.FAN_NETW_QTY NEED_FAN_NETW_QTY
                   , NEE.FAN_PREV_QTY NEED_FAN_PREV_QTY
                   , NEE.FAN_REALIZE_QTY NEED_FAN_REALIZE_QTY
                   , NEE.FAN_RETURN_QTY NEED_FAN_RETURN_QTY
                   , NEE.FAN_STK_QTY NEED_FAN_STK_QTY
                   , NEE.FAL_NETWORK_NEED_ID NEED_FAL_NETWORK_NEED_ID
                   , SUPP.FAN_EXCEED_QTY SUPPLY_FAN_EXCEED_QTY
                   , SUPP.FAN_FREE_QTY SUPPLY_FAN_FREE_QTY
                   , SUPP.FAN_FULL_QTY SUPPLY_FAN_FULL_QTY
                   , SUPP.FAN_NETW_QTY SUPPLY_FAN_NETW_QTY
                   , SUPP.FAN_PREV_QTY SUPPLY_FAN_PREV_QTY
                   , SUPP.FAN_REALIZE_QTY SUPPLY_FAN_REALIZE_QTY
                   , SUPP.FAN_RETURN_QTY SUPPLY_FAN_RETURN_QTY
                   , SUPP.FAN_STK_QTY SUPPLY_FAN_STK_QTY
                   , SUPP.FAL_NETWORK_SUPPLY_ID SUPPLY_FAL_NETWORK_SUPPLY_ID
                   , LOT.LOT_REFCOMPL LOT_REFCOMPL
                   , COMP.GOO_MAJOR_REFERENCE GOO_MAJOR_REFERENCE
                   , COMP.GCO_GOOD_ID COMP_GOOD_ID
                   , LNK.SCS_SHORT_DESCR SCS_SHORT_DESCR
                   , LNK.SCS_LONG_DESCR SCS_LONG_DESCR
                   , LNK.SCS_FREE_DESCR SCS_FREE_DESCR
                from FAL_NETWORK_NEED NEE
                   , FAL_NETWORK_SUPPLY SUPP
                   , FAL_TASK_LINK LNK
                   , FAL_LOT LOT
                   , GCO_GOOD COMP
                   , DOC_GAUGE_STRUCTURED GAS_G_PERE
                   , DOC_GAUGE_STRUCTURED GAS_PERE
                   , DOC_GAUGE GAU_G_PERE
                   , DOC_GAUGE GAU_PERE
                   , (select DOC_GAUGE_ID
                           , GAD_DESCRIBE
                        from DOC_GAUGE_DESCRIPTION
                       where PC_LANG_ID = vpc_lang_id) GAU_G_PERE_DES
                   , (select DOC_GAUGE_ID
                           , GAD_DESCRIBE
                        from DOC_GAUGE_DESCRIPTION
                       where PC_LANG_ID = vpc_lang_id) GAU_PERE_DES
                   , DOC_POSITION_DETAIL G_PERE
                   , DOC_POSITION_DETAIL PERE
                   , DOC_POSITION_DETAIL PDE
                   , DOC_DOCUMENT DMT_G_PERE
                   , DOC_DOCUMENT DMT_PERE
                   , DOC_POSITION POS
                   , DOC_DOCUMENT DMT
               where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
                 and PDE.DOC_POSITION_ID(+) = POS.DOC_POSITION_ID
                 and PERE.DOC_POSITION_DETAIL_ID(+) = PDE.DOC_DOC_POSITION_DETAIL_ID
                 and DMT_PERE.DOC_DOCUMENT_ID(+) = PERE.DOC_DOCUMENT_ID
                 and G_PERE.DOC_POSITION_DETAIL_ID(+) = PERE.DOC_DOC_POSITION_DETAIL_ID
                 and LNK.FAL_SCHEDULE_STEP_ID(+) = PDE.FAL_SCHEDULE_STEP_ID
                 and LOT.FAL_LOT_ID(+) = LNK.FAL_LOT_ID
                 and COMP.GCO_GOOD_ID(+) = LOT.GCO_GOOD_ID
                 and GAS_PERE.DOC_GAUGE_ID(+) = PERE.DOC_GAUGE_ID
                 and GAU_PERE.DOC_GAUGE_ID(+) = PERE.DOC_GAUGE_ID
                 and GAU_PERE_DES.DOC_GAUGE_ID(+) = PERE.DOC_GAUGE_ID
                 and DMT_G_PERE.DOC_DOCUMENT_ID(+) = G_PERE.DOC_DOCUMENT_ID
                 and GAS_G_PERE.DOC_GAUGE_ID(+) = G_PERE.DOC_GAUGE_ID
                 and GAU_G_PERE.DOC_GAUGE_ID(+) = G_PERE.DOC_GAUGE_ID
                 and GAU_G_PERE_DES.DOC_GAUGE_ID(+) = G_PERE.DOC_GAUGE_ID
                 and NEE.DOC_POSITION_DETAIL_ID(+) = PDE.DOC_POSITION_DETAIL_ID
                 and SUPP.DOC_POSITION_DETAIL_ID(+) = PDE.DOC_POSITION_DETAIL_ID) DETAIL
       where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
         and DETAIL.POSITIONID(+) = POS.DOC_POSITION_ID
         and DMT.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
         and GAU.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
         and POS.DOC_GAUGE_POSITION_ID = DGP.DOC_GAUGE_POSITION_ID
         and TVA.ACS_ACCOUNT_ID(+) = POS.ACS_TAX_CODE_ID
         and AFA.ACS_FIN_ACC_S_PAYMENT_ID(+) = DMT.ACS_FIN_ACC_S_PAYMENT_ID
         and APM.ACS_PAYMENT_METHOD_ID(+) = AFA.ACS_PAYMENT_METHOD_ID
         and REP.PAC_REPRESENTATIVE_ID(+) = DMT.PAC_REPRESENTATIVE_ID
         and DFD.DOC_DOCUMENT_ID(+) = DMT.DOC_DOCUMENT_ID
         and FOO.DOC_DOCUMENT_ID(+) = DMT.DOC_DOCUMENT_ID
         and ATC.ACS_TAX_CODE_ID(+) = POS.ACS_TAX_CODE_ID
         and GCE.GCO_GOOD_ID(+) = POS.GCO_GOOD_ID
         and CNT_CUSTOMS.PC_CNTRY_ID(+) = GCE.PC_CNTRY_ID
         and CNT_ORIGIN.PC_CNTRY_ID(+) = GCE.PC_ORIGIN_PC_CNTRY_ID
         and GCE.C_CUSTOMS_ELEMENT_TYPE(+) = 'EXPORT'
         and REP_POS.PAC_REPRESENTATIVE_ID(+) = POS.PAC_REPRESENTATIVE_ID
         and DGS.DOC_GAUGE_SIGNATORY_ID(+) = FOO.DOC_GAUGE_SIGNATORY_ID
         and DGS2.DOC_GAUGE_SIGNATORY_ID(+) = FOO.DOC_DOC_GAUGE_SIGNATORY_ID
         and REC.DOC_RECORD_ID(+) = DMT.DOC_RECORD_ID
         and REC_POS.DOC_RECORD_ID(+) = POS.DOC_RECORD_ID
         and REC_PDE.DOC_RECORD_ID(+) = DETAIL.DOC_RECORD_ID
         and PSC.PAC_SENDING_CONDITION_ID(+) = DMT.PAC_SENDING_CONDITION_ID
         and ADR_SEN.PAC_ADDRESS_ID(+) = PSC.PAC_ADDRESS_ID
         and PER_SEN.PAC_PERSON_ID(+) = ADR_SEN.PAC_PERSON_ID
         and THI.PAC_THIRD_ID(+) = DMT.PAC_THIRD_ID
         and CUS.PAC_CUSTOM_PARTNER_ID(+) = DMT.PAC_THIRD_ID
         and ACCC.ACS_ACCOUNT_ID(+) = CUS.ACS_AUXILIARY_ACCOUNT_ID
         and ACCS.ACS_ACCOUNT_ID(+) = SUP.ACS_AUXILIARY_ACCOUNT_ID
         and SUP.PAC_SUPPLIER_PARTNER_ID(+) = DMT.PAC_THIRD_ID
         and ADR.PAC_ADDRESS_ID(+) = DMT.PAC_ADDRESS_ID
         and PER.PAC_PERSON_ID(+) = ADR.PAC_PERSON_ID
         and ADR2.PAC_ADDRESS_ID(+) = DMT.PAC_PAC_ADDRESS_ID
         and PER2.PAC_PERSON_ID(+) = ADR2.PAC_PERSON_ID
         and ADR3.PAC_ADDRESS_ID(+) = DMT.PAC2_PAC_ADDRESS_ID
         and PER3.PAC_PERSON_ID(+) = ADR3.PAC_PERSON_ID
         and CNT.PC_CNTRY_ID(+) = DMT.PC_CNTRY_ID
         and CNT2.PC_CNTRY_ID(+) = DMT.PC__PC_CNTRY_ID
         and CNT3.PC_CNTRY_ID(+) = DMT.PC_2_PC_CNTRY_ID
         and AFC.ACS_FINANCIAL_CURRENCY_ID(+) = DMT.ACS_FINANCIAL_CURRENCY_ID
         and CUR.PC_CURR_ID(+) = AFC.PC_CURR_ID
         and PMT.PAC_PAYMENT_CONDITION_ID(+) = DMT.PAC_PAYMENT_CONDITION_ID
         and LOC.STM_LOCATION_ID(+) = DETAIL.STM_LOCATION_ID
         and LOC_LOC.STM_LOCATION_ID(+) = DETAIL.STM_STM_LOCATION_ID
         and STM.STM_STOCK_ID(+) = LOC.STM_STOCK_ID
         and STM_STM.STM_STOCK_ID(+) = LOC_LOC.STM_STOCK_ID
         and GOO.GCO_GOOD_ID(+) = POS.GCO_GOOD_ID
         and PDT.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
         and GFD.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
         and CEV.CML_EVENTS_ID(+) = POS.CML_EVENTS_ID
         and CPO.CML_POSITION_ID(+) = POS.CML_POSITION_ID
         and CCO.CML_DOCUMENT_ID(+) = CPO.CML_DOCUMENT_ID
         and POS_ADD.DOC_POSITION_ID(+) = POS.POS_ADDENDUM_SRC_POS_ID
         and PDE_ADD.DOC_POSITION_DETAIL_ID(+) = DETAIL.PDE_ADDENDUM_SRC_PDE_ID
         and DMT.DMT_NUMBER = parameter_0
    order by POS.POS_NUMBER;
end RPT_DOC_STD_3;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_ASA_REPLY_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, parameter_0       in     DOC_DOCUMENT.DMT_NUMBER%type
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZH 09 FEB 2010
*@lastUpdate VHA 14.05.2014
*@public
*@param parameter_0:  DMT_NUMBER
*/
  vpc_lang_id            PCS.PC_LANG.PC_LANG_ID%type;
  vrequired_total_amount number;
begin
  PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.getuserlangid;

--Get the total amount for the required operation or work
  begin
    select sum(decode(nvl(ARC.ARC_OPTIONAL, nvl(RET.RET_OPTIONAL, 0) ), 0, POS.POS_NET_VALUE_INCL, 0) )
      into vrequired_total_amount
      from DOC_DOCUMENT DMT
         , DOC_POSITION POS
         , GCO_GOOD GOO_POS
         , ASA_RECORD_COMP ARC
         , ASA_RECORD_TASK RET
     where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
       and GOO_POS.GCO_GOOD_ID(+) = POS.GCO_GOOD_ID
       and ARC.ASA_RECORD_COMP_ID(+) = POS.ASA_RECORD_COMP_ID
       and RET.ASA_RECORD_TASK_ID(+) = POS.ASA_RECORD_TASK_ID
       and DMT.DMT_NUMBER = parameter_0;
  exception
    when no_data_found then
      vrequired_total_amount  := 0;
  end;

  open arefcursor for
    select ARE.ARE_CHAR1_VALUE
         , GOO.GOO_MAJOR_REFERENCE
         , ARE.ARE_GCO_SHORT_DESCR
         , ARE.ARE_GCO_LONG_DESCR
         , ARE.ARE_GCO_FREE_DESCR
         , (select DIT.DIT_DESCR
              from DICO_DESCRIPTION DIT
             where DIT.DIT_TABLE = 'DIC_GOOD_FAMILY'
               and DIT.DIT_CODE = GOO.DIC_GOOD_FAMILY_ID
               and DIT.PC_LANG_ID = vpc_lang_id) DIC_GOOD_FAMILY_WORDING
         , GAS.C_GAUGE_TITLE
         , round(decode(  ARE.ARE_DATE_END_SENDING
                        , null,(decode(  ARE.ARE_CONF_DATE_C
                                       , null,(  nvl(ARE.ARE_NB_DAYS_WAIT_MAX, nvl(ARE.ARE_NB_DAYS_WAIT, nvl(ARE.ARE_NB_DAYS_WAIT_COMP, 0) ) ) --Wait days
                                               + nvl(ARE.ARE_NB_DAYS, 0) --Repair days
                                               + nvl(ARE.ARE_NB_DAYS_CTRL, 0) --Ctrl days
                                               + nvl(ARE.ARE_NB_DAYS_SENDING, 0) --Sending days
                                               + nvl(ARE.ARE_NB_DAYS_EXP, 0) --EXP DAYS
                                          ) / 5
                                       , (ARE.ARE_CONF_DATE_C - DMT.DMT_DATE_DOCUMENT) / 7
                                      )
                              )
                        , (ARE.ARE_DATE_END_SENDING - DMT.DMT_DATE_DOCUMENT) / 7
                       )
                ) DUE_DATE
         , vrequired_total_amount REQUIRED_TOTAL_AMOUNT
         , POS.POS_NUMBER
         , POS.POS_SHORT_DESCRIPTION
         , POS.POS_NET_VALUE_INCL
         , POS.ASA_RECORD_TASK_ID
         , POS.ASA_RECORD_COMP_ID
         , POS.DIC_IMP_FREE1_ID
         , POS.DIC_IMP_FREE2_ID
         , POS.DIC_IMP_FREE3_ID
         , POS.DIC_IMP_FREE4_ID
         , POS.DIC_IMP_FREE5_ID
         , POS.DIC_POS_FREE_TABLE_1_ID
         , POS.DIC_POS_FREE_TABLE_2_ID
         , POS.DIC_POS_FREE_TABLE_3_ID
         , decode(POS.ASA_RECORD_COMP_ID, null, decode(POS.ASA_RECORD_TASK_ID, null, 0, 1), 2) OPER_COMP
         , nvl(ARC.ARC_OPTIONAL, nvl(RET.RET_OPTIONAL, 0) ) OPTIONAL
      from ASA_RECORD ARE
         , GCO_GOOD GOO
         , DOC_DOCUMENT DMT
         , DOC_GAUGE_STRUCTURED GAS
         , DOC_POSITION POS
         , GCO_GOOD GOO_POS
         , ASA_RECORD_COMP ARC
         , ASA_RECORD_TASK RET
     where ARE.GCO_ASA_TO_REPAIR_ID = GOO.GCO_GOOD_ID
       AND ARE.ASA_RECORD_ID = DMT.ASA_RECORD_ID
       AND DMT.DOC_GAUGE_ID = GAS.DOC_GAUGE_ID
       AND DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
       AND GOO_POS.GCO_GOOD_ID(+) = POS.GCO_GOOD_ID
       AND ARC.ASA_RECORD_COMP_ID(+) = POS.ASA_RECORD_COMP_ID
       AND RET.ASA_RECORD_TASK_ID(+) = POS.ASA_RECORD_TASK_ID
       AND DMT.DMT_NUMBER = parameter_0;
end RPT_DOC_STD_3_ASA_REPLY_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_ASA_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, parameter_0    in     varchar2
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate VHA 14.05.2014
*@public
*@param parameter_2:  ASA_RECORD_ID
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  PCS.PC_I_LIB_SESSION.SETLANID(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select ARE.ARE_CHAR1_VALUE
         , GOO.GOO_MAJOR_REFERENCE
         , ARE.ARE_GCO_SHORT_DESCR
         , ARE.ARE_GCO_LONG_DESCR
         , ARE.ARE_GCO_FREE_DESCR
         , (select DIT.DIT_DESCR
              from DICO_DESCRIPTION DIT
             where DIT.DIT_TABLE = 'DIC_GOOD_FAMILY'
               and DIT.DIT_CODE = GOO.DIC_GOOD_FAMILY_ID
               and DIT.PC_LANG_ID = vpc_lang_id) DIC_GOOD_FAMILY_WORDING
         , GAS.C_GAUGE_TITLE
         , round( decode( ARE.ARE_DATE_END_SENDING
                        , null,(decode(  ARE.ARE_CONF_DATE_C
                                       , null,(  nvl(ARE.ARE_NB_DAYS_WAIT_MAX, nvl(ARE.ARE_NB_DAYS_WAIT, nvl(ARE.ARE_NB_DAYS_WAIT_COMP, 0) ) ) --Wait days
                                               + nvl(ARE.ARE_NB_DAYS, 0) --Repair days
                                               + nvl(ARE.ARE_NB_DAYS_CTRL, 0) --Ctrl days
                                               + nvl(ARE.ARE_NB_DAYS_SENDING, 0) --Sending days
                                               + nvl(ARE.ARE_NB_DAYS_EXP, 0) --Exp days
                                              ) / 5
                                       , (ARE.ARE_CONF_DATE_C - DMT.DMT_DATE_DOCUMENT) / 7
                                      )
                               )
                        , (are.ARE_DATE_END_SENDING - DMT.DMT_DATE_DOCUMENT) / 7
                       )
                ) DUE_DATE
      from ASA_RECORD ARE
         , GCO_GOOD GOO
         , DOC_DOCUMENT DMT
         , DOC_GAUGE_STRUCTURED GAS
     where ARE.GCO_ASA_TO_REPAIR_ID = GOO.GCO_GOOD_ID
       and ARE.ASA_RECORD_ID = DMT.ASA_RECORD_ID
       and DMT.DOC_GAUGE_ID = GAS.DOC_GAUGE_ID
       and DMT.DMT_NUMBER = parameter_0;
end RPT_DOC_STD_3_ASA_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_CONTACT_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_1   IN       NUMBER
)
IS
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate   4 MAR 2009
*@public
*@param PARAMETER_1:  PAC_PERSON_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT per.per_name, per.per_forename
        FROM pac_person per, pac_person_association pac
       WHERE pac.pac_pac_person_id = per.pac_person_id
         AND pac.pac_person_id = parameter_1;
END rpt_doc_std_3_contact_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_FT_CHARGE_SUB" (
  arefcursor in OUT CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_3 in number
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate VHA 15.05.2014
*@public
*@param parameter_3:  DOC_FOOT_ID
*/
begin
  open arefcursor for
    select ACC.ACC_NUMBER
         , FCH.FCH_DESCRIPTION
         , FCH.FCH_NAME
         , FCH.FCH_EXCL_AMOUNT
         , FCH.FCH_INCL_AMOUNT
         , FCH_RATE
         , FCH.PTC_DISCOUNT_ID
         , case nvl(FCH.C_CALCULATION_MODE, FCH.C_CALCULATION_MODE)
             when '0' then 'AMOUNT'
             when '1' then 'AMOUNT'
             when '6' then 'AMOUNT'
             when '8' then 'AMOUNT'
             when '2' then 'RATE'
             when '3' then 'RATE'
             when '4' then 'RATE'
             when '5' then 'RATE'
             when '7' then 'RATE'
             when '9' then 'RATE'
           end CHARGE_CALCULATION_MODE
         , FCH.FCH_EXPRESS_IN
         , FCH.PTC_CHARGE_ID
         , decode(FCH.PTC_DISCOUNT_ID, null, 2, 1) DIS_SUR_GRP
         , FCH_IN_SERIES_CALCULATION
      from ACS_ACCOUNT ACC
         , ACS_TAX_CODE TAX
         , DOC_FOOT_CHARGE FCH
     where TAX.ACS_TAX_CODE_ID(+) = FCH.ACS_TAX_CODE_ID
       and ACC.ACS_ACCOUNT_ID(+) = TAX.ACS_TAX_CODE_ID
       and FCH.DOC_FOOT_ID = parameter_3;
end RPT_DOC_STD_3_FT_CHARGE_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_HEADER_LEFT_SUB" (
  arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0 in DOC_DOCUMENT.DMT_NUMBER%type
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 1 FEB 2010
*@lastUpdate VHA 14.05.2014
*@public
*@param parameter_0:  DMT_NUMBER
*/
begin
  open arefcursor for
    select DMT.DMT_NUMBER
         , DMT.DMT_DATE_DOCUMENT
         , DMT.DMT_REFERENCE
         , REP.REP_DESCR
         , REC.RCO_TITLE
         , ACS_FUNCTION.GetPayMethDescr(APM.ACS_PAYMENT_METHOD_ID, DMT.PC_LANG_ID) PAY_METH_DESCR
         , PCS.PC_FUNCTIONS.GETAPPLTXTDESCR(PMT.PC_APPLTXT_ID, DMT.PC_LANG_ID) COND_DESCR
         , CUR.CURRENCY
         , PER.PER_KEY1
         , PER.PER_KEY2
         , GST.C_GAUGE_TITLE
         , GAU.C_ADMIN_DOMAIN
         , DPD.PAD_PAYMENT_DATE
         , DPD.PAD_NET_DATE_AMOUNT
         , DPD.PAD_BAND_NUMBER
         , DMT.DOC_DOCUMENT_ID
         , FOO.DOC_FOOT_ID
         , REC.DOC_RECORD_ID
         , PER.PAC_PERSON_ID
         , ADR.PAC_ADDRESS_ID
         , REP.PAC_REPRESENTATIVE_ID
         , PMT.PAC_PAYMENT_CONDITION_ID
         , GAU.DOC_GAUGE_ID
         , DPD.DOC_PAYMENT_DATE_ID
         , APM.ACS_PAYMENT_METHOD_ID
         , AFC.ACS_FINANCIAL_CURRENCY_ID
         , CUR.PC_CURR_ID
         , LANG.PC_LANG_ID
      from PCS.PC_LANG LANG
         , ACS_FIN_ACC_S_PAYMENT AFA
         , ACS_PAYMENT_METHOD APM
         , DOC_RECORD REC
         , DOC_PAYMENT_DATE DPD
         , DOC_FOOT FOO
         , PAC_PAYMENT_CONDITION PMT
         , ACS_FINANCIAL_CURRENCY AFC
         , PAC_ADDRESS ADR
         , PAC_REPRESENTATIVE REP
         , PAC_PERSON PER
         , PCS.PC_CURR CUR
         , DOC_GAUGE GAU
         , DOC_GAUGE_STRUCTURED GST
         , DOC_DOCUMENT DMT
     where DMT.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
       and GAU.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
       and DMT.PC_LANG_ID = LANG.PC_LANG_ID
       and DPD.DOC_FOOT_ID(+) = FOO.DOC_FOOT_ID
       and AFA.ACS_FIN_ACC_S_PAYMENT_ID(+) = DMT.ACS_FIN_ACC_S_PAYMENT_ID
       and APM.ACS_PAYMENT_METHOD_ID(+) = AFA.ACS_PAYMENT_METHOD_ID
       and REP.PAC_REPRESENTATIVE_ID(+) = DMT.PAC_REPRESENTATIVE_ID
       and FOO.DOC_DOCUMENT_ID(+) = DMT.DOC_DOCUMENT_ID
       and REC.DOC_RECORD_ID(+) = DMT.DOC_RECORD_ID
       and ADR.PAC_ADDRESS_ID(+) = DMT.PAC_ADDRESS_ID
       and PER.PAC_PERSON_ID(+) = ADR.PAC_PERSON_ID
       and AFC.ACS_FINANCIAL_CURRENCY_ID(+) = DMT.ACS_FINANCIAL_CURRENCY_ID
       and CUR.PC_CURR_ID(+) = AFC.PC_CURR_ID
       and PMT.PAC_PAYMENT_CONDITION_ID(+) = DMT.PAC_PAYMENT_CONDITION_ID
       and DMT.DMT_NUMBER = parameter_0;
end RPT_DOC_STD_3_HEADER_LEFT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_HEADER_RIGHT_SUB" (
  arefcursor  in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0 in DOC_DOCUMENT.DMT_NUMBER%type
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 1 FEB 2010
*@lastUpdate VHA 14.05.2014
*@public
*@param parameter_0:  DMT_NUMBER
*/
begin
  open arefcursor for
    select DMT.DMT_NUMBER
         , DMT.DMT_DATE_FALLING_DUE
         , DMT.DMT_PARTNER_NUMBER
         , DMT.DMT_PARTNER_REFERENCE
         , DMT.DMT_DATE_PARTNER_DOCUMENT
         , DMT.C_INCOTERMS
         , THI.THI_NO_INTRA
         , THI.THI_NO_TVA
         , PAC_FUNCTIONS.GetSendCondDescr(PSC.PAC_SENDING_CONDITION_ID, DMT.PC_LANG_ID) SEN_DESCR
         , PER_SEN.PER_NAME SEN_PER_NAME
         , PER_SEN.PER_FORENAME SEN_PER_FORENAME
         , PER_SEN.PER_ACTIVITY SEN_PER_ACTIVITY
         , PER_SEN.PER_KEY1
         , PER_SEN.PER_KEY2
         , ADR_SEN.ADD_ADDRESS1 SEN_ADD_ADDRESS1
         , ADR_SEN.ADD_FORMAT SEN_ADD_FORMAT
         , GST.C_GAUGE_TITLE
         , DPD.PAD_PAYMENT_DATE
         , DPD.PAD_BAND_NUMBER
         , DPD.PAD_DISCOUNT_AMOUNT
         , DMT.DOC_DOCUMENT_ID
         , THI.PAC_THIRD_ID
         , FOO.DOC_FOOT_ID
         , PSC.PAC_SENDING_CONDITION_ID
         , DPD.DOC_PAYMENT_DATE_ID
         , PER_SEN.PAC_PERSON_ID
         , ADR_SEN.PAC_ADDRESS_ID
         , GAU.DOC_GAUGE_ID
         , LANG.PC_LANG_ID
      from PCS.PC_LANG LANG
         , DOC_PAYMENT_DATE DPD
         , DOC_FOOT FOO
         , PAC_SENDING_CONDITION PSC
         , PAC_ADDRESS ADR_SEN
         , PAC_PERSON PER_SEN
         , PAC_THIRD THI
         , DOC_GAUGE GAU
         , DOC_GAUGE_STRUCTURED GST
         , DOC_DOCUMENT DMT
     where DMT.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
       and GAU.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
       and DMT.PC_LANG_ID = LANG.PC_LANG_ID
       and DPD.DOC_FOOT_ID(+) = FOO.DOC_FOOT_ID
       and FOO.DOC_DOCUMENT_ID(+) = DMT.DOC_DOCUMENT_ID
       and PSC.PAC_SENDING_CONDITION_ID(+) = DMT.PAC_SENDING_CONDITION_ID
       and ADR_SEN.PAC_ADDRESS_ID(+) = PSC.PAC_ADDRESS_ID
       and PER_SEN.PAC_PERSON_ID(+) = ADR_SEN.PAC_PERSON_ID
       and THI.PAC_THIRD_ID(+) = DMT.PAC_THIRD_ID
       and DMT.DMT_NUMBER = parameter_0;
end RPT_DOC_STD_3_HEADER_RIGHT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_HEADER_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       doc_document.dmt_number%TYPE
)
IS
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate   4 MAR 2009
*@public
*@param PARAMETER_0:  DMT_NUMBER
*/
BEGIN
   OPEN arefcursor FOR
      SELECT dmt.dmt_number dmt_number, dmt.dmt_date_document,DMT.DMT_DATE_FALLING_DUE,
             dmt.dmt_partner_number, dmt.dmt_partner_reference,
             dmt.dmt_date_partner_document, dmt.dmt_reference,
             dmt.c_incoterms, rep.rep_descr, rec.rco_title, thi.thi_no_intra,
             thi.thi_no_tva,
             pac_functions.getsendconddescr
                                     (psc.pac_sending_condition_id,
                                      dmt.pc_lang_id
                                     ) sen_descr,
             per_sen.per_name sen_per_name,
             per_sen.per_forename sen_per_forename,
             per_sen.per_activity sen_per_activity,
             adr_sen.add_address1 sen_add_address1,
             adr_sen.add_format sen_add_format,
             acs_function.getpaymethdescr
                                   (apm.acs_payment_method_id,
                                    dmt.pc_lang_id
                                   ) pay_meth_descr,
             pcs.pc_functions.getappltxtdescr (pmt.pc_appltxt_id,
                                               dmt.pc_lang_id
                                              ) cond_descr,
             cur.currency, per.per_key1, gst.c_gauge_title,
             gau.c_admin_domain, dpd.pad_payment_date,
             dpd.pad_net_date_amount, dpd.pad_band_number,
             dpd.pad_date_amount, dpd.pad_discount_amount
        FROM pcs.pc_lang lang,
             acs_fin_acc_s_payment afa,
             acs_payment_method apm,
             doc_record rec,
             doc_payment_date dpd,
             doc_foot foo,
             pac_sending_condition psc,
             pac_payment_condition pmt,
             acs_financial_currency afc,
             pac_address adr,
             pac_representative rep,
             pac_address adr_sen,
             pac_person per_sen,
             pac_person per,
             pac_third thi,
             pcs.pc_curr cur,
             doc_gauge gau,
             doc_gauge_structured gst,
             doc_document dmt
       WHERE dmt.doc_gauge_id = gau.doc_gauge_id
         AND gau.doc_gauge_id = gst.doc_gauge_id
         AND dmt.pc_lang_id = lang.pc_lang_id
         AND foo.doc_foot_id = dpd.doc_foot_id(+)
         AND dmt.acs_fin_acc_s_payment_id = afa.acs_fin_acc_s_payment_id(+)
         AND afa.acs_payment_method_id = apm.acs_payment_method_id(+)
         AND dmt.pac_representative_id = rep.pac_representative_id(+)
         AND dmt.doc_document_id = foo.doc_document_id(+)
         AND dmt.doc_record_id = rec.doc_record_id(+)
         AND dmt.pac_sending_condition_id = psc.pac_sending_condition_id(+)
         AND psc.pac_address_id = adr_sen.pac_address_id(+)
         AND adr_sen.pac_person_id = per_sen.pac_person_id(+)
         AND dmt.pac_third_id = thi.pac_third_id(+)
         AND dmt.pac_address_id = adr.pac_address_id(+)
         AND adr.pac_person_id = per.pac_person_id(+)
         AND dmt.acs_financial_currency_id = afc.acs_financial_currency_id(+)
         AND afc.pc_curr_id = cur.pc_curr_id(+)
         AND dmt.pac_payment_condition_id = pmt.pac_payment_condition_id(+)
         AND dmt.dmt_number = parameter_0;
END rpt_doc_std_3_header_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_POS_CHARGE_SUB" (
  arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_3 in number
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 21 Jan 2009
*@lastUpdate VHA 15.05.2014
*@public
*@param parameter_0:  DOC_POSITION_ID
*/
begin
  open arefcursor for
    select DMT.DMT_NUMBER
         , POS.POS_NUMBER
         , POS.DIC_IMP_FREE1_ID
         , POS.DIC_IMP_FREE2_ID
         , POS.DIC_IMP_FREE3_ID
         , POS.DIC_IMP_FREE4_ID
         , POS.DIC_IMP_FREE5_ID
         , POS.DIC_POS_FREE_TABLE_1_ID
         , POS.DIC_POS_FREE_TABLE_2_ID
         , POS.DIC_POS_FREE_TABLE_3_ID
         , DNT.C_CALCULATION_MODE C_CALCULATION_MODE_DNT
         , CRG.C_CALCULATION_MODE C_CALCULATION_MODE_CRG
         , case nvl(DNT.C_CALCULATION_MODE, CRG.C_CALCULATION_MODE)
             when '0' then 'AMOUNT'
             when '1' then 'AMOUNT'
             when '6' then 'AMOUNT'
             when '8' then 'AMOUNT'
             when '2' then 'RATE'
             when '3' then 'RATE'
             when '4' then 'RATE'
             when '5' then 'RATE'
             when '7' then 'RATE'
             when '9' then 'RATE'
           end CHARGE_CALCULATION_MODE
         , PCH.PCH_DESCRIPTION
         , PCH.PCH_NAME
         , PCH.PCH_RATE
         , PCH.PCH_AMOUNT
         , PCH.PCH_EXPRESS_IN
         , PCH.PTC_DISCOUNT_ID
         , PCH.PTC_CHARGE_ID
         , decode(PCH.PTC_DISCOUNT_ID, null, 2, 1) DIS_SUR_GRP
         , PCH.PCH_IN_SERIES_CALCULATION
      from DOC_DOCUMENT DMT
         , DOC_POSITION POS
         , DOC_POSITION_CHARGE PCH
         , PTC_DISCOUNT DNT
         , PTC_CHARGE CRG
     where DMT.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
       and POS.DOC_POSITION_ID = PCH.DOC_POSITION_ID
       and DNT.PTC_DISCOUNT_ID(+) = PCH.PTC_DISCOUNT_ID
       and CRG.PTC_CHARGE_ID(+) = PCH.PTC_CHARGE_ID
       and POS.DOC_POSITION_ID = parameter_3;
end RPT_DOC_STD_3_POS_CHARGE_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_REMINDER_SUB" (
  arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0 in varchar2
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate VHA 14.05.2014
*@public
*@param PARAMETER_0 DMT_NUMBER
*/
begin
  open arefcursor for
    select distinct '1' GROUP_STRING
                  ,   --USED FOR DISPLAY OF HEADER IN SUBREPORT,
                    PERE.CDE
                  , LANG.LANID
                  , GAU.C_ADMIN_DOMAIN
                  , POS.C_DOC_POS_STATUS
                  , POS.DIC_UNIT_OF_MEASURE_ID
                  , decode(GAU.C_ADMIN_DOMAIN
                         , '1', GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, 'PURCHASE', DMT.PAC_THIRD_ID)
                         , '2', GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, 'SALE', DMT.PAC_THIRD_DELIVERY_ID)
                         , GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, ' ', DMT.PAC_THIRD_ID)
                          ) GOO_NUMBER_OF_DECIMAL
                  , POS.POS_REFERENCE
                  , POS.POS_SHORT_DESCRIPTION
                  , POS.POS_LONG_DESCRIPTION
                  , POS.POS_FREE_DESCRIPTION
                  , POS.POS_BODY_TEXT
                  , PDE.PDE_FINAL_DELAY
                  , PDE.PDE_INTERMEDIATE_DELAY
                  , PDT.DIC_DEL_TYP_EXPLAIN_ID
                  , sum(PDE.PDE_BALANCE_QUANTITY) BALANCE_FATHER
                  , sum(PDE.PDE_FINAL_QUANTITY) FINAL_FATHER
                  , sum(DOC_FUNCTIONS.docsituationfinalqtyson(PDE.DOC_POSITION_DETAIL_ID) ) FINAL_SON
                  , DOC_FUNCTIONS.docsituationbalanceparent(PDE.DOC_POSITION_DETAIL_ID) PDE_BALANCE_QUANTITY_PARENT
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30) GCO1_CHARAC_DESCR
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30) GCO2_CHARAC_DESCR
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO2_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30) GCO3_CHARAC_DESCR
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO3_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30) GCO4_CHARAC_DESCR
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO4_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30) GCO5_CHARAC_DESCR
                  , PDE.PDE_CHARACTERIZATION_VALUE_1
                  , PDE.PDE_CHARACTERIZATION_VALUE_2
                  , PDE.PDE_CHARACTERIZATION_VALUE_3
                  , PDE.PDE_CHARACTERIZATION_VALUE_4
                  , PDE.PDE_CHARACTERIZATION_VALUE_5
               from PCS.PC_LANG LANG
                  , DOC_GAUGE GAU
                  , DOC_GAUGE_STRUCTURED GST
                  , DOC_GAUGE_POSITION DGP
                  , GCO_GOOD GOO
                  , GCO_PRODUCT PDT
                  , DOC_POSITION_DETAIL PDE
                  , DOC_POSITION POS
                  , DOC_DOCUMENT DMT
                  , (select distinct FILS.DMT_NUMBER SON
                                   , PERE.DMT_NUMBER FATHER
                                   , decode(P_GAU.C_GAUGE_TITLE
                                          , '1', PERE.DMT_NUMBER
                                          , '6', PERE.DMT_NUMBER
                                          , decode(ARP_GAU.C_GAUGE_TITLE, '1', ARPE.DMT_NUMBER, '6', ARPE.DMT_NUMBER, null)
                                           ) CDE
                                from DOC_POSITION_DETAIL PDE_FILS
                                   , DOC_POSITION_DETAIL PDE_PERE
                                   , DOC_POSITION_DETAIL PDE_ARPE
                                   , DOC_GAUGE_STRUCTURED P_GAU
                                   , DOC_GAUGE_STRUCTURED ARP_GAU
                                   , DOC_DOCUMENT PERE
                                   , DOC_DOCUMENT ARPE
                                   , DOC_DOCUMENT FILS
                               where FILS.DOC_DOCUMENT_ID = PDE_FILS.DOC_DOCUMENT_ID
                                 and PDE_FILS.DOC_DOC_POSITION_DETAIL_ID = PDE_PERE.DOC_POSITION_DETAIL_ID
                                 and PDE_PERE.DOC_DOCUMENT_ID = PERE.DOC_DOCUMENT_ID
                                 and PERE.DOC_GAUGE_ID = P_GAU.DOC_GAUGE_ID
                                 and PDE_ARPE.DOC_POSITION_DETAIL_ID(+) = PDE_PERE.DOC_DOC_POSITION_DETAIL_ID
                                 and ARPE.DOC_DOCUMENT_ID(+) = PDE_ARPE.DOC_DOCUMENT_ID
                                 and ARP_GAU.DOC_GAUGE_ID(+) = ARPE.DOC_GAUGE_ID
                            group by FILS.DMT_NUMBER
                                   , PERE.DMT_NUMBER
                                   , decode(P_GAU.C_GAUGE_TITLE
                                          , '1', PERE.DMT_NUMBER
                                          , '6', PERE.DMT_NUMBER
                                          , decode(ARP_GAU.C_GAUGE_TITLE, '1', ARPE.DMT_NUMBER, '6', ARPE.DMT_NUMBER, null)
                                           ) ) PERE
              where PERE.CDE = DMT.DMT_NUMBER
                and PDE.DOC_POSITION_ID = POS.DOC_POSITION_ID
                and POS.DOC_DOCUMENT_ID = DMT.DOC_DOCUMENT_ID
                and POS.DOC_GAUGE_POSITION_ID = DGP.DOC_GAUGE_POSITION_ID
                and DMT.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID
                and GAU.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
                and DMT.PC_LANG_ID = LANG.PC_LANG_ID
                and POS.C_GAUGE_TYPE_POS in('1', '3', '7', '8', '9', '10')
                and GOO.GCO_GOOD_ID(+) = POS.GCO_GOOD_ID
                and PDT.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
                and PERE.SON = parameter_0
           group by PERE.FATHER
                  , PERE.SON
                  , PERE.CDE
                  , DMT.DMT_NUMBER
                  , DMT.DMT_DATE_DOCUMENT
                  , DMT.C_DOCUMENT_STATUS
                  , DMT.PC_LANG_ID
                  , LANG.LANID
                  , POS.POS_NUMBER
                  , POS.C_DOC_POS_STATUS
                  , POS.C_GAUGE_TYPE_POS
                  , GAU.C_GAUGE_TYPE
                  , GST.C_GAUGE_TITLE
                  , GAU.C_ADMIN_DOMAIN
                  , DGP.C_GAUGE_SHOW_DELAY
                  , DGP.GAP_POS_DELAY
                  , POS.DIC_UNIT_OF_MEASURE_ID
                  , GOO.GOO_MAJOR_REFERENCE
                  , GOO.GOO_SECONDARY_REFERENCE
                  , GOO.GOO_NUMBER_OF_DECIMAL
                  , DECODE(GAU.C_ADMIN_DOMAIN
                         , '1', GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, 'PURCHASE', DMT.PAC_THIRD_ID)
                         , '2', GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, 'SALE', DMT.PAC_THIRD_DELIVERY_ID)
                         , GCO_FUNCTIONS.getcdadecimal(POS.GCO_GOOD_ID, ' ', DMT.PAC_THIRD_ID)
                          )
                  , GOO.DIC_GOOD_LINE_ID
                  , GOO.DIC_GOOD_FAMILY_ID
                  , GOO.DIC_GOOD_MODEL_ID
                  , GOO.DIC_GOOD_GROUP_ID
                  , POS.POS_REFERENCE
                  , POS.POS_SHORT_DESCRIPTION
                  , POS.POS_LONG_DESCRIPTION
                  , POS.POS_FREE_DESCRIPTION
                  , POS.POS_BODY_TEXT
                  , POS.POS_BALANCE_QUANTITY
                  , POS.POS_FINAL_QUANTITY
                  , PDE.PDE_FINAL_DELAY
                  , PDE.PDE_INTERMEDIATE_DELAY
                  , PDE.PDE_BASIS_DELAY
                  , PDT.C_PRODUCT_DELIVERY_TYP
                  , PDT.DIC_DEL_TYP_EXPLAIN_ID
                  , DOC_FUNCTIONS.docsituationfinalqtyson(PDE.DOC_POSITION_DETAIL_ID)
                  , DOC_FUNCTIONS.docsituationbalanceparent(PDE.DOC_POSITION_DETAIL_ID)
                  , PDE.GCO_CHARACTERIZATION_ID
                  , PDE.GCO_GCO_CHARACTERIZATION_ID
                  , PDE.GCO2_GCO_CHARACTERIZATION_ID
                  , PDE.GCO3_GCO_CHARACTERIZATION_ID
                  , PDE.GCO4_GCO_CHARACTERIZATION_ID
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO2_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO3_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                  , substr(GCO_FUNCTIONS.getcharacdescr(PDE.GCO4_GCO_CHARACTERIZATION_ID, DMT.PC_LANG_ID), 1, 30)
                  , PDE.PDE_CHARACTERIZATION_VALUE_1
                  , PDE.PDE_CHARACTERIZATION_VALUE_2
                  , PDE.PDE_CHARACTERIZATION_VALUE_3
                  , PDE.PDE_CHARACTERIZATION_VALUE_4
                  , PDE.PDE_CHARACTERIZATION_VALUE_5;
end RPT_DOC_STD_3_REMINDER_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_TAXES_MP_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_4    in     DOC_POSITION.DOC_DOC_POSITION_ID%type
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
*Description - Used for report DOC_STD_3

*@created VHA 15 January 2013
*@lastUpdate SMA 1 April 2015
*@public
*@param parameter_4:  DOC_POSITION_ID
*/
  vpc_lang_id  pcs.pc_lang.pc_lang_id%type;
  vpc_comp_id  pcs.pc_comp.pc_comp_id%type;
  vpc_conli_id pcs.pc_conli.pc_conli_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  pcs.PC_I_LIB_SESSION.setcompanyid(pc_comp_id);
  pcs.PC_I_LIB_SESSION.setconliid(pc_conli_id);
  vpc_lang_id   := pcs.PC_I_LIB_SESSION.getuserlangid;
  vpc_comp_id   := pcs.PC_I_LIB_SESSION.getcompanyid;
  vpc_conli_id  := pcs.PC_I_LIB_SESSION.getconliid;

  open arefcursor for
    select   DOA.DOC_POSITION_ID
           , DOA.GCO_ALLOY_ID
           , DOA.DOA_WEIGHT_DELIVERY
           , DOA.DOA_WEIGHT_DELIVERY_TH
           , DOA.DOA_LOSS
           , DOA.DOA_LOSS_TH
           , DFA.DFA_RATE
           , DFA.DFA_RATE_TH
           , DFA.DFA_RATE_DATE
           , PCH.PCH_DESCRIPTION GAL_ALLOY_REF
           , (select PCS.PC_FUNCTIONS.GetDescodeDescr('C_THIRD_MATERIAL_RELATION_TYPE', DOC.C_THIRD_MATERIAL_RELATION_TYPE, vpc_lang_id)
                from doc_document doc
               where DOC.DOC_DOCUMENT_ID = DOA.DOC_DOCUMENT_ID) THIRD_MAT_REL_TYPE_DESC
           , PCH.PCH_DESCRIPTION
           , PCH.PCH_AMOUNT
           , CRG.CRG_NAME
           , case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 'SURCHARGE'
               else case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 'INCREASE'
               else 'OTHER'
             end
             end CRG_TYPE
           , case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 1
               else case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 2
               else 3
             end
             end ORDER_TYPE
           , TRF.DIC_TARIFF_ID
           , TRF.DIC_DESCR
        from DOC_POSITION_ALLOY DOA
           , DOC_FOOT_ALLOY DFA
           , DOC_POSITION_CHARGE PCH
           , PTC_CHARGE CRG
           , (select POS.DOC_DOCUMENT_ID
                   , POS.DOC_POSITION_ID
                   , DIC.DIC_TARIFF_ID
                   , DIC.DIC_DESCR
                from DIC_TARIFF DIC
                   , DOC_POSITION POS
               where DIC.DIC_TARIFF_ID = POS.DIC_TARIFF_ID) TRF
       where DFA.DOC_DOC_DOCUMENT_ID(+) = DOA.DOC_DOCUMENT_ID
         and PCH.DOC_POSITION_ID(+) = DOA.DOC_POSITION_ID
         and TRF.DOC_POSITION_ID(+) = DOA.DOC_POSITION_ID
         and CRG.PTC_CHARGE_ID(+) = PCH.PTC_CHARGE_ID
         and DOA.DOC_POSITION_ID = parameter_4
         and DOA.GCO_ALLOY_ID is not null
         and (    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                   and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                        or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                        or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                        or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                       )
                  )
              or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                  and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                       or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                       or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                       or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                      )
                 )
             )
    order by case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POS_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 1
               else case
               when(    (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainSal(DOA.DOC_DOCUMENT_ID) = 1)
                         and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                              or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_SAL') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             )
                        )
                    or (     (DOC_I_LIB_DOCUMENT.IsDocAdminDomainPur(DOA.DOC_DOCUMENT_ID) = 1)
                        and (    (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFIPAC_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                             or (instr(';' || PCS.PC_CONFIG.GetConfig('DOC_MAT_POSPMM_COFITER_CRG_PUR') || ';', ';' || CRG.CRG_NAME || ';') > 0)
                            )
                       )
                   ) then 2
               else 3
             end
             end;
end RPT_DOC_STD_3_TAXES_MP_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STD_3_VAT_RECAP_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_3    in     number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
*Description - Used for report DOC_STD_3

*@created MZHU 17 MAY 2009
*@lastUpdate VHA 14.05.2014
*@public
*@param PARAMETER_3:  DOC_FOOT_ID
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select ACC.ACC_NUMBER
         , DES.DES_DESCRIPTION_SUMMARY
         , DMT.DMT_DATE_DELIVERY
         , VDA.VDA_LIABLE_AMOUNT
         , VDA.VDA_NET_AMOUNT_EXCL
         , VDA.VDA_VAT_RATE
         , VDA.VDA_VAT_TOTAL_AMOUNT
         , ACS_FUNCTION.getvatrate(COD.ACS_TAX_CODE_ID, to_char(DMT.DMT_DATE_DOCUMENT, 'YYYYMMDD') ) RATE_1
         , ACS_FUNCTION.getvatrate(COD.ACS_TAX_CODE_ID, to_char(DMT.DMT_DATE_DELIVERY, 'YYYYMMDD') ) RATE_2
      from ACS_ACCOUNT ACC
         , ACS_DESCRIPTION DES
         , ACS_TAX_CODE COD
         , DOC_DOCUMENT DMT
         , DOC_VAT_DET_ACCOUNT VDA
     where DMT.DOC_DOCUMENT_ID(+) = VDA.DOC_FOOT_ID
       and VDA.ACS_TAX_CODE_ID = COD.ACS_TAX_CODE_ID
       and COD.ACS_TAX_CODE_ID = ACC.ACS_ACCOUNT_ID
       and ACC.ACS_ACCOUNT_ID = DES.ACS_ACCOUNT_ID
       and DES.PC_LANG_ID = vpc_lang_id
       and VDA.DOC_FOOT_ID = parameter_3;
end RPT_DOC_STD_3_VAT_RECAP_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_STOCK_SITUATION_SUB" (
      arefcursor      IN OUT   crystal_cursor_types.dualcursortyp,
      PARAMETER_1     IN           VARCHAR2
   )
IS
/**
*Description
 Used for the reports

 Group 2 - PORTFOLIO BY PRODUCT
 DOC_CUST_ORDER_PORT_GOOD_BATCH
 DOC_CUST_CONSIG_PORT_GOOD_BATCH
 DOC_CUST_DELIVERY_PORT_GOOD_BATCH
 DOC_SUPPL_ORDER_PORT_GOOD_BATCH
 DOC_SUPPL_DELIVERY_PORT_GOOD_BATCH

*@created PNA 1 Jun 2007
*@lastUpdate 19 Feb 2009
*@public
*@param PARAMETER_1 : GCO_GOOD_ID
*/

BEGIN
OPEN AREFCURSOR
FOR
SELECT
LOC.STM_LOCATION_ID,
LOC.LOC_DESCRIPTION,
STO.STO_DESCRIPTION,
STO.C_ACCESS_METHOD,
SPO.GCO_GOOD_ID,
SPO.SPO_STOCK_QUANTITY,
SPO.SPO_ASSIGN_QUANTITY,
SPO.SPO_PROVISORY_INPUT,
SPO.SPO_PROVISORY_OUTPUT,
SPO.SPO_AVAILABLE_QUANTITY
FROM
STM_STOCK STO,
STM_LOCATION LOC,
STM_STOCK_POSITION SPO
WHERE
SPO.STM_STOCK_ID = STO.STM_STOCK_ID
AND SPO.STM_LOCATION_ID = LOC.STM_LOCATION_ID
AND STO.C_ACCESS_METHOD <> 'PRIVATE'
AND SPO.GCO_GOOD_ID = TO_NUMBER(PARAMETER_1);

END RPT_DOC_STOCK_SITUATION_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_SUPPL_REMINDER_BAT" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_14   in     varchar2
, parameter_15   in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
*Description
        Used for report DOC_SUPPL_REMINDER_BATCH

*@created EQI 21 AUG 2007
*@lastUpdate  sma 30.10.2013
*@public
*@param PARAMETER_0 : minimum value for PAC_PERSON.PER_KEY1
*@param PARAMETER_1 : maximum value for PAC_PERSON.PER_KEY1
*@param PARAMETER_14 : minimum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PARAMETER_15 : maximum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PROCUSER_LANID : user language
*/
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;   --user language id
  nDocDelayWeekstart      number;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select   nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
           , dmt.dmt_number
           , dmt.c_document_status
           , gas.c_gauge_title
           , pos.pos_number
           , pos.c_gauge_type_pos
           , pos.pos_final_quantity
           , pos.pos_net_value_excl_b
           , pos.dic_unit_of_measure_id
           , pos.pos_net_unit_value
           , pde.pde_balance_quantity
           , pde.pde_final_quantity
           , pde.pde_final_delay
           , goo.gco_good_id
           , goo.goo_major_reference
           , goo.goo_number_of_decimal
           , per.pac_person_id
           , per.per_name
           , per.per_key1
           , per.per_short_name
           , (select adr.add_address1 || '  ' || adr.add_format
                from pac_address adr
               where adr.pac_person_id = dmt.pac_third_id
                 and adr.dic_address_type_id = 'Inv') inv_address
           , sup.pac_supplier_partner_id
           , sup.acs_auxiliary_account_id
           , thi.pac_third_id
           , cur.currency
           , adr.add_address1
           , des.des_short_description
           , fnn.fan_stk_qty
           , fnn.fan_netw_qty
           , (select cu2.currency
                from pac_credit_limit cre
                   , acs_financial_currency acs
                   , pcs.pc_curr cu2
               where cre.pac_supplier_partner_id = dmt.pac_third_id
                 and cre.acs_financial_currency_id = acs.acs_financial_currency_id
                 and acs.pc_curr_id = cu2.pc_curr_id) cre_amount_limit
           , stm_functions.getavailablequantity(goo.gco_good_id) available_qty
        from acs_financial_currency fin
           , doc_document dmt
           , doc_gauge_structured gas
           , doc_position pos
           , doc_position_detail pde
           , fal_network_need fnn
           , gco_good goo
           , pac_person per
           , pac_supplier_partner sup
           , pac_third thi
           , pcs.pc_curr cur
           , pac_address adr
           , gco_description des
       where goo.gco_good_id = des.gco_good_id
         and des.pc_lang_id = vpc_lang_id
         and des.c_description_type = '01'
         and per.pac_person_id = adr.pac_person_id
         and dmt.doc_document_id = pos.doc_document_id
         and pos.doc_position_id = pde.doc_position_id
         and pde.doc_position_detail_id = fnn.doc_position_detail_id(+)
         and pos.gco_good_id = goo.gco_good_id
         and dmt.doc_gauge_id = gas.doc_gauge_id
         and dmt.acs_financial_currency_id = fin.acs_financial_currency_id
         and fin.pc_curr_id = cur.pc_curr_id
         and dmt.pac_third_id = thi.pac_third_id
         and thi.pac_third_id = per.pac_person_id
         and per.pac_person_id = sup.pac_supplier_partner_id
         and gas.c_gauge_title = '1'
         and dmt.dmt_date_document >= decode(parameter_14, '0', to_date('19800101', 'YYYYMMDD'), to_date(parameter_14, 'YYYYMMDD') )
         and dmt.dmt_date_document <= decode(parameter_15, '0', to_date('30001231', 'YYYYMMDD'), to_date(parameter_15, 'YYYYMMDD') )
         and dmt.c_document_status in('02', '03')
         and pos.c_gauge_type_pos in('1', '7', '8', '91', '10')
         and per.per_key1 >= parameter_0
         and per.per_key1 <= parameter_1
    order by dmt.dmt_number
           , pos.pos_number;
end rpt_doc_suppl_reminder_bat;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_SUPPL_REMINDER_MAIL" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_6    in     varchar2
, parameter_14   in     varchar2
, parameter_15   in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
*Description
        Used for report DOC_SUPPL_REMINDER_MAIL

*@created EQI 23 AUG 2007
*@lastUpdate sma 30.10.2013
*@public
*@param parameter_0 : minimum value for PAC_PERSON.PER_KEY1
*@param parameter_1 : maximum value for PAC_PERSON.PER_KEY1
*@param parameter_6 : Final delay for detail information of document
*@param PARAMETER_14 : minimum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param PARAMETER_15 : maximum value for DOC_DOCUMENT.DMT_DATE_DOCUMENT
*@param procuser_lanid : user language
*/
  vpc_lang_id             PCS.PC_LANG.PC_LANG_ID%type;   --user language id
  nDocDelayWeekstart      number;
begin
  PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.getuserlangid;

  -- Premier jour de la semaine
  nDocDelayWeekstart := to_number(nvl(PCS.PC_CONFIG.GetConfig('DOC_DELAY_WEEKSTART'), '2') );

  open arefcursor for
    select nDocDelayWeekstart DOC_DELAY_WEEKSTART_CONFIG
         , DOC.DMT_NUMBER
         , ADR.ADD_ADDRESS1
         , ADR.ADD_FORMAT
         , GAS.C_GAUGE_TITLE
         , POS.POS_NUMBER
         , POS.C_GAUGE_TYPE_POS
         , POS.C_DOC_POS_STATUS
         , GAP.C_GAUGE_SHOW_DELAY
         , POS.POS_SHORT_DESCRIPTION
         , PDE.PDE_FINAL_QUANTITY
         , POS.POS_BALANCE_QUANTITY
         , PDE.PDE_BALANCE_QUANTITY
         , PDE_INTERMEDIATE_QUANTITY
         , PDE_MOVEMENT_QUANTITY
         , POS.DIC_UNIT_OF_MEASURE_ID
         , PDE.PDE_FINAL_DELAY
         , PDE.PDE_INTERMEDIATE_DELAY
         , PDE_BASIS_DELAY
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_NUMBER_OF_DECIMAL
         , PER.PER_NAME
         , PER.PER_KEY1
         , LAN.LANID
         , CUR.CURRENCY
         , count(distinct POS.DIC_UNIT_OF_MEASURE_ID) over(partition by PER.PER_NAME) distinct_measure
      from DOC_DOCUMENT DOC
         , DOC_POSITION POS
         , DOC_GAUGE GAU
         , ACS_FINANCIAL_CURRENCY FIN
         , PAC_ADDRESS ADR
         , PCS.PC_LANG LAN
         , DOC_POSITION_DETAIL PDE
         , GCO_GOOD GOO
         , DOC_GAUGE_POSITION GAP
         , DOC_GAUGE_STRUCTURED GAS
         , PCS.PC_CURR CUR
         , PAC_PERSON PER
     where DOC.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
       and DOC.DOC_GAUGE_ID = GAU.DOC_GAUGE_ID(+)
       and DOC.ACS_FINANCIAL_CURRENCY_ID = FIN.ACS_FINANCIAL_CURRENCY_ID
       and DOC.PAC_ADDRESS_ID = ADR.PAC_ADDRESS_ID
       and DOC.PC_LANG_ID = LAN.PC_LANG_ID
       and POS.DOC_POSITION_ID = PDE.DOC_POSITION_ID
       and POS.GCO_GOOD_ID = GOO.GCO_GOOD_ID
       and POS.DOC_GAUGE_POSITION_ID = GAP.DOC_GAUGE_POSITION_ID
       and GAU.DOC_GAUGE_ID = GAS.DOC_GAUGE_ID
       and FIN.PC_CURR_ID = CUR.PC_CURR_ID
       and ADR.PAC_PERSON_ID = PER.PAC_PERSON_ID
       and DOC.dmt_date_document >= decode(parameter_14, '0', to_date('19800101', 'YYYYMMDD'), to_date(parameter_14, 'YYYYMMDD') )
       and DOC.dmt_date_document <= decode(parameter_15, '0', to_date('30001231', 'YYYYMMDD'), to_date(parameter_15, 'YYYYMMDD') )
       and GAS.C_GAUGE_TITLE in('1', '5')
       and POS.C_DOC_POS_STATUS in('02', '03')
       and POS.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10')
       and PER.PER_KEY1 >= parameter_0
       and PER.PER_KEY1 <= parameter_1
       and PDE.PDE_FINAL_DELAY <= decode(parameter_6, '0', to_date('30001231', 'YYYYMMDD'), to_date(parameter_6, 'YYYYMMDD') )
       and PDE.PDE_BALANCE_QUANTITY > 0;
end RPT_DOC_SUPPL_REMINDER_MAIL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_DOC_TURNOVER_MASTER" (
  arefcursor           in out crystal_cursor_types.dualcursortyp
, parameter_0          in     varchar2
, parameter_1          in     varchar2
, parameter_2          in     varchar2
, parameter_3          in     varchar2
, parameter_4          in     varchar2
, parameter_5          in     varchar2
, parameter_6          in     varchar2
, parameter_7          in     varchar2
, parameter_8          in     varchar2
, parameter_9          in     varchar2
, parameter_21         in     varchar2
, procuser_lanid       in     pcs.pc_lang.lanid%type
, report_name          in     varchar2
, calling_pc_object_id in     pcs.pc_object.pc_object_id%type
, company_owner        in     pcs.pc_scrip.scrdbowner%type
)
is
  /**
  * procedure rpt_doc_turnover_master
  * Description
  *    Utilisation pour le rapport DOC_CUST_TURNOVER_CUST_BATCH, DOC_SUPPL_TURNOVER_SUPPL_BATCH
                                             DOC_CUST_TURNOVER_CUST_BATCH, DOC_SUPPL_TURNOVER_SUPPL_BATCH
  * @created mzh 01.07.2007
  * @lastUpdate VHA 4 February 2013
  * @public
  * @param parameter_0    : FROM(PER_KEY1 or GOO_MAJOR_REFERENCE)
  * @param parameter_1    : TO(PER_KEY1 or GOO_MAJOR_REFERENCE)
  * @param parameter_1    : used in Crystal report - use activity/line (yes or no)
  * @param parameter_3    : used in Crystal report - use region/family (yes or no)
  * @param parameter_4    : used in Crystal report - use partner type/group (yes or no)
  * @param parameter_5    : used in Crystal report - use sales person/model (yes or no)
  * @param parameter_6    : show detail (yes, no or subtotal only)
  * @param parameter_7    : date from
  * @param parameter_8    : date to
  * @param parameter_9    : gauge title (C_GAUGE_TITLE)
  * @param parameter_21   : Prise en compte matière précieuse
  * @param procuser_lanid : ID langue utilisateur
  * @param report_name    : Nom du rapport
  * @param calling_pc_object_id : crystal calling object id
  * @param company_owner : crystal company owner
  */
  vpc_lang_id             pcs.pc_lang.pc_lang_id%type;
  report_names            varchar2(100);
  report_names_1          varchar2(100);
  report_names_2          varchar2(100);
  param_c_gauge_title     varchar2(30);
  param_pos_status        varchar2(30);
  param_dmt_date_start    date;
  param_dmt_date_end      date;
  vpc_pas_ligne           dico_description.dit_descr%type;
  vpc_pas_famille         dico_description.dit_descr%type;
  vpc_pas_modele          dico_description.dit_descr%type;
  vpc_pas_groupe          dico_description.dit_descr%type;
  vpc_pas_activite        dico_description.dit_descr%type;
  vpc_pas_region          dico_description.dit_descr%type;
  vpc_pas_type_partenaire dico_description.dit_descr%type;
  vpc_pas_representant    dico_description.dit_descr%type;
begin
--Initialize the name of the report
  report_names             := substr(substr(report_name, instr(report_name, '\', -1) + 1), 1, length(substr(report_name, instr(report_name, '\', -1) + 1) ) - 4);
  report_names             := RPT_FUNCTIONS.GetStdReportName(report_names, CALLING_PC_OBJECT_ID);
  report_names_1           := substr(report_names, instr(report_names, '_') + 1, instr(report_names, '_', 1, 2) - instr(report_names, '_') - 1);
  report_names_2           := substr(report_names, instr(report_names, '_', -1, 2) + 1, instr(report_names, '_', -1) - instr(report_names, '_', -1, 2) - 1);

--
  if parameter_7 = '0' then
    param_dmt_date_start  := to_date(10000101, 'YYYYMMDD');
  else
    param_dmt_date_start  := to_date(parameter_7, 'YYYYMMDD');
  end if;

  if parameter_8 = '0' then
    param_dmt_date_end  := to_date(30001231, 'YYYYMMDD');
  else
    param_dmt_date_end  := to_date(parameter_8, 'YYYYMMDD');
  end if;

  if report_names in('DOC_CUST_TURNOVER_CUST_BATCH', 'DOC_CUST_TURNOVER_GOOD_BATCH') then
    case parameter_9
      when '0' then
        param_c_gauge_title  := '8,30';
      when '1' then
        param_c_gauge_title  := '8,9,30';
      when '2' then
        param_c_gauge_title  := '9';
    end case;
  elsif report_names in('DOC_SUPPL_TURNOVER_SUPPL_BATCH', 'DOC_SUPPL_TURNOVER_GOOD_BATCH') then
    param_c_gauge_title  := '4,5';
  end if;

  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id              := pcs.PC_I_LIB_SESSION.GetUserLangId;
  vpc_pas_ligne            := pcs.PC_FUNCTIONS.TranslateWord2('Pas de ligne produit', vpc_lang_id);
  vpc_pas_famille          := pcs.PC_FUNCTIONS.TranslateWord2('Pas de famille produit', vpc_lang_id);
  vpc_pas_modele           := pcs.PC_FUNCTIONS.TranslateWord2('Pas de modèle produit', vpc_lang_id);
  vpc_pas_groupe           := pcs.PC_FUNCTIONS.TranslateWord2('Pas de groupe produit', vpc_lang_id);
  vpc_pas_activite         := pcs.PC_FUNCTIONS.TranslateWord2('Pas activité', vpc_lang_id);
  vpc_pas_region           := pcs.PC_FUNCTIONS.TranslateWord2('Pas de région', vpc_lang_id);
  vpc_pas_type_partenaire  := pcs.PC_FUNCTIONS.TranslateWord2('Pas de type de partenaire', vpc_lang_id);

  open arefcursor for
    select to_char(sysdate, 'YYYYIW') year_week
         , to_char(sysdate, 'YYYYMM') year_month
         , dmt.DMT_NUMBER
         , dmt.DMT_DATE_DOCUMENT
         , dmt.DMT_RATE_EURO
         , dmt.DMT_BASE_PRICE
         , dmt.DMT_RATE_OF_EXCHANGE
         , gas.C_GAUGE_TITLE
         , gas.GAS_FINANCIAL_CHARGE
         , pos.C_DOC_POS_STATUS
         , pos.GCO_GOOD_ID
         , pos.POS_NUMBER
         , GCO_FUNCTIONS.GetDescription2(goo.GCO_GOOD_ID, vpc_lang_id, 1, '01') DES_SHORT_DESCRIPTION
         , GCO_FUNCTIONS.GetDescription2(goo.GCO_GOOD_ID, vpc_lang_id, 2, '01') DES_LONG_DESCRIPTION
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_UNIT_VALUE
                            else DOC_I_LIB_DISCOUNT_CHARGE.getUnitPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => '')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getUnitPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => '')
           end POS_NET_UNIT_VALUE
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => '')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => '')
           end POS_NET_VALUE_EXCL
         , pos.POS_FINAL_QUANTITY
         , pos.DIC_UNIT_OF_MEASURE_ID
         , case parameter_21
             when '1' then case DOC_I_LIB_DISCOUNT_CHARGE.existFootPMDiscount(iDocumentID => pos.DOC_DOCUMENT_ID)
                            when 1 then pos.POS_NET_VALUE_EXCL_B
                            else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
                          end
             else DOC_I_LIB_DISCOUNT_CHARGE.getPosValueWithoutPMCharge(iPositionID => pos.DOC_POSITION_ID, iCurrencyType => 'B')
           end POS_NET_VALUE_EXCL_B
         , pos.POS_BALANCE_QUANTITY
         , goo.GOO_MAJOR_REFERENCE
         , goo.GOO_SECONDARY_REFERENCE
         , GCO_FUNCTIONS.GetCostPriceWithManagementMode(goo.GCO_GOOD_ID) COST_PRICE
         , goo.GOO_NUMBER_OF_DECIMAL
         , goo.DIC_GOOD_LINE_ID
         , nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION dit
                  where dit.DIT_TABLE = 'DIC_GOOD_LINE'
                    and DIT_CODE = goo.DIC_GOOD_LINE_ID
                    and dit.PC_LANG_ID = vpc_lang_id), vpc_pas_ligne) DIC_GOOD_LINE_DESCR
         ,
           --1 differentiate  lines which are null or not in crystal
           goo.DIC_GOOD_FAMILY_ID
         , nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION dit
                  where dit.DIT_TABLE = 'DIC_GOOD_FAMILY'
                    and DIT_CODE = goo.DIC_GOOD_FAMILY_ID
                    and dit.PC_LANG_ID = vpc_lang_id), vpc_pas_famille) DIC_GOOD_FAMILY_DESCR
         ,
           --1 differentiate between families which are null or not in crystal
           goo.DIC_GOOD_MODEL_ID
         , nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION dit
                  where dit.DIT_TABLE = 'DIC_GOOD_MODEL'
                    and DIT_CODE = goo.DIC_GOOD_MODEL_ID
                    and dit.PC_LANG_ID = vpc_lang_id), vpc_pas_modele) DIC_GOOD_MODEL_DESCR
         ,
           --1 differentiate between models which are null or not in crystal
           goo.DIC_GOOD_GROUP_ID
         , nvl( (select DIT_DESCR
                   from DICO_DESCRIPTION dit
                  where dit.DIT_TABLE = 'DIC_GOOD_GROUP'
                    and DIT_CODE = goo.DIC_GOOD_GROUP_ID
                    and dit.PC_LANG_ID = vpc_lang_id), vpc_pas_groupe) DIC_GOOD_GROUP_DESCR
         ,
           --used to differentiate between groups which are null or not in crystal
           pde.PDE_FINAL_DELAY
         , to_char(pde.PDE_FINAL_DELAY, 'YYYYIW') pde_year_week
         , to_char(pde.PDE_FINAL_DELAY, 'YYYYMM') pde_year_month
         , pde.PDE_FINAL_QUANTITY
         , pde.PDE_BALANCE_QUANTITY
         , pde.PDE_CHARACTERIZATION_VALUE_1
         , pde.PDE_CHARACTERIZATION_VALUE_2
         , pde.PDE_CHARACTERIZATION_VALUE_3
         , pde.PDE_CHARACTERIZATION_VALUE_4
         , pde.PDE_CHARACTERIZATION_VALUE_5
         , decode(report_names, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.FAN_NETW_QTY, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.FAN_NETW_QTY, fnn.FAN_NETW_QTY)
                                                                                                                                                   FAN_NETW_QTY
         , decode(report_names, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.FAN_STK_QTY, 'DOC_SUPPL_ORDER_PORT_SUPPL_BATCH', fns.FAN_STK_QTY, fnn.FAN_STK_QTY)
                                                                                                                                                    FAN_STK_QTY
         , per.PER_NAME
         , (select max(adr.ADD_ADDRESS1 || '  ' || adr.ADD_FORMAT)
              from PAC_ADDRESS adr
                 , DIC_ADDRESS_TYPE dad
             where adr.PAC_PERSON_ID = dmt.PAC_THIRD_ID
               and adr.DIC_ADDRESS_TYPE_ID = dad.DIC_ADDRESS_TYPE_ID
               and dad.DAD_DEFAULT = 1) INV_ADDRESS
         , per.PER_KEY1
         , thi.PAC_THIRD_ID
         , thi.DIC_THIRD_ACTIVITY_ID
         , decode(thi.DIC_THIRD_ACTIVITY_ID, null, vpc_pas_activite, (select thi.DIC_THIRD_ACTIVITY_ID || ' - ' || act.ACT_DESCR
                                                                        from DIC_THIRD_ACTIVITY act
                                                                       where act.DIC_THIRD_ACTIVITY_ID = thi.DIC_THIRD_ACTIVITY_ID) ) ACT_DESCR
         , decode(thi.DIC_THIRD_AREA_ID, null, vpc_pas_region, (select thi.DIC_THIRD_AREA_ID || ' - ' || are.ARE_DESCR
                                                                  from DIC_THIRD_AREA are
                                                                 where are.DIC_THIRD_AREA_ID = thi.DIC_THIRD_AREA_ID) ) ARE_DESCR
         , thi.DIC_THIRD_AREA_ID
         , decode(report_names_1, 'CUST', cus.DIC_TYPE_PARTNER_ID, 'SUPPL', sup.DIC_TYPE_PARTNER_F_ID) DIC_TYPE_PARTNER_ID
         , decode(report_names_1
                , 'CUST', decode(cus.DIC_TYPE_PARTNER_ID
                               , null, vpc_pas_type_partenaire
                               , (select (select dit.DIT_DESCR
                                            from DICO_DESCRIPTION dit
                                           where dit.DIT_TABLE = 'DIC_TYPE_PARTNER'
                                             and dit.PC_LANG_ID = vpc_lang_id
                                             and dit.DIT_CODE = dtp.DIC_TYPE_PARTNER_ID)
                                    from DIC_TYPE_PARTNER dtp
                                   where dtp.DIC_TYPE_PARTNER_ID = cus.DIC_TYPE_PARTNER_ID)
                                )
                , 'SUPPL', decode(sup.DIC_TYPE_PARTNER_F_ID
                                , null, vpc_pas_type_partenaire
                                , (select (select dit.DIT_DESCR
                                             from DICO_DESCRIPTION dit
                                            where dit.DIT_TABLE = 'DIC_TYPE_PARTNER'
                                              and dit.PC_LANG_ID = vpc_lang_id
                                              and dit.DIT_CODE = dtp.DIC_TYPE_PARTNER_F_ID)
                                     from DIC_TYPE_PARTNER_F dtp
                                    where dtp.DIC_TYPE_PARTNER_F_ID = sup.DIC_TYPE_PARTNER_F_ID)
                                 )
                 ) DIC_DESCR
         , decode(dmt.PAC_REPRESENTATIVE_ID, null, vpc_pas_representant, (select rep.REP_DESCR
                                                                            from PAC_REPRESENTATIVE rep
                                                                           where rep.PAC_REPRESENTATIVE_ID = dmt.PAC_REPRESENTATIVE_ID) ) REP_DESCR
         , (select max(cre.CRE_AMOUNT_LIMIT)
              from PAC_CREDIT_LIMIT cre
                 , ACS_FINANCIAL_CURRENCY acs
             where cre.PAC_SUPPLIER_PARTNER_ID || cre.PAC_CUSTOM_PARTNER_ID = dmt.PAC_THIRD_ID
               and cre.ACS_FINANCIAL_CURRENCY_ID = dmt.ACS_FINANCIAL_CURRENCY_ID) CRE_AMOUNT_LIMIT
         , (select max(curr.CURRENCY)
              from ACS_FINANCIAL_CURRENCY acs
                 , pcs.PC_CURR curr
             where dmt.ACS_FINANCIAL_CURRENCY_ID = acs.ACS_FINANCIAL_CURRENCY_ID
               and acs.PC_CURR_ID = curr.PC_CURR_ID) CURRENCY
         , vgq.SPO_AVAILABLE_QUANTITY
      from ACS_FINANCIAL_CURRENCY fin
         , DOC_DOCUMENT dmt
         , DOC_GAUGE_STRUCTURED gas
         , DOC_POSITION pos
         , DOC_POSITION_DETAIL pde
         , GCO_GOOD goo
         , PAC_PERSON per
         , PAC_THIRD thi
         , pcs.PC_CURR cur
         , PAC_REPRESENTATIVE pac
         , PAC_CUSTOM_PARTNER cus
         , PAC_SUPPLIER_PARTNER sup
         , FAL_NETWORK_NEED fnn
         , FAL_NETWORK_SUPPLY fns
         , V_STM_GCO_GOOD_QTY vgq
     where dmt.ACS_FINANCIAL_CURRENCY_ID = fin.ACS_FINANCIAL_CURRENCY_ID
       and fin.PC_CURR_ID = cur.PC_CURR_ID
       and dmt.DOC_GAUGE_ID = gas.DOC_GAUGE_ID
       and dmt.DOC_DOCUMENT_ID = pos.DOC_DOCUMENT_ID
       and pos.DOC_POSITION_ID = pde.DOC_POSITION_ID
       and pos.GCO_GOOD_ID = goo.GCO_GOOD_ID
       and pos.PAC_REPRESENTATIVE_ID = pac.PAC_REPRESENTATIVE_ID(+)
       and pde.DOC_POSITION_DETAIL_ID = fnn.DOC_POSITION_DETAIL_ID(+)
       and pde.DOC_POSITION_DETAIL_ID = fns.DOC_POSITION_DETAIL_ID(+)
       and goo.GCO_GOOD_ID = vgq.GCO_GOOD_ID(+)
       and dmt.PAC_THIRD_ID = thi.PAC_THIRD_ID
       and thi.PAC_THIRD_ID = per.PAC_PERSON_ID
       and per.PAC_PERSON_ID = cus.PAC_CUSTOM_PARTNER_ID(+)
       and per.PAC_PERSON_ID = sup.PAC_SUPPLIER_PARTNER_ID(+)
       and pos.C_GAUGE_TYPE_POS in('1', '7', '8', '91', '10')
       and RPT_FUNCTIONS.check_cust_suppl(report_names_1, per.PAC_PERSON_ID) = 1
       --According to report name to define customer or supplier
       and RPT_FUNCTIONS.check_record_in_range(report_names_2, goo.GOO_MAJOR_REFERENCE, per.PER_KEY1, parameter_0, parameter_1) = 1
       and pos.C_DOC_POS_STATUS = '04'
       and instr(',' || param_c_gauge_title || ',', ',' || gas.C_GAUGE_TITLE || ',') > 0
       and dmt.DMT_DATE_DOCUMENT between param_dmt_date_start and param_dmt_date_end
       and RPT_FUNCTIONS.suppl_turnover_batch(report_names, parameter_9, gas.C_GAUGE_TITLE, gas.GAS_FINANCIAL_CHARGE) = 1;
end rpt_doc_turnover_master;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
 * Description Used for report FAL_ADV_POSTCALCULATION
 * Stored procedure used for the advanced post calculation report
 * @Author VHA 22 Aug. 2012
 * @Lastupdate
 * @Version
 * @Public
 * @Param Parameter_0: Session Id
 * @Param Procuser_Lanid: User Language
 */
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);

  open arefcursor for
    select   goo.goo_major_reference
           , gco_functions.getdescription(goo.gco_good_id, procuser_lanid, 2, '01') gco_short_description
           , cao.cao_calculation_structure
           , vals.*
           , rubr.*
           , ars.dic_fal_rate_descr_id
           , ars.c_basis_rubric
           , ars.c_rubric_type
           , com_functions.getdescodedescr('C_BASIS_RUBRIC', ars.c_basis_rubric, pcs.PC_I_LIB_SESSION.user_lang_id) c_basis_rubric_wording
           , com_functions.getdescodedescr('C_RUBRIC_TYPE', ars.c_rubric_type, pcs.PC_I_LIB_SESSION.user_lang_id) c_rubric_type_wording
        from fal_adv_calc_options cao
           , (select cag.fal_adv_calc_options_id
                   , cag.gco_good_id
                   , cag.gco_cpt_good_id
                   , nvl(cag.gco_cpt_good_id, cag.gco_good_id) gco_descr_good_id
                   , cav.cav_rubric_seq
                   , cav.cav_value
                   , cav.cav_unit_price
                   , cav.cav_std_unit_price
                from fal_adv_calc_good cag
                   , fal_adv_calc_struct_val cav
               where cag.cag_session_id = procparam_0
                 and cav.cav_session_id = procparam_0
                 and cav.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                 and cag.gco_cpt_good_id is null) vals
           , fal_adv_rate_struct ars
           , table(fal_adv_calc_print.fal_adv_calc_struct_table(procparam_0) ) rubr
           , gco_good goo
           , fal_lot lot
       where cao.cao_session_id = procparam_0
         and ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
         and ars.fal_adv_rate_struct_id = rubr.fal_adv_rate_struct_id
         and vals.cav_rubric_seq = ars.ars_sequence
         and vals.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
         and goo.gco_good_id = vals.gco_descr_good_id
         and lot.fal_lot_id(+) = cao.fal_lot_id
    order by goo.goo_major_reference
           , cao.fal_adv_calc_options_id
           , vals.gco_good_id
           , rubr.ars_order;
end RPT_FAL_ADV_POSTCALC;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_CPTS_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
)
is
/**
* Description Used for report FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
*/
begin
  fal_adv_calc_print.adv_calc_cpts_rpt_pk(arefcursor => arefcursor, asessionid => procparam_0, aoptionsid => procparam_1, acalcgoodid => procparam_2);
end RPT_FAL_ADV_POSTCALC_CPTS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_OPTI_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
)
is
 /**
* Description - Used in report FAL_ADV_SIMPLE_POSTCALCULATION, FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report
* @Author VHA 22 Aug. 2012
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
*/
begin
  fal_adv_calc_print.adv_calc_options_rpt_pk(arefcursor => arefcursor, asessionid => procparam_0);
end RPT_FAL_ADV_POSTCALC_OPTI_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_SIMPLE" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
* Description - Used in report FAL_ADV_SIMPLE_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @lastupdate
* @param aRefCursor     : Curseur pour le rapport Crystal
* @param PROCPARAM_0    : Session Oracle
* @param PROCUSER_LANID : Langue utilisateur pour initialisation de la session
*/
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);

  open arefcursor for
    select   goo.goo_major_reference
           , gco_functions.getdescription(goo.gco_good_id, procuser_lanid, 2, '01') goo_description
           , goo_cpt.goo_major_reference goo_cpt_major_reference
           , gco_functions.getdescription(goo_cpt.gco_good_id, procuser_lanid, 1, '01') goo_cpt_description
           , cao.cao_calculation_structure
           , cav.cav_rubric_seq
           , cav.cav_unit_price
           , cav.cav_std_unit_price
           , vals.cav_unit_price cav_unit_price_tot
           , vals.cav_std_unit_price cav_std_unit_price_tot
           , case
               when rubr_cag.cag_level = 0 then cav.cav_value
               else nvl(cav.cav_value, 0)
             end cav_value
           , ars.dic_fal_rate_descr_id
           , rubr_cag.*
           , (select count(fal_adv_calc_task_id)
                from fal_adv_calc_task cak
                   , fal_adv_calc_good cag
               where cak.cak_session_id = procparam_0
                 and cag.cag_session_id = procparam_0
                 and cak.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                 and cag.gco_good_id = rubr_cag.gco_good_id
                 and cag.gco_cpt_good_id = rubr_cag.gco_good_id) task_count
           , zvl(case
                   when rubr_cag.cag_level = 0 then (select sum(sub_caw.caw_work_amount)
                                                       from fal_adv_calc_work sub_caw
                                                      where sub_caw.fal_adv_calc_good_id = rubr_cag.fal_adv_calc_good_id
                                                        and sub_caw.caw_decomposition_level = 0)
                   else nvl( (select sum(sub_caw.caw_work_amount)
                                from fal_adv_calc_work sub_caw
                               where sub_caw.fal_adv_calc_good_id = rubr_cag.fal_adv_calc_good_id
                                 and sub_caw.caw_decomposition_level = 0), 0)
                 end
               , null
                ) caw_work_amount
        from fal_adv_calc_options cao
           , fal_adv_rate_struct ars
           , (select   ars.fal_adv_rate_struct_id
                     , ars.fal_adv_struct_calc_id
                     , ars.ars_sequence
                     , cag.fal_adv_calc_options_id
                     , cag.fal_adv_calc_good_id
                     , cag.gco_good_id
                     , cag.gco_cpt_good_id
                     , nvl(cag.gco_cpt_good_id, cag.gco_good_id) gco_descr_good_id
                     , cag.cag_level
                     , cag.cag_nom_coef
                     , cag.cag_quantity
                     , case
                         when cag.cag_level = 0 then cag.cag_mat_amount
                         else nvl(cag.cag_mat_amount, 0)
                       end cag_mat_amount
                  from fal_adv_rate_struct ars
                     , fal_adv_calc_good cag
                 where ars.ars_visible_level = 1
                   and ars.fal_adv_struct_calc_id in(select fal_adv_struct_calc_id
                                                       from fal_adv_calc_options
                                                      where cao_session_id = procparam_0)
                   and (   ars.fal_adv_rate_struct_id not in(select distinct fal_fal_adv_rate_struct_id
                                                                        from fal_adv_total_rate)
                        or ars.ars_prf_level = 1)
                   and cag.cag_session_id = procparam_0
              order by ars.fal_adv_struct_calc_id
                     , ars.ars_sequence) rubr_cag
           , fal_adv_calc_struct_val cav
           , (select cag.fal_adv_calc_options_id
                   , cag.gco_good_id
                   , cag.gco_cpt_good_id
                   , nvl(cag.gco_cpt_good_id, cag.gco_good_id) gco_descr_good_id
                   , cav.cav_rubric_seq
                   , cav.cav_unit_price
                   , cav.cav_std_unit_price
                from fal_adv_calc_good cag
                   , fal_adv_calc_struct_val cav
               where cag.cag_session_id = procparam_0
                 and cav.cav_session_id = procparam_0
                 and cav.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                 and cag.gco_cpt_good_id is null) vals
           , gco_good goo
           , gco_good goo_cpt
           , fal_lot lot
       where cao.cao_session_id = procparam_0
         and cav.cav_session_id(+) = procparam_0
         and ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
         and ars.fal_adv_rate_struct_id = rubr_cag.fal_adv_rate_struct_id
         and rubr_cag.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
         and rubr_cag.gco_cpt_good_id is not null
         and goo.gco_good_id = rubr_cag.gco_good_id
         and goo_cpt.gco_good_id = rubr_cag.gco_descr_good_id
         and lot.fal_lot_id(+) = cao.fal_lot_id
         and cav.fal_adv_calc_good_id(+) = rubr_cag.fal_adv_calc_good_id
         and cav.cav_rubric_seq(+) = rubr_cag.ars_sequence
         and vals.cav_rubric_seq = ars.ars_sequence
         and vals.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
         and goo.gco_good_id = vals.gco_descr_good_id
    order by goo.goo_major_reference
           , cao.fal_adv_calc_options_id
           , ars.ars_sequence desc
           , rubr_cag.fal_adv_calc_good_id
           , rubr_cag.gco_good_id;
end RPT_FAL_ADV_POSTCALC_SIMPLE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_SUBCT_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
)
is
 /**
* Description Used for report FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
*/
begin
  fal_adv_calc_print.adv_calc_work_rpt_pk(arefcursor     => arefcursor
                                        , asessionid     => procparam_0
                                        , aoptionsid     => procparam_1
                                        , acalcgoodid    => procparam_2
                                        , acptgoodid     => procparam_3
                                        , abasisrubric   => fal_adv_calc_print.csubcontractbasisrubric
                                         );
end RPT_FAL_ADV_POSTCALC_SUBCT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_TASKS_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
)
is
/**
* Description - Used in report FAL_ADV_SIMPLE_POSTCALCULATION, FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @lastupdate
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
* @param PROCPARAM_1 : Identifiant des options
* @param PROCPARAM_2 : Produit calculé
* @param PROCPARAM_3 : Composant
*/
begin
  fal_adv_calc_print.adv_calc_tasks_rpt_pk(arefcursor    => arefcursor
                                         , asessionid    => procparam_0
                                         , aoptionsid    => procparam_1
                                         , acalcgoodid   => procparam_2
                                         , acptgoodid    => procparam_3
                                          );
end RPT_FAL_ADV_POSTCALC_TASKS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_POSTCALC_WORK_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
, procparam_4 in     fal_adv_calc_work.c_basis_rubric%type
)
is
 /**
* Description Used for report FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
* @Param Parameter_5: C_basis_rubric
*/
begin
  fal_adv_calc_print.adv_calc_work_rpt_pk(arefcursor     => arefcursor
                                        , asessionid     => procparam_0
                                        , aoptionsid     => procparam_1
                                        , acalcgoodid    => procparam_2
                                        , acptgoodid     => procparam_3
                                        , abasisrubric   => procparam_4
                                         );
end RPT_FAL_ADV_POSTCALC_WORK_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRCAL_CPTS_TAS_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0      IN       fal_adv_calc_options.cao_session_id%TYPE,
   procparam_1      IN       fal_adv_calc_options.fal_adv_calc_options_id%TYPE,
   procparam_2      IN       fal_adv_calc_good.gco_good_id%TYPE,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
 /**
* Description Used for report FAL_ADV_PRECALCULATION
*   Proc¡§|dure stock¡§|e utilis¡§|e pour le rapport de pr¡§|-calculation avanc¡§|e
*   Retourne la liste des composants (et leurs d¡§|tails) li¡§|s au produit
*   calcul¡§|, ainsi que les op¡§|rations qui y sont li¡§|es (et leurs d¡§|tails).
* @Author MZHU 20 Mar. 2009
* @Lastupdate PYB 1 Sep. 2010
* @Version
* @Public
* @Param procparam_0: Session Id
* @Param procparam_1: Option Id
* @Param procparam_2: Good Id
*/
BEGIN
   OPEN arefcursor FOR
      SELECT   cag.goo_major_reference, cag.cag_level, cag.cag_nom_coef,
               cag.cag_quantity, cag.cag_mat_total, cag.cag_mat_section,
               cag.cag_mat_amount, cag.cag_mat_rate, cag.cag_mat_rate_amount,
               cak.cak_task_seq, cak.cak_task_ref, cak.cak_task_descr,
               cak.cak_time_section, cak.cak_adjusting_time,
               cak.cak_work_time, cak.cak_machine_cost, cak.cak_human_cost,
               gco_functions.getdescription
                                      (cag.gco_cpt_good_id,
                                       procuser_lanid,
                                       1,
                                       '01'
                                      ) goo_short_description
          FROM fal_adv_calc_good cag,
               fal_adv_calc_options cao,
               gco_good goo,
               fal_adv_calc_task cak
         WHERE cag.cag_session_id = procparam_0
           AND cag.fal_adv_calc_options_id = procparam_1
           AND cag.gco_good_id = procparam_2
           AND cao.fal_adv_calc_options_id = cag.fal_adv_calc_options_id
           AND goo.gco_good_id = cag.gco_cpt_good_id
           AND cak.cak_session_id(+) = procparam_0
           AND cak.fal_adv_calc_good_id(+) = cag.fal_adv_calc_good_id
      ORDER BY cag.fal_adv_calc_good_id,
               cak.cak_task_seq,
               cak.fal_adv_calc_task_id;
END rpt_fal_adv_prcal_cpts_tas_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0      IN       fal_adv_calc_options.cao_session_id%TYPE,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
 * Description Used for report FAL_ADV_PRECALCULATION
 *   Proc¡§|dure stock¡§|e utilis¡§|e pour le rapport de pr¡§|-calculation avanc¡§|e
 *   Retourne la liste des valeurs du r¡§|sultat dans l'ordre de l'arborescence
 *   de la structure de calcul.
 * @Created In Proconcept China
 * @Author MZHU 20 Mar. 2009
 * @Lastupdate AWU 31 Aug. 2009
 * @Version
 * @Public
 * @Param Parameter_0: Session Id
 * @Param Procuser_Lanid: User Language
 */
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);

   OPEN arefcursor FOR
      SELECT   goo.goo_major_reference,
               gco_functions.getdescription
                                      (goo.gco_good_id,
                                       procuser_lanid,
                                       2,
                                       '01'
                                      ) gco_short_description,
               cao.cao_calculation_structure, vals.*, rubr.*,
               ars.dic_fal_rate_descr_id, ars.c_basis_rubric,
               ars.c_rubric_type,
               com_functions.getdescodedescr
                     ('C_BASIS_RUBRIC',
                      ars.c_basis_rubric,
                      pcs.PC_I_LIB_SESSION.user_lang_id
                     ) c_basis_rubric_wording,
               com_functions.getdescodedescr
                      ('C_RUBRIC_TYPE',
                       ars.c_rubric_type,
                       pcs.PC_I_LIB_SESSION.user_lang_id
                      ) c_rubric_type_wording
          FROM fal_adv_calc_options cao,
               (SELECT cag.fal_adv_calc_options_id, cag.gco_good_id,
                       cag.gco_cpt_good_id,
                       NVL (cag.gco_cpt_good_id,
                            cag.gco_good_id
                           ) gco_descr_good_id,
                       cav.cav_rubric_seq, cav.cav_value, cav.cav_unit_price,
                       cav.cav_std_unit_price
                  FROM fal_adv_calc_good cag, fal_adv_calc_struct_val cav
                 WHERE cag.cag_session_id = procparam_0
                   AND cav.cav_session_id = procparam_0
                   AND cav.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                   AND cag.gco_cpt_good_id IS NULL) vals,
               fal_adv_rate_struct ars,
               TABLE
                    (fal_adv_calc_print.fal_adv_calc_struct_table (procparam_0)
                    ) rubr,
               gco_good goo,
               fal_lot lot
         WHERE cao.cao_session_id = procparam_0
           AND ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
           AND ars.fal_adv_rate_struct_id = rubr.fal_adv_rate_struct_id
           AND vals.cav_rubric_seq = ars.ars_sequence
           AND vals.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
           AND goo.gco_good_id = vals.gco_descr_good_id
           AND lot.fal_lot_id(+) = cao.fal_lot_id
      ORDER BY goo.goo_major_reference,
               cao.fal_adv_calc_options_id,
               vals.gco_good_id,
               rubr.ars_order;
END rpt_fal_adv_precalc;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_CPTS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0   IN       fal_adv_calc_options.cao_session_id%TYPE,
   procparam_1   IN       fal_adv_calc_options.fal_adv_calc_options_id%TYPE,
   procparam_2   IN       fal_adv_calc_good.gco_good_id%TYPE
)
IS
/**
* Description Used for report FAL_ADV_PRECALCULATION
*   Proc¡§|dure stock¡§|e utilis¡§|e pour le rapport de pr¡§|-calculation avanc¡§|e
*   Retourne la liste des composants (et leurs d¡§|tails) li¡§|s au produit
*   calcul¡§|.
* @Author MZHU 20 Mar. 2009
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
*/
BEGIN
   fal_adv_calc_print.adv_calc_cpts_rpt_pk (arefcursor       => arefcursor,
                                            asessionid       => procparam_0,
                                            aoptionsid       => procparam_1,
                                            acalcgoodid      => procparam_2
                                           );
END rpt_fal_adv_precalc_cpts_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_OPTI_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0   IN       fal_adv_calc_options.cao_session_id%TYPE
)
IS
 /**
* Description - Used in report FAL_ADV_SIMPLE_PRECALCULATION, FAL_ADV_PRECALCULATION
*   Proc¡§|dure stock¡§|e utilis¡§|e pour le rapport de pr¡§|-calculation avanc¡§|e
*   Retourne la valeur des options utilis¡§|es pour la calculation et
*   communes ¡§¡è tous les produits.
* @author JCH 31.01.2008
* @last update 20 Mar. 2009
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
*/
BEGIN
   fal_adv_calc_print.adv_calc_options_rpt_pk (arefcursor      => arefcursor,
                                               asessionid      => procparam_0
                                              );
END rpt_fal_adv_precalc_opti_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_SIMPLE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0      IN       fal_adv_calc_options.cao_session_id%TYPE,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
* Description - Used in report FAL_ADV_SIMPLE_PRECALCULATION

* Procédure stockée utilisée pour les rapports simples (décomposition par
* composant du premier niveau) de pré-calculation avancée.
* @author JCH 31 JAN 2008
* @lastupdate VHA 27 Feb 2012
* @param aRefCursor     : Curseur pour le rapport Crystal
* @param PROCPARAM_0    : Session Oracle
* @param PROCUSER_LANID : Langue utilisateur pour initialisation de la session
*/
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);

   OPEN arefcursor FOR
      SELECT   goo.goo_major_reference,
               gco_functions.getdescription (goo.gco_good_id,
                                             procuser_lanid,
                                             2,
                                             '01'
                                            ) goo_description,
               goo_cpt.goo_major_reference goo_cpt_major_reference,
               gco_functions.getdescription
                                    (goo_cpt.gco_good_id,
                                     procuser_lanid,
                                     1,
                                     '01'
                                    ) goo_cpt_description,
               cao.cao_calculation_structure, cav.cav_rubric_seq,
               CASE
                  WHEN rubr_cag.cag_level = 0
                     THEN cav.cav_value
                  ELSE   NVL (cav.cav_value, 0)
               END cav_value,
               ars.dic_fal_rate_descr_id, rubr_cag.*,
               (SELECT COUNT (fal_adv_calc_task_id)
                  FROM fal_adv_calc_task cak,
                       fal_adv_calc_good cag
                 WHERE cak.cak_session_id = procparam_0
                   AND cag.cag_session_id = procparam_0
                   AND cak.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                   AND cag.gco_good_id = rubr_cag.gco_good_id
                   AND cag.gco_cpt_good_id = rubr_cag.gco_good_id)
                                                                  task_count,
               zvl
                  (CASE
                      WHEN rubr_cag.cag_level = 0
                         THEN (SELECT SUM (sub_caw.caw_work_amount)
                                 FROM fal_adv_calc_work sub_caw
                                WHERE sub_caw.fal_adv_calc_good_id =
                                                 rubr_cag.fal_adv_calc_good_id
                                  AND sub_caw.caw_decomposition_level = 0)
                      ELSE   NVL ((SELECT SUM (sub_caw.caw_work_amount)
                                     FROM fal_adv_calc_work sub_caw
                                    WHERE sub_caw.fal_adv_calc_good_id =
                                                 rubr_cag.fal_adv_calc_good_id
                                      AND sub_caw.caw_decomposition_level = 0),
                                  0
                                 )
                   END,
                   NULL
                  ) caw_work_amount
          FROM fal_adv_calc_options cao,
               fal_adv_rate_struct ars,
               (SELECT   ars.fal_adv_rate_struct_id,
                         ars.fal_adv_struct_calc_id, ars.ars_sequence,
                         cag.fal_adv_calc_options_id,
                         cag.fal_adv_calc_good_id, cag.gco_good_id,
                         cag.gco_cpt_good_id,
                         NVL (cag.gco_cpt_good_id,
                              cag.gco_good_id
                             ) gco_descr_good_id,
                         cag.cag_level, cag.cag_nom_coef, cag.cag_quantity,
                         CASE
                            WHEN cag.cag_level = 0
                               THEN cag.cag_mat_amount
                            ELSE   NVL (cag.cag_mat_amount, 0)
                         END cag_mat_amount
                FROM     fal_adv_rate_struct ars, fal_adv_calc_good cag
                   WHERE ars.ars_visible_level = 1
                     AND ars.fal_adv_struct_calc_id IN (
                                            SELECT fal_adv_struct_calc_id
                                              FROM fal_adv_calc_options
                                             WHERE cao_session_id =
                                                                   procparam_0)
                     AND (   ars.fal_adv_rate_struct_id NOT IN (
                                    SELECT DISTINCT fal_fal_adv_rate_struct_id
                                               FROM fal_adv_total_rate)
                          OR ars.ars_prf_level = 1
                         )
                     AND cag.cag_session_id = procparam_0
                ORDER BY ars.fal_adv_struct_calc_id, ars.ars_sequence) rubr_cag,
               fal_adv_calc_struct_val cav,
               gco_good goo,
               gco_good goo_cpt,
               fal_lot lot
         WHERE cao.cao_session_id = procparam_0
           AND cav.cav_session_id(+) = procparam_0
           AND ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
           AND ars.fal_adv_rate_struct_id = rubr_cag.fal_adv_rate_struct_id
           AND rubr_cag.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
           AND rubr_cag.gco_cpt_good_id IS NOT NULL
           AND goo.gco_good_id = rubr_cag.gco_good_id
           AND goo_cpt.gco_good_id = rubr_cag.gco_descr_good_id
           AND lot.fal_lot_id(+) = cao.fal_lot_id
           AND cav.fal_adv_calc_good_id(+) = rubr_cag.fal_adv_calc_good_id
           AND cav.cav_rubric_seq(+) = rubr_cag.ars_sequence
      ORDER BY goo.goo_major_reference,
               cao.fal_adv_calc_options_id,
               ars.ars_sequence DESC,
               rubr_cag.fal_adv_calc_good_id,
               rubr_cag.gco_good_id;
END rpt_fal_adv_precalc_simple;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_SUBCT_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0   IN       fal_adv_calc_options.cao_session_id%TYPE,
   procparam_1   IN       fal_adv_calc_options.fal_adv_calc_options_id%TYPE,
   procparam_2   IN       fal_adv_calc_good.gco_good_id%TYPE,
   procparam_3   IN       fal_adv_calc_good.gco_cpt_good_id%TYPE DEFAULT NULL
)
IS
 /**
* Description Used for report FAL_ADV_PRECALCULATION
*   Proc¡§|dure stock¡§|e utilis¡§|e pour le rapport de pr¡§|-calculation avanc¡§|e
*   Retourne la d¡§|composition de la sous-traitance li¡§|e au produit calcul¡§| si
*   PROCPARAM_3 n'est pas d¡§|fini, ou au composant sp¡§|cifi¡§| par PROCPARAM_3.
* @Author MZHU 20 Mar. 2009
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
*/
BEGIN
   fal_adv_calc_print.adv_calc_work_rpt_pk
                  (arefcursor        => arefcursor,
                   asessionid        => procparam_0,
                   aoptionsid        => procparam_1,
                   acalcgoodid       => procparam_2,
                   acptgoodid        => procparam_3,
                   abasisrubric      => fal_adv_calc_print.csubcontractbasisrubric
                  );
END rpt_fal_adv_precalc_subct_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_TASKS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0   IN       fal_adv_calc_options.cao_session_id%TYPE,
   procparam_1   IN       fal_adv_calc_options.fal_adv_calc_options_id%TYPE,
   procparam_2   IN       fal_adv_calc_good.gco_good_id%TYPE,
   procparam_3   IN       fal_adv_calc_good.gco_cpt_good_id%TYPE DEFAULT NULL
)
IS
/**
* Description - Used in report FAL_ADV_SIMPLE_PRECALCULATION, FAL_ADV_PRECALCULATION

* Proc¡§|dure stock¡§|e utilis¡§|e pour les rapports de pr¡§|-calculation avanc¡§|e
* Retourne la liste des op¡§|rations (et leurs d¡§|tails) li¡§|es au produit
* calcul¡§| si PROCPARAM_3 n'est pas d¡§|fini, ou au composant sp¡§|cifi¡§| par
* PROCPARAM_3.
* @author JCH 31 JAN 2008
* @lastupdate 25 Feb 2009
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
* @param PROCPARAM_1 : Identifiant des options
* @param PROCPARAM_2 : Produit calcul¡§|
* @param PROCPARAM_3 : Composant
*/
BEGIN

   fal_adv_calc_print.adv_calc_tasks_rpt_pk (arefcursor       => arefcursor,
                                             asessionid       => procparam_0,
                                             aoptionsid       => procparam_1,
                                             acalcgoodid      => procparam_2,
                                             acptgoodid       => procparam_3
                                            );


END rpt_fal_adv_precalc_tasks_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PRECALC_WORK_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0   IN       fal_adv_calc_options.cao_session_id%TYPE,
   procparam_1   IN       fal_adv_calc_options.fal_adv_calc_options_id%TYPE,
   procparam_2   IN       fal_adv_calc_good.gco_good_id%TYPE,
   procparam_3   IN       fal_adv_calc_good.gco_cpt_good_id%TYPE DEFAULT NULL,
   procparam_4   IN       fal_adv_calc_work.c_basis_rubric%TYPE
)
IS
 /**
* Description Used for report FAL_ADV_PRECALCULATION
*   Proc¡§|dure stock¡§|e utilis¡§|e pour les rapports de pr¡§|-calculation avanc¡§|e
*   Retourne la d¡§|composition du travail li¡§|e au produit calcul¡§| si PROCPARAM_3
*   n'est pas d¡§|fini, ou au composant sp¡§|cifi¡§| par PROCPARAM_3.
* @Author MZHU 20 Mar. 2009
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
* @Param Parameter_5: C_basis_rubric
*/
BEGIN
   fal_adv_calc_print.adv_calc_work_rpt_pk (arefcursor        => arefcursor,
                                            asessionid        => procparam_0,
                                            aoptionsid        => procparam_1,
                                            acalcgoodid       => procparam_2,
                                            acptgoodid        => procparam_3,
                                            abasisrubric      => procparam_4
                                           );
END rpt_fal_adv_precalc_work_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ADV_PTCAL_CPTS_TAS_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procparam_1    in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2    in     fal_adv_calc_good.gco_good_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
 /**
* Description Used for report FAL_ADV_POSTCALCULATION
* Stored procedure used for the advanced post calculation report.
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param procparam_0: Session Id
* @Param procparam_1: Option Id
* @Param procparam_2: Good Id
*/
begin
  open arefcursor for
    select   cag.goo_major_reference
           , cag.cag_level
           , cag.cag_nom_coef
           , cag.cag_quantity
           , cag.cag_mat_total
           , cag.cag_mat_section
           , cag.cag_mat_amount
           , cag.cag_mat_rate
           , cag.cag_mat_rate_amount
           , cak.cak_task_seq
           , cak.cak_task_ref
           , cak.cak_task_descr
           , cak.cak_time_section
           , cak.cak_adjusting_time
           , cak.cak_work_time
           , cak.cak_machine_cost
           , cak.cak_human_cost
           , gco_functions.getdescription(cag.gco_cpt_good_id, procuser_lanid, 1, '01') goo_short_description
        from fal_adv_calc_good cag
           , fal_adv_calc_options cao
           , gco_good goo
           , fal_adv_calc_task cak
       where cag.cag_session_id = procparam_0
         and cag.fal_adv_calc_options_id = procparam_1
         and cag.gco_good_id = procparam_2
         and cao.fal_adv_calc_options_id = cag.fal_adv_calc_options_id
         and goo.gco_good_id = cag.gco_cpt_good_id
         and cak.cak_session_id(+) = procparam_0
         and cak.fal_adv_calc_good_id(+) = cag.fal_adv_calc_good_id
    order by cag.fal_adv_calc_good_id
           , cak.cak_task_seq
           , cak.fal_adv_calc_task_id;
end RPT_FAL_ADV_PTCAL_CPTS_TAS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_BATCHES_COMPONENTS" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, procparam_0    in     varchar2
)
is
/**
* Description - Used in report FAL_BATCHES_COMPONENTS

* Stored procedure used by the report FAL_BATCHES_COMPONENTS
* @created   SMA 10 April 2013
* Modified
* lastUpdate
* @param procparam_0    Job_id (COM_LIST)  -> Liste FAL_LOT_ID
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;
  -- Calculer les quantités stock
  rpt_functions.BatchesCalculateStock(to_number(procparam_0) );

  open arefcursor for
    select   LOT.FAL_LOT_ID
           , LOT.LOT_PLAN_BEGIN_DTE
           , LOT.LOT_REFCOMPL
           , GOO.GCO_GOOD_ID
           , GOO.GOO_MAJOR_REFERENCE
           , GOO.GOO_NUMBER_OF_DECIMAL
           , LOM.FAL_LOT_MATERIAL_LINK_ID
           , LOM.LOM_BOM_REQ_QTY
           , LOM.LOM_NEED_DATE
           , LOM.LOM_NEED_QTY
           , LID.LID_FREE_NUMBER_3 AVAILABLE_STOCK
           , LID.LID_FREE_NUMBER_2 WORKSHOP_STOCK
           , LID.LID_FREE_NUMBER_4 MISS_COMPONENT
           , LID2.LID_ID_2 FAL_NETWORK_SUPPLY_ID
           , LID2.LID_FREE_CHAR_1 FAN_DESCRIPTION
           , LID2.LID_FREE_NUMBER_1 FAN_BALANCE_QTY
           , LID2.LID_FREE_DATE_1 FAN_END_PLAN
        from COM_LIST_ID_TEMP LID
           , FAL_LOT LOT
           , FAL_LOT_MATERIAL_LINK LOM
           , GCO_GOOD GOO
           , COM_LIST_ID_TEMP LID2
       where LID.LID_ID_1 = LOT.FAL_LOT_ID
         and LID.LID_CODE = 'BATCH_MATERIAL_LINK'
         and LID.LID_ID_2 = GOO.GCO_GOOD_ID
         and LID.LID_ID_3 = LOM.FAL_LOT_MATERIAL_LINK_ID
         and LID2.LID_CODE(+) = 'BATCH_MATERIAL_LINK_SUPPLY'
         and LID2.LID_ID_1(+) = LID.LID_ID_3
    order by LOT.LOT_PLAN_BEGIN_DTE
           , GOO.GOO_MAJOR_REFERENCE
           , LID2.LID_FREE_DATE_1
           , LID2.LID_ID_2;

  -- Effacer la liste des lots à traiter
  COM_PRC_LIST.DeleteIDList(aJobId => to_number(procparam_0), aSession => null, aCode => 'BATCHES_COMPONENTS');
end RPT_FAL_BATCHES_COMPONENTS;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_COMPONENTS_BATCHES" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, procparam_0    in     varchar2
)
is
/**
* Description - Used in report FAL_COMPONENTS_BATCHES

* Stored procedure used by the report FAL_COMPONENTS_BATCHES
* @created   SMA 26 April 2013
* Modified
* lastUpdate
* @param procparam_0    Job_id (COM_LIST)  -> Liste FAL_LOT_MATERIAL_LINK_ID
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;
  -- Calculer les quantités stock
  rpt_functions.ComponentsCalculateStock(to_number(procparam_0) );

  open arefcursor for
    select   LOM.FAL_LOT_MATERIAL_LINK_ID
           , GOO.GCO_GOOD_ID
           , GOO.GOO_MAJOR_REFERENCE
           , GOO.GOO_NUMBER_OF_DECIMAL
           , LOT.FAL_LOT_ID
           , LOT.LOT_PLAN_BEGIN_DTE
           , LOT.LOT_REFCOMPL
           , LOM.LOM_BOM_REQ_QTY
           , LOM.LOM_NEED_DATE
           , LOM.LOM_NEED_QTY
           , LID.LID_FREE_NUMBER_3 AVAILABLE_STOCK
           , LID.LID_FREE_NUMBER_2 WORKSHOP_STOCK
           , LID.LID_FREE_NUMBER_4 MISS_COMPONENT
           , LID2.LID_ID_2 FAL_NETWORK_SUPPLY_ID
           , LID2.LID_FREE_CHAR_1 FAN_DESCRIPTION
           , LID2.LID_FREE_NUMBER_1 FAN_BALANCE_QTY
           , LID2.LID_FREE_DATE_1 FAN_END_PLAN
        from COM_LIST_ID_TEMP LID
           , FAL_LOT LOT
           , FAL_LOT_MATERIAL_LINK LOM
           , GCO_GOOD GOO
           , COM_LIST_ID_TEMP LID2
       where LID.LID_ID_3 = LOM.FAL_LOT_MATERIAL_LINK_ID
         and LID.LID_CODE = 'COMPONENT_MATERIAL_LINK'
         and LID.LID_ID_2 = GOO.GCO_GOOD_ID
         and LID.LID_ID_1 = LOT.FAL_LOT_ID
         and LID2.LID_CODE(+) = 'COMPONENT_MATERIAL_LINK_SUPPLY'
         and LID2.LID_ID_1(+) = LID.LID_ID_3
    order by GOO.GOO_MAJOR_REFERENCE
           , LOT.LOT_PLAN_BEGIN_DTE
           , LID2.LID_FREE_DATE_1
           , LID2.LID_ID_2;

  -- Effacer la liste des lots à traiter
  COM_PRC_LIST.DeleteIDList(aJobId => to_number(procparam_0), aSession => null, aCode => 'COMPONENTS_BATCHES');
end RPT_FAL_COMPONENTS_BATCHES;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_FACTORY_FLOOR" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid    IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description Used for report FAL_FACTORY_FLOOR,FAL_FACTORY_FLOOR_BATCH. This one is used only since SP6

*@created LBU 05 SEP 2008
*@lastUpdate 17 Mar 2010 cliu
*@public
*@param USER_LANID  : user language
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   fal_factory_floor.fac_reference,
               fal_factory_floor.fac_describe,
               fal_factory_floor.fac_resource_number,
               fal_factory_floor.FAC_PIC,
               fal_factory_floor.FAC_INFINITE_FLOOR,
               fal_factory_floor.FAC_OUT_OF_ORDER,
               fal_factory_floor.FAC_IS_MACHINE,
               fal_factory_floor.FAC_IS_OPERATOR,
               fal_factory_floor.FAC_IS_PERSON,
               fal_factory_floor.FAC_IS_BLOCK,
               fal_factory_rate.ffr_validity_date,
               fal_factory_rate.ffr_rate1, fal_factory_rate.ffr_rate2,
               fal_factory_rate.ffr_rate3, fal_factory_rate.ffr_rate4,
               fal_factory_rate.ffr_rate5,
               fal_factory_floor.pac_calendar_type_id,
               fal_factory_floor.dic_floor_free_code_id,
               fal_factory_floor.dic_floor_free_code2_id,
               fal_factory_floor.dic_floor_free_code3_id,
               fal_factory_floor.dic_floor_free_code4_id,
               fal_factory_floor.FAL_FAL_FACTORY_FLOOR_ID,
               fal_factory_floor.FAL_GRP_FACTORY_FLOOR_ID,
               fal_factory_floor.FAL_FACTORY_FLOOR_ID,
               (select distinct 1 from fal_factory_floor FF2 where FF2.FAL_FAL_FACTORY_FLOOR_ID = fal_factory_floor.FAL_FACTORY_FLOOR_ID) HAS_MACHINE,
               (select distinct 1 from fal_factory_floor FF3 where FF3.FAL_GRP_FACTORY_FLOOR_ID = fal_factory_floor.FAL_FACTORY_FLOOR_ID) HAS_EMPLOYEE
          FROM fal_factory_floor,
               (select fal_factory_floor_id, max(ffr_validity_date) ffr_validity_date
               from fal_factory_rate
               where ffr_validity_date <= SYSDATE
               group by fal_factory_floor_id) eff_date,
               fal_factory_rate
         WHERE fal_factory_floor.fal_factory_floor_id = eff_date.fal_factory_floor_id(+)
         and fal_factory_rate.fal_factory_floor_id (+) = eff_date.fal_factory_floor_id
         and fal_factory_rate.FFR_VALIDITY_DATE(+) = eff_date.FFR_VALIDITY_DATE
      ORDER BY fal_factory_floor.fac_reference;
END RPT_fal_factory_floor;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_FACTORY_RATE" (
  arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
  aFAL_LOT_ID      IN       number,
  procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
is
  vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
begin
  pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
  vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select ftl.fal_schedule_step_id
         , ffr.fal_factory_floor_id
         , nvl(ffr.ffr_rate1, 0) FAC_RATE1
         , nvl(ffr.ffr_rate2, 0) FAC_RATE2
         , nvl(ffr.ffr_rate3, 0) FAC_RATE3
         , nvl(ffr.ffr_rate4, 0) FAC_RATE4
         , nvl(ffr.ffr_rate5, 0) FAC_RATE5
      from fal_factory_rate ffr
         , fal_factory_floor fff
         , fal_task_link ftl
     where ftl.fal_lot_id = aFAL_LOT_ID
       and ftl.fal_factory_floor_id = fff.fal_factory_floor_id
       and fff.fal_factory_floor_id = ffr.fal_factory_floor_id
       and trunc(ffr.ffr_validity_date) = (select max(trunc(ffr2.ffr_validity_date))
                                             from fal_factory_rate ffr2
                                            where trunc(ffr2.ffr_validity_date) <= trunc(nvl(ftl.tal_end_real_date, ftl.tal_end_plan_date))
                                              and ffr2.fal_factory_floor_id = ffr.FAL_FACTORY_FLOOR_ID);
end RPT_FAL_FACTORY_RATE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_LINK" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid    IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_0   IN   DOC_DOCUMENT.DMT_NUMBER%TYPE,
   PARAMETER_1   IN   DOC_DOCUMENT.DMT_NUMBER%TYPE,
   PARAMETER_2   IN   PAC_PERSON.PER_NAME%TYPE,
   PARAMETER_3   IN   PAC_PERSON.PER_NAME%TYPE
)
IS
/**
*Description Used for report FAL_LOT_LINK,FAL_LOT_LINK_BATCH. This one is used only since SP6

*@created CLIU 20 APR 2010
*@lastUpdate  19.MAY.2010
*@Published VHA 20 Sept 2011
*@public
*@param USER_LANID  : user language
* PARAMETER_0 PARAMETER_1 DMT_NUMBER
* PARAMETER_2 PARAMETER_3 PER_NAME
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
        SELECT DOC.DMT_NUMBER, PER.PER_NAME, PER.PER_KEY1,
        DET.DOC_POSITION_DETAIL_ID, GCO.GOO_MAJOR_REFERENCE REF_ART,
        GCO.GCO_GOOD_ID ART_ID, GCO.GOO_NUMBER_OF_DECIMAL DIG, DET.PDE_FINAL_DELAY DELAI,
        DET.PDE_FINAL_QUANTITY QTE, DET.PDE_BALANCE_QUANTITY SOLDE,
        CAS_1.DESCRIPTION DEC1,
        CAS_1.GOO_MAJOR_REFERENCE REF_ART_1,
        CAS_1.GCO_GOOD_ID ART_ID_1,
        CAS_1.GOO_NUMBER_OF_DECIMAL DIG_1,
        CAS_1.TOTAL_QTY QTE_1,
        CAS_1.END_DELAY DELAY_1,
        CAS_1.FLN_QTY QTN_1,
        CAS_1.STM_STOCK_POSITION_ID STK_1,
        CAS_2.DESCRIPTION DEC2,
        CAS_2.GOO_MAJOR_REFERENCE REF_ART_2,
        CAS_2.GCO_GOOD_ID ART_ID_2,
        CAS_2.GOO_NUMBER_OF_DECIMAL DIG_2,
        CAS_2.TOTAL_QTY QTE_2,
        CAS_2.END_DELAY DELAY_2,
        CAS_2.FLN_QTY QTN_2,
        CAS_2.STM_STOCK_POSITION_ID STK_2,
        CAS_3.DESCRIPTION DEC3,
        CAS_3.GOO_MAJOR_REFERENCE REF_ART_3,
        CAS_3.GCO_GOOD_ID ART_ID_3,
        CAS_3.GOO_NUMBER_OF_DECIMAL DIG_3,
        CAS_3.TOTAL_QTY QTE_3,
        CAS_3.END_DELAY DELAY_3,
        CAS_3.FLN_QTY QTN_3,
        CAS_3.STM_STOCK_POSITION_ID STK_3,
        CAS_4.DESCRIPTION DEC4,
        CAS_4.GOO_MAJOR_REFERENCE REF_ART_4,
        CAS_4.GCO_GOOD_ID ART_ID_4,
        CAS_4.GOO_NUMBER_OF_DECIMAL DIG_4,
        CAS_4.TOTAL_QTY QTE_4,
        CAS_4.END_DELAY DELAY_4,
        CAS_4.FLN_QTY QTN_4,
        CAS_4.STM_STOCK_POSITION_ID STK_4,
        CAS_5.DESCRIPTION DEC5,
        CAS_5.GOO_MAJOR_REFERENCE REF_ART_5,
        CAS_5.GCO_GOOD_ID ART_ID_5,
        CAS_5.GOO_NUMBER_OF_DECIMAL DIG_5,
        CAS_5.TOTAL_QTY QTE_5,
        CAS_5.END_DELAY DELAY_5,
        CAS_5.FLN_QTY QTN_5,
        CAS_5.STM_STOCK_POSITION_ID STK_5,
        CAS_6.DESCRIPTION DEC6,
        CAS_6.GOO_MAJOR_REFERENCE REF_ART_6,
        CAS_6.GCO_GOOD_ID ART_ID_6,
        CAS_6.GOO_NUMBER_OF_DECIMAL DIG_6,
        CAS_6.TOTAL_QTY QTE_6,
        CAS_6.END_DELAY DELAY_6,
        CAS_6.FLN_QTY QTN_6,
        CAS_6.STM_STOCK_POSITION_ID STK_6
        FROM DOC_DOCUMENT DOC,
        DOC_POSITION POS,
        DOC_POSITION_DETAIL DET,
        PAC_THIRD THI,
        PAC_PERSON PER,
        DOC_GAUGE_STRUCTURED GST,
        GCO_GOOD GCO,
        FAL_NETWORK_NEED NEED,
        V_FAL_CASCADE CAS_1,
        V_FAL_CASCADE CAS_2,
        V_FAL_CASCADE CAS_3,
        V_FAL_CASCADE CAS_4,
        V_FAL_CASCADE CAS_5,
        V_FAL_CASCADE CAS_6
        WHERE DOC.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
        AND POS.DOC_POSITION_ID = DET.DOC_POSITION_ID
        AND POS.GCO_GOOD_ID = GCO.GCO_GOOD_ID
        AND DOC.DOC_GAUGE_ID = GST.DOC_GAUGE_ID
        AND DET.DOC_POSITION_DETAIL_ID = NEED.DOC_POSITION_DETAIL_ID(+)
        AND DOC.PAC_THIRD_ID = THI.PAC_THIRD_ID
        AND THI.PAC_THIRD_ID = PER.PAC_PERSON_ID
        AND NEED.FAL_NETWORK_NEED_ID = CAS_1.NEED_ID_IN(+)
        AND CAS_1.NEED_ID_OUT = CAS_2.NEED_ID_IN(+)
        AND CAS_2.NEED_ID_OUT = CAS_3.NEED_ID_IN(+)
        AND CAS_3.NEED_ID_OUT = CAS_4.NEED_ID_IN(+)
        AND CAS_4.NEED_ID_OUT = CAS_5.NEED_ID_IN(+)
        AND CAS_5.NEED_ID_OUT = CAS_6.NEED_ID_IN(+)
        AND GST.C_GAUGE_TITLE = '6'
        AND (DOC.C_DOCUMENT_STATUS = '03' OR DOC.C_DOCUMENT_STATUS = '02')
        AND (   POS.C_GAUGE_TYPE_POS = '10'
        OR POS.C_GAUGE_TYPE_POS = '91'
        OR POS.C_GAUGE_TYPE_POS = '8'
        OR POS.C_GAUGE_TYPE_POS = '7'
        OR POS.C_GAUGE_TYPE_POS = '1'
        )
        AND (NVL(PARAMETER_0,'%') = '%' OR DOC.DMT_NUMBER >= PARAMETER_0)
        AND (NVL(PARAMETER_1,'%') = '%' OR DOC.DMT_NUMBER<= PARAMETER_1)
        AND (NVL(PARAMETER_2,'%') = '%' OR PER.PER_NAME >= PARAMETER_2)
        AND (NVL(PARAMETER_3,'%') = '%' OR PER.PER_NAME <= PARAMETER_3);

END RPT_FAL_LOT_LINK;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_MATERIAL_EXIT_SCP" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
*Description
        Used for report FAL_LOT_MATERIAL_EXIT_SCP

*@created VHA 28 February 2013
*@lastUpdate SMA 21.05.2015
*@public
*@param parameter_0 : DMT_NUMBER
*@param procuser_lanid : user language
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  open arefcursor for
    select DOC.DMT_NUMBER
         , PCS.PC_ISS_UTILS.Get_Lanid(DOC.PC_LANG_ID) DOC_LANID   --LANGUE DU DOCUMENT
         , DOC.DMT_DATE_DOCUMENT
         , gco_lib_functions.getMajorReference(POS.GCO_GOOD_ID) POS_GOO_MAJOR_REFERENCE
         , gco_lib_functions.GetNumberOfDecimal(POS.GCO_GOOD_ID) POS_GOO_NUMBER_OF_DECIMAL
         , gco_lib_functions.getMajorReference(POS.GCO_MANUFACTURED_GOOD_ID) POS_MAN_GOO_MAJOR_REFERENCE
         , gco_lib_functions.GetNumberOfDecimal(POS.GCO_MANUFACTURED_GOOD_ID) POS_MAN_GOO_NUMBER_OF_DECIMAL
         , gco_lib_functions.GetDescription2(POS.GCO_MANUFACTURED_GOOD_ID, DOC.PC_LANG_ID, 1, '01') POS_MAN_GOO_SHORT_DESCR
         , gco_lib_functions.GetDescription2(POS.GCO_MANUFACTURED_GOOD_ID, DOC.PC_LANG_ID, 2, '01') POS_MAN_GOO_LONG_DESCR
         , gco_lib_functions.GetDescription2(POS.GCO_MANUFACTURED_GOOD_ID, DOC.PC_LANG_ID, 3, '01') POS_MAN_GOO_FREE_DESCR
         , gco_lib_functions.GetDicUnitOfMeasure(POS.GCO_MANUFACTURED_GOOD_ID, DOC.PC_LANG_ID) POS_MAN_DIC_UNIT_OF_MEASURE
         , POS.POS_NUMBER
         , POS.POS_SHORT_DESCRIPTION
         , POS.POS_LONG_DESCRIPTION
         , POS.POS_FREE_DESCRIPTION
         , LOT.FAL_LOT_ID
         , LOT.LOT_PLAN_END_DTE
         , LOT.LOT_PLAN_NUMBER
         , LOT.LOT_PLAN_VERSION
         , LOT.FAL_ORDER_ID
         , LOT_TOTAL_QTY
         , (select nvl(sum(SPO.SPO_STOCK_QUANTITY), 0)
              from STM_STOCK_POSITION SPO
                 , STM_STOCK STM
             where SPO.STM_STOCK_ID = STM.STM_STOCK_ID
               and SPO.GCO_GOOD_ID = FLML.GCO_GOOD_ID
               and STM.PAC_SUPPLIER_PARTNER_ID = DOC.PAC_THIRD_ID
               and STM.STO_SUBCONTRACT = 1) SPO_STOCK_QUANTITY
         , (select nvl(sum(SPO.SPO_ASSIGN_QUANTITY), 0)
              from STM_STOCK_POSITION SPO
                 , STM_STOCK STM
             where SPO.STM_STOCK_ID = STM.STM_STOCK_ID
               and SPO.GCO_GOOD_ID = FLML.GCO_GOOD_ID
               and STM.PAC_SUPPLIER_PARTNER_ID = DOC.PAC_THIRD_ID
               and STM.STO_SUBCONTRACT = 1) SPO_ASSIGN_QUANTITY
         , (select nvl(sum(SPO.SPO_AVAILABLE_QUANTITY), 0)
              from STM_STOCK_POSITION SPO
                 , STM_STOCK STM
             where SPO.STM_STOCK_ID = STM.STM_STOCK_ID
               and SPO.GCO_GOOD_ID = FLML.GCO_GOOD_ID
               and STM.PAC_SUPPLIER_PARTNER_ID = DOC.PAC_THIRD_ID
               and STM.STO_SUBCONTRACT = 1) SPO_AVAILABLE_QUANTITY
         , FLML.GCO_GOOD_ID FLML_GCO_GOOD_ID
         , gco_lib_functions.getMajorReference(FLML.GCO_GOOD_ID) FLML_GOO_MAJOR_REFERENCE
         , gco_lib_functions.GetNumberOfDecimal(FLML.GCO_GOOD_ID) FLML_GOO_NUMBER_OF_DECIMAL
         , gco_lib_functions.GetDicUnitOfMeasure(FLML.GCO_GOOD_ID, DOC.PC_LANG_ID) FLML_GOO_DIC_UNIT_OF_MEASURE
         , FLML.LOM_TEXT
         , FLML.FAL_LOT_MATERIAL_LINK_ID
         , FLML.LOM_ADJUSTED_QTY
         , FLML.LOM_BOM_REQ_QTY
         , FLML.LOM_NEED_QTY
         , FLML.LOM_CONSUMPTION_QTY
         , FLML.LOM_FULL_REQ_QTY
         , FLML.LOM_EXIT_RECEIPT
         , FLML.LOM_SECONDARY_REF
         , FLML.LOM_SHORT_DESCR
         , FLML.LOM_LONG_DESCR
         , FLML.LOM_FREE_DECR
         , gco_lib_functions.GetDescription2(FLML.GCO_GOOD_ID, DOC.PC_LANG_ID, 1, '01') FLML_GOO_SHORT_DESCR
         , gco_lib_functions.GetDescription2(FLML.GCO_GOOD_ID, DOC.PC_LANG_ID, 2, '01') FLML_GOO_LONG_DESCR
         , gco_lib_functions.GetDescription2(FLML.GCO_GOOD_ID, DOC.PC_LANG_ID, 3, '01') FLML_GOO_FREE_DESCR
         , FLML.LOM_NEED_DATE
         , FLML.LOM_SEQ
         , FLML.C_KIND_COM
         , RES.FAN_PIECE
         , RES.FAN_SET
         , RES.FAN_VERSION
         , RES.FAN_CHRONOLOGICAL
         , RES.FAN_STK_QTY
         , RES.FLN_QTY
         , RES.GCO_CHARACTERIZATION1_ID
         , RES.GCO_CHARACTERIZATION2_ID
         , RES.GCO_CHARACTERIZATION3_ID
         , RES.GCO_CHARACTERIZATION4_ID
         , RES.GCO_CHARACTERIZATION5_ID
      from DOC_DOCUMENT DOC
         , DOC_POSITION POS
         , FAL_LOT LOT
         , FAL_LOT_MATERIAL_LINK FLML
         , (select FNN.FAN_PIECE
                 , FNN.FAN_SET
                 , FNN.FAN_VERSION
                 , FNN.FAN_CHRONOLOGICAL
                 , FNN.FAN_STK_QTY
                 , FNN.GCO_CHARACTERIZATION1_ID
                 , FNN.GCO_CHARACTERIZATION2_ID
                 , FNN.GCO_CHARACTERIZATION3_ID
                 , FNN.GCO_CHARACTERIZATION4_ID
                 , FNN.GCO_CHARACTERIZATION5_ID
                 , FNN.FAL_LOT_MATERIAL_LINK_ID
                 , FNL.FLN_QTY
              from FAL_NETWORK_NEED FNN
                 , FAL_NETWORK_LINK FNL
                 , STM_STOCK STM
                 , STM_LOCATION LOC
                 , DOC_DOCUMENT DOC2
             where FNL.FAL_NETWORK_NEED_ID(+) = FNN.FAL_NETWORK_NEED_ID
               and LOC.STM_LOCATION_ID = FNL.STM_LOCATION_ID
               and STM.STM_STOCK_ID = LOC.STM_STOCK_ID
               and DOC2.PAC_THIRD_ID = STM.PAC_SUPPLIER_PARTNER_ID
               and DOC2.DMT_NUMBER = parameter_0) RES
     where POS.DOC_DOCUMENT_ID = DOC.DOC_DOCUMENT_ID
       and LOT.FAL_LOT_ID = POS.FAL_LOT_ID
       and FLML.FAL_LOT_ID = LOT.FAL_LOT_ID
       and RES.FAL_LOT_MATERIAL_LINK_ID(+) = FLML.FAL_LOT_MATERIAL_LINK_ID
       and DOC.DMT_NUMBER = parameter_0;
end RPT_FAL_LOT_MATERIAL_EXIT_SCP;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_MP_BALANCE_SHEET" (
  arefcursor       in out crystal_cursor_types.dualcursortyp
, parameter_0      in     varchar2
, procuser_lanid   in     pcs.pc_lang.lanid%type
, proccompany_name in     pcs.pc_comp.com_name%type
)
is
/**
*Description
        Used for report FAL_LOT_MATERIAL_EXIT_SCP

*@created VHA 26 JUNE 2013
*@lastUpdate
*@public
*@param parameter_0    FAL_LOT_ID
*@param PROCUSER_LANID : user language
*/
  vpc_lang_id     pcs.pc_lang.pc_lang_id%type := null;
  vcom_logo_large pcs.pc_comp.com_logo_large%type := null;
  vcom_descr      pcs.pc_comp.com_descr%type := null;
  vcom_adr        varchar2(4000);
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  if (proccompany_name is not null) then
      select com.com_logo_large
           , com.com_descr
           , com.com_adr || chr(13) || com.com_zip || ' - ' || com.com_city
        into vcom_logo_large
           , vcom_descr
           , vcom_adr
        from pcs.pc_comp com
       where com.com_name = proccompany_name;
  end if;

  open arefcursor for
    select '1' INFO
         , LOT.FAL_LOT_ID
         , LOT.LOT_REF
         , LOT.LOT_REFCOMPL
         , vcom_logo_large COM_LOGO_LARGE
         , vcom_descr COM_DESCR
         , vcom_adr COM_ADR
         , (select count(*)
              from FAL_LOT LOT
                 , DOC_DOCUMENT DOC
                 , DOC_GAUGE_STRUCTURED GAS
             where DOC.DOC_RECORD_ID = LOT.DOC_RECORD_ID
               and GAS.DOC_GAUGE_ID = DOC.DOC_GAUGE_ID
               and instr(',' || parameter_0 || ',', ',' || LOT.FAL_LOT_ID || ',') > 0
               and GAS.C_GAUGE_TITLE = '6') LOT_DOC_NB
         , DOC.DOC_DOCUMENT_ID
         , PER.PER_NAME
         , DOC.DMT_NUMBER
         , DOC.DMT_DATE_DOCUMENT
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_SECONDARY_REFERENCE
         , LOT.LOT_PLAN_NUMBER
         , GAL.GCO_ALLOY_ID
         , nvl(GAL.GAL_ALLOY_DESCR, GAL.GAL_ALLOY_REF) GAL_ALLOY_REF
         , GAC.DIC_BASIS_MATERIAL_ID
         , (select DIC_BASIS_MATERIAL_WORDING
              from DIC_BASIS_MATERIAL DIC
             where DIC.DIC_BASIS_MATERIAL_ID = GAC.DIC_BASIS_MATERIAL_ID) BASIS_MAT_DESC
         , GAC.GAC_RATE
         , nvl(DFA.DFA_RATE_DATE, DOC.DMT_DATE_DOCUMENT) VALUE_DATE
         , nvl(DFA.DFA_RATE, DFA.DFA_RATE_TH) RATE
         , PCS.PC_FUNCTIONS.GetDescodeDescr('C_THIRD_MATERIAL_RELATION_TYPE', DOC.C_THIRD_MATERIAL_RELATION_TYPE, vpc_lang_id) THIRD_MAT_REL_TYPE_DESC
         , null FAL_WEIGH_ID
         , null FWE_DATE
         , null FWE_WEIGHT_MAT
         , null WEIGH_TYPE_DESCR
         , null WEIGHING_TYPE
      from FAL_LOT LOT
         , DOC_DOCUMENT DOC
         , DOC_FOOT_ALLOY DFA
         , GCO_GOOD GOO
         , PAC_PERSON PER
         , FAL_WEIGH FWE
         , GCO_ALLOY GAL
         , GCO_ALLOY_COMPONENT GAC
     where DOC.DOC_RECORD_ID(+) = LOT.DOC_RECORD_ID
       and GOO.GCO_GOOD_ID = LOT.GCO_GOOD_ID
       and PER.PAC_PERSON_ID(+) = DOC.PAC_THIRD_ID
       and DFA.DOC_FOOT_ID(+) = DOC.DOC_DOCUMENT_ID
       and FWE.FAL_LOT_ID(+) = LOT.FAL_LOT_ID
       and GAL.GCO_ALLOY_ID(+) = FWE.GCO_ALLOY_ID
       and GAC.GCO_ALLOY_ID(+) = GAL.GCO_ALLOY_ID
       and instr(',' || parameter_0 || ',', ',' || LOT.FAL_LOT_ID || ',') > 0
    union all
    select '2' INFO
         , LOT.FAL_LOT_ID
         , LOT.LOT_REF
         , LOT.LOT_REFCOMPL
         , vcom_logo_large COM_LOGO_LARGE
         , vcom_descr COM_DESCR
         , vcom_adr COM_ADR
         , (select count(*)
              from FAL_LOT LOT
                 , DOC_DOCUMENT DOC
                 , DOC_GAUGE_STRUCTURED GAS
             where DOC.DOC_RECORD_ID = LOT.DOC_RECORD_ID
               and GAS.DOC_GAUGE_ID = DOC.DOC_GAUGE_ID
               and instr(',' || parameter_0 || ',', ',' || LOT.FAL_LOT_ID || ',') > 0
               and GAS.C_GAUGE_TITLE = '6') LOT_DOC_NB
         , DOC.DOC_DOCUMENT_ID
         , PER.PER_NAME
         , DOC.DMT_NUMBER
         , DOC.DMT_DATE_DOCUMENT
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_SECONDARY_REFERENCE
         , LOT.LOT_PLAN_NUMBER
         , WGH.GCO_ALLOY_ID
         , WGH.GAL_ALLOY_REF
         , null DIC_BASIS_MATERIAL_ID
         , null BASIS_MAT_DESC
         , null GAC_RATE
         , null VALUE_DATE
         , null RATE
         , null THIRD_MAT_REL_TYPE_DESC
         , WGH.FAL_WEIGH_ID
         , WGH.FWE_DATE
         , WGH.FWE_WEIGHT_MAT
         , WGH.WEIGH_TYPE_DESCR
         , WGH.WEIGHING_TYPE
      from (select   FWE.FAL_LOT_ID
                   , FWE.FAL_WEIGH_ID
                   , FWE.FWE_DATE
                   , FWE.FWE_WEIGHT_MAT
                   , PCS.PC_FUNCTIONS.GetDescodeDescr('C_WEIGH_TYPE', FWE.C_WEIGH_TYPE, vpc_lang_id) WEIGH_TYPE_DESCR
                   , GAL.GCO_ALLOY_ID
                   , GAL.GAL_ALLOY_REF
                   , 'SORTIE (en atelier)' WEIGHING_TYPE
                from fal_weigh fwe
                   , gco_alloy gal
               where fwe.gco_alloy_id = gal.gco_alloy_id
                 and FWE_TURNINGS = 0
                 and FWE_IN = 1
                 and (    (C_WEIGH_TYPE in('1', '6', '10') )
                      or (    C_WEIGH_TYPE = '8'
                          and (   FAL_POSITION1_ID =
                                     FAL_LIB_POSITION.getPositionIDByStockID(inStmStockID   => FAL_TOOLS.GetConfig_StockID(ConfigWord   => 'PPS_DefltSTOCK_FLOOR') )
                               or FAL_POSITION1_ID in(
                                    select FPO.FAL_POSITION_ID
                                      from FAL_LOT_MATERIAL_LINK FLM
                                         , FAL_TASK_LINK TAL
                                         , FAL_POSITION FPO
                                     where FLM.FAL_LOT_MATERIAL_LINK_ID = FWE.FAL_LOT_MATERIAL_LINK_ID
                                       and FLM.FAL_LOT_ID = TAL.FAL_LOT_ID
                                       and TAL.FAL_FACTORY_FLOOR_ID = FPO.FAL_FACTORY_FLOOR_ID)
                              )
                         )
                     )
            union
            select   FWE.FAL_LOT_ID
                   , FWE.FAL_WEIGH_ID
                   , FWE.FWE_DATE
                   , FWE.FWE_WEIGHT_MAT
                   , PCS.PC_FUNCTIONS.GetDescodeDescr('C_WEIGH_TYPE', FWE.C_WEIGH_TYPE, vpc_lang_id) WEIGH_TYPE_DESCR
                   , GAL.GCO_ALLOY_ID
                   , GAL.GAL_ALLOY_REF
                   , 'ENTREE (sortie datelier)' WEIGHING_TYPE
                from fal_weigh fwe
                   , gco_alloy gal
               where fwe.gco_alloy_id = gal.gco_alloy_id
                 and FWE_IN = 0
                 and (    (C_WEIGH_TYPE = '7')
                      or (C_WEIGH_TYPE = '9')
                      or (C_WEIGH_TYPE = '11')
                      or (    C_WEIGH_TYPE = '8'
                          and FAL_POSITION2_ID =
                                     FAL_LIB_POSITION.getPositionIDByStockID(inStmStockID   => FAL_TOOLS.GetConfig_StockID(ConfigWord   => 'PPS_DefltSTOCK_FLOOR') )
                         )
                     )
            union
            select   FWE.FAL_LOT_ID
                   , FWE.FAL_WEIGH_ID
                   , FWE.FWE_DATE
                   , FWE.FWE_WEIGHT_MAT
                   , PCS.PC_FUNCTIONS.GetDescodeDescr('C_WEIGH_TYPE', FWE.C_WEIGH_TYPE, vpc_lang_id) WEIGH_TYPE_DESCR
                   , GAL.GCO_ALLOY_ID
                   , GAL.GAL_ALLOY_REF
                   , 'SORTIE (réception)' WEIGHING_TYPE
                from fal_weigh fwe
                   , gco_alloy gal
               where fwe.gco_alloy_id = gal.gco_alloy_id
                 and FWE_IN = 1
                 and C_WEIGH_TYPE = '4'
            union
            select   LOT.FAL_LOT_ID
                   , FWE.FAL_WEIGH_ID
                   , FWE.FWE_DATE
                   , FWE.FWE_WEIGHT_MAT
                   , PCS.PC_FUNCTIONS.GetDescodeDescr('C_WEIGH_TYPE', FWE.C_WEIGH_TYPE, vpc_lang_id) WEIGH_TYPE_DESCR
                   , GAL.GCO_ALLOY_ID
                   , GAL.GAL_ALLOY_REF
                   , 'Livraison' WEIGHING_TYPE
                from fal_weigh fwe
                   , gco_alloy gal
                   , doc_document doc
                   , fal_lot lot
               where fwe.doc_document_id = doc.doc_document_id
                 and fwe.gco_alloy_id = gal.gco_alloy_id
                 and LOT.DOC_RECORD_ID = DOC.DOC_RECORD_ID
                 and FWE_IN = 0
                 and C_WEIGH_TYPE = '3'
            order by 1) WGH
         , FAL_LOT LOT
         , DOC_DOCUMENT DOC
         , GCO_GOOD GOO
         , PAC_PERSON PER
     where LOT.FAL_LOT_ID = WGH.FAL_LOT_ID
       and DOC.DOC_RECORD_ID(+) = LOT.DOC_RECORD_ID
       and GOO.GCO_GOOD_ID = LOT.GCO_GOOD_ID
       and PER.PAC_PERSON_ID(+) = DOC.PAC_THIRD_ID
       and instr(',' || parameter_0 || ',', ',' || WGH.FAL_LOT_ID || ',') > 0;
end RPT_FAL_LOT_MP_BALANCE_SHEET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_ORDO" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     number
, parameter_1    in     date
, parameter_2    in     varchar2
)
is
/**Description - used for report FAL_LOT_ORDO

* @author AWU 26 MAR 2009
* @lastUpdate
* @public
* @param parameter_0:  choice between begin and end date used to filter record 0/begin  1/end
* @param parameter_1: LOT_DATE
* @param parameter_2: Group by 0:day, 1:week, 2:month
*/
  param_begin date;
  param_end   date;
begin
  if parameter_0 = 0 then
    param_begin  := parameter_1;
  elsif parameter_0 = 1 then
    param_end  := parameter_1;
  end if;

  open arefcursor for
    select case
             when (select min(afln.fln_margin)
                     from fal_lot alot
                        , fal_network_link afln
                        , fal_network_supply afns
                    where alot.fal_lot_id = afns.fal_lot_id
                      and afns.fal_network_supply_id = afln.fal_network_supply_id
                      and alot.fal_lot_id = lot.fal_lot_id) < 0 then (select min(afln.fln_margin)
                                                                        from fal_lot alot
                                                                           , fal_network_link afln
                                                                           , fal_network_supply afns
                                                                       where alot.fal_lot_id = afns.fal_lot_id
                                                                         and afns.fal_network_supply_id = afln.fal_network_supply_id
                                                                         and alot.fal_lot_id = lot.fal_lot_id)
             else (select max(afln.fln_margin)
                     from fal_lot alot
                        , fal_network_link afln
                        , fal_network_supply afns
                    where alot.fal_lot_id = afns.fal_lot_id
                      and afns.fal_network_supply_id = afln.fal_network_supply_id
                      and alot.fal_lot_id = lot.fal_lot_id)
           end margin
         , decode( (select count(fpg.fal_lot_progress_id)
                      from fal_lot_progress fpg
                     where fpg.fal_lot_id = lot.fal_lot_id
                       and fpg.flp_reversal = 0), 0, '0', '1') tracking_indication
         , lot.fal_lot_id
         , lot.lot_plan_begin_dte
         , to_char(lot.lot_plan_end_dte, 'iw/yyyy') lot_plan_end_date
         , decode(parameter_2
                , '0', to_char(lot.lot_plan_end_dte, 'YYYYMMDD')
                , '1', to_char(lot.lot_plan_end_dte, 'YYYYIW')
                , '2', to_char(lot.lot_plan_end_dte, 'YYYYMM')
                , to_char(lot.lot_plan_end_dte, 'YYYYIW')
                 ) due_date
         , lot.lot_plan_lead_time
         , fln.fln_margin
         , lot.lot_refcompl
         , (select goo1.goo_major_reference
              from gco_good goo1
             where goo1.gco_good_id = lot.gco_good_id) goo_major_reference
         , gco_functions.getdescription(lot.gco_good_id, procuser_lanid, 1, '01') short_description
         , lot.lot_inprod_qty
         , (select per.per_name
              from pac_person per
             where per.pac_person_id = fnn.pac_third_id) per_name
         , fnn.fan_description
         , decode(nvl(fnn.doc_position_detail_id, 0), 0, fln.fln_need_delay, pde.pde_basis_delay) order_delay
         , fln.fln_qty
         , gco_functions.getcostpricewithmanagementmode(lot.gco_good_id) cost_price
         , (select decode(DOC_I_LIB_GAUGE.isGaugeTTC(dmt.doc_gauge_id), 1, pos.pos_gross_unit_value_incl, pos.pos_gross_unit_value)
              from doc_document dmt
             where pos.doc_document_id = dmt.doc_document_id) pos_gross_unit_value
      from fal_lot lot
         , fal_network_link fln
         , fal_network_supply fns
         , fal_network_need fnn
         , doc_position_detail pde
         , doc_position pos
         , fal_doc_prop fdp
         , fal_lot flt
         , fal_lot_prop flp
     where lot.c_lot_status in('1', '2')
       and lot.fal_lot_id = fns.fal_lot_id(+)
       and fns.fal_network_supply_id = fln.fal_network_supply_id(+)
       and fln.fal_network_need_id = fnn.fal_network_need_id(+)
       and fnn.doc_position_detail_id = pde.doc_position_detail_id(+)
       and pde.doc_position_id = pos.doc_position_id(+)
       and fnn.fal_doc_prop_id = fdp.fal_doc_prop_id(+)
       and fnn.fal_lot_id = flt.fal_lot_id(+)
       and fnn.fal_lot_prop_id = flp.fal_lot_prop_id(+)
       and (   lot.lot_plan_begin_dte <= param_begin
            or param_begin is null)
       and (   lot.lot_plan_end_dte <= param_end
            or param_end is null);
end rpt_fal_lot_ordo;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_POST_CALC" (
   arefcursor   IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid   IN       VARCHAR                                           --,
--PARAMETER_0      IN       NUMBER -- for corrected report
)
IS
/**
*Description Used for report FAL_LOT_POST_CALCULATION.RPT

*@created MZHU 12 Feb 2009
*@lastUpdate
*@public
*@param PARAMETER_0 :   FAL_LOT_ID
*/
   vpc_lang_id   NUMBER (12);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT lot.fal_lot_id, lot.lot_total_qty, lot.lot_released_qty,
             lot.lot_reject_released_qty, lot.lot_refcompl,
             goo_pri.goo_major_reference goo_major_reference_pri,
             goo_pri.goo_number_of_decimal goo_number_of_decimal_pri,
             gco_functions.getdescription (goo_pri.gco_good_id,
                                           user_lanid,
                                           1,
                                           '01'
                                          ) v_descr
        FROM fal_lot lot, gco_good goo_pri
       WHERE lot.gco_good_id = goo_pri.gco_good_id;
END rpt_fal_lot_post_calc;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_SUBCTR_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report FAL_LOT_TASK_ORDO

* @author AWU 7 April 2009
* @lastUpdate
* @public
* @param parameter_1: FAL_SCHEDULE_STEP_ID
* Uniquement pour les gabarits de type Commande ss-traitance
*/

vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id

BEGIN
vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
SELECT pde.fal_schedule_step_id, dmt.dmt_number, pos.pos_number,
       pde.pde_basis_delay, pos.pos_basis_quantity,
       (SELECT gcdtext1
          FROM pcs.v_pc_descodes
         WHERE gcgname = 'C_DOCUMENT_STATUS'
           AND pc_lang_id = vpc_lang_id
           AND gclcode = dmt.c_document_status) C_STATUS
  FROM doc_position_detail pde,
       doc_position pos,
       doc_document dmt,
       doc_gauge gau
 WHERE pde.doc_position_id = pos.doc_position_id
   AND pos.doc_document_id = dmt.doc_document_id
   AND dmt.doc_gauge_id = gau.doc_gauge_id
   AND gau.dic_gauge_categ_id = 'Appro_ST'
   AND pde.fal_schedule_step_id = parameter_0;
END rpt_fal_lot_subctr_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_LOT_TASK_ORDO" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER,
   parameter_1      IN       DATE,
   parameter_2      IN       NUMBER,
   parameter_3      IN       VARCHAR2
)
IS
/**Description - used for report FAL_LOT_TASK_ORDO

* @author AWU 7 April 2009
* @lastUpdate feb 2010
* @public
* @param parameter_0:  choice between begin and end date used to filter record 0/begin  1/end
* @param parameter_1:  lot_date
* @param parameter_2   task type choice 0/all 1/internal 2/external
* @param parameter_3   Workshop list
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
   param_begin   DATE;
   param_end     DATE;
   param_task    NUMBER;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   IF parameter_0 = 0
   THEN
      param_begin := parameter_1;
   ELSIF parameter_0 = 1
   THEN
      param_end := parameter_1;
   END IF;

   CASE parameter_2
      WHEN 0
      THEN
         NULL;
      WHEN 1
      THEN
         param_task := 1;
      WHEN 2
      THEN
         param_task := 2;
      ELSE
         NULL;
   END CASE;

   OPEN arefcursor FOR
      SELECT
         DECODE
              ((SELECT COUNT (fpg.fal_lot_progress_id)
                FROM fal_lot_progress fpg
                WHERE fpg.fal_lot_id = lot.fal_lot_id
                     AND fpg.flp_reversal = 0),
                 0, '0',
                 '1'
                ) tracking_indication,
         lot.fal_lot_id, lot.lot_refcompl,
             NVL (tal.tal_begin_plan_date,
                  lot.lot_plan_begin_dte
                 ) tal_begin_plan_date,
             NVL (tal.tal_end_plan_date,
                  lot.lot_plan_end_dte
                 ) tal_end_plan_date,
             TO_CHAR (NVL (tal.tal_end_plan_date, lot.lot_plan_end_dte),
                      'IW'
                     ) tal_end_plan_date_iw,
             NVL (tal.tal_task_manuf_time,
                  lot.lot_plan_lead_time
                 ) tal_task_manuf_time,
             Case When
                (SELECT MIN (fln.fln_margin)
                   FROM fal_network_supply fns, fal_network_link fln
                   WHERE fns.fal_network_supply_id = fln.fal_network_supply_id
                         AND fns.fal_lot_id = lot.fal_lot_id) < 0
             THEN
                (SELECT MIN (fln.fln_margin)
                   FROM fal_network_supply fns, fal_network_link fln
                   WHERE fns.fal_network_supply_id = fln.fal_network_supply_id
                         AND fns.fal_lot_id = lot.fal_lot_id)
             ELSE
                (SELECT MAX (fln.fln_margin)
                   FROM fal_network_supply fns, fal_network_link fln
                   WHERE fns.fal_network_supply_id = fln.fal_network_supply_id
                         AND fns.fal_lot_id = lot.fal_lot_id)
              END  fln_margin,
             (SELECT goo.goo_major_reference
                FROM gco_good goo
               WHERE goo.gco_good_id = lot.gco_good_id) goo_major_reference,
             gco_functions.getdescription (lot.gco_good_id,
                                           procuser_lanid,
                                           1,
                                           '01'
                                          ) short_description,
             tal.c_task_type,
             pcs.pc_functions.getdescodedescr ('C_TASK_TYPE',
                                               tal.c_task_type,
                                               vpc_lang_id
                                              ) task_type,
             DECODE (tal.c_task_type,
                     1, (SELECT fac.fac_reference
                           FROM fal_factory_floor fac
                          WHERE fac.fal_factory_floor_id =
                                                      tal.fal_factory_floor_id),
                     2, (SELECT per.per_name
                           FROM pac_person per
                          WHERE per.pac_person_id =
                                                   tal.pac_supplier_partner_id),
                     ''
                    ) client,
             tal.fal_schedule_step_id, tal.scs_step_number,
             (SELECT tas.tas_ref
                FROM fal_task tas
               WHERE tas.fal_task_id = tal.fal_task_id) tas_ref,
             lot.lot_plan_end_dte,
             TO_CHAR (lot.lot_plan_end_dte, 'IW') lot_plan_end_dte_iw,
             tal.tal_plan_qty, tal.tal_due_qty
        FROM fal_task_link tal,
             fal_lot lot,
             fal_order ord,
             fal_job_program jop
       WHERE tal.fal_lot_id = lot.fal_lot_id
         AND lot.fal_order_id = ord.fal_order_id
         AND ord.fal_job_program_id = jop.fal_job_program_id
         AND (parameter_3 is null  or instr( ',' || parameter_3 ||',' , ',' || TAL.FAL_FACTORY_FLOOR_ID ||',' ) > 0 )
         AND lot.c_lot_status IN ('1', '2')
         AND tal.tal_due_qty > 0
         AND (lot.lot_plan_begin_dte <= param_begin OR param_begin IS NULL)
         AND (lot.lot_plan_end_dte <= param_end OR param_end IS NULL)
         AND (tal.c_task_type = param_task OR param_task IS NULL);
END rpt_fal_lot_task_ordo;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_MANU_PROP" (
   arefcursor   IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description Used for report FAL_FACTORY_FLOOR,FAL_FACTORY_FLOOR_BATCH. This one is used only since SP6

*@created LBU 05 SEP 2008
*@lastUpdate CLIU 17 Mar 2010
*@Published VHA 20 Sept 2011
*@public
*@param USER_LANID  : user language
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;
   vno_accountable_group   VARCHAR2 (4000 CHAR);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vno_accountable_group :=
      pcs.pc_functions.translateword2 ('Pas de groupe responsable',
                                       vpc_lang_id
                                      );

   OPEN arefcursor FOR
      SELECT gd.c_description_type, nvl(goo.dic_accountable_group_id,vno_ACCOUNTABLE_GROUP) dic_accountable_group_id,
             goo.goo_major_reference, gd.des_short_description,
             gd.des_long_description, gd.des_free_description,
             goo.goo_number_of_decimal, fns.fan_beg_plan, fns.fan_end_plan,
             fnn.fan_balance_qty, fnn.fan_beg_plan fnn_beg_plan,
             fnn.fan_end_plan fnn_end_plan,
             fns.fan_description fns_description, goo.dic_unit_of_measure_id,
             fsr.fsr_texte, fsr.fsr_number, fnl.fln_qty, fnl.fln_need_delay,
             fsr.fsr_delay, fsr.fsr_total_qty, flp.lot_total_qty,
             cda.dic_unit_of_measure_id, flp.lot_asked_qty,
             flp.lot_reject_plan_qty, flp.fal_lot_prop_id,
             fnl.fal_network_need_id, flp.fal_supply_request_id,
             flp.gco_good_id, sto.sto_description, fnn.fal_lot_id,
             fnn.fan_description, lot.lot_refcompl,
             gco_functions.getcostpricewithmanagementmode
                                                  (goo.gco_good_id)
                                                                   cost_price
        FROM fal_lot_prop flp,
             gco_compl_data_manufacture cda,
             gco_good goo,
             gco_description gd,
             fal_supply_request fsr,
             fal_network_supply fns,
             fal_network_link fnl,
             fal_network_need fnn,
             stm_location loc,
             stm_stock sto,
             fal_lot lot
       WHERE goo.gco_good_id = flp.gco_good_id
         AND gd.pc_lang_id = vpc_lang_id
         AND gd.gco_good_id = goo.gco_good_id
         AND gd.c_description_type = '01'
         AND cda.gco_good_id = flp.gco_good_id
         AND cda.dic_fab_condition_id = flp.dic_fab_condition_id
         AND flp.fal_lot_prop_id >= 0
         AND flp.fal_lot_prop_id = fns.fal_lot_prop_id(+)
         AND fnl.fal_network_supply_id(+) = fns.fal_network_supply_id
         AND fnl.fal_network_need_id = fnn.fal_network_need_id(+)
         AND loc.stm_location_id(+) = fnl.stm_location_id
         AND sto.stm_stock_id(+) = loc.stm_stock_id
         AND flp.fal_supply_request_id = fsr.fal_supply_request_id(+)
         AND lot.fal_lot_id(+) = fnn.fal_lot_id;
END rpt_fal_manu_prop;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_MAN_TRACKING" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_comp_id     in     pcs.pc_comp.pc_comp_id%type
, pc_conli_id    in     pcs.pc_conli.pc_conli_id%type
)
is
/**
* Description - Used in report RPT_FAL_MAN_TRACKING

* Stored procedure used by the report FAL_MAN_TRACKING
* @created VHA 16 November 2012
* Modified
* lastUpdate
* @param proc_param_0    FAL_LOT_ID
*/
  vpc_lang_id  pcs.pc_lang.pc_lang_id%type;
  vpc_comp_id  pcs.pc_comp.pc_comp_id%type;
  vpc_conli_id pcs.pc_conli.pc_conli_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  pcs.PC_I_LIB_SESSION.setcompanyid(pc_comp_id);
  pcs.PC_I_LIB_SESSION.setconliid(pc_conli_id);
  vpc_lang_id   := pcs.PC_I_LIB_SESSION.getuserlangid;
  vpc_comp_id   := pcs.PC_I_LIB_SESSION.getcompanyid;
  vpc_conli_id  := pcs.PC_I_LIB_SESSION.getconliid;

  open arefcursor for
    select LOT.FAL_LOT_ID
         , LOT.LOT_REFCOMPL
         , LOT.LOT_SHORT_DESCR
         , RCO.RCO_TITLE
         , FSP.SCH_REF
         , PCS.PC_FUNCTIONS.GETDESCODEDESCR('C_LOT_STATUS', LOT.C_LOT_STATUS, vpc_lang_id) OF_STATUS
         , GCO.GOO_MAJOR_REFERENCE || '/' || GCO.GOO_SECONDARY_REFERENCE ARTICLE
         , LOT.LOT_TOTAL_QTY
         , nvl(LOT.LOT_RELEASED_QTY, 0) + nvl(LOT.LOT_REJECT_RELEASED_QTY, 0) + nvl(LOT.LOT_DISMOUNTED_QTY, 0) QTY_FINISHED
         , LOT.LOT_INPROD_QTY
         , GCO.DIC_UNIT_OF_MEASURE_ID
         , TAL.SCS_STEP_NUMBER
         , TAS.TAS_REF || '/' || TAL.SCS_SHORT_DESCR OP_DESCR
         , TAL.TAL_BEGIN_PLAN_DATE
         , TAL.TAL_END_PLAN_DATE
         , TAL.TAL_DUE_TSK
         , FLP.FLP_SEQ
         , FLP.FLP_DATE1 TRACKING_DATE
         , com_dic_functions.getdicodescr('DIC_OPERATOR', FLP.DIC_OPERATOR_ID, vpc_lang_id) operator
         , FLP.FLP_PRODUCT_QTY
         , FLP.FLP_PT_REJECT_QTY
         , FLP.FLP_CPT_REJECT_QTY
         , FLP.FLP_ADJUSTING_TIME
         , FLP.FLP_WORK_TIME
         , FLP.FLP_AMOUNT
         , FAL_WEIGHT.WEIGHT_MAT
         , PCS.PC_CONFIG.GetConfig('PPS_WORK_UNIT', vpc_comp_id, vpc_conli_id) PPS_WORK_UNIT_CONFIG
         , decode(TAL.SCS_QTY_FIX_ADJUSTING, 0, 0, FAL_TOOLS.RoundSuccInt(LOT.LOT_TOTAL_QTY / TAL.SCS_QTY_FIX_ADJUSTING) * nvl(TAL.SCS_ADJUSTING_TIME, 0) )
                                                                                                                                            SETTING_EXP_OP_TIME
         , (LOT.LOT_TOTAL_QTY / nvl(TAL.SCS_QTY_REF_WORK, 1) ) * nvl(TAL.SCS_WORK_TIME, 0) WORK_EXP_OP_TIME
      from FAL_LOT LOT
         , FAL_TASK_LINK TAL
         , FAL_TASK TAS
         , FAL_LOT_PROGRESS FLP
         , DOC_RECORD RCO
         , FAL_SCHEDULE_PLAN FSP
         , GCO_GOOD GCO
         , (select   FAL_LOT_PROGRESS_ID
                   , sum(FWE_WEIGHT_MAT) WEIGHT_MAT
                from FAL_WEIGH FWE
               where FWE_IN = 0
            group by FAL_LOT_PROGRESS_ID) FAL_WEIGHT
     where LOT.FAL_LOT_ID = TAL.FAL_LOT_ID
       and LOT.GCO_GOOD_ID = GCO.GCO_GOOD_ID
       and TAL.FAL_TASK_ID = TAS.FAL_TASK_ID
       and LOT.FAL_SCHEDULE_PLAN_ID = FSP.FAL_SCHEDULE_PLAN_ID(+)
       and TAL.FAL_SCHEDULE_STEP_ID = FLP.FAL_SCHEDULE_STEP_ID(+)
       and LOT.DOC_RECORD_ID = RCO.DOC_RECORD_ID(+)
       and FLP.FAL_LOT_PROGRESS_ID = FAL_WEIGHT.FAL_LOT_PROGRESS_ID(+)
       and instr(',' || parameter_0 || ',', ',' || LOT.FAL_LOT_ID || ',') > 0
       and (   FLP.FAL_LOT_PROGRESS_ID is null
            or FLP.FLP_REVERSAL = 0);
end RPT_FAL_MAN_TRACKING;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_MPS_8WEEKS_QTY" (
   arefcursor   IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description - Used for report FAL_MPS_8WEEKS_QTY
*@created MZHU 12 Feb 2009
*@lastUpdate
*@public
*@param USER_LANID: user language
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
   firstday1     DATE;               --The first day of current week (week 1)
   firstday2     DATE;                              --The first day of week 1
   firstday3     DATE;                              --The first day of week 1
   firstday4     DATE;                              --The first day of week 1
   firstday5     DATE;                              --The first day of week 1
   firstday6     DATE;                              --The first day of week 1
   firstday7     DATE;                              --The first day of week 1
   firstday8     DATE;                              --The first day of week 1
   firstday9     DATE;                              --The first day of week 1
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   firstday1 := SYSDATE - TO_CHAR (SYSDATE, 'D') + 2;
                                     --get the date of Monday of current week
   firstday2 := firstday1 + 7;
   firstday3 := firstday2 + 7;
   firstday4 := firstday3 + 7;
   firstday5 := firstday4 + 7;
   firstday6 := firstday5 + 7;
   firstday7 := firstday6 + 7;
   firstday8 := firstday7 + 7;
   firstday9 := firstday8 + 7;

   OPEN arefcursor FOR
      SELECT goo.gco_good_id, goo.goo_major_reference,
             goo.goo_number_of_decimal, man.dic_unit_of_measure_id,
             lot.lot_refcompl,
             TO_CHAR (lot.lot_plan_begin_dte, 'IW') begin_dte,
             TO_CHAR (firstday1, 'IW') week1, TO_CHAR (firstday2, 'IW')
                                                                       week2,
             TO_CHAR (firstday3, 'IW') week3, TO_CHAR (firstday4, 'IW')
                                                                       week4,
             TO_CHAR (firstday5, 'IW') week5, TO_CHAR (firstday6, 'IW')
                                                                       week6,
             TO_CHAR (firstday7, 'IW') week7, TO_CHAR (firstday8, 'IW')
                                                                       week8,
             (CASE lot.c_lot_status
                 WHEN '1'
                    THEN lot.lot_total_qty
                 WHEN '2'
                    THEN lot.lot_total_qty
                 WHEN '5'
                    THEN lot.lot_released_qty
                 ELSE 0
              END
             ) qty,
             SYSDATE sys_date, TO_CHAR (SYSDATE, 'YYYYIW') sysweek
        FROM fal_lot lot, gco_good goo, gco_compl_data_manufacture man
       WHERE goo.gco_good_id = lot.gco_good_id
         AND goo.gco_good_id = man.gco_good_id
         AND NVL (man.dic_fab_condition_id, ' ') =
                                           NVL (lot.dic_fab_condition_id, ' ')
         AND lot.lot_plan_begin_dte >= firstday1
         AND lot.lot_plan_begin_dte < firstday9;
END rpt_fal_mps_8weeks_qty;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ORDER_DET_BAT" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2
)
IS
/**
*Description - used for report FAL_ORDER_DETAILED_BATCH
*@created AWU 01 NOV 2008
*@lastUpdate MZH 10 May 2010, CLIU 10 Aug. 2010
*@public
*@param parameter_0: FAL_LOT_ID  -> INSTR necessary when report is called for > 1 fal_lot_id .
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT flo.lot_refcompl
             ,flo.c_lot_status
             ,flo.fal_lot_id
             ,flo.lot_ref
             ,flo.gco_good_id gco_good_id_lot
             ,flo.lot_asked_qty
             ,flo.lot_reject_plan_qty
             ,flo.lot_total_qty
             ,flo.lot_plan_begin_dte
             ,flo.lot_plan_end_dte
             ,flo.lot_plan_lead_time
             ,flo.lot_plan_number
             ,flo.fal_schedule_plan_id
             ,flo.pps_operation_procedure_id
             ,flo.stm_stock_id
             ,flo.stm_location_id
             ,flo.lot_plan_version
             ,flo.lot_pshort_descr -- short description of the product.
             ,flo.lot_ptext        -- long description of the product.
             ,flo.lot_pfree_text   -- free description of the product.
             ,flo.lot_short_descr  -- short description of the BATCH.
             ,flo.lot_long_descr   -- long description of the BATCH.
             ,flo.lot_free_descr   -- free description of the BATCH.
             ,flo.lot_free_num1
             ,flo.lot_free_num2
             ,flo.dic_lot_code2_id
             ,flo.dic_lot_code3_id
             ,flo.doc_record_id
             ,gco.goo_major_reference
             ,gco.dic_unit_of_measure_id
             ,gco.goo_number_of_decimal
             ,pps.gco_good_id gco_good_id_pps
             ,fod.fal_order_id, fod.gco_good_id gco_good_id_ord, fod.ord_ref,
             fod.ord_oshort_descr, fod.ord_released_qty, fod.ord_opened_qty,
             fod.ord_still_to_release_qty, fod.ord_planned_qty,
             fod.ord_end_date, fod.ord_pshort_descr,
             fjp.jop_reference,
             (SELECT COUNT (*)
                FROM fal_lot_material_link fml
               WHERE fml.fal_lot_id = flo.fal_lot_id) mat_record,
             (SELECT COUNT (*)
                FROM fal_task_link ftl
               WHERE ftl.fal_lot_id = flo.fal_lot_id) task_record,
             (SELECT COUNT (*)
                FROM FAL_LOT_DETAIL FAD
               WHERE FAD.FAL_LOT_ID = FLO.FAL_LOT_ID) DETAIL_RECORD
        FROM fal_order fod,
             fal_lot flo,
             fal_job_program fjp,
             gco_good gco,
             pps_nomenclature pps
       WHERE fod.fal_order_id = flo.fal_order_id
         and instr(',' || parameter_0 ||',' , ',' || flo.fal_lot_id ||',') > 0
         and fod.fal_job_program_id = fjp.fal_job_program_id
         and flo.gco_good_id = gco.gco_good_id
         and pps.pps_nomenclature_id (+) = flo.pps_nomenclature_id
         and fod.fal_order_id >= 1;

END rpt_fal_order_det_bat;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ORDER_DET_HIS" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**
*Description Used for report FAL_ORDER_DETAILED_BATCH_HIST

* @created AWU NOV.2008
*@ lastUpdate MZHU 22 Feb 2009
* @public
* @param parameter_0: FAL_HIST_LOT_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT fjp.jop_reference, flo.fal_lot_hist_id fal_lot_id,
             flo.gco_good_id gco_good_id_lot, flo.lot_ref, flo.lot_asked_qty,
             flo.lot_reject_plan_qty, flo.lot_total_qty,
             flo.lot_plan_begin_dte, flo.lot_plan_end_dte,
             flo.lot_plan_lead_time, flo.lot_plan_number,
             flo.fal_schedule_plan_id, flo.stm_location_id,
             flo.pps_operation_procedure_id, flo.stm_stock_id,
             fod.fal_order_hist_id fal_order_hist_id,
             fod.gco_good_id gco_good_id_ord, fod.ord_ref,
             fod.ord_oshort_descr, fod.ord_released_qty, fod.ord_opened_qty,
             fod.ord_still_to_release_qty, fod.ord_planned_qty,
             fod.ord_end_date, fod.ord_pshort_descr,
             (SELECT COUNT (*)
                FROM fal_lot_mat_link_hist fml
               WHERE fml.fal_lot_hist_id = flo.fal_lot_hist_id) mat_record,
             (SELECT COUNT (*)
                FROM fal_task_link_hist ftl
               WHERE ftl.fal_lot_hist_id = flo.fal_lot_hist_id) task_record,
             flo.lot_refcompl
        FROM fal_order_hist fod, fal_lot_hist flo, fal_job_program_hist fjp
       WHERE fod.fal_order_hist_id = flo.fal_order_hist_id(+)
         AND fod.fal_job_program_hist_id = fjp.fal_job_program_hist_id(+)
         AND fod.fal_order_hist_id >= 1
         AND flo.fal_lot_hist_id = parameter_0;
END rpt_fal_order_det_his;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_ORDER_MAT_EX_CUM_BATCH" (
  arefcursor        in out crystal_cursor_types.dualcursortyp
, procuser_lanid    in     pcs.pc_lang.lanid%type
, proccompany_owner in     pcs.pc_scrip.scrdbowner%type
, proccompany_name  in     pcs.pc_comp.com_name%type
, parameter_0       in     varchar2
)
is
/**
*Description
        Used for report FAL_ORDER_MATERIAL_EXIT_CUM_BATCH

*@created SMA 16 SEPT 2014
*@lastUpdate
*@public
*@param parameter_0    FAL_LOT_ID
*@param PROCUSER_LANID : user language
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type   := null;
  vOrderId    FAL_ORDER.FAL_ORDER_ID%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  -- Le rapport ne gère pas des ordres différents
  select max(FAL_ORDER_ID)
    into vOrderId
    from FAL_LOT
   where instr(',' || parameter_0 || ',', ',' || FAL_LOT_ID || ',') > 0;

  open arefcursor for
    select   ORD.FAL_ORDER_ID
           , LOM.LOM_LONG_DESCR
           , LOM.LOM_FREE_DECR
           , LOM.LOM_SHORT_DESCR
           , LOM.LOM_SECONDARY_REF
           , CPT.GOO_MAJOR_REFERENCE
           , LOM.LOM_FULL_REQ_QTY
           , LOM.LOM_CONSUMPTION_QTY
           , LOM.LOM_NEED_QTY
           , CPT.DIC_UNIT_OF_MEASURE_ID
           , LOM.FAL_LOT_MATERIAL_LINK_ID
           , LOM.LOM_SEQ
           , CPT.GOO_NUMBER_OF_DECIMAL
           , LOM.C_KIND_COM
           , LOM.C_TYPE_COM
           , JOP.JOP_REFERENCE
           , ORD.ORD_REF
           , LOT.FAL_LOT_ID
        from FAL_JOB_PROGRAM JOP
           , FAL_ORDER ORD
           , FAL_LOT LOT
           , FAL_LOT_MATERIAL_LINK LOM
           , GCO_GOOD CPT
       where JOP.FAL_JOB_PROGRAM_ID = ORD.FAL_JOB_PROGRAM_ID
         and ORD.FAL_ORDER_ID = LOT.FAL_ORDER_ID
         and LOT.FAL_LOT_ID = LOM.FAL_LOT_ID
         and LOM.GCO_GOOD_ID(+) = CPT.GCO_GOOD_ID
         and LOM.C_KIND_COM(+) = '1'
         and LOM.C_TYPE_COM(+) = '1'
         and ORD.FAL_ORDER_ID = vOrderId
    order by ORD.FAL_ORDER_ID
           , CPT.GOO_MAJOR_REFERENCE;
end RPT_FAL_ORDER_MAT_EX_CUM_BATCH;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_POST_CALC_COMP_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description Used for report FAL_LOT_POST_CALCULATION.RPT

*@created MZHU 12 Feb 2009
*@lastUpdate
*@public
*@param PARAMETER_0 :   FAL_LOT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT lot.fal_lot_id, lot.lot_refcompl, lom.lom_seq,
             lom.lom_secondary_ref, lom.c_kind_com, lom.gco_good_id,
             lom.lom_full_req_qty, lom.lom_rejected_qty,
             lom.lom_exit_receipt, lom.lom_price, lom.lom_increase_cost,
             goo.goo_major_reference, goo.goo_number_of_decimal,
             pdt.pdt_stock_management,
             goo_out.goo_major_reference goo_major_reference_out,
             goo_out.goo_secondary_reference goo_secondary_reference_out,
             pdt_out.pdt_stock_management pdt_stock_management_out,
             OUT.out_qte, OUT.out_price
        FROM fal_job_program jop,
             fal_order ord,
             fal_lot lot,
             fal_lot_material_link lom,
             gco_good goo,
             gco_product pdt,
             fal_factory_out OUT,
             gco_good goo_out,
             gco_product pdt_out
       WHERE jop.fal_job_program_id = ord.fal_job_program_id(+)
         AND ord.fal_order_id = lot.fal_order_id(+)
         AND lot.fal_lot_id = lom.fal_lot_id(+)
         AND lom.gco_good_id = goo.gco_good_id
         AND goo.gco_good_id = pdt.gco_good_id(+)
         AND lom.fal_lot_id = OUT.fal_lot_id(+)
         AND lom.gco_good_id = OUT.gco_good_id(+)
         AND OUT.gco_good_id = goo_out.gco_good_id(+)
         AND goo_out.gco_good_id = pdt_out.gco_good_id(+)
         AND lot.c_lot_status = '5'
         AND lom.lom_increase_cost = 1
         AND lot.lot_refcompl = parameter_0;
END rpt_fal_post_calc_comp_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_POST_CALC_OPE_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR
)
IS
/**
*Description Used for report FAL_LOT_POST_CALCULATION.RPT

*@created MZHU 15 Jan 2008
*@lastUpdate
*@public
*@param parameter_0 :  LOT_REFCOMPL
*/
BEGIN
   OPEN arefcursor FOR
      SELECT faf.faf_total_amount, fac.fac_describe, ff_rate.ffr_rate1,
             ff_rate.ffr_rate2, ff_rate.ffr_rate3, ff_rate.ffr_rate4,
             ff_rate.ffr_rate5, lot.lot_asked_qty, lot.lot_total_qty,
             lot.lot_released_qty, lot.lot_refcompl, tal.tal_due_tsk,
             tal.tal_achieved_tsk, tal.tal_achieved_amt, tal.c_task_type,
             tal.scs_step_number, tal.scs_work_rate, tal.scs_amount,
             tal.scs_qty_ref_amount, tal.scs_short_descr,
             tal.scs_adjusting_time, tal.c_task_imputation,
             tal.scs_qty_fix_adjusting, tal.scs_adjusting_rate,
             tal.tal_achieved_ad_tsk, per.per_name
        FROM fal_lot lot,
             fal_task_link tal,
             pac_supplier_partner sup,
             pac_person per,
             fal_factory_floor fac,
             fal_affect faf,
             (SELECT ftl.fal_schedule_step_id, ffr.fal_factory_floor_id,
                     NVL (ffr.ffr_rate1, 0) ffr_rate1,
                     NVL (ffr.ffr_rate2, 0) ffr_rate2,
                     NVL (ffr.ffr_rate3, 0) ffr_rate3,
                     NVL (ffr.ffr_rate4, 0) ffr_rate4,
                     NVL (ffr.ffr_rate5, 0) ffr_rate5
                FROM fal_factory_rate ffr,
                     fal_factory_floor fff,
                     fal_task_link ftl
               WHERE ftl.fal_lot_id = (SELECT lot2.fal_lot_id
                                         FROM fal_lot lot2
                                        WHERE lot2.lot_refcompl = parameter_0)
                 AND ftl.fal_factory_floor_id = fff.fal_factory_floor_id
                 AND fff.fal_factory_floor_id = ffr.fal_factory_floor_id
                 AND TRUNC (ffr.ffr_validity_date) =
                        (SELECT MAX (TRUNC (ffr2.ffr_validity_date))
                           FROM fal_factory_rate ffr2
                          WHERE TRUNC (ffr2.ffr_validity_date) <=
                                   TRUNC (NVL (ftl.tal_end_real_date,
                                               ftl.tal_end_plan_date
                                              )
                                         )
                            AND ffr2.fal_factory_floor_id =
                                                      ffr.fal_factory_floor_id)) ff_rate
       WHERE lot.fal_lot_id = tal.fal_lot_id
         AND tal.pac_supplier_partner_id = sup.pac_supplier_partner_id(+)
         AND sup.pac_supplier_partner_id = per.pac_person_id(+)
         AND tal.fal_factory_floor_id = fac.fal_factory_floor_id(+)
         AND lot.fal_lot_id = faf.fal_lot_id(+)
         AND tal.fal_schedule_step_id = ff_rate.fal_schedule_step_id(+)
         AND lot.lot_refcompl = parameter_0;
END rpt_fal_post_calc_ope_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_PROG_MAT_EX_CUM_BATCH" (
  arefcursor        in out crystal_cursor_types.dualcursortyp
, procuser_lanid    in     pcs.pc_lang.lanid%type
, proccompany_owner in     pcs.pc_scrip.scrdbowner%type
, proccompany_name  in     pcs.pc_comp.com_name%type
, parameter_0       in     varchar2
)
is
/**
*Description
        Used for report FAL_PROGRAM_MATERIAL_EXIT_CUM_BATCH

*@created SMA 16 SEPT 2014
*@lastUpdate
*@public
*@param parameter_0    FAL_LOT_ID
*@param PROCUSER_LANID : user language
*/
  vpc_lang_id   pcs.pc_lang.pc_lang_id%type   := null;
  vJobProgramId FAL_ORDER.FAL_ORDER_ID%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  -- Le rapport ne gère pas des programmes différents
  select max(FAL_JOB_PROGRAM_ID)
    into vJobProgramId
    from FAL_LOT
   where instr(',' || parameter_0 || ',', ',' || FAL_LOT_ID || ',') > 0;

  open arefcursor for
    select   JOP.FAL_JOB_PROGRAM_ID
           , LOM.LOM_LONG_DESCR
           , LOM.LOM_FREE_DECR
           , LOM.LOM_SHORT_DESCR
           , LOM.LOM_SECONDARY_REF
           , CPT.GOO_MAJOR_REFERENCE
           , LOM.LOM_FULL_REQ_QTY
           , LOM.LOM_CONSUMPTION_QTY
           , LOM.LOM_NEED_QTY
           , CPT.DIC_UNIT_OF_MEASURE_ID
           , LOM.FAL_LOT_MATERIAL_LINK_ID
           , LOM.LOM_SEQ
           , CPT.GOO_NUMBER_OF_DECIMAL
           , LOM.C_KIND_COM
           , LOM.C_TYPE_COM
           , JOP.JOP_REFERENCE
           , ORD.ORD_REF
           , LOT.FAL_LOT_ID
        from FAL_JOB_PROGRAM JOP
           , FAL_ORDER ORD
           , FAL_LOT LOT
           , FAL_LOT_MATERIAL_LINK LOM
           , GCO_GOOD CPT
       where JOP.FAL_JOB_PROGRAM_ID = ORD.FAL_JOB_PROGRAM_ID
         and ORD.FAL_ORDER_ID = LOT.FAL_ORDER_ID
         and LOT.FAL_LOT_ID = LOM.FAL_LOT_ID
         and LOM.GCO_GOOD_ID(+) = CPT.GCO_GOOD_ID
         and LOM.C_KIND_COM(+) = '1'
         and LOM.C_TYPE_COM(+) = '1'
         and JOP.FAL_JOB_PROGRAM_ID = vJobProgramId
    order by ORD.FAL_ORDER_ID
           , CPT.GOO_MAJOR_REFERENCE;
end RPT_FAL_PROG_MAT_EX_CUM_BATCH;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_SUB_PORTFOLIO" (
  arefcursor        in out crystal_cursor_types.dualcursortyp
, procuser_lanid    in     pcs.pc_lang.lanid%type
, proccompany_owner in     pcs.pc_scrip.scrdbowner%type
, proccompany_name  in     pcs.pc_comp.com_name%type
, parameter_0       in     varchar2
)
is
/**
* Description - Used in report FAL_SUB_PORTFOLIO

* Stored procedure used by the report FAL_SUB_PORTFOLIO
* @created VHA 26 JUNE 2013
* Modified
* lastUpdate
* @param parameter_0    Job_id (COM_LIST)
*/
  vpc_lang_id     pcs.pc_lang.pc_lang_id%type := null;
  vcom_logo_large pcs.pc_comp.com_logo_large%type := null;
  vcom_logo_small pcs.pc_comp.com_logo_small%type := null;
  vcom_vatno      pcs.pc_comp.com_vatno%type := null;
  vcom_phone      pcs.pc_comp.com_phone%type := null;
  vcom_fax        pcs.pc_comp.com_fax%type := null;
  vcom_web        pcs.pc_comp.com_telex%type := null;
  vcom_email      pcs.pc_comp.com_email%type := null;
  vcom_descr      pcs.pc_comp.com_descr%type := null;
  vcom_socialname pcs.pc_comp.com_socialname%type := null;
  vcom_ide        pcs.pc_comp.com_ide%type := null;
  vcom_adr        varchar2(4000) := null;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  if  (proccompany_name is not null) then
      select com.com_logo_large
           , com.com_logo_small
           , com.com_vatno
           , com.com_descr
           , com.com_adr || chr(13) || com.com_zip || ' - ' || com.com_city
           , com.com_phone
           , com.com_fax
           , com.com_telex
           , com.com_email
           , com.com_socialname
           , com.com_ide
        into vcom_logo_large
           , vcom_logo_small
           , vcom_vatno
           , vcom_descr
           , vcom_adr
           , vcom_phone
           , vcom_fax
           , vcom_web
           , vcom_email
           , vcom_socialname
           , vcom_ide
        from pcs.pc_comp com
       where com.com_name = proccompany_name;
   end if;

  open arefcursor for
    select FTL.FAL_SCHEDULE_STEP_ID
         , null FAL_TASK_LINK_PROP_ID
         , vcom_phone com_phone
         , vcom_fax com_fax
         , vcom_web com_web
         , vcom_email com_email
         , vcom_socialname com_socialname
         , vcom_logo_large com_logo_large
         , vcom_logo_small com_logo_small
         , vcom_vatno com_vatno
         , vcom_descr com_descr
         , vcom_adr com_adr
         , vcom_ide com_ide
         , PER.PER_NAME
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 0) ADDRESS
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 1) ZIP
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 2) CITY
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 3) STATE
         , LOT.LOT_REFCOMPL
         , FTL.SCS_STEP_NUMBER
         , nvl(FTL.TAL_SUBCONTRACT_SELECT, 0) LID_SELECTION
         , FTL.GCO_GCO_GOOD_ID
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_SECONDARY_REFERENCE
         , GCO_FUNCTIONS.GetDescription2(GOO.GCO_GOOD_ID, vpc_lang_id, 1, '01') DES_SHORT_DESCRIPTION
         , GOO.DIC_UNIT_OF_MEASURE_ID
         , GOO.GOO_NUMBER_OF_DECIMAL
         , FTL.TAL_END_PLAN_DATE
         , FTL.TAL_PCST_DATE
         , FTL.TAL_PCST_NUMBER
         , FTL.TAL_PCST_PRINT_DATE
         , FTL.TAL_CONFIRM_DATE
         , FTL.TAL_CONFIRM_DESCR
         , FTL.PAC_SUPPLIER_PARTNER_ID
         , FTL.TAL_CST_EXIST
         , FTL.TAL_CST_DATE
         , TAS.TAS_REF
         , FTL.SCS_AMOUNT
         , FTL.SCS_QTY_REF_AMOUNT
         , FTL.SCS_DIVISOR_AMOUNT
         , FTL.TAL_PLAN_QTY
         , FTL.TAL_DUE_AMT
         , FTL.TAL_AMT_BALANCE
         , decode(FTL.TAL_AVALAIBLE_QTY, 0, FTL.TAL_DUE_QTY - nvl(FTL.TAL_SUBCONTRACT_QTY, 0), FTL.TAL_AVALAIBLE_QTY) TAL_AVALAIBLE_QTY
         , FTL.TAL_SUBCONTRACT_QTY
         , FTL.TAL_RELEASE_QTY
         , FTL.TAL_DUE_QTY
         , DES1.DES_SHORT_DESCRIPTION PPS_TOOLS1
         , DES2.DES_SHORT_DESCRIPTION PPS_TOOLS2
         , FTL.FAL_LOT_ID
         , LOT.DOC_RECORD_ID
         , LOT.FAL_JOB_PROGRAM_ID
         , LOT.FAL_ORDER_ID
         , GCO_FUNCTIONS.getMajorReference(LOT.GCO_GOOD_ID) LOT_ARTICLE
         , LIS.LIS_JOB_ID
         , LIS.LIS_CODE
         , LIS.LIS_ID_1
      from COM_LIST LIS
         , FAL_TASK_LINK FTL
         , FAL_LOT LOT
         , FAL_TASK TAS
         , FAL_JOB_PROGRAM JOP
         , FAL_ORDER ORD
         , GCO_GOOD GOO
         , PAC_PERSON PER
         , GCO_DESCRIPTION DES1
         , GCO_DESCRIPTION DES2
     where LIS.LIS_ID_1 = FTL.FAL_SCHEDULE_STEP_ID
       and LIS.LIS_CODE = 'PCST_BATCH'
       and LIS.LIS_JOB_ID = to_number(parameter_0)
       and LOT.FAL_LOT_ID = FTL.FAL_LOT_ID
       and TAS.FAL_TASK_ID = FTL.FAL_TASK_ID
       and LOT.FAL_JOB_PROGRAM_ID = JOP.FAL_JOB_PROGRAM_ID
       and LOT.FAL_ORDER_ID = ORD.FAL_ORDER_ID
       and GOO.GCO_GOOD_ID = FTL.GCO_GCO_GOOD_ID
       and PER.PAC_PERSON_ID = FTL.PAC_SUPPLIER_PARTNER_ID
       and FTL.PPS_TOOLS1_ID = DES1.GCO_GOOD_ID(+)
       and FTL.TAL_PCST_NUMBER is not null
       and DES1.PC_LANG_ID(+) = vpc_lang_id
       and DES1.C_DESCRIPTION_TYPE(+) = '01'
       and FTL.PPS_TOOLS2_ID = DES2.GCO_GOOD_ID(+)
       and DES2.PC_LANG_ID(+) = vpc_lang_id
       and DES2.C_DESCRIPTION_TYPE(+) = '01'
    union
    select null FAL_SCHEDULE_STEP_ID
         , FTL.FAL_TASK_LINK_PROP_ID
         , vcom_phone com_phone
         , vcom_fax com_fax
         , vcom_web com_web
         , vcom_email com_email
         , vcom_socialname com_socialname
         , vcom_logo_large com_logo_large
         , vcom_logo_small com_logo_small
         , vcom_vatno com_vatno
         , vcom_descr com_descr
         , vcom_adr com_adr
         , vcom_ide com_ide
         , PER.PER_NAME
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 0) ADDRESS
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 1) ZIP
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 2) CITY
         , rpt_functions.getpacadr(PER.PAC_PERSON_ID, 3) STATE
         , LOT.C_PREFIX_PROP || '-' || LOT.LOT_NUMBER LOT_NUMBER
         , FTL.SCS_STEP_NUMBER
         , nvl(FTL.TAL_SUBCONTRACT_SELECT, 0) LID_SELECTION
         , FTL.GCO_GOOD_ID
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_SECONDARY_REFERENCE
         , GCO_FUNCTIONS.GetDescription2(GOO.GCO_GOOD_ID, vpc_lang_id, 1, '01') DES_SHORT_DESCRIPTION
         , GOO.DIC_UNIT_OF_MEASURE_ID
         , GOO.GOO_NUMBER_OF_DECIMAL
         , FTL.TAL_END_PLAN_DATE
         , FTL.TAL_PCST_DATE
         , FTL.TAL_PCST_NUMBER
         , FTL.TAL_PCST_PRINT_DATE
         , FTL.TAL_CONFIRM_DATE
         , FTL.TAL_CONFIRM_DESCR
         , FTL.PAC_SUPPLIER_PARTNER_ID
         , 0   --FTL.TAL_CST_EXIST
         , null   --FTL.TAL_CST_DATE
         , TAS.TAS_REF
         , FTL.SCS_AMOUNT
         , FTL.SCS_QTY_REF_AMOUNT
         , FTL.SCS_DIVISOR_AMOUNT
         , 0   --FTL.TAL_PLAN_QTY
         , FTL.TAL_DUE_AMT
         , 0   --FTL.TAL_AMT_BALANCE
         , FTL.TAL_DUE_QTY TAL_AVALAIBLE_QTY
         , FTL.TAL_SUBCONTRACT_QTY
         , 0   --FTL.TAL_RELEASE_QTY
         , FTL.TAL_DUE_QTY
         , DES1.DES_SHORT_DESCRIPTION PPS_TOOLS1
         , DES2.DES_SHORT_DESCRIPTION PPS_TOOLS2
         , FTL.FAL_LOT_PROP_ID
         , LOT.DOC_RECORD_ID
         , null
         , null
         , GCO_FUNCTIONS.getMajorReference(LOT.GCO_GOOD_ID) LOT_ARTICLE
         , LIS.LIS_JOB_ID
         , LIS.LIS_CODE
         , LIS.LIS_ID_1
      from COM_LIST LIS
         , FAL_TASK_LINK_PROP FTL
         , FAL_LOT_PROP LOT
         , FAL_TASK TAS
         , GCO_GOOD GOO
         , PAC_PERSON PER
         , GCO_DESCRIPTION DES1
         , GCO_DESCRIPTION DES2
     where LIS.LIS_ID_1 = FTL.FAL_TASK_LINK_PROP_ID
       and LIS.LIS_CODE = 'PCST_PROP'
       and LIS.LIS_JOB_ID = to_number(parameter_0)
       and LOT.FAL_LOT_PROP_ID = FTL.FAL_LOT_PROP_ID
       and TAS.FAL_TASK_ID = FTL.FAL_TASK_ID
       and GOO.GCO_GOOD_ID = FTL.GCO_GOOD_ID
       and PER.PAC_PERSON_ID = FTL.PAC_SUPPLIER_PARTNER_ID
       and FTL.PPS_TOOLS1_ID = DES1.GCO_GOOD_ID(+)
       and FTL.TAL_PCST_NUMBER is not null
       and DES1.PC_LANG_ID(+) = vpc_lang_id
       and DES1.C_DESCRIPTION_TYPE(+) = '01'
       and FTL.PPS_TOOLS2_ID = DES2.GCO_GOOD_ID(+)
       and DES2.PC_LANG_ID(+) = vpc_lang_id
       and DES2.C_DESCRIPTION_TYPE(+) = '01';
end RPT_FAL_SUB_PORTFOLIO;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_SUPP_PROP" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   user_lanid    IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description Used for report FAL_SUPP_PROP, FAL_SUPP_PROP_BATCH This one is used only since SP6

*@created CLIU 20 Mar 2010
*@lastUpdate
*@Published VHA 20 Sept 2011
*@public
*@param USER_LANID  : user language
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
   vno_accountable_group   VARCHAR2 (4000 CHAR);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (user_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   vno_accountable_group :=
      pcs.pc_functions.translateword2 ('Pas de groupe responsable',
                                       vpc_lang_id
                                      );

   OPEN arefcursor FOR
        SELECT GD.C_DESCRIPTION_TYPE, nvl(goo.dic_accountable_group_id,vno_ACCOUNTABLE_GROUP) DIC_ACCOUNTABLE_GROUP_ID,
        PER.PER_KEY1, GOO.GOO_MAJOR_REFERENCE,
        FDP.FDP_FINAL_QTY, PER.PER_NAME,
        PER.PER_FORENAME, PER.PER_ACTIVITY,
        GD.DES_SHORT_DESCRIPTION, GD.DES_LONG_DESCRIPTION,
        GD.DES_FREE_DESCRIPTION, FNS.FAN_BEG_PLAN,
        FNS.FAN_END_PLAN, FDP.GCO_GOOD_ID, FDP.PAC_SUPPLIER_PARTNER_ID,
        CDA.DIC_UNIT_OF_MEASURE_ID, FNN.FAN_BALANCE_QTY, FNN.FAN_BEG_PLAN FNN_BEG_PLAN,
        FNN.FAN_END_PLAN FNN_END_PLAN, FNS.FAN_DESCRIPTION FNS_DESCRIPTION, GOO.DIC_UNIT_OF_MEASURE_ID,
        FSR.FSR_TEXTE, FSR.FSR_NUMBER, PAC.DIC_TARIFF_ID,
        FDP.FDP_BASIS_QTY, FDP.FDP_INTERMEDIATE_QTY, FNL.FLN_QTY,
        FNL.FLN_NEED_DELAY, FSR.FSR_DELAY, FSR.FSR_TOTAL_QTY,
        FDP.FAL_DOC_PROP_ID, GOO.GOO_NUMBER_OF_DECIMAL, FNL.FAL_NETWORK_NEED_ID,
        FDP.FAL_SUPPLY_REQUEST_ID, STO.STO_DESCRIPTION, FNN.FAL_LOT_ID, FNN.FAN_DESCRIPTION,LOT.LOT_REFCOMPL,
        GCO_FUNCTIONS.GetCostPriceWithManagementMode(GOO.GCO_GOOD_ID) COST_PRICE
        FROM FAL_DOC_PROP FDP,
        FAL_NETWORK_SUPPLY FNS,
        PAC_SUPPLIER_PARTNER PAC,
        PAC_PERSON PER,
        GCO_GOOD GOO,
        FAL_SUPPLY_REQUEST FSR,
        FAL_NETWORK_LINK FNL,
        FAL_NETWORK_NEED FNN,
        GCO_COMPL_DATA_PURCHASE CDA,
        GCO_DESCRIPTION GD,
        STM_LOCATION LOC,
        STM_STOCK STO,
        FAL_LOT LOT
        WHERE GOO.GCO_GOOD_ID = FDP.GCO_GOOD_ID
        AND GD.PC_LANG_ID = vpc_lang_id
        AND GD.GCO_GOOD_ID = GOO.GCO_GOOD_ID
        AND GD.C_DESCRIPTION_TYPE='01'
        AND CDA.GCO_GOOD_ID = FDP.GCO_GOOD_ID
        AND FDP.PAC_SUPPLIER_PARTNER_ID=CDA.PAC_SUPPLIER_PARTNER_ID
        AND FDP.FAL_DOC_PROP_ID >= 0
        AND FDP.FAL_DOC_PROP_ID=FNS.FAL_DOC_PROP_ID (+)
        AND FNL.FAL_NETWORK_SUPPLY_ID(+) = FNS.FAL_NETWORK_SUPPLY_ID
        AND FNL.FAL_NETWORK_NEED_ID = FNN.FAL_NETWORK_NEED_ID(+)
        AND LOC.STM_LOCATION_ID(+) = FNL.STM_LOCATION_ID
        AND STO.STM_STOCK_ID(+) = LOC.STM_STOCK_ID
        AND FDP.FAL_SUPPLY_REQUEST_ID = FSR.FAL_SUPPLY_REQUEST_ID(+)
        AND FDP.PAC_SUPPLIER_PARTNER_ID=PAC.PAC_SUPPLIER_PARTNER_ID
        AND PAC.PAC_SUPPLIER_PARTNER_ID=PER.PAC_PERSON_ID
        AND LOT.FAL_LOT_ID(+) = FNN.FAL_LOT_ID;
END RPT_FAL_SUPP_PROP;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_TEPS" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description - Used reports FAL_TEPS_BY_MONTH, FAL_TEPS_BY_YEAR
* @created EQI 01 Jun 2008
* @lastUpdate VHA 20 April 2012
* @public
* @param parameter_0  :  Product from
* @param parameter_1  :  Product to
* @param parameter_6  :   Stock Selection
* @param parameter_7  :   Prop Plan Dir
* @param parameter_8  :   Needs Calculation Prop
*/
   vpc_lang_id               pcs.pc_lang.pc_lang_id%TYPE;
   goo_major_reference_min   VARCHAR2 (30 CHAR);
   goo_major_reference_max   VARCHAR2 (30 CHAR);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   IF parameter_0 = '*'
   THEN
      goo_major_reference_min := '(';
   ELSE
      goo_major_reference_min := parameter_0;
   END IF;

   IF parameter_1 = '*'
   THEN
      goo_major_reference_max := '}';
   ELSE
      goo_major_reference_max := parameter_1;
   END IF;

   OPEN arefcursor FOR
      SELECT '3. NEED' typ, goo.goo_major_reference, fnn.fan_description,
             flo.c_lot_status, per.per_short_name, sto.sto_description,
             fnn.fan_balance_qty * (-1) fan_balance_qty,
             TO_NUMBER (SUBSTR (TO_CHAR (fnn.fan_beg_plan, 'dd.MM.yyyy'), 7,
                                4)
                       ) annee,
             TO_NUMBER (SUBSTR (TO_CHAR (fnn.fan_beg_plan, 'dd.MM.yyyy'), 4,
                                2)
                       ) mois,
             TO_NUMBER
                (SUBSTR (doc_delay_functions.datetoweek (fnn.fan_beg_plan),
                         6,
                         2
                        )
                ) semaine,
             fnn.c_gauge_title, fnn.doc_position_detail_id, fnn.fal_lot_id,
             fnn.fal_doc_prop_id, fnn.fal_lot_prop_id, sto.stm_stock_id,
             '' stm_stm_location, fnn.fal_pic_line_id,
             DECODE
                (fnn.fal_pic_line_id,
                 NULL, '',
                 DECODE
                     (pcs.pc_config.getconfig ('FAL_PIC_WEEK_MONTH'),
                      1,  goo2.goo_major_reference
                       || ' - '
                       || TO_CHAR (fpl.pil_date, 'DD.MM.YYYY'),
                         goo2.goo_major_reference
                      || ' - '
                      || TRANSLATE
                                (doc_delay_functions.datetoweek (fpl.pil_date),
                                 '.',
                                 '/'
                                )
                     )
                ) fal_pic_line_descr,
             (SELECT com.cst_quantity_min
                FROM gco_compl_data_stock com
               WHERE sto.stm_stock_id = com.stm_stock_id(+)
                 AND goo.gco_good_id = com.gco_good_id(+)) cst_quantity_min,
             pcs.pc_config.getconfig
                                   ('DOC_DELAY_WEEKSTART')
                                                          doc_delay_weekstart
        FROM pac_person per,
             gco_good_category cat,
             gco_good goo,
             fal_lot flo,
             stm_stock sto,
             stm_location loc,
             fal_network_need fnn,
             fal_pic_line fpl,
             gco_good goo2                                                 --,
      WHERE  fnn.gco_good_id = goo.gco_good_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND fnn.pac_third_id = per.pac_person_id(+)
         AND fnn.stm_stock_id = sto.stm_stock_id
         AND fnn.stm_location_id = loc.stm_location_id
         AND fnn.fal_lot_id = flo.fal_lot_id(+)
         AND fnn.fal_pic_line_id = fpl.fal_pic_line_id(+)
         AND fpl.gco_good_id = goo2.gco_good_id(+)
         AND fnn.fan_beg_plan IS NOT NULL
         AND goo.goo_major_reference >= goo_major_reference_min
         AND goo.goo_major_reference <= goo_major_reference_max
         AND (
                   (instr( ';' || parameter_6  ||';' ,  ';' || sto.stm_stock_id ||';' ) > 0)
                OR (parameter_6 = '*')
             )
         AND ((   parameter_6 = '*'
               OR DECODE (fnn.fal_lot_id,
                          NULL, DECODE (doc_position_detail_id,
                                        NULL, DECODE (fpl.fal_pic_line_id,
                                                      NULL, 0,
                                                      1
                                                     ),
                                        1
                                       ),
                          1
                         ) = 1
               OR (    parameter_7 = 1
                   AND DECODE (c_gauge_title,
                               '14', DECODE (fal_doc_prop_id,
                                             NULL, DECODE (fal_lot_prop_id,
                                                           NULL, 0,
                                                           1
                                                          ),
                                             1
                                            ),
                               0
                              ) = 1
                  )
               OR (    parameter_8 = 1
                   AND DECODE (c_gauge_title,
                               '14', 0,
                               DECODE (fal_doc_prop_id,
                                       NULL, DECODE (fal_lot_prop_id,
                                                     NULL, 0,
                                                     1
                                                    ),
                                       1
                                      )
                              ) = 1
                  )
              )
             )
      UNION ALL
      SELECT '2. SUPPLY' typ, goo.goo_major_reference, fns.fan_description,
             flo.c_lot_status, per.per_short_name, sto.sto_description,
             fns.fan_balance_qty,
             TO_NUMBER (SUBSTR (TO_CHAR (fns.fan_end_plan, 'dd.MM.yyyy'), 7,
                                4)
                       ) annee,
             TO_NUMBER (SUBSTR (TO_CHAR (fns.fan_end_plan, 'dd.MM.yyyy'), 4,
                                2)
                       ) mois,
             TO_NUMBER
                (SUBSTR (doc_delay_functions.datetoweek (fns.fan_end_plan),
                         6,
                         2
                        )
                ) semaine,
             fns.c_gauge_title, fns.doc_position_detail_id, fns.fal_lot_id,
             fns.fal_doc_prop_id, fns.fal_lot_prop_id, sto.stm_stock_id,
             '' stm_stm_location, fns.fal_pic_line_id,
             DECODE
                (fns.fal_pic_line_id,
                 NULL, '',
                 DECODE
                     (pcs.pc_config.getconfig ('FAL_PIC_WEEK_MONTH'),
                      1,  goo2.goo_major_reference
                       || ' - '
                       || TO_CHAR (fpl.pil_date, 'DD.MM.YYYY'),
                         goo2.goo_major_reference
                      || ' - '
                      || TRANSLATE
                                (doc_delay_functions.datetoweek (fpl.pil_date),
                                 '.',
                                 '/'
                                )
                     )
                ) fal_pic_line_descr,
             (SELECT com.cst_quantity_min
                FROM gco_compl_data_stock com
               WHERE sto.stm_stock_id = com.stm_stock_id(+)
                 AND goo.gco_good_id = com.gco_good_id(+)) cst_quantity_min,
             pcs.pc_config.getconfig
                                   ('DOC_DELAY_WEEKSTART')
                                                          doc_delay_weekstart
        FROM pac_person per,
             gco_good_category cat,
             gco_good goo,
             stm_stock sto,
             stm_location loc,
             fal_lot flo,
             fal_network_supply fns,
             fal_pic_line fpl,
             gco_good goo2
       WHERE fns.gco_good_id = goo.gco_good_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND fns.pac_third_id = per.pac_person_id(+)
         AND fns.stm_stock_id = sto.stm_stock_id
         AND fns.stm_location_id = loc.stm_location_id
         AND fns.fal_lot_id = flo.fal_lot_id(+)
         AND fns.fal_pic_line_id = fpl.fal_pic_line_id(+)
         AND fpl.gco_good_id = goo2.gco_good_id(+)
         AND fns.fan_beg_plan IS NOT NULL
         AND goo.goo_major_reference >= goo_major_reference_min
         AND goo.goo_major_reference <= goo_major_reference_max
         AND (
                   (instr( ';' || parameter_6  ||';' ,  ';' || sto.stm_stock_id ||';' ) > 0)
                OR (parameter_6 = '*')
             )
         AND ((   parameter_6 = '*'
               OR DECODE (flo.fal_lot_id,
                          NULL, DECODE (doc_position_detail_id,
                                        NULL, DECODE (fpl.fal_pic_line_id,
                                                      NULL, 0,
                                                      1
                                                     ),
                                        1
                                       ),
                          1
                         ) = 1
               OR (    parameter_7 = 1
                   AND DECODE (c_gauge_title,
                               '14', DECODE (fal_doc_prop_id,
                                             NULL, DECODE (fal_lot_prop_id,
                                                           NULL, 0,
                                                           1
                                                          ),
                                             1
                                            ),
                               0
                              ) = 1
                  )
               OR (    parameter_8 = 1
                   AND DECODE (c_gauge_title,
                               '14', 0,
                               DECODE (fal_doc_prop_id,
                                       NULL, DECODE (fal_lot_prop_id,
                                                     NULL, 0,
                                                     1
                                                    ),
                                       1
                                      )
                              ) = 1
                  )
              )
             )
      UNION ALL
      (SELECT   '1. STOCK' typ, goo.goo_major_reference, '', '', '',
                sto.sto_description,
                SUM (ssp.spo_theoretical_quantity) fan_balance_qty,
                TO_NUMBER (NULL), TO_NUMBER (NULL), TO_NUMBER (NULL), '',
                TO_NUMBER (NULL), TO_NUMBER (NULL), TO_NUMBER (NULL),
                TO_NUMBER (NULL), sto.stm_stock_id, empl.loc_description,
                TO_NUMBER (NULL), '',
                TO_NUMBER (NULL),
                pcs.pc_config.getconfig
                                   ('DOC_DELAY_WEEKSTART')
                                                          doc_delay_weekstart
           FROM stm_stock sto,
                stm_location loc,
                stm_location empl,
                gco_good_category cat,
                gco_good goo,
                stm_stock_position ssp
          WHERE goo.gco_good_category_id = cat.gco_good_category_id
            AND ssp.stm_stock_id = sto.stm_stock_id
            AND ssp.stm_location_id = loc.stm_location_id
            AND ssp.gco_good_id = goo.gco_good_id
            AND loc.stm_location_id = empl.stm_location_id(+)
            AND goo.goo_major_reference >= goo_major_reference_min
            AND goo.goo_major_reference <= goo_major_reference_max
            AND (((   parameter_6 = '*'
                   OR (instr( ';' || parameter_6  ||';' ,  ';' || sto.stm_stock_id ||';' ) > 0 )
                  )
                 )
                )
       GROUP BY goo.goo_major_reference,
                goo.gco_good_id,
                sto.sto_description,
                sto.stm_stock_id,
                empl.loc_description,
                pcs.pc_config.getconfig ('DOC_DELAY_WEEKSTART')
       UNION ALL
       SELECT   '1. STOCK' typ, goo.goo_major_reference, '', '', '',
                sto.sto_description,
                TO_NUMBER (NULL),
                TO_NUMBER (NULL), TO_NUMBER (NULL), TO_NUMBER (NULL), '',
                TO_NUMBER (NULL), TO_NUMBER (NULL), TO_NUMBER (NULL),
                TO_NUMBER (NULL), sto.stm_stock_id, loc.loc_description,
                TO_NUMBER (NULL), '',
                com.cst_quantity_min,
                pcs.pc_config.getconfig
                                   ('DOC_DELAY_WEEKSTART')
                                                          doc_delay_weekstart
           FROM gco_compl_data_stock com,
                gco_good goo,
                stm_stock sto,
                stm_location loc
          WHERE  com.gco_good_id = goo.gco_good_id
          AND com.stm_stock_id = sto.stm_stock_id(+)
            AND com.stm_location_id = loc.stm_location_id(+)
            AND com.cst_quantity_min IS NOT NULL
            AND goo.goo_major_reference >= goo_major_reference_min
            AND goo.goo_major_reference <= goo_major_reference_max
            AND (parameter_6 = '*'
                   OR (instr( ';' || parameter_6  ||';' ,  ';' || sto.stm_stock_id ||';' ) > 0 )
                )
      );
END rpt_fal_teps;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Procuser_Lanid: User Language
*/
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);

  open arefcursor for
    select   goo.goo_major_reference
           , gco_functions.getdescription(goo.gco_good_id, procuser_lanid, 2, '01') gco_short_description
           , cao.cao_calculation_structure
           , vals.*
           , rubr.*
           , ars.dic_fal_rate_descr_id
           , ars.c_basis_rubric
           , ars.c_rubric_type
           , com_functions.getdescodedescr('C_BASIS_RUBRIC', ars.c_basis_rubric, pcs.PC_I_LIB_SESSION.user_lang_id) c_basis_rubric_wording
           , com_functions.getdescodedescr('C_RUBRIC_TYPE', ars.c_rubric_type, pcs.PC_I_LIB_SESSION.user_lang_id) c_rubric_type_wording
        from fal_adv_calc_options cao
           , (select cag.fal_adv_calc_options_id
                   , cag.gco_good_id
                   , cag.gco_cpt_good_id
                   , nvl(cag.gco_cpt_good_id, cag.gco_good_id) gco_descr_good_id
                   , cav.cav_rubric_seq
                   , cav.cav_value
                   , cav.cav_unit_price
                   , cav.cav_std_unit_price
                from fal_adv_calc_good cag
                   , fal_adv_calc_struct_val cav
               where cag.cag_session_id = procparam_0
                 and cav.cav_session_id = procparam_0
                 and cav.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                 and cag.gco_cpt_good_id is null) vals
           , fal_adv_rate_struct ars
           , table(fal_adv_calc_print.fal_adv_calc_struct_table(procparam_0) ) rubr
           , gco_good goo
           , fal_lot lot
       where cao.cao_session_id = procparam_0
         and ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
         and ars.fal_adv_rate_struct_id = rubr.fal_adv_rate_struct_id
         and vals.cav_rubric_seq = ars.ars_sequence
         and vals.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
         and goo.gco_good_id = vals.gco_descr_good_id
         and lot.fal_lot_id(+) = cao.fal_lot_id
    order by goo.goo_major_reference
           , cao.fal_adv_calc_options_id
           , vals.gco_good_id
           , rubr.ars_order;
end RPT_FAL_WIPCALC;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_CPTS_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
)
is
/**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
*/
begin
  fal_adv_calc_print.adv_calc_cpts_rpt_pk(arefcursor => arefcursor, asessionid => procparam_0, aoptionsid => procparam_1, acalcgoodid => procparam_2);
end RPT_FAL_WIPCALC_CPTS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_CPTS_TAS_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procparam_1    in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2    in     fal_adv_calc_good.gco_good_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
 /**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param procparam_0: Session Id
* @Param procparam_1: Option Id
* @Param procparam_2: Good Id
*/
begin
  open arefcursor for
    select   cag.goo_major_reference
           , cag.cag_level
           , cag.cag_nom_coef
           , cag.cag_quantity
           , cag.cag_mat_total
           , cag.cag_mat_section
           , cag.cag_mat_amount
           , cag.cag_mat_rate
           , cag.cag_mat_rate_amount
           , cak.cak_task_seq
           , cak.cak_task_ref
           , cak.cak_task_descr
           , cak.cak_time_section
           , cak.cak_adjusting_time
           , cak.cak_work_time
           , cak.cak_machine_cost
           , cak.cak_human_cost
           , gco_functions.getdescription(cag.gco_cpt_good_id, procuser_lanid, 1, '01') goo_short_description
        from fal_adv_calc_good cag
           , fal_adv_calc_options cao
           , gco_good goo
           , fal_adv_calc_task cak
       where cag.cag_session_id = procparam_0
         and cag.fal_adv_calc_options_id = procparam_1
         and cag.gco_good_id = procparam_2
         and cao.fal_adv_calc_options_id = cag.fal_adv_calc_options_id
         and goo.gco_good_id = cag.gco_cpt_good_id
         and cak.cak_session_id(+) = procparam_0
         and cak.fal_adv_calc_good_id(+) = cag.fal_adv_calc_good_id
    order by cag.fal_adv_calc_good_id
           , cak.cak_task_seq
           , cak.fal_adv_calc_task_id;
end RPT_FAL_WIPCALC_CPTS_TAS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_OPTI_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
)
is
 /**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @last update
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
*/
begin
  fal_adv_calc_print.adv_calc_options_rpt_pk(arefcursor => arefcursor, asessionid => procparam_0);
end RPT_FAL_WIPCALC_OPTI_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_SIMPLE" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procparam_0    in     fal_adv_calc_options.cao_session_id%type
, procuser_lanid in     pcs.pc_lang.lanid%type
)
is
/**
* Description - Used in report FAL_WORKINPROGRESS_SIMPLE_CALCULATION

* Stored procedure used for the simple advanced Calculate WIP report
* @Author VHA 10 Sept. 2012
* @lastupdate
* @param aRefCursor     : Curseur pour le rapport Crystal
* @param PROCPARAM_0    : Session Oracle
* @param PROCUSER_LANID : Langue utilisateur pour initialisation de la session
*/
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);

  open arefcursor for
    select   goo.goo_major_reference
           , gco_functions.getdescription(goo.gco_good_id, procuser_lanid, 2, '01') goo_description
           , goo_cpt.goo_major_reference goo_cpt_major_reference
           , gco_functions.getdescription(goo_cpt.gco_good_id, procuser_lanid, 1, '01') goo_cpt_description
           , cao.cao_calculation_structure
           , cav.cav_rubric_seq
           , case
               when rubr_cag.cag_level = 0 then cav.cav_value
               else nvl(cav.cav_value, 0)
             end cav_value
           , ars.dic_fal_rate_descr_id
           , rubr_cag.*
           , (select count(fal_adv_calc_task_id)
                from fal_adv_calc_task cak
                   , fal_adv_calc_good cag
               where cak.cak_session_id = procparam_0
                 and cag.cag_session_id = procparam_0
                 and cak.fal_adv_calc_good_id = cag.fal_adv_calc_good_id
                 and cag.gco_good_id = rubr_cag.gco_good_id
                 and cag.gco_cpt_good_id = rubr_cag.gco_good_id) task_count
           , zvl(case
                   when rubr_cag.cag_level = 0 then (select sum(sub_caw.caw_work_amount)
                                                       from fal_adv_calc_work sub_caw
                                                      where sub_caw.fal_adv_calc_good_id = rubr_cag.fal_adv_calc_good_id
                                                        and sub_caw.caw_decomposition_level = 0)
                   else nvl( (select sum(sub_caw.caw_work_amount)
                                from fal_adv_calc_work sub_caw
                               where sub_caw.fal_adv_calc_good_id = rubr_cag.fal_adv_calc_good_id
                                 and sub_caw.caw_decomposition_level = 0), 0)
                 end
               , null
                ) caw_work_amount
        from fal_adv_calc_options cao
           , fal_adv_rate_struct ars
           , (select   ars.fal_adv_rate_struct_id
                     , ars.fal_adv_struct_calc_id
                     , ars.ars_sequence
                     , cag.fal_adv_calc_options_id
                     , cag.fal_adv_calc_good_id
                     , cag.gco_good_id
                     , cag.gco_cpt_good_id
                     , nvl(cag.gco_cpt_good_id, cag.gco_good_id) gco_descr_good_id
                     , cag.cag_level
                     , cag.cag_nom_coef
                     , cag.cag_quantity
                     , case
                         when cag.cag_level = 0 then cag.cag_mat_amount
                         else nvl(cag.cag_mat_amount, 0)
                       end cag_mat_amount
                  from fal_adv_rate_struct ars
                     , fal_adv_calc_good cag
                 where ars.ars_visible_level = 1
                   and ars.fal_adv_struct_calc_id in(select fal_adv_struct_calc_id
                                                       from fal_adv_calc_options
                                                      where cao_session_id = procparam_0)
                   and (   ars.fal_adv_rate_struct_id not in(select distinct fal_fal_adv_rate_struct_id
                                                                        from fal_adv_total_rate)
                        or ars.ars_prf_level = 1)
                   and cag.cag_session_id = procparam_0
              order by ars.fal_adv_struct_calc_id
                     , ars.ars_sequence) rubr_cag
           , fal_adv_calc_struct_val cav
           , gco_good goo
           , gco_good goo_cpt
           , fal_lot lot
       where cao.cao_session_id = procparam_0
         and cav.cav_session_id(+) = procparam_0
         and ars.fal_adv_struct_calc_id = cao.fal_adv_struct_calc_id
         and ars.fal_adv_rate_struct_id = rubr_cag.fal_adv_rate_struct_id
         and rubr_cag.fal_adv_calc_options_id = cao.fal_adv_calc_options_id
         and rubr_cag.gco_cpt_good_id is not null
         and goo.gco_good_id = rubr_cag.gco_good_id
         and goo_cpt.gco_good_id = rubr_cag.gco_descr_good_id
         and lot.fal_lot_id(+) = cao.fal_lot_id
         and cav.fal_adv_calc_good_id(+) = rubr_cag.fal_adv_calc_good_id
         and cav.cav_rubric_seq(+) = rubr_cag.ars_sequence
    order by goo.goo_major_reference
           , cao.fal_adv_calc_options_id
           , ars.ars_sequence desc
           , rubr_cag.fal_adv_calc_good_id
           , rubr_cag.gco_good_id;
end RPT_FAL_WIPCALC_SIMPLE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_SUBCT_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
)
is
 /**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
*/
begin
  fal_adv_calc_print.adv_calc_work_rpt_pk(arefcursor     => arefcursor
                                        , asessionid     => procparam_0
                                        , aoptionsid     => procparam_1
                                        , acalcgoodid    => procparam_2
                                        , acptgoodid     => procparam_3
                                        , abasisrubric   => fal_adv_calc_print.csubcontractbasisrubric
                                         );
end RPT_FAL_WIPCALC_SUBCT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_TASKS_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
)
is
/**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @lastupdate
* @param aRefCursor  : Curseur pour le rapport Crystal
* @param PROCPARAM_0 : Session Oracle
* @param PROCPARAM_1 : Identifiant des options
* @param PROCPARAM_2 : Produit calculé
* @param PROCPARAM_3 : Composant
*/
begin
  fal_adv_calc_print.adv_calc_tasks_rpt_pk(arefcursor    => arefcursor
                                         , asessionid    => procparam_0
                                         , aoptionsid    => procparam_1
                                         , acalcgoodid   => procparam_2
                                         , acptgoodid    => procparam_3
                                          );
end RPT_FAL_WIPCALC_TASKS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAL_WIPCALC_WORK_SUB" (
  arefcursor  in out crystal_cursor_types.dualcursortyp
, procparam_0 in     fal_adv_calc_options.cao_session_id%type
, procparam_1 in     fal_adv_calc_options.fal_adv_calc_options_id%type
, procparam_2 in     fal_adv_calc_good.gco_good_id%type
, procparam_3 in     fal_adv_calc_good.gco_cpt_good_id%type default null
, procparam_4 in     fal_adv_calc_work.c_basis_rubric%type
)
is
 /**
* Description Used for report FAL_WORKINPROGRESS_CALCULATION
* Stored procedure used for the advanced Calculate WIP report
* @Author VHA 22 Aug. 2012
* @Lastupdate
* @Version
* @Public
* @Param Parameter_0: Session Id
* @Param Parameter_1: Option Id
* @Param Parameter_2: Good Id
* @Param Parameter_4: Cpt Good Id
* @Param Parameter_5: C_basis_rubric
*/
begin
  fal_adv_calc_print.adv_calc_work_rpt_pk(arefcursor     => arefcursor
                                        , asessionid     => procparam_0
                                        , aoptionsid     => procparam_1
                                        , acalcgoodid    => procparam_2
                                        , acptgoodid     => procparam_3
                                        , abasisrubric   => procparam_4
                                         );
end RPT_FAL_WIPCALC_WORK_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_ACCOUNTING_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       VARCHAR2
)
IS
/*
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 27 FEB 2008
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: Fixed assets number
* @PARAM PROCUSER_LANID: User language
*/
   vpc_lang_id   NUMBER (12);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT fix.fam_fixed_assets_id, fix.dic_use_unit_id,
             com_dic_functions.getdicodescr
                                      ('DIC_USE_UNIT',
                                       fix.dic_use_unit_id,
                                       vpc_lang_id
                                      ) dic_use_unit_desc,
             fix.fix_number, fix.fix_state_date, fix.fix_purchase_date,
             fix.fix_working_date, fix.fix_unit_quantity,
             fix.fix_man_accounting_allowed, fix.acs_division_account_id,
             acc1.acc_number acc_number_div,
             des1.des_description_summary des_description_summary_div,
             fix.acs_cda_account_id, acc2.acc_number acc_number_cda,
             des2.des_description_summary des_description_summary_cda,
             fix.acs_pf_account_id, acc3.acc_number acc_number_pf,
             des3.des_description_summary des_description_summary_pf,
             fix.acs_pj_account_id, acc4.acc_number acc_number_pj,
             des4.des_description_summary des_description_summary_pj,
             fix.pac_person_id, per.per_name, fix.hrm_person_id,
             hpe.per_fullname, fix.doc_record_id, dre.rco_title,
             dre.rco_description,
             (SELECT MAX (fdo.fdo_ext_number)
                FROM fam_imputation fim, fam_document fdo
               WHERE fim.fam_fixed_assets_id =
                                       fix.fam_fixed_assets_id
                 AND fim.fam_document_id = fdo.fam_document_id)
                                                              fdo_ext_number,
             gco.goo_major_reference
        FROM doc_record dre,
             hrm_person hpe,
             pac_person per,
             acs_account acc1,
             acs_account acc2,
             acs_account acc3,
             acs_account acc4,
             acs_description des1,
             acs_description des2,
             acs_description des3,
             acs_description des4,
             fam_fixed_assets fix,
             gco_good gco
       WHERE fix.acs_division_account_id = acc1.acs_account_id(+)
         AND fix.acs_cda_account_id = acc2.acs_account_id(+)
         AND fix.acs_pf_account_id = acc3.acs_account_id(+)
         AND fix.acs_pj_account_id = acc4.acs_account_id(+)
         AND acc1.acs_account_id = des1.acs_account_id(+)
         AND des1.pc_lang_id(+) = vpc_lang_id
         AND acc2.acs_account_id = des2.acs_account_id(+)
         AND des2.pc_lang_id(+) = vpc_lang_id
         AND acc3.acs_account_id = des3.acs_account_id(+)
         AND des3.pc_lang_id(+) = vpc_lang_id
         AND acc4.acs_account_id = des4.acs_account_id(+)
         AND des4.pc_lang_id(+) = vpc_lang_id
         AND fix.pac_person_id = per.pac_person_id(+)
         AND fix.hrm_person_id = hpe.hrm_person_id(+)
         AND fix.doc_record_id = dre.doc_record_id(+)
         AND fix.gco_good_id = gco.gco_good_id(+)
         AND fix.fix_number = parameter_0;
END rpt_fam_accounting_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_ADDITION_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       VARCHAR2
)
IS
/*
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 27 FEB 2008
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: Fixed assets number
* @PARAM PROCUSER_LANID: User language
*/
   vpc_lang_id   NUMBER (12);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT fix.fam_fixed_assets_id, fix.fix_number, fix.fix_year,
             fix.fix_model, fix.fix_serial_number, fix.fix_warrant_duration,
             fix.fix_warrant_end, fix.fix_landowner_number,
             fix.fix_land_registry_number, fix.fix_surface, fix.fix_volume,
             fix.dic_liability_id,
             com_dic_functions.getdicodescr
                                    ('DIC_LIABILITY',
                                     fix.dic_liability_id,
                                     vpc_lang_id
                                    ) dic_liability_desc,
             fix.dic_location_id,
             com_dic_functions.getdicodescr
                                      ('DIC_LOCATION',
                                       fix.dic_location_id,
                                       vpc_lang_id
                                      ) dic_location_desc,
             fix.dic_state_id,
             com_dic_functions.getdicodescr ('DIC_STATE',
                                             fix.dic_state_id,
                                             vpc_lang_id
                                            ) dic_state_desc,
             fix.fix_state_date
        FROM fam_fixed_assets fix
       WHERE fix.fix_number = parameter_0;
END rpt_fam_addition_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_ADDRESS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2,
   procuser_lanid   IN       VARCHAR2
)
IS
/**
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 29 DEC  2008
* @LASTUPDATE 24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: FAM_FIXED_ASSETS_ID
* @PARAM PROCUSER_LANID: User language
*/

vpc_lang_id   NUMBER (12);

BEGIN

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT '1' group_string,          --userd fro group header in subreport
                              per.pac_person_id, per.dic_person_politness_id,
             per.per_name, per.per_forename, per.per_short_name,
             per.per_activity, per.per_key1, per.per_key2, adr.add_principal,
             adr.dic_address_type_id, adr.add_address1, cty.cntid,
             cty.cntname, adr.pac_address_id, adr.add_zipcode, adr.add_city,
             adr.add_state, adr.add_format, adr.pc_lang_id,
             adr.c_partner_status, fad.fam_address_id,
             fad.fam_fixed_assets_id, fad.dic_link_typ_id,
             com_dic_functions.getdicodescr
                                      ('DIC_LINK_TYP',
                                       fad.dic_link_typ_id,
                                       vpc_lang_id
                                      ) dic_link_typ_desc
        FROM pcs.pc_cntry cty,
             pac_address adr,
             pac_person per,
             fam_address fad
       WHERE adr.pac_person_id = per.pac_person_id
         AND cty.pc_cntry_id = adr.pc_cntry_id
         AND fad.pac_person_id = per.pac_person_id(+)
         AND fad.fam_fixed_assets_id = TO_NUMBER (parameter_0);
END rpt_fam_address_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_ADJUSTABLE" (
      aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
    , procparam_0    in     varchar2
    , procparam_1    in     varchar2
    , procparam_2    in     varchar2
    , procparam_3    in     varchar2
    , procparam_4    in     varchar2
    , procparam_5    in     number
    , procparam_6    in     number
    , procparam_7    in     number
    , procparam_8    in     number
    , procparam_9    in     number
    , procparam_10   in     number
    , procparam_11   in     number
    , procparam_12   in     number
    , procparam_13   in     number
    , procparam_14   in     number
    , procparam_15   in     number
    , procparam_16   in     number
    , procparam_17   in     number
    , procparam_18   in     number
    , procparam_19   in     number
    , procparam_20   in     number
    , procparam_21   in     number
    , procparam_22   in     number
    , procparam_23   in     number
    , procparam_24   in     number
    , procparam_25   in     number
    , procparam_26   in     number
    , procparam_27   in     number
    , procparam_28   in     varchar2
    , procparam_29   in     number
    , procparam_30   in     number
    , procparam_31   in     number
    , procparam_32   in     varchar2
    , procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
    /**
    *Description - used for the report FAM_ADJUSTABLE

      @author OJO
      @lastUpdate VHA 26 JUNE 2013
      @version 2003.
      @public
      @param procparam_0    Titre de la liste.
      @param procparam_1    Immobilisation de :
      @param procparam_2    Immobilisation à
      @param procparam_3    Catégorie de :
      @param procparam_4    Catégorie à
      @param procparam_5    Regroupement : 0 = Par immobilisation, 1 = Par catégorie, 2 = Par compte financier, 3 = Par division, 4 = Par centre d'analyse
      @param procparam_6    ID de l'exercice
      @param procparam_7    Période de :
      @param procparam_8    Période à
      @param procparam_9    ID de la valeur gérée.
      @param procparam_10   Elément de structure 1.
      @param procparam_11   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_12   Elément de structure 2
      @param procparam_13   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_14   Elément de structure 3
      @param procparam_15   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_16   Elément de structure 4
      @param procparam_17   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_18   Elément de structure 5
      @param procparam_19   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_20   Elément de structure 6
      @param procparam_21   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_22   Elément de structure 7.
      @param procparam_23   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_24   Elément de structure 8.
      @param procparam_25   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_26   Elément de structure 9.
      @param procparam_27   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
      @param procparam_28   Liste des statuts séparés par une virgule / 00 = Crée, 01 = Active, 02 = Inactive, 03 = Bouclé
      @param procparam_29   Acquisitions / Cessions: 0 = Toutes les fiches immos / 1= Etat des acquisitions / 2= Etat des cessions
      @param procparam_30   Regroupement selon catalogue: 0= Non-coché 1= coché
      @param procparam_31   Impression : 0= Cumulé 1 = Détaillé
      @param procparam_32   Type d' immobilisation (0: principale / 1: tous)
    */
      vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type := null;
      vCatFrom    FAM_FIXED_ASSETS_CATEG.CAT_DESCR%type := null;
      vCatTo      FAM_FIXED_ASSETS_CATEG.CAT_DESCR%type := null;
      vFixFrom    FAM_FIXED_ASSETS.FIX_NUMBER%type := null;
      vFixTo      FAM_FIXED_ASSETS.FIX_NUMBER%type := null;
      vDateFrom   date;
      vDateTo     date;
begin
  PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;

  if ((procparam_6 is not null) and (procparam_7 is not null) and (procparam_8 is not null)) then
      select PER_START.PER_START_DATE
           , PER_END.PER_END_DATE
        into vDateFrom
           , vDateTo
        from ACS_PERIOD PER_START
           , ACS_PERIOD PER_END
       where PER_START.ACS_FINANCIAL_YEAR_ID = procparam_6
         and PER_END.ACS_FINANCIAL_YEAR_ID = procparam_6
         and PER_START.PER_NO_PERIOD = procparam_7
         and PER_END.PER_NO_PERIOD = procparam_8;
  end if;

  if    procparam_3 is null
     or procparam_3 = '' then
    select min(CAT_DESCR)
      into vCatFrom
      from FAM_FIXED_ASSETS_CATEG CAT;
  else
    vCatFrom  := procparam_3;
  end if;

  if    procparam_4 is null
     or procparam_4 = '' then
    select max(CAT_DESCR)
      into vCatTo
      from FAM_FIXED_ASSETS_CATEG CAT;
  else
    vCatTo  := procparam_4;
  end if;

  if    procparam_1 is null
     or procparam_1 = '' then
    select min(FIX_NUMBER)
      into vFixFrom
      from FAM_FIXED_ASSETS FIX;
  else
    vFixFrom  := procparam_1;
  end if;

  if    procparam_2 is null
     or procparam_2 = '' then
    select max(FIX_NUMBER)
      into vFixTo
      from FAM_FIXED_ASSETS FIX;
  else
    vFixTo  := procparam_2;
  end if;

  open aRefCursor for
     select FIX.FAM_FIXED_ASSETS_ID
          , FIX.FIX_NUMBER
          , FIX.FIX_SHORT_DESCR
          , FIX.C_FIXED_ASSETS_STATUS
          , CAT.CAT_DESCR
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_11
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_10
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES1
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_13
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_12
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES2
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_15
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_14
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES3
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_17
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_16
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES4
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_19
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_18
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES5
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_21
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_20
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES6
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_23
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_22
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES7
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_25
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_24
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES8
          , FAM_FUNCTIONS.StructureElementAmount(0
                                               , procparam_27
                                               , FIX.FAM_FIXED_ASSETS_ID
                                               , procparam_9
                                               , procparam_26
                                               , procparam_6
                                               , procparam_7
                                               , procparam_8
                                                ) IMMO_ES9

                    ,(   select  decode (TRA.TRA_DESCRIPTION,
                                                    null,
                                                    STR.ELE_DESCRIPTION,
                                                    TRA.TRA_DESCRIPTION
                                                )
                             from   FAM_STRUCTURE_ELEMENT STR,
                                       FAM_TRADUCTION TRA
                           where   STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_10)
                               and   STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                               and   (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                        ) DESCR_ES1
                    ,(   select  decode (TRA.TRA_DESCRIPTION,
                                                null,
                                                STR.ELE_DESCRIPTION,
                                                TRA.TRA_DESCRIPTION
                                            )
                         from  FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                       where  STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_12)
                           and  STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                           and  (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES2
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_14)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = VPC_LANG_ID or TRA.PC_LANG_ID is null)
                 ) DESCR_ES3
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_16)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES4
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_18)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES5
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_20)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = VPC_LANG_ID OR TRA.PC_LANG_ID is null)
                 ) DESCR_ES6
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_22)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES7
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_24)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES8
                ,(   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (procparam_26)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES9
                ,(   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID = FAM_FUNCTIONS.getfixedassetfinaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                    to_number (procparam_10),
                                    '10'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_FIN
                ,(   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID =
                        FAM_FUNCTIONS.getfixedassetdivaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                 to_number (procparam_10),
                                 '10'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_DIV
                ,(   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID = FAM_FUNCTIONS.getfixedassetcdaaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                    to_number (procparam_10),
                                    '61'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_CDA
          , (select min(IMP.FIM_TRANSACTION_DATE)
               from FAM_IMPUTATION IMP
                  , FAM_VAL_IMPUTATION VAL
              where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                and substr(IMP.C_FAM_TRANSACTION_TYP, 1, 1) = '1'
                and (    (procparam_29 <> 1)
                     or (    IMP.FIM_TRANSACTION_DATE >= vDateFrom
                         and IMP.FIM_TRANSACTION_DATE <= vDateTo)
                    ) ) DATE_IN
          , (select max(IMP.FIM_TRANSACTION_DATE)
               from FAM_IMPUTATION IMP
                  , FAM_VAL_IMPUTATION VAL
              where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                and IMP.C_FAM_TRANSACTION_TYP >= '800'
                and IMP.C_FAM_TRANSACTION_TYP <= '890'
                and (    (procparam_29 <> 2)
                     or (    IMP.FIM_TRANSACTION_DATE >= vDateFrom
                         and IMP.FIM_TRANSACTION_DATE <= vDateTo)
                    ) ) DATE_OUT
          , case
              when procparam_29 = 1
              and procparam_30 = 1 then (select max(FCA_DESCR)
                                           from FAM_IMPUTATION IMP
                                              , FAM_VAL_IMPUTATION VAL
                                              , FAM_DOCUMENT DOC
                                              , FAM_CATALOGUE CAT
                                          where DOC.FAM_DOCUMENT_ID = IMP.FAM_DOCUMENT_ID
                                            and DOC.FAM_CATALOGUE_ID = CAT.FAM_CATALOGUE_ID
                                            and IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                                            and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                                            and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                                            and substr(IMP.C_FAM_TRANSACTION_TYP, 1, 1) = '1'
                                            and IMP.FIM_TRANSACTION_DATE =
                                                  (select min(IMP.FIM_TRANSACTION_DATE)
                                                     from FAM_IMPUTATION IMP
                                                        , FAM_VAL_IMPUTATION VAL
                                                    where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                                                      and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                                                      and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                                                      and substr(IMP.C_FAM_TRANSACTION_TYP, 1, 1) = '1'
                                                      and (    IMP.FIM_TRANSACTION_DATE >= vDateFrom
                                                           and IMP.FIM_TRANSACTION_DATE <= vDateTo
                                                          ) ) )
              when procparam_29 = 2
              and procparam_30 = 1 then (select max(FCA_DESCR)
                                           from FAM_IMPUTATION IMP
                                              , FAM_VAL_IMPUTATION VAL
                                              , FAM_DOCUMENT DOC
                                              , FAM_CATALOGUE CAT
                                          where DOC.FAM_DOCUMENT_ID = IMP.FAM_DOCUMENT_ID
                                            and DOC.FAM_CATALOGUE_ID = CAT.FAM_CATALOGUE_ID
                                            and IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                                            and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                                            and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                                            and IMP.C_FAM_TRANSACTION_TYP >= '800'
                                            and IMP.C_FAM_TRANSACTION_TYP <= '890'
                                            and IMP.FIM_TRANSACTION_DATE =
                                                  (select max(IMP.FIM_TRANSACTION_DATE)
                                                     from FAM_IMPUTATION IMP
                                                        , FAM_VAL_IMPUTATION VAL
                                                    where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                                                      and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                                                      and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                                                      and IMP.C_FAM_TRANSACTION_TYP >= '800'
                                                      and IMP.C_FAM_TRANSACTION_TYP <= '890'
                                                      and (    IMP.FIM_TRANSACTION_DATE >= vDateFrom
                                                           and IMP.FIM_TRANSACTION_DATE <= vDateTo
                                                          ) ) )
              else ''
            end FCA_DESCR
       from FAM_FIXED_ASSETS FIX
          , FAM_FIXED_ASSETS_CATEG CAT
      where FIX.FAM_FIXED_ASSETS_CATEG_ID = CAT.FAM_FIXED_ASSETS_CATEG_ID
        and (instr(',' || procparam_28 || ',', ',' || FIX.C_FIXED_ASSETS_STATUS || ',') > 0)
        and CAT.CAT_DESCR >= vCatFrom
        and CAT.CAT_DESCR <= vCatTo
        and FIX.FIX_NUMBER >= vFixFrom
        and FIX.FIX_NUMBER <= vFixTo
        and (    (procparam_29 <> 1)
             or exists(
                  select 1
                    from FAM_IMPUTATION IMP
                       , FAM_VAL_IMPUTATION VAL
                   where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                     and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                     and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                     and substr(IMP.C_FAM_TRANSACTION_TYP, 1, 1) = '1'
                     and IMP.FIM_TRANSACTION_DATE >= vDateFrom
                     and IMP.FIM_TRANSACTION_DATE <= vDateTo)
            )
        and   -- Acquisitions --
            (    (procparam_29 <> 2)
             or exists(
                  select 1
                    from fAM_IMPUTATION IMP
                       , FAM_VAL_IMPUTATION VAL
                   where IMP.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
                     and IMP.FAM_IMPUTATION_ID = VAL.FAM_IMPUTATION_ID
                     and VAL.FAM_MANAGED_VALUE_ID = procparam_9
                     and IMP.C_FAM_TRANSACTION_TYP >= '800'
                     and IMP.C_FAM_TRANSACTION_TYP <= '890'
                     and IMP.FIM_TRANSACTION_DATE >= vDateFrom
                     and IMP.FIM_TRANSACTION_DATE <= vDateTo)
            )   -- Cessions --

        and
            (   (procparam_32 = '0' and  FIX.C_FIXED_ASSETS_TYP = '1')
             or (procparam_32 = '1')
            );
end RPT_FAM_ADJUSTABLE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_AMORTIZATION_METHOD" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   in     pcs.pc_lang.lanid%type
)
IS

/**
*Description
Used for report FAM_AMORTIZATION_METHOD

*author JLI
*lastUpdate July 23 2009
* @public
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


BEGIN


pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

SELECT
JSC.ACJ_CATALOGUE_DOCUMENT_ID,
JSC_INT.ACJ_CATALOGUE_DOCUMENT_ID ACJ_CATALOGUE_DOCUMENT_ID_INT,
MTD.FAM_AMORTIZATION_METHOD_ID,
MTD.C_AMORTIZATION_TYP,
MTD.C_AMORTIZATION_PERIOD,
MTD.FAM_CATALOGUE_ID,
MTD.AMO_DESCR,
MTD.C_ROUND_TYPE,
MTD.AMO_ROUNDED_AMOUNT,
MTD.FAM_FAM_CATALOGUE_ID,
MTD.C_INTEREST_CALC_RULES,
MTD.C_ROUND_TYPE_INT,
MTD.AMO_ROUNDED_AMOUNT_INT,
CVL.CMV_AMOUNTS_PILOT_FORMULA,
CVL_INT.CMV_AMOUNTS_PILOT_FORMULA CMV_AMOUNTS_PILOT_FORMULA_INT,
CAT.C_FAM_TRANSACTION_TYP,
CAT_INT.C_FAM_TRANSACTION_TYP C_FAM_TRANSACTION_TYP_INT,
MVL.VAL_KEY,
MVL.VAL_DESCR,
MVL_INT.VAL_KEY VAL_KEY_INT,
MVL_INT.VAL_DESCR VAL_DESCR_INT
FROM
ACJ_JOB_TYPE_S_CATALOGUE JSC,
ACJ_JOB_TYPE_S_CATALOGUE JSC_INT,
FAM_AMORTIZATION_METHOD MTD,
FAM_CAT_MANAGED_VALUE CVL,
FAM_CAT_MANAGED_VALUE CVL_INT,
FAM_CATALOGUE CAT,
FAM_CATALOGUE CAT_INT,
FAM_MANAGED_VALUE MVL,
FAM_MANAGED_VALUE MVL_INT
WHERE
MTD.FAM_CATALOGUE_ID = CAT.FAM_CATALOGUE_ID(+)
AND CAT.FAM_CATALOGUE_ID = CVL.FAM_CATALOGUE_ID(+)
AND CVL.FAM_MANAGED_VALUE_ID = MVL.FAM_MANAGED_VALUE_ID(+)
AND CAT.ACJ_JOB_TYPE_S_CATALOGUE2_ID = JSC.ACJ_JOB_TYPE_S_CATALOGUE_ID(+)
AND MTD.FAM_FAM_CATALOGUE_ID = CAT_INT.FAM_CATALOGUE_ID(+)
AND CAT_INT.FAM_CATALOGUE_ID = CVL_INT.FAM_CATALOGUE_ID(+)
AND CVL_INT.FAM_MANAGED_VALUE_ID = MVL_INT.FAM_MANAGED_VALUE_ID(+)
AND CAT_INT.ACJ_JOB_TYPE_S_CATALOGUE2_ID = JSC_INT.ACJ_JOB_TYPE_S_CATALOGUE_ID(+)
;

END RPT_FAM_AMORTIZATION_METHOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_AMO_APPLICATION_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 6 Jun 2008
* @LASTUPDATE 24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: FAM_FIXED_ASSETS_ID
* @PARAM PROCUSER_LANID: User language
*/
BEGIN
   OPEN arefcursor FOR
      SELECT '1' group_string, app.fam_fixed_assets_id,
             app.fam_amortization_method_id, app.fam_managed_value_id,
             app.app_lin_amortization, app.app_dec_amortization,
             app.app_interest_rate, app.app_interest_rate_2,
             app.app_month_duration, app.app_amortization_begin,
             app.app_amortization_end, app.fam_amo_application_id,
             app.dic_fam_coefficient_id dic_fam_coefficient_2_id,
             val.val_key, met.amo_descr, cat.cat_descr, def.fam_default_id,
             def.def_lin_amortization, def.def_dec_amortization,
             def.def_interest_rate, def.def_interest_rate_2,
             def.dic_fam_coefficient_id dic_fam_coefficient_1_id,
             fpl.pye_no_exercise, fpl.start_amo_amount, fpl.amo_amount,
             fpl.sum_amo_amount, fpl.end_amo_amount,
               fpl.start_amo_amount
             - NVL ((SELECT   SUM (fpe1.fpe_adapted_amo_lc)
                         FROM fam_plan_header fph1, fam_plan_exercise fpe1
                        WHERE fph1.fam_plan_header_id =
                                                       fpe1.fam_plan_header_id
                          AND fph1.c_amo_plan_status = '1'
                          AND fph1.fam_fixed_assets_id =
                                                       TO_NUMBER (parameter_0)
                          AND fpe1.pye_no_exercise < fpl.pye_no_exercise
                          AND fph1.fam_managed_value_id =
                                                      val.fam_managed_value_id
                     GROUP BY fpe1.fpe_elem_1_amount),
                    0
                   ) year_start_amount,
             (SELECT     fpe1.fpe_elem_1_amount
                       - SUM (fpe1.fpe_adapted_amo_lc)
                  FROM fam_plan_header fph1, fam_plan_exercise fpe1
                 WHERE fph1.fam_plan_header_id = fpe1.fam_plan_header_id
                   AND fph1.c_amo_plan_status = '1'
                   AND fph1.fam_fixed_assets_id = TO_NUMBER (parameter_0)
                   AND fpe1.pye_no_exercise <= fpl.pye_no_exercise
                   AND fph1.fam_managed_value_id = val.fam_managed_value_id
              GROUP BY fpe1.fpe_elem_1_amount) year_end_amount
        FROM fam_fixed_assets ass,
             fam_amo_application app,
             fam_default def,
             fam_fixed_assets_categ cat,
             fam_amortization_method met,
             fam_managed_value val,
             (SELECT fph.fam_fixed_assets_id, fph.fam_managed_value_id,
                     fpe.pye_no_exercise,
                     fpe.fpe_elem_1_amount start_amo_amount,
                     fpe.fpe_adapted_amo_lc amo_amount,
                     fpe.fpe_amortization_lc sum_amo_amount,
                     fpe.fpe_amortization_lc end_amo_amount
                FROM fam_plan_header fph, fam_plan_exercise fpe
               WHERE fph.fam_plan_header_id = fpe.fam_plan_header_id
                 AND fph.c_amo_plan_status = '1'
                 AND fph.fam_fixed_assets_id = TO_NUMBER (parameter_0)) fpl
       WHERE app.fam_fixed_assets_id = ass.fam_fixed_assets_id
         AND app.fam_managed_value_id = val.fam_managed_value_id
         AND app.fam_amortization_method_id = met.fam_amortization_method_id
         AND ass.fam_fixed_assets_categ_id = cat.fam_fixed_assets_categ_id
         AND def.fam_fixed_assets_categ_id = ass.fam_fixed_assets_categ_id
         AND def.fam_amortization_method_id = app.fam_amortization_method_id
         AND val.fam_managed_value_id = fpl.fam_managed_value_id(+)
         AND app.fam_fixed_assets_id = TO_NUMBER (parameter_0)
      UNION ALL

      --to get the start amount for the depreciation plan, which will be used in the chart --
      (SELECT   '1' group_string, app.fam_fixed_assets_id,
                app.fam_amortization_method_id, app.fam_managed_value_id,
                app.app_lin_amortization, app.app_dec_amortization,
                app.app_interest_rate, app.app_interest_rate_2,
                app.app_month_duration, app.app_amortization_begin,
                app.app_amortization_end, app.fam_amo_application_id,
                app.dic_fam_coefficient_id dic_fam_coefficient_2_id,
                val.val_key, met.amo_descr, cat.cat_descr, def.fam_default_id,
                def.def_lin_amortization, def.def_dec_amortization,
                def.def_interest_rate, def.def_interest_rate_2,
                def.dic_fam_coefficient_id dic_fam_coefficient_1_id,
                0 pye_no_exercise, NULL start_amo_amount, NULL amo_amount,
                NULL sum_amo_amount, NULL end_amo_amount,
                NULL year_start_amount, fpl.start_amo_amount year_end_amount
           FROM fam_fixed_assets ass,
                fam_amo_application app,
                fam_default def,
                fam_fixed_assets_categ cat,
                fam_amortization_method met,
                fam_managed_value val,
                (SELECT fph.fam_fixed_assets_id, fph.fam_managed_value_id,
                        fpe.pye_no_exercise,
                        fpe.fpe_elem_1_amount start_amo_amount,
                        fpe.fpe_adapted_amo_lc amo_amount,
                        fpe.fpe_amortization_lc sum_amo_amount,
                        fpe.fpe_amortization_lc end_amo_amount
                   FROM fam_plan_header fph, fam_plan_exercise fpe
                  WHERE fph.fam_plan_header_id = fpe.fam_plan_header_id
                    AND fph.c_amo_plan_status = '1'
                    AND fph.fam_fixed_assets_id = TO_NUMBER (parameter_0)) fpl
          WHERE app.fam_fixed_assets_id = ass.fam_fixed_assets_id
            AND app.fam_managed_value_id = val.fam_managed_value_id
            AND app.fam_amortization_method_id =
                                                met.fam_amortization_method_id
            AND ass.fam_fixed_assets_categ_id = cat.fam_fixed_assets_categ_id
            AND def.fam_fixed_assets_categ_id = ass.fam_fixed_assets_categ_id
            AND def.fam_amortization_method_id =
                                                app.fam_amortization_method_id
            AND val.fam_managed_value_id = fpl.fam_managed_value_id(+)
            AND app.fam_fixed_assets_id = TO_NUMBER (parameter_0)
       GROUP BY app.fam_fixed_assets_id,
                app.fam_amortization_method_id,
                app.fam_managed_value_id,
                app.app_lin_amortization,
                app.app_dec_amortization,
                app.app_interest_rate,
                app.app_interest_rate_2,
                app.app_month_duration,
                app.app_amortization_begin,
                app.app_amortization_end,
                app.fam_amo_application_id,
                app.dic_fam_coefficient_id,
                val.val_key,
                met.amo_descr,
                cat.cat_descr,
                def.fam_default_id,
                def.def_lin_amortization,
                def.def_dec_amortization,
                def.def_interest_rate,
                def.def_interest_rate_2,
                def.dic_fam_coefficient_id,
                fpl.start_amo_amount);
END rpt_fam_amo_application_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_BALANCE" (
   arefcursor       in out   CRYSTAL_CURSOR_TYPES.DualCursorTyp,
   procuser_lanid   in       PCS.PC_LANG.LANID%type,
   parameter_1      in       varchar2,
   parameter_2      in       varchar2,
   parameter_3      in       varchar2,
   parameter_4      in       varchar2,
   parameter_6      in       varchar2,
   parameter_7      in       varchar2,
   parameter_8      in       varchar2,
   parameter_9      in       varchar2,
   parameter_10     in       varchar2,
   parameter_11     in       varchar2,
   parameter_12     in       varchar2,
   parameter_13     in       varchar2,
   parameter_14     in       varchar2,
   parameter_15     in       varchar2,
   parameter_16     in       varchar2,
   parameter_17     in       varchar2,
   parameter_18     in       varchar2,
   parameter_19     in       varchar2,
   parameter_20     in       varchar2,
   parameter_22      in       varchar2
)
is
    /**
    *Description - Used for the report FAM_BALANCE

    * @CREATED IN PROCONCEPT CHINA
    * @AUTHOR JLIU 12 JAN 2009
    * @LASTUPDATE VHA 24 OCT 2011
    * @VERSION
    * @PUBLIC
    * @param parameter_1:  fixed assets from
    * @param parameter_2:  fixed assets to
    * @param parameter_3:  category from
    * @param parameter_4:  category t0
    * @param parameter_6:  critere de cumul
    * @param parameter_7:  exercice
    * @param parameter_8:  period beginning
    * @param parameter_9:  period end
    * @param parameter_10: managed value
    * @param parameter_11: structure element 1
    * @param parameter_12: structure element 2
    * @param parameter_13: structure element 3
    * @param parameter_14: structure element 4
    * @param parameter_15: structure element 5
    * @param parameter_16: structure element 6
    * @param parameter_17: structure element 7
    * @param parameter_18: structure element 8
    * @param parameter_19: structure element 9
    * @param parameter_20: liste des stauts des immob
    * @param parameter_22: type d' immobilisation (0: principale / 1: tous)
    */
   vpc_lang_id   PCS.PC_LANG.PC_LANG_ID%type;              --user language id

begin

   PCS.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := PCS.PC_I_LIB_SESSION.getuserlangid;

   open arefcursor for
      select  FIX.FAM_FIXED_ASSETS_ID,
                FIX.FIX_NUMBER,
                FIX.FIX_SHORT_DESCR,
                FIX.C_FIXED_ASSETS_STATUS,
                CAT.CAT_DESCR,
                ACS_FUNCTION.getaccountnumber
                        (   FAM_FUNCTIONS.getfixedassetfinaccid (
                            FIX.FAM_FIXED_ASSETS_ID,
                            to_number (parameter_10),
                            '10'
                        )
                ) ACC_NUMBER,
                ACS_FUNCTION.getaccountnumber
                        (   FAM_FUNCTIONS.getfixedassetcdaaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                to_number (parameter_10),
                                '61'
                                 )
                        ) CDA_NUMBER,
                ACS_FUNCTION.getaccountnumber
                        (   FAM_FUNCTIONS.getfixedassetdivaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                to_number (parameter_10),
                                '10'
                                )
                        ) DIV_NUMBER,
                ACS_FUNCTION.getlocalcurrencyname LOCAL_CUR_NAME,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_11),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES1,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_12),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES2,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_13),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES3,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_14),
                             to_number (parameter_7),
                             to_number (parameter_8),
                              to_number (parameter_9)
                        ) C_IMMO_ES4,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_15),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES5,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_16),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES6,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_17),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES7,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_18),
                             to_number (parameter_7),
                             to_number (parameter_8),
                              to_number (parameter_9)
                        ) C_IMMO_ES8,
                FAM_FUNCTIONS.structureelementamount
                        (   0,
                             to_number (parameter_6),
                             FIX.FAM_FIXED_ASSETS_ID,
                             to_number (parameter_10),
                             to_number (parameter_19),
                             to_number (parameter_7),
                             to_number (parameter_8),
                             to_number (parameter_9)
                        ) C_IMMO_ES9,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from   FAM_STRUCTURE_ELEMENT STR,
                               FAM_TRADUCTION TRA
                   where   STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_11)
                       and   STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and   (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                ) DESCR_ES1,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from  FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where  STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_12)
                       and  STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and  (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
             ) DESCR_ES2,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_13)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = VPC_LANG_ID or TRA.PC_LANG_ID is null)
                 ) DESCR_ES3,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null,
                                            STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_14)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES4,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_15)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES5,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_16)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = VPC_LANG_ID OR TRA.PC_LANG_ID is null)
                 ) DESCR_ES6,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_17)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES7,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_18)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES8,
                (   select  decode (TRA.TRA_DESCRIPTION,
                                            null, STR.ELE_DESCRIPTION,
                                            TRA.TRA_DESCRIPTION
                                        )
                     from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number (parameter_19)
                       and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                       and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null)
                 ) DESCR_ES9,
                (   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID = FAM_FUNCTIONS.getfixedassetfinaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                    to_number (parameter_10),
                                    '10'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_FIN,
                (   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID =
                        FAM_FUNCTIONS.getfixedassetdivaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                 to_number (parameter_10),
                                 '10'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_DIV,
                (   select DES.DES_DESCRIPTION_SUMMARY
                     from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID = FAM_FUNCTIONS.getfixedassetcdaaccid
                                (FIX.FAM_FIXED_ASSETS_ID,
                                    to_number (parameter_10),
                                    '61'
                                )
                       and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_CDA
      from   FAM_FIXED_ASSETS FIX,
                FAM_FIXED_ASSETS_CATEG CAT
      where FIX.FAM_FIXED_ASSETS_CATEG_ID = CAT.FAM_FIXED_ASSETS_CATEG_ID
         and  (  (   parameter_1 is not null
                        and parameter_2 is not null
                        and FIX.FIX_NUMBER >= parameter_1
                        and FIX.FIX_NUMBER <= parameter_2
                   )
                or    (parameter_1 is null and FIX.FIX_NUMBER <= parameter_2)
                or    (parameter_2 is null and FIX.FIX_NUMBER >= parameter_1)
                or    (parameter_1 is null and parameter_2 is null)
               )
         and (   (   parameter_3 is not null
                and  parameter_4 is not null
                and  CAT.CAT_DESCR >= parameter_3
                and  CAT.CAT_DESCR <= parameter_4
                  )
                or (parameter_3 is null and CAT.CAT_DESCR <= parameter_4)
                or (parameter_4 is null and CAT.CAT_DESCR >= parameter_3)
                or (parameter_3 is null and parameter_4 is null)
               )
         and instr(',' || parameter_20 || ',' , ',' || FIX.C_FIXED_ASSETS_STATUS ||',' ) > 0
         and (   (parameter_22 = '0' and  FIX.C_FIXED_ASSETS_TYP = '1')
                or (parameter_22 = '1' )
               );
end RPT_FAM_BALANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_CALC_AMORTIZATION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description - used for report FAM_CALC_AMORTIZATION

*@created JLIU 1 JAN2009
*@lastUpdate 25 FEB 2008
*@public
*@param PARAMETER_0:  ACS_PERIOD_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT yea.fye_no_exercice, per.per_no_period, amo.acs_period_id,
             cal.cal_transaction_date, cal.cal_value_date,
             cal.cal_amortization_base_lc, cal.cal_amortization_rate,
             cal.cal_amortization_lc, cal.cal_days, cal.fam_imputation_id,
             ast.fam_fixed_assets_id, ast.fix_number, ast.fix_short_descr,
             cag.fam_fixed_assets_categ_id, cag.cat_descr,
             val.fam_managed_value_id, val.val_key, val.val_descr
        FROM acs_financial_year yea,
             acs_period per,
             fam_amortization_period amo,
             fam_calc_amortization cal,
             fam_fixed_assets ast,
             fam_fixed_assets_categ cag,
             fam_managed_value val,
             fam_per_calc_by_value byv
       WHERE amo.acs_period_id = byv.acs_period_id
         AND byv.fam_per_calc_by_value_id = cal.fam_per_calc_by_value_id
         AND cal.fam_fixed_assets_id = ast.fam_fixed_assets_id
         AND ast.fam_fixed_assets_categ_id = cag.fam_fixed_assets_categ_id
         AND byv.acs_period_id = per.acs_period_id
         AND per.acs_financial_year_id = yea.acs_financial_year_id
         AND byv.fam_managed_value_id = val.fam_managed_value_id
         AND amo.acs_period_id = TO_NUMBER (parameter_0)
         AND cal.cal_amortization_base_lc IS NOT NULL;
END rpt_fam_calc_amortization;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_CATALOGUE" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   in     pcs.pc_lang.lanid%type
)
IS

/**
*Description
Used for the report FAM_CATALOGUE

*author JLI
*lastUpdate July 23 2009
* @public
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


BEGIN


pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

SELECT
TSC.ACJ_JOB_TYPE_ID,
TSC.ACJ_CATALOGUE_DOCUMENT_ID,
TSC_2.ACJ_JOB_TYPE_ID ACJ_JOB_TYPE_ID_2,
TSC_2.ACJ_CATALOGUE_DOCUMENT_ID ACJ_CATALOGUE_DOCUMENT_ID_2,
MVL.FAM_MANAGED_VALUE_ID,
MVL.CMV_AMOUNTS_PILOT_FORMULA,
FCG.FAM_CATALOGUE_ID,
FCG.C_FAM_TRANSACTION_TYP,
FCG.FCA_KEY,
FCG.FCA_DESCR,
FCG.FCA_AVAILABLE,
FCG.FCA_DEBIT,
FCG.ACJ_NUMBER_METHOD_ID,
FCG.DIC_FAM_FCA_FREECOD1_ID,
FCG.DIC_FAM_FCA_FREECOD2_ID,
FCG.DIC_FAM_FCA_FREECOD3_ID,
FCG.DIC_FAM_FCA_FREECOD4_ID,
FCG.DIC_FAM_FCA_FREECOD5_ID,
FCG.DIC_FAM_FCA_FREECOD6_ID,
FCG.DIC_FAM_FCA_FREECOD7_ID,
FCG.DIC_FAM_FCA_FREECOD8_ID,
FCG.DIC_FAM_FCA_FREECOD9_ID,
FCG.DIC_FAM_FCA_FREECOD10_ID,
VAL.VAL_DESCR
FROM
FAM_CATALOGUE FCG,
ACJ_JOB_TYPE_S_CATALOGUE TSC,
ACJ_JOB_TYPE_S_CATALOGUE TSC_2,
FAM_CAT_MANAGED_VALUE MVL,
FAM_MANAGED_VALUE VAL
WHERE
FCG.ACJ_JOB_TYPE_S_CATALOGUE_ID = TSC.ACJ_JOB_TYPE_S_CATALOGUE_ID(+)
AND FCG.ACJ_JOB_TYPE_S_CATALOGUE2_ID = TSC_2.ACJ_JOB_TYPE_S_CATALOGUE_ID(+)
AND FCG.FAM_CATALOGUE_ID = MVL.FAM_CATALOGUE_ID(+)
AND MVL.FAM_MANAGED_VALUE_ID = VAL.FAM_MANAGED_VALUE_ID(+);

END RPT_FAM_CATALOGUE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_DIFF" (
      aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
    , parameter_1    in     varchar2
    , parameter_2    in     varchar2
    , parameter_3    in     varchar2
    , parameter_4    in     varchar2
    , parameter_6    in     varchar2
    , parameter_8    in     number
    , parameter_9    in     number
    , parameter_10   in     number
    , parameter_11   in     number
    , parameter_12   in     number
    , parameter_13   in     number
    , parameter_14   in     number
    , parameter_15   in     number
    , parameter_16   in     number
    , parameter_17   in     number
    , parameter_18   in     number
    , parameter_19   in     number
    , parameter_20   in     number
    , parameter_21   in     number
    , parameter_22   in     number
    , parameter_23   in     number
    , parameter_24   in     number
    , parameter_25   in     number
    , parameter_26   in     number
    , parameter_27   in     number
    , parameter_28   in     number
    , parameter_29   in     number
    , parameter_30   in     varchar2
    , procuser_lanid in  PCS.PC_LANG.LANID%type
)
is
    /**
    * Description - used for the report FAM_DIFFERENCE

    * @CREATED IN PROCONCEPT CHINA
    * @AUTHOR JLIU 12 MAY 2009
    * @LASTUPDATE VHA 24 OCT 2011
    * @VERSION
    * @PUBLIC
    * @param parameter_1    FIX_NUMBER
    * @param parameter_2    FIX_NUMBER
    * @param parameter_3    CAT_DESCR
    * @param parameter_4    CAT_DESCR
    * @param parameter_6    LISTE DES C_FIXED_ASSETS_STATUS
    * @param parameter_8    Période
    * @param parameter_9    ID de la valeur gérée.
    * @param parameter_10   Elément de structure 1.
    * @param parameter_11   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_12   Elément de structure 2
    * @param parameter_13   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_14   Elément de structure 3
    * @param parameter_15   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_16   Elément de structure 4
    * @param parameter_17   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_18   Elément de structure 5
    * @param parameter_19   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_20   Elément de structure 6
    * @param parameter_21   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_22   Elément de structure 7.
    * @param parameter_23   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_24   Elément de structure 8.
    * @param parameter_25   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_26   Elément de structure 9.
    * @param parameter_27   Critères du cumul 1 : 0 = Solde de l'exercice, 1 = Solde fin de l'exercice, 2 = Solde début de l'exercice
    * @param parameter_28   Liste des statuts séparés par une virgule / 00 = Crée, 01 = Active, 02 = Inactive, 03 = Bouclé
    * @param parameter_29   Acquisitions / Cessions: 0 = Toutes les fiches immos / 1= Etat des acquisitions / 2= Etat des cessions
    * @param parameter_30   Type d' immobilisation (0: principale / 1: tous)
    */

    vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
    v_mb   PCS.PC_CURR.CURRENCY%type;

begin

    PCS.PC_I_LIB_SESSION.setLanId (procuser_lanid);
    vpc_lang_id := PCS.PC_I_LIB_SESSION.GetUserLangId;

    select ACS_FUNCTION.GetLocalCurrencyName into v_mb from DUAL;

    open aRefCursor for
        select
            FAM.FAM_FIXED_ASSETS_ID,
            FAM.FIX_NUMBER,
            FAM.FIX_SHORT_DESCR,
            FAM.C_FIXED_ASSETS_STATUS,
            CAT.CAT_DESCR,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_13
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES0,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_14
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES1,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_15
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES2,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_16
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES3,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_17
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES4,
            (select DECODE(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_18
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES5,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_24
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES6,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_25
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES7,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_26
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES8,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_27
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES9,
            (select decode(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_28
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES10,
            (select DECODE(TRA.TRA_DESCRIPTION,null,STR.ELE_DESCRIPTION,TRA.TRA_DESCRIPTION)
                          from FAM_STRUCTURE_ELEMENT STR
                              ,FAM_TRADUCTION TRA
                         where STR.FAM_STRUCTURE_ELEMENT_ID = parameter_29
                           and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID
                           and TRA.PC_LANG_ID = vpc_lang_id) DESCR_ES11,
            (select DES_FIN.DES_DESCRIPTION_SUMMARY
                          from ACS_DESCRIPTION DES_FIN
                         where DES_FIN.ACS_ACCOUNT_ID = FAM_FUNCTIONS.GetFixedAssetFinAccId(FAM.FAM_FIXED_ASSETS_ID,to_char(parameter_8),'10')
                           and DES_FIN.PC_LANG_ID = vpc_lang_id ) FIN_DES,
            (select DES_CDA.DES_DESCRIPTION_SUMMARY
                          from ACS_DESCRIPTION DES_CDA
                         where DES_CDA.ACS_ACCOUNT_ID = FAM_FUNCTIONS.GetFixedAssetCDAAccId(FAM.FAM_FIXED_ASSETS_ID,to_char(parameter_8),'61')
                           and DES_CDA.PC_LANG_ID = vpc_lang_id ) CDA_DES,
            (select DES_DIV.DES_DESCRIPTION_SUMMARY
                          from ACS_DESCRIPTION DES_DIV
                         where DES_DIV.ACS_ACCOUNT_ID = FAM_FUNCTIONS.GetFixedAssetDivAccId(FAM.FAM_FIXED_ASSETS_ID,to_char(parameter_8),'10')
                           and DES_DIV.PC_LANG_ID = vpc_lang_id ) DIV_DES,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_13
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES11,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_14
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES12,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_15
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES13,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_16
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES14,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_17
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES15,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_9
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_8
                                                           , parameter_18
                                                           , parameter_10
                                                           , parameter_11
                                                           , parameter_12
                                                            ) C_IMMO_ES16,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_24
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES21,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_25
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES22,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_26
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES23,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_27
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES24,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_28
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES25,
            FAM_FUNCTIONS.StructureElementAmount(0
                                                           , parameter_20
                                                           , FAM.FAM_FIXED_ASSETS_ID
                                                           , parameter_19
                                                           , parameter_29
                                                           , parameter_21
                                                           , parameter_22
                                                           , parameter_23
                                                            ) C_IMMO_ES26,
            acs_function.getaccountnumber
                            (fam_functions.getfixedassetfinaccid (fam.fam_fixed_assets_id,
                                                                  to_number (parameter_8),
                                                                  '10'
                                                                 )
                            ) ACC_NUMBER,
            acs_function.getaccountnumber
                            (fam_functions.getfixedassetcdaaccid (fam.fam_fixed_assets_id,
                                                                  to_number (parameter_8),
                                                                  '61'
                                                                 )
                            ) CDA_NUMBER,
            acs_function.getaccountnumber
                            (fam_functions.getfixedassetdivaccid (fam.fam_fixed_assets_id,
                                                                  to_number (parameter_8),
                                                                  '10'
                                                                 )
                            ) DIV_NUMBER,
            v_mb LOCAL_CURRENCY
        from
            FAM_FIXED_ASSETS FAM,
            FAM_FIXED_ASSETS_CATEG CAT
        where
            FAM.FAM_FIXED_ASSETS_CATEG_ID = CAT.FAM_FIXED_ASSETS_CATEG_ID
            and (parameter_1 is null or FAM.FIX_NUMBER >= parameter_1)
            and (parameter_2 is null or FAM.FIX_NUMBER <= parameter_2)
            and (parameter_3 is null or CAT.CAT_DESCR  >= parameter_3)
            and (parameter_4 is null or CAT.CAT_DESCR  <= parameter_4)
            and instr( ',' || parameter_6 || ',' , ',' || FAM.C_FIXED_ASSETS_STATUS ||',' ) > 0
            and (   (parameter_30 = '0' and  FAM.C_FIXED_ASSETS_TYP = '1')
                    or (parameter_30 = '1' )
                   );

end RPT_FAM_DIFF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_FIXED_ASSETS_BY_EMP" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   in     pcs.pc_lang.lanid%type
)
IS

/**
*Description
Used for report FAM_STRUCTURE

*author VHA
*created on April 21 2011
* @public
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN
  pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
  VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

  open aRefCursor for
    SELECT
      nvl(HPE.PER_FULLNAME, 'zzz') HPE_FULLNAME,
      FIX.FIX_NUMBER,
      FIX.FIX_SHORT_DESCR,
      FIX.FIX_PURCHASE_DATE,
      FIX.FIX_MODEL,
      FIX.FIX_SERIAL_NUMBER,
      FIX.FIX_WARRANT_END,
      LOC.DIC_DESCR
    FROM
      FAM_FIXED_ASSETS FIX,
      DIC_LOCATION LOC,
      HRM_PERSON HPE
    WHERE
      FIX.DIC_LOCATION_ID = LOC.DIC_LOCATION_ID(+)
      AND FIX.HRM_PERSON_ID = HPE.HRM_PERSON_ID(+);

END RPT_FAM_FIXED_ASSETS_BY_EMP;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_FIXED_ASSETS_CATEG" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   in     pcs.pc_lang.lanid%type
)
IS

/**
*Description
 Used for the report FAM_FIXED_ASSETS_CATEG

*author JLI
*lastUpdate July 23 2009
*@public
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


BEGIN


pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

SELECT
FCG.FAM_FIXED_ASSETS_CATEG_ID,
FCG.CAT_DESCR,
FCG.C_FIXED_ASSETS_STATUS,
FCG.C_FIXED_ASSETS_TYP,
FCG.C_OWNERSHIP,
FCG.FAM_NUMBER_METHOD_ID,
FCG.DIC_FAM_CAT_FREECOD1_ID,
FCG.DIC_FAM_CAT_FREECOD2_ID,
FCG.DIC_FAM_CAT_FREECOD3_ID,
FCG.DIC_FAM_CAT_FREECOD4_ID,
FCG.DIC_FAM_CAT_FREECOD5_ID,
FCG.DIC_FAM_CAT_FREECOD6_ID,
FCG.DIC_FAM_CAT_FREECOD7_ID,
FCG.DIC_FAM_CAT_FREECOD8_ID,
FCG.DIC_FAM_CAT_FREECOD9_ID,
FCG.DIC_FAM_CAT_FREECOD10_ID,
MET.ACJ_NUMBER_METHOD_ID,
MET.FNM_LAST_NUMBER
FROM
FAM_FIXED_ASSETS_CATEG FCG,
FAM_NUMBER_METHOD MET
WHERE
FCG.FAM_NUMBER_METHOD_ID = MET.FAM_NUMBER_METHOD_ID(+);

END RPT_FAM_FIXED_ASSETS_CATEG;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_FIXED_ASSETS_FORM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/*
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 6 Jun 2008
* @LASTUPDATE 6 JUN 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: Fixed assets number. Min value
* @PARAM PARAMETER_1: Fixed assets number. Max value
* @PARAM PARAMETER_2: Fixed assets status.
* @PARAM PARAMETER_4: Fixed assets category. Min value
* @PARAM PARAMETER_5: Fixed assets category. Max value
* @PARAM PARAMETER_6: Condition choose for date creation, modification or userid
* @PARAM PARAMETER_7: Fixed assets creation or modification date. Min value
* @PARAM PARAMETER_8: Fixed assets creation or modification date. Max value
* @PARAM PARAMETER_9: Fixed assets modification user id
* @PARAM PARAMETER_10: Fam_fixed_asset_id
* @PARAM PROCUSER_LANID: User language
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
   p_7           DATE;
   p_8           DATE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;


   IF parameter_7 = '0'
   THEN
      p_7 := TO_DATE (10000101, 'yyyyMMdd');
   ELSE
      p_7 := TO_DATE (parameter_7, 'yyyyMMdd');
   END IF;

   IF parameter_8 = '0'
   THEN
      p_8 := TO_DATE (30001231, 'yyyyMMdd');
   ELSE
      p_8 := TO_DATE (parameter_8, 'yyyyMMdd');
   END IF;

   OPEN arefcursor FOR
      SELECT fix.fam_fixed_assets_id fam_fixed_assets_id1,
             fix.fam_fixed_assets_categ_id, fix.c_fixed_assets_typ,
             fix.c_ownership, fix.c_fixed_assets_status, fix.dic_liability_id,
             fix.dic_location_id, fix.dic_state_id, fix.dic_use_unit_id,
             fix.fix_number, fix.fix_description, fix.fix_short_descr,
             fix.fix_long_descr, fix.fix_year, fix.fix_model,
             fix.fix_serial_number, fix.fix_warrant_duration,
             fix.fix_warrant_end, fix.fix_landowner_number,
             fix.fix_land_registry_number, fix.fix_surface, fix.fix_volume,
             fix.fix_state_date, fix.fix_purchase_date, fix.fix_working_date,
             fix.fix_unit_quantity, fix.fix_man_accounting_allowed,
             fix.acs_division_account_id, acc1.acc_number acc_number_div,
             des1.des_description_summary des_description_summary_div,
             fix.acs_cda_account_id, acc2.acc_number acc_number_cda,
             des2.des_description_summary des_description_summary_cda,
             fix.acs_pf_account_id, acc3.acc_number acc_number_pf,
             des3.des_description_summary des_description_summary_pf,
             fix.acs_pj_account_id, acc4.acc_number acc_number_pj,
             des4.des_description_summary des_description_summary_pj,
             fix.fam_fam_fixed_assets_id, fix.pac_person_id, per.per_name,
             fix.hrm_person_id, hpe.per_fullname, fix.doc_record_id,
             dre.rco_title, dre.rco_description,
             fix_far.c_fixed_assets_typ c_fixed_assets_typ_far,
             fix_far.fix_number fix_number_far,
             fix_far.fix_short_descr fix_short_descr_far,
             fix_son.c_fixed_assets_typ c_fixed_assets_typ_son,
             fix_son.fix_number fix_number_son,
             fix_son.fix_short_descr fix_short_descr_son, fix.a_datecre,
             fix.a_datemod, fix.a_idmod, fix.a_idcre,
             fix.dic_fam_fix_freecod1_id, fix.dic_fam_fix_freecod2_id,
             fix.dic_fam_fix_freecod3_id, fix.dic_fam_fix_freecod4_id,
             fix.dic_fam_fix_freecod5_id, fix.dic_fam_fix_freecod6_id,
             fix.dic_fam_fix_freecod7_id, fix.dic_fam_fix_freecod8_id,
             fix.dic_fam_fix_freecod9_id, fix.dic_fam_fix_freecod10_id,
             cat.cat_descr,
             (SELECT MAX (fdo.fdo_ext_number)
                FROM fam_imputation fim, fam_document fdo
               WHERE fim.fam_fixed_assets_id =
                                       fix.fam_fixed_assets_id
                 AND fim.fam_document_id = fdo.fam_document_id)
                                                               fdo_ext_number,
             gco.goo_major_reference
        FROM doc_record dre,
             hrm_person hpe,
             pac_person per,
             acs_account acc1,
             acs_account acc2,
             acs_account acc3,
             acs_account acc4,
             acs_description des1,
             acs_description des2,
             acs_description des3,
             acs_description des4,
             fam_fixed_assets fix_son,
             fam_fixed_assets fix_far,
             fam_fixed_assets fix,
             fam_fixed_assets_categ cat,
             gco_good gco
       WHERE fix.fam_fixed_assets_id = fix_far.fam_fam_fixed_assets_id(+)
         AND fix_son.fam_fixed_assets_id(+) = fix.fam_fam_fixed_assets_id
         AND fix.acs_division_account_id = acc1.acs_account_id(+)
         AND fix.acs_cda_account_id = acc2.acs_account_id(+)
         AND fix.acs_pf_account_id = acc3.acs_account_id(+)
         AND fix.acs_pj_account_id = acc4.acs_account_id(+)
         AND acc1.acs_account_id = des1.acs_account_id(+)
         AND des1.pc_lang_id(+) = vpc_lang_id
         AND acc2.acs_account_id = des2.acs_account_id(+)
         AND des2.pc_lang_id(+) = vpc_lang_id
         AND acc3.acs_account_id = des3.acs_account_id(+)
         AND des3.pc_lang_id(+) = vpc_lang_id
         AND acc4.acs_account_id = des4.acs_account_id(+)
         AND des4.pc_lang_id(+) = vpc_lang_id
         AND fix.pac_person_id = per.pac_person_id(+)
         AND fix.hrm_person_id = hpe.hrm_person_id(+)
         AND fix.doc_record_id = dre.doc_record_id(+)
         AND fix.fam_fixed_assets_categ_id = cat.fam_fixed_assets_categ_id(+)
         AND fix.gco_good_id = gco.gco_good_id(+)
         AND ((parameter_10 is null) and (parameter_0 is null OR fix.fix_number >= parameter_0) AND (parameter_1 is null OR fix.fix_number <= parameter_1)
          OR  (fix.fam_fixed_assets_id = parameter_10))
         AND ((parameter_4 is null OR cat.cat_descr >= parameter_4) AND (parameter_5 is null OR cat.cat_descr <= parameter_5))
         AND INSTR (parameter_2, fix.c_fixed_assets_status) > 0
         AND (   parameter_6 = '0'
              OR (    parameter_6 = '1'
                  AND fix.a_datecre >= p_7
                  AND fix.a_datecre <= p_8
                  AND (fix.a_idcre = parameter_9 OR parameter_9 IS NULL)
                 )
              OR (    parameter_6 = '2'
                  AND fix.a_datemod >= p_7
                  AND fix.a_datemod <= p_8
                  AND (fix.a_idmod = parameter_9 OR parameter_9 IS NULL)
                 )
             );
END rpt_fam_fixed_assets_form;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_FREE_CODE_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   procuser_lanid   IN       VARCHAR2
)
IS
/*
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 27 FEB 2008
* @LASTUPDATE
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: Fixed assets number
* @PARAM PROCUSER_LANID: User language
*/
   vpc_lang_id   NUMBER (12);
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT fix.fam_fixed_assets_id, fix.fix_number,
             fix.dic_fam_fix_freecod1_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD1',
                       fix.dic_fam_fix_freecod1_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod1_desc,
             fix.dic_fam_fix_freecod2_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD2',
                       fix.dic_fam_fix_freecod2_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod2_desc,
             fix.dic_fam_fix_freecod3_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD3',
                       fix.dic_fam_fix_freecod3_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod3_desc,
             fix.dic_fam_fix_freecod4_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD4',
                       fix.dic_fam_fix_freecod4_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod4_desc,
             fix.dic_fam_fix_freecod5_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD5',
                       fix.dic_fam_fix_freecod5_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod5_desc,
             fix.dic_fam_fix_freecod6_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD6',
                       fix.dic_fam_fix_freecod6_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod6_desc,
             fix.dic_fam_fix_freecod7_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD7',
                       fix.dic_fam_fix_freecod7_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod7_desc,
             fix.dic_fam_fix_freecod8_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD8',
                       fix.dic_fam_fix_freecod8_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod8_desc,
             fix.dic_fam_fix_freecod9_id,
             com_dic_functions.getdicodescr
                      ('DIC_FAM_FIX_FREECOD9',
                       fix.dic_fam_fix_freecod9_id,
                       vpc_lang_id
                      ) dic_fam_fix_freecod9_desc,
             fix.dic_fam_fix_freecod10_id,
             com_dic_functions.getdicodescr
                    ('DIC_FAM_FIX_FREECOD10',
                     fix.dic_fam_fix_freecod10_id,
                     vpc_lang_id
                    ) dic_fam_fix_freecod10_desc
        FROM fam_fixed_assets fix
       WHERE fix.fix_number = parameter_0;
END rpt_fam_free_code_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_IMPUTATION_CATEG_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 29 DEC 2008
* @LASTUPDATE 24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: FAM_FIXED_ASSETS_ID
* @PARAM PROCUSER_LANID: User language
*/
BEGIN
   OPEN arefcursor FOR
      SELECT '1' group_string, imp.fam_imputation_account_id,
             imp.fam_default_id, val.val_key, ass.fam_fixed_assets_id,
             imp.c_fam_imputation_typ, imp.acs_financial_account_id,
             acc.acc_number acc_number_fin, imp.acs_division_account_id,
             div.acc_number acc_number_div, imp.acs_cpn_account_id,
             cpn.acc_number acc_number_cpn, imp.acs_cda_account_id,
             cda.acc_number acc_number_cda, imp.acs_pf_account_id,
             pf.acc_number acc_number_pf, imp.acs_pj_account_id,
             pj.acc_number acc_number_pj
        FROM acs_account pj,
             acs_account pf,
             acs_account cda,
             acs_account cpn,
             acs_account div,
             acs_account acc,
             fam_fixed_assets ass,
             fam_imputation_account imp,
             fam_default def,
             fam_managed_value val
       WHERE imp.fam_default_id = def.fam_default_id
         AND def.fam_managed_value_id = val.fam_managed_value_id
         AND def.fam_fixed_assets_categ_id = ass.fam_fixed_assets_categ_id
         AND imp.acs_financial_account_id = acc.acs_account_id(+)
         AND imp.acs_division_account_id = div.acs_account_id(+)
         AND imp.acs_cpn_account_id = cpn.acs_account_id(+)
         AND imp.acs_cda_account_id = cda.acs_account_id(+)
         AND imp.acs_pf_account_id = pf.acs_account_id(+)
         AND imp.acs_pj_account_id = pj.acs_account_id(+)
         AND ass.fam_fixed_assets_id = TO_NUMBER (parameter_0);
END rpt_fam_imputation_categ_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_IMPUTATION_DET" (
  aRefCursor  in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0 in     varchar2
, PARAMETER_1 in     varchar2
, PROCPARAM_0 in     varchar2
, PROCPARAM_1 in     varchar2
, PROCPARAM_2 in     varchar2
, PROCPARAM_3 in     varchar2
, PROCPARAM_4 in     varchar2
, PROCPARAM_5 in     varchar2
, PROCPARAM_6 in     varchar2
, PROCPARAM_7 in     varchar2
, PROCPARAM_8 in     varchar2
, PROCUSER_LANID in  pcs.pc_lang.lanid%type
)
is
/**
  Procédure stockée utilisée pour le rapport FAM_IMPUTATION_DET (Mouvements Immobilisations)

  @author SDO
  @lastUpdate
  @version 2003
  @public
  @param PARAMETER_0    Journal status=PROV (:0 = No, 1 = Yes)
  @param PARAMETER_1    Journal status=DEF  (:0 = No, 1 = Yes)
  @param PROCPARAM_0    Exercice            (FYE_NO_EXERCICE)
  @param PROCPARAM_1    Date du             (FIM_TRANSACTION_DATE)
  @param PROCPARAM_2    Date au             (FIM_TRANSACTION_DATE)
  @param PROCPARAM_3    Immobilisation du   (FIX_NUMBER)
  @param PROCPARAM_4    Immobilisation au   (FIX_NUMBER)
  @param PROCPARAM_5    Catégorie  de       (CAT_DESCR)
  @param PROCPARAM_6    Catégorie  à        (CAT_DESCR)
  @param PROCPARAM_7    Valeurs gérées      MANAGED_VALUE_ID(List)    '' = All sinon liste des ID
  @param PROCPARAM_8    Types transactions  C_FAM_TRANSACTION_TYP(List)    '' = All sinon liste des ID
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

BEGIN
pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;

IF (PROCPARAM_0 is null) and (PROCPARAM_5 is null) and (PROCPARAM_6 is null) THEN /** Sans exercice et sans catégorie */
  open aRefCursor for
    SELECT
      FIX.FAM_FIXED_ASSETS_ID,
      FIX.FIX_NUMBER,
      FIX.FIX_SHORT_DESCR,
      FIX.FIX_LONG_DESCR,
      CAT.FAM_FIXED_ASSETS_CATEG_ID,
      CAT.CAT_DESCR,
      FIM.FAM_IMPUTATION_ID,
      FIM.C_FAM_TRANSACTION_TYP,
      PCS.PC_FUNCTIONS.GETDESCODEDESCR('C_FAM_TRANSACTION_TYP',FIM.C_FAM_TRANSACTION_TYP,VPC_LANG_ID) TRANSACTION_DESCR,
      FIM.FIM_TRANSACTION_DATE,
      FIM.FIM_VALUE_DATE,
      FIM.FIM_DESCR,
      FIM.ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_LC_D AMOUNT_LC_D,
      FIM.FIM_AMOUNT_LC_C AMOUNT_LC_C,
      FIM.ACS_ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_FC_D AMOUNT_FC_D,
      FIM.FIM_AMOUNT_FC_C AMOUNT_FC_C,
      FIM.FAM_JOURNAL_ID,
      FIM.FAM_DOCUMENT_ID,
      FJO.FJO_NUMBER,
      FJO.FJO_DESCR,
      FJO.C_JOURNAL_STATUS,
      FJO.ACS_FINANCIAL_YEAR_ID,
      FVA.FAM_MANAGED_VALUE_ID,
      FDO.FAM_DOCUMENT_ID,
      FDO.FDO_DOCUMENT_DATE,
      FDO.FDO_AMOUNT,
      FDO.FDO_INT_NUMBER,
      FDO.FDO_EXT_NUMBER,
      FDO.FAM_CATALOGUE_ID,
      VAL.VAL_KEY,
      VAL.VAL_DESCR
    FROM
      FAM_DOCUMENT            FDO,
      FAM_MANAGED_VALUE       VAL,
      FAM_VAL_IMPUTATION      FVA,
      FAM_JOURNAL             FJO,
      FAM_IMPUTATION          FIM,
      FAM_FIXED_ASSETS_CATEG  CAT,
      FAM_FIXED_ASSETS        FIX
    WHERE
      FIX.FIX_NUMBER                    >= PROCPARAM_3 AND
      FIX.FIX_NUMBER                    <= PROCPARAM_4 AND
      FIX.FAM_FIXED_ASSETS_CATEG_ID     = CAT.FAM_FIXED_ASSETS_CATEG_ID AND
      FIX.FAM_FIXED_ASSETS_ID           = FIM.FAM_FIXED_ASSETS_ID AND
      FIM.FAM_DOCUMENT_ID               = FDO.FAM_DOCUMENT_ID AND
      FIM.FAM_IMPUTATION_ID             = FVA.FAM_IMPUTATION_ID AND
      (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||FVA.FAM_MANAGED_VALUE_ID||',')) > 0 OR PROCPARAM_7 is null) AND
      FIM.FAM_JOURNAL_ID                = FJO.FAM_JOURNAL_ID AND
      FIM.FIM_TRANSACTION_DATE          >= to_date(PROCPARAM_1,'YYYYMMDD') AND
      FIM.FIM_TRANSACTION_DATE          <= to_date(PROCPARAM_2,'YYYYMMDD') AND
      FVA.FAM_MANAGED_VALUE_ID          = VAL.FAM_MANAGED_VALUE_ID AND
      (INSTR(','||PROCPARAM_8||',', TO_CHAR(','||FIM.C_FAM_TRANSACTION_TYP||',')) > 0 OR PROCPARAM_8 is null) AND
      ((PARAMETER_0 ='1' AND FJO.C_JOURNAL_STATUS ='PROV')
         OR (PARAMETER_1 ='1' AND FJO.C_JOURNAL_STATUS ='DEF')
         OR (PARAMETER_1 ='0' AND  PARAMETER_0 ='0'))

      ;
ELSIF (PROCPARAM_0 is null) and (PROCPARAM_3 is null) and (PROCPARAM_4 is null) THEN /** Sans exercice et sans N° d'immobilisation */
  open aRefCursor for
    SELECT
      CAT.FAM_FIXED_ASSETS_CATEG_ID,
      CAT.CAT_DESCR,
      FIX.FAM_FIXED_ASSETS_ID,
      FIX.FIX_NUMBER,
      FIX.FIX_SHORT_DESCR,
      FIX.FIX_LONG_DESCR,
      FIM.FAM_IMPUTATION_ID,
      FIM.C_FAM_TRANSACTION_TYP,
      PCS.PC_FUNCTIONS.GETDESCODEDESCR('C_FAM_TRANSACTION_TYP',FIM.C_FAM_TRANSACTION_TYP,VPC_LANG_ID) TRANSACTION_DESCR,
      FIM.FIM_TRANSACTION_DATE,
      FIM.FIM_VALUE_DATE,
      FIM.FIM_DESCR,
      FIM.ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_LC_D AMOUNT_LC_D,
      FIM.FIM_AMOUNT_LC_C AMOUNT_LC_C,
      FIM.ACS_ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_FC_D AMOUNT_FC_D,
      FIM.FIM_AMOUNT_FC_C AMOUNT_FC_C,
      FIM.FAM_JOURNAL_ID,
      FIM.FAM_DOCUMENT_ID,
      FJO.FJO_NUMBER,
      FJO.FJO_DESCR,
      FJO.C_JOURNAL_STATUS,
      FJO.ACS_FINANCIAL_YEAR_ID,
      FVA.FAM_MANAGED_VALUE_ID,
      FDO.FAM_DOCUMENT_ID,
      FDO.FDO_DOCUMENT_DATE,
      FDO.FDO_AMOUNT,
      FDO.FDO_INT_NUMBER,
      FDO.FDO_EXT_NUMBER,
      FDO.FAM_CATALOGUE_ID,
      VAL.VAL_KEY,
      VAL.VAL_DESCR
    FROM
      FAM_DOCUMENT            FDO,
      FAM_MANAGED_VALUE       VAL,
      FAM_VAL_IMPUTATION      FVA,
      FAM_JOURNAL             FJO,
      FAM_IMPUTATION          FIM,
      FAM_FIXED_ASSETS        FIX,
      FAM_FIXED_ASSETS_CATEG  CAT
    WHERE
      CAT.CAT_DESCR                     >= PROCPARAM_5 AND
      CAT.CAT_DESCR                     <= PROCPARAM_6 AND
      FIX.FAM_FIXED_ASSETS_CATEG_ID     = CAT.FAM_FIXED_ASSETS_CATEG_ID AND
      FIX.FAM_FIXED_ASSETS_ID           = FIM.FAM_FIXED_ASSETS_ID AND
      FIM.FAM_DOCUMENT_ID               = FDO.FAM_DOCUMENT_ID AND
      FIM.FAM_IMPUTATION_ID             = FVA.FAM_IMPUTATION_ID AND
      (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||FVA.FAM_MANAGED_VALUE_ID||',')) > 0 OR PROCPARAM_7 is null) AND
      FIM.FAM_JOURNAL_ID                = FJO.FAM_JOURNAL_ID AND
      FIM.FIM_TRANSACTION_DATE          >= to_date(PROCPARAM_1,'YYYYMMDD') AND
      FIM.FIM_TRANSACTION_DATE          <= to_date(PROCPARAM_2,'YYYYMMDD') AND
      FVA.FAM_MANAGED_VALUE_ID          = VAL.FAM_MANAGED_VALUE_ID AND
      (INSTR(','||PROCPARAM_8||',', TO_CHAR(','||FIM.C_FAM_TRANSACTION_TYP||',')) > 0 OR PROCPARAM_8 is null) AND
      ((PARAMETER_0 ='1' AND FJO.C_JOURNAL_STATUS ='PROV')
         OR (PARAMETER_1 ='1' AND FJO.C_JOURNAL_STATUS ='DEF')
        OR (PARAMETER_1 ='0' AND  PARAMETER_0 ='0'))

      ;
ELSIF (PROCPARAM_5 is null) and (PROCPARAM_6 is null) THEN /** Sans catégorie */
  open aRefCursor for
    SELECT
      FIX.FAM_FIXED_ASSETS_ID,
      FIX.FIX_NUMBER,
      FIX.FIX_SHORT_DESCR,
      FIX.FIX_LONG_DESCR,
      CAT.FAM_FIXED_ASSETS_CATEG_ID,
      CAT.CAT_DESCR,
      FIM.FAM_IMPUTATION_ID,
      FIM.C_FAM_TRANSACTION_TYP,
      PCS.PC_FUNCTIONS.GETDESCODEDESCR('C_FAM_TRANSACTION_TYP',FIM.C_FAM_TRANSACTION_TYP,VPC_LANG_ID) TRANSACTION_DESCR,
      FIM.FIM_TRANSACTION_DATE,
      FIM.FIM_VALUE_DATE,
      FIM.FIM_DESCR,
      FIM.ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_LC_D AMOUNT_LC_D,
      FIM.FIM_AMOUNT_LC_C AMOUNT_LC_C,
      FIM.ACS_ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_FC_D AMOUNT_FC_D,
      FIM.FIM_AMOUNT_FC_C AMOUNT_FC_C,
      FIM.FAM_JOURNAL_ID,
      FIM.FAM_DOCUMENT_ID,
      FJO.FJO_NUMBER,
      FJO.FJO_DESCR,
      FJO.C_JOURNAL_STATUS,
      FJO.ACS_FINANCIAL_YEAR_ID,
      FVA.FAM_MANAGED_VALUE_ID,
      FDO.FAM_DOCUMENT_ID,
      FDO.FDO_DOCUMENT_DATE,
      FDO.FDO_AMOUNT,
      FDO.FDO_INT_NUMBER,
      FDO.FDO_EXT_NUMBER,
      FDO.FAM_CATALOGUE_ID,
      VAL.VAL_KEY,
      VAL.VAL_DESCR
    FROM
      ACS_FINANCIAL_YEAR      FYE,
      ACS_PERIOD              PER,
      FAM_DOCUMENT            FDO,
      FAM_MANAGED_VALUE       VAL,
      FAM_VAL_IMPUTATION      FVA,
      FAM_JOURNAL             FJO,
      FAM_IMPUTATION          FIM,
      FAM_FIXED_ASSETS_CATEG  CAT,
      FAM_FIXED_ASSETS        FIX
    WHERE
      FIX.FIX_NUMBER                    >= PROCPARAM_3 AND
      FIX.FIX_NUMBER                    <= PROCPARAM_4 AND
      FIX.FAM_FIXED_ASSETS_CATEG_ID     = CAT.FAM_FIXED_ASSETS_CATEG_ID AND
      FIX.FAM_FIXED_ASSETS_ID           = FIM.FAM_FIXED_ASSETS_ID AND
      FIM.FAM_DOCUMENT_ID               = FDO.FAM_DOCUMENT_ID AND
      FIM.FAM_IMPUTATION_ID             = FVA.FAM_IMPUTATION_ID AND
      (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||FVA.FAM_MANAGED_VALUE_ID||',')) > 0 OR PROCPARAM_7 is null) AND
      FIM.FIM_TRANSACTION_DATE          >= to_date(PROCPARAM_1,'YYYYMMDD') AND
      FIM.FIM_TRANSACTION_DATE          <= to_date(PROCPARAM_2,'YYYYMMDD') AND
      FIM.FAM_JOURNAL_ID                = FJO.FAM_JOURNAL_ID AND
      FVA.FAM_MANAGED_VALUE_ID          = VAL.FAM_MANAGED_VALUE_ID AND
      FIM.ACS_PERIOD_ID                 = PER.ACS_PERIOD_ID AND
      PER.ACS_FINANCIAL_YEAR_ID         = FYE.ACS_FINANCIAL_YEAR_ID AND
      FYE.FYE_NO_EXERCICE               = PROCPARAM_0 AND
      (INSTR(','||PROCPARAM_8||',', TO_CHAR(','||FIM.C_FAM_TRANSACTION_TYP||',')) > 0 OR PROCPARAM_8 is null) AND
      ((PARAMETER_0 ='1' AND FJO.C_JOURNAL_STATUS ='PROV')
         OR (PARAMETER_1 ='1' AND FJO.C_JOURNAL_STATUS ='DEF')
         OR (PARAMETER_1 ='0' AND  PARAMETER_0 ='0'))

      ;
ELSIF (PROCPARAM_3 is null) and (PROCPARAM_4 is null) THEN /** Sans immobilisation */
  open aRefCursor for
    SELECT
      CAT.FAM_FIXED_ASSETS_CATEG_ID,
      CAT.CAT_DESCR,
      FIX.FAM_FIXED_ASSETS_ID,
      FIX.FIX_NUMBER,
      FIX.FIX_SHORT_DESCR,
      FIX.FIX_LONG_DESCR,
      FIM.FAM_IMPUTATION_ID,
      FIM.C_FAM_TRANSACTION_TYP,
      PCS.PC_FUNCTIONS.GETDESCODEDESCR('C_FAM_TRANSACTION_TYP',FIM.C_FAM_TRANSACTION_TYP,VPC_LANG_ID) TRANSACTION_DESCR,
      FIM.FIM_TRANSACTION_DATE,
      FIM.FIM_VALUE_DATE,
      FIM.FIM_DESCR,
      FIM.ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_LC_D AMOUNT_LC_D,
      FIM.FIM_AMOUNT_LC_C AMOUNT_LC_C,
      FIM.ACS_ACS_FINANCIAL_CURRENCY_ID,
      FIM.FIM_AMOUNT_FC_D AMOUNT_FC_D,
      FIM.FIM_AMOUNT_FC_C AMOUNT_FC_C,
      FIM.FAM_JOURNAL_ID,
      FIM.FAM_DOCUMENT_ID,
      FJO.FJO_NUMBER,
      FJO.FJO_DESCR,
      FJO.C_JOURNAL_STATUS,
      FJO.ACS_FINANCIAL_YEAR_ID,
      FVA.FAM_MANAGED_VALUE_ID,
      FDO.FAM_DOCUMENT_ID,
      FDO.FDO_DOCUMENT_DATE,
      FDO.FDO_AMOUNT,
      FDO.FDO_INT_NUMBER,
      FDO.FDO_EXT_NUMBER,
      FDO.FAM_CATALOGUE_ID,
      VAL.VAL_KEY,
      VAL.VAL_DESCR
    FROM
      ACS_FINANCIAL_YEAR      FYE,
      ACS_PERIOD              PER,
      FAM_DOCUMENT            FDO,
      FAM_MANAGED_VALUE       VAL,
      FAM_VAL_IMPUTATION      FVA,
      FAM_JOURNAL             FJO,
      FAM_IMPUTATION          FIM,
      FAM_FIXED_ASSETS        FIX,
      FAM_FIXED_ASSETS_CATEG  CAT
    WHERE
      CAT.CAT_DESCR                     >= PROCPARAM_5 AND
      CAT.CAT_DESCR                     <= PROCPARAM_6 AND
      FIX.FAM_FIXED_ASSETS_CATEG_ID     = CAT.FAM_FIXED_ASSETS_CATEG_ID AND
      FIX.FAM_FIXED_ASSETS_ID           = FIM.FAM_FIXED_ASSETS_ID AND
      FIM.FAM_DOCUMENT_ID               = FDO.FAM_DOCUMENT_ID AND
      FIM.FAM_IMPUTATION_ID             = FVA.FAM_IMPUTATION_ID AND
      (INSTR(','||PROCPARAM_7||',', TO_CHAR(','||FVA.FAM_MANAGED_VALUE_ID||',')) > 0 OR PROCPARAM_7 is null) AND
      FIM.FAM_JOURNAL_ID                = FJO.FAM_JOURNAL_ID AND
      FIM.FIM_TRANSACTION_DATE          >= to_date(PROCPARAM_1,'YYYYMMDD') AND
      FIM.FIM_TRANSACTION_DATE          <= to_date(PROCPARAM_2,'YYYYMMDD') AND
      FVA.FAM_MANAGED_VALUE_ID          = VAL.FAM_MANAGED_VALUE_ID AND
      FIM.ACS_PERIOD_ID                 = PER.ACS_PERIOD_ID AND
      PER.ACS_FINANCIAL_YEAR_ID         = FYE.ACS_FINANCIAL_YEAR_ID AND
      FYE.FYE_NO_EXERCICE               = PROCPARAM_0 AND
      (INSTR(','||PROCPARAM_8||',', TO_CHAR(','||FIM.C_FAM_TRANSACTION_TYP||',')) > 0 OR PROCPARAM_8 is null) AND
      --((PARAMETER_0 ='1' AND PARAMETER_1 ='1' AND (FJO.C_JOURNAL_STATUS ='PROV'OR FJO.C_JOURNAL_STATUS ='DEF'))
        ((PARAMETER_0 ='1' AND FJO.C_JOURNAL_STATUS ='PROV')
         OR (PARAMETER_1 ='1' AND FJO.C_JOURNAL_STATUS ='DEF')
        OR (PARAMETER_1 ='0' AND  PARAMETER_0 ='0'))

      ;
end if;
end RPT_FAM_IMPUTATION_DET;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_IMPUTATION_IMMO_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 29 DEC 2008
* @LASTUPDATE 24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: FAM_FIXED_ASSETS_ID
* @PARAM PROCUSER_LANID: User language
*/
BEGIN
   OPEN arefcursor FOR
      SELECT '1' group_string, imp.fam_imputation_account_id,
             imp.fam_amo_application_id, val.val_key, cat.cat_descr,
             ass.fam_fixed_assets_id, imp.c_fam_imputation_typ,
             imp.acs_financial_account_id, acc.acc_number acc_number_fin,
             imp.acs_division_account_id, div.acc_number acc_number_div,
             imp.acs_cpn_account_id, cpn.acc_number acc_number_cpn,
             imp.acs_cda_account_id, cda.acc_number acc_number_cda,
             imp.acs_pf_account_id, pf.acc_number acc_number_pf,
             imp.acs_pj_account_id, pj.acc_number acc_number_pj
        FROM acs_account pj,
             acs_account pf,
             acs_account cda,
             acs_account cpn,
             acs_account div,
             acs_account acc,
             fam_default def,
             fam_fixed_assets ass,
             fam_imputation_account imp,
             fam_amo_application app,
             fam_fixed_assets_categ cat,
             fam_managed_value val
       WHERE imp.fam_amo_application_id = app.fam_amo_application_id
         AND app.fam_fixed_assets_id = ass.fam_fixed_assets_id
         AND ass.fam_fixed_assets_categ_id = cat.fam_fixed_assets_categ_id
         AND cat.fam_fixed_assets_categ_id = def.fam_fixed_assets_categ_id
         AND def.fam_managed_value_id = val.fam_managed_value_id
         AND app.fam_managed_value_id = def.fam_managed_value_id
         AND imp.acs_financial_account_id = acc.acs_account_id(+)
         AND imp.acs_division_account_id = div.acs_account_id(+)
         AND imp.acs_cpn_account_id = cpn.acs_account_id(+)
         AND imp.acs_cda_account_id = cda.acs_account_id(+)
         AND imp.acs_pf_account_id = pf.acs_account_id(+)
         AND imp.acs_pj_account_id = pj.acs_account_id(+)
         AND ass.fam_fixed_assets_id = TO_NUMBER (parameter_0);
END rpt_fam_imputation_immo_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_INSURANCE" (
 aRefCursor       IN OUT CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   IN     pcs.pc_lang.lanid%type,
 PARAMETER_0      IN     VARCHAR2,
 PARAMETER_1      IN     VARCHAR2,
 PARAMETER_2      IN     VARCHAR2,
 PARAMETER_3      IN     VARCHAR2
)
IS

/**
*Description
Used for report FAM_INSURANCE

*author JLI
*lastUpdate 3 feb 2010
* @public
* @param PARAMETER_0          POLICY_NUMBER(FROM)
* @param PARAMETER_1          POLICY_NUMBER(TO)
* @param PARAMETER_2          Regroupement : 0 = sans, 1= Division, 2= CDA
* @param PARAMETER_3          FIX ASSET STATUS LIST
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


BEGIN


pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

SELECT
CDA.ACS_ACCOUNT_ID,
CDA.ACC_NUMBER,
DIV.ACS_ACCOUNT_ID ACS_ACCOUNT_ID_DIV,
DIV.ACC_NUMBER ACC_NUMBER_DIV,
FIX.FIX_NUMBER,
FIX.FIX_SHORT_DESCR,
FIX.FIX_PURCHASE_DATE,
FIX.C_FIXED_ASSETS_STATUS,
SUR.INS_DECLARED_VALUE,
SUR.INS_EFFECTIVE_VALUE,
SUR.INS_NEW_VALUE,
SUR.INS_PREMIUM,
SUR.INS_PREMIUM_RATE,
POL.POL_NUMBER,
POL.POL_PREMIUM,
POL.POL_INDEX,
POL.POL_DESIGNATION,
ACS_FUNCTION.GetAccountDescriptionSummary(DECODE(PARAMETER_2,0,0
                                                 ,1,DECODE(DIV.ACS_ACCOUNT_ID,NULL,0,DIV.ACS_ACCOUNT_ID)
                                                 ,DECODE(CDA.ACS_ACCOUNT_ID,NULL,0,CDA.ACS_ACCOUNT_ID))) ACC_DES
FROM
ACS_ACCOUNT CDA,
ACS_ACCOUNT DIV,
FAM_FIXED_ASSETS FIX,
FAM_INSURANCE SUR,
FAM_INSURANCE_POLICY POL
WHERE
POL.FAM_INSURANCE_POLICY_ID = SUR.FAM_INSURANCE_POLICY_ID
AND SUR.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID
AND FIX.ACS_DIVISION_ACCOUNT_ID = DIV.ACS_ACCOUNT_ID(+)
AND FIX.ACS_CDA_ACCOUNT_ID = CDA.ACS_ACCOUNT_ID(+)
AND ((PARAMETER_0 IS NULL AND PARAMETER_1 IS NULL)
    OR (PARAMETER_0 IS NOT NULL AND PARAMETER_1 IS NULL AND POL.POL_NUMBER >= PARAMETER_0)
    OR (PARAMETER_1 IS NOT NULL AND PARAMETER_0 IS NULL AND POL.POL_NUMBER <= PARAMETER_1)
    OR (PARAMETER_0 IS NOT NULL AND PARAMETER_1 IS NOT NULL AND POL.POL_NUMBER >= PARAMETER_0 AND POL.POL_NUMBER <= PARAMETER_1))
AND instr( ',' || PARAMETER_3 || ',' ,  ',' || FIX.C_FIXED_ASSETS_STATUS ||',' ) > 0 ;


END RPT_FAM_INSURANCE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_INSURANCE_POLICY_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description - used for the report FAM_FIXED_ASSETS_FORM

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 29 DEC 2008
* @LASTUPDATE 24 FEB 2009
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_0: FAM_FIXED_ASSETS_ID
* @PARAM PROCUSER_LANID: User language
*/
BEGIN
   OPEN arefcursor FOR
      SELECT '1' group_string,          --userd fro group header in subreport
                              per.pac_person_id, per.dic_person_politness_id,
             per.per_name, per.per_forename, per.per_short_name,
             per.per_activity, per.per_key1, per.per_key2, adr.add_principal,
             adr.dic_address_type_id, adr.add_address1, cty.cntid,
             cty.cntname, adr.pac_address_id, adr.add_zipcode, adr.add_city,
             adr.add_state, adr.add_format, adr.pc_lang_id,
             adr.c_partner_status, fis.fam_fixed_assets_id,
             fis.ins_declared_value, fis.ins_effective_value,
             fis.ins_new_value, fip.fam_insurance_policy_id, fip.pol_number,
             fip.pol_designation
        FROM pcs.pc_cntry cty,
             pac_address adr,
             pac_person per,
             fam_insurance fis,
             fam_insurance_policy fip
       WHERE adr.pac_person_id = per.pac_person_id
         AND cty.pc_cntry_id = adr.pc_cntry_id
         AND fis.fam_insurance_policy_id = fip.fam_insurance_policy_id
         AND fip.pac_person_id = per.pac_person_id
         AND fis.fam_fixed_assets_id = TO_NUMBER (parameter_0);
END rpt_fam_insurance_policy_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_JOURNAL" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_00   in     varchar2
, PARAMETER_01   in     varchar2
, PARAMETER_02   in     varchar2
, PROCUSER_LANID in     pcs.pc_lang.lanid%type
)
is
/**
* Description - used for the report FAM_JOURNAL

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR JLIU 12 MAY 2009
* @param PARAMETER_0    ACS_FINANCIAL_YEAR_ID
* @param PARAMETER_1    FJO_NUMBER
* @param PARAMETER_2    FJO_NUMBER
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin
  pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  VPC_LANG_ID  := pcs.PC_I_LIB_SESSION.GetUserLangId;

OPEN aRefCursor FOR
SELECT
FUR.FIN_LOCAL_CURRENCY,
YEA.FYE_NO_EXERCICE,
FDT.FAM_DOCUMENT_ID,
FDT.FDO_INT_NUMBER,
FDT.FDO_EXT_NUMBER,
FDT.FDO_DOCUMENT_DATE,
FIX.FIX_NUMBER,
FIX.FIX_SHORT_DESCR,
TEG.CAT_DESCR,
FIM.FIM_DESCR,
FIM.FIM_TRANSACTION_DATE,
FIM.FIM_VALUE_DATE,
FIM.FIM_AMOUNT_LC_D,
FIM.FIM_AMOUNT_LC_C,
FIM.FIM_AMOUNT_FC_D,
FIM.FIM_AMOUNT_FC_C,
FIM.FIM_EXCHANGE_RATE,
FIM.C_FAM_TRANSACTION_TYP,
JOU.FAM_JOURNAL_ID,
JOU.C_JOURNAL_STATUS,
JOU.FJO_NUMBER,
JOU.FJO_DESCR,
JOU.A_DATECRE,
JOU.A_DATEMOD,
JOU.A_IDCRE,
VAL.C_VALUE_CATEGORY,
VAL.VAL_KEY,
VAL.VAL_DESCR,
CUR.CURRENCY
FROM
ACS_FINANCIAL_CURRENCY FUR,
ACS_FINANCIAL_YEAR YEA,
FAM_CATALOGUE CAT,
FAM_DOCUMENT FDT,
FAM_FIXED_ASSETS FIX,
FAM_FIXED_ASSETS_CATEG TEG,
FAM_IMPUTATION FIM,
FAM_JOURNAL JOU,
FAM_MANAGED_VALUE VAL,
FAM_VAL_IMPUTATION VIM,
PCS.PC_CURR CUR
WHERE
FDT.FAM_DOCUMENT_ID = FIM.FAM_DOCUMENT_ID(+)
AND FIM.FAM_IMPUTATION_ID = VIM.FAM_IMPUTATION_ID(+)
AND VIM.FAM_MANAGED_VALUE_ID = VAL.FAM_MANAGED_VALUE_ID(+)
AND FIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
AND FIM.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID(+)
AND FIM.FAM_FIXED_ASSETS_CATEG_ID = TEG.FAM_FIXED_ASSETS_CATEG_ID
AND FDT.FAM_CATALOGUE_ID = CAT.FAM_CATALOGUE_ID(+)
AND FDT.FAM_JOURNAL_ID = JOU.FAM_JOURNAL_ID
AND JOU.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID
AND YEA.FYE_NO_EXERCICE = TO_NUMBER(PARAMETER_00)
AND JOU.FJO_NUMBER >= PARAMETER_01
AND JOU.FJO_NUMBER <= PARAMETER_02
;
end RPT_FAM_JOURNAL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_JOURNAL_ACCOUNTING" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description - Used for report FAM_JOURNAL_ACCOUTING

*@created JLIU 12 JAN 2009
*@lastUpdate   25 FEB 2009
*@public
*@param PARAMETER_0:  Exercice (FYE_NO_EXERCICE)
*@param PARAMETER_1:  Journal from (Jou_Number)
*@param PARAMETER_2:  Journal to (Jou_Number)
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT acc.acc_number acc_number, cda.acc_number cda_number,
             cpn.acc_number cpn_number, div.acc_number div_number,
             pf.acc_number pf_number, pj.acc_number pj_number,
             fur.fin_local_currency, yea.fye_no_exercice,
             ftm.c_fam_imputation_typ, ftm.fim_amount_lc_d,
             ftm.fim_amount_lc_c, ftm.fim_amount_fc_d, ftm.fim_amount_fc_c,
             fdo.fam_document_id, fdo.fdo_int_number, fdo.fdo_ext_number,
             fdo.fdo_document_date, ase.fix_number, ase.fix_short_descr,
             fim.fim_descr, fim.fim_transaction_date, fim.fim_value_date,
             fim.fim_exchange_rate, jou.fam_journal_id, jou.c_journal_status,
             jou.fjo_number, jou.fjo_descr, jou.a_datecre, jou.a_datemod,
             jou.a_idcre, cur.currency
        FROM acs_account acc,
             acs_account cda,
             acs_account cpn,
             acs_account div,
             acs_account pf,
             acs_account pj,
             acs_financial_currency fur,
             acs_financial_year yea,
             fam_act_imputation ftm,
             fam_document fdo,
             fam_fixed_assets ase,
             fam_imputation fim,
             fam_journal jou,
             pcs.pc_curr cur
       WHERE jou.fam_journal_id = fdo.fam_journal_id
         AND fdo.fam_document_id = ftm.fam_document_id(+)
         AND ftm.acs_financial_account_id = acc.acs_account_id(+)
         AND ftm.acs_division_account_id = div.acs_account_id(+)
         AND ftm.acs_cpn_account_id = cpn.acs_account_id(+)
         AND ftm.acs_cda_account_id = cda.acs_account_id(+)
         AND ftm.acs_pj_account_id = pj.acs_account_id(+)
         AND ftm.acs_pf_account_id = pf.acs_account_id(+)
         AND jou.acs_financial_year_id = yea.acs_financial_year_id
         AND ftm.fam_imputation_id = fim.fam_imputation_id(+)
         AND fim.acs_financial_currency_id = fur.acs_financial_currency_id
         AND fur.pc_curr_id = cur.pc_curr_id
         AND fim.fam_fixed_assets_id = ase.fam_fixed_assets_id(+)
         AND yea.fye_no_exercice = TO_NUMBER (parameter_0)
         AND jou.fjo_number >= TO_NUMBER (NVL(parameter_1,0))
         AND jou.fjo_number <= TO_NUMBER (NVL(parameter_2,999999));
END rpt_fam_journal_accounting;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_JOURNAL_ACC_SUM_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR2
)
IS
/**
*Description - used for report FAM_JOURNAL_ACCOUTING

*@created JLIU 12 JAN 2009
*@lastUpdate 25 FEB 2009
*@public
*@param PARAMETER_0:  FAM_JOURNAL_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT acc.acs_account_id acc_account_id, acc.acc_number acc_number,
             cda.acs_account_id cda_account_id, cda.acc_number cda_number,
             cpn.acs_account_id cpn_account_id, cpn.acc_number cpn_number,
             div.acs_account_id div_account_id, div.acc_number div_number,
             pf.acs_account_id pf_account_id, pf.acc_number pf_number,
             pj.acs_account_id pj_account_id, pj.acc_number pj_number,
             fur.fin_local_currency, yea.fye_no_exercice,
             ftm.c_fam_imputation_typ, ftm.fim_amount_lc_d,
             ftm.fim_amount_lc_c, ftm.fim_amount_fc_d, ftm.fim_amount_fc_c,
             fat.fam_catalogue_id, fat.fca_descr, jou.fam_journal_id,
             jou.fjo_descr, cur.currency
        FROM acs_account acc,
             acs_account cda,
             acs_account cpn,
             acs_account div,
             acs_account pf,
             acs_account pj,
             acs_financial_currency fur,
             acs_financial_year yea,
             fam_act_imputation ftm,
             fam_catalogue fat,
             fam_document fdo,
             fam_fixed_assets ase,
             fam_imputation fim,
             fam_journal jou,
             pcs.pc_curr cur
       WHERE jou.fam_journal_id = fdo.fam_journal_id
         AND fdo.fam_document_id = ftm.fam_document_id(+)
         AND ftm.acs_financial_account_id = acc.acs_account_id(+)
         AND ftm.acs_division_account_id = div.acs_account_id(+)
         AND ftm.acs_cpn_account_id = cpn.acs_account_id(+)
         AND ftm.acs_cda_account_id = cda.acs_account_id(+)
         AND ftm.acs_pj_account_id = pj.acs_account_id(+)
         AND ftm.acs_pf_account_id = pf.acs_account_id(+)
         AND jou.acs_financial_year_id = yea.acs_financial_year_id
         AND ftm.fam_imputation_id = fim.fam_imputation_id(+)
         AND fim.acs_financial_currency_id = fur.acs_financial_currency_id
         AND fur.pc_curr_id = cur.pc_curr_id
         AND fim.fam_fixed_assets_id = ase.fam_fixed_assets_id(+)
         AND fdo.fam_catalogue_id = fat.fam_catalogue_id
         AND jou.fam_journal_id = TO_NUMBER (parameter_0);
END rpt_fam_journal_acc_sum_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_STRUCTURE" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 PROCUSER_LANID   in     pcs.pc_lang.lanid%type
)
IS

/**
*Description
Used for report FAM_STRUCTURE

*author JLI
*lastUpdate July 23 2009
* @public
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;


BEGIN


pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

SELECT
DET.C_FAM_TRANSACTION_TYP,
STR.FAM_STRUCTURE_ID,
STR.STR_DESCRIPTION,
ELE.FAM_STRUCTURE_ELEMENT_ID,
ELE.ELE_DESCRIPTION,
ELE.ELE_SEQUENCE,
TRA.PC_LANG_ID,
TRA.TRA_DESCRIPTION
FROM
FAM_ELEMENT_DETAIL DET,
FAM_STRUCTURE STR,
FAM_STRUCTURE_ELEMENT ELE,
FAM_TRADUCTION TRA
WHERE
STR.FAM_STRUCTURE_ID = ELE.FAM_STRUCTURE_ID
AND ELE.FAM_STRUCTURE_ELEMENT_ID = DET.FAM_STRUCTURE_ELEMENT_ID
AND ELE.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
AND TRA.PC_LANG_ID = VPC_LANG_ID
;

END RPT_FAM_STRUCTURE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_SUMMARY_SUB" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, PARAMETER_0    in     varchar2
, PROCUSER_LANID in     pcs.pc_lang.lanid%type
)
is
/**
  Used for sub report of FAM_JOURNAL
  @author OJO.
  @lastUpdate
  @version 2003.
  @public
  @param PARAMETER_0    Titre de la liste.
*/
  VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin
  pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  VPC_LANG_ID  := pcs.PC_I_LIB_SESSION.GetUserLangId;

OPEN aRefCursor FOR
SELECT
FUR.FIN_LOCAL_CURRENCY,
FIM.FIM_AMOUNT_LC_D,
FIM.FIM_AMOUNT_LC_C,
FIM.FIM_AMOUNT_FC_D,
FIM.FIM_AMOUNT_FC_C,
FIM.FIM_EXCHANGE_RATE,
FIM.C_FAM_TRANSACTION_TYP,
JOU.FAM_JOURNAL_ID,
VAL.VAL_KEY,
VAL.VAL_DESCR,
CUR.CURRENCY
FROM
ACS_FINANCIAL_CURRENCY FUR,
ACS_FINANCIAL_YEAR YEA,
FAM_CATALOGUE CAT,
FAM_DOCUMENT FDT,
FAM_FIXED_ASSETS FIX,
FAM_FIXED_ASSETS_CATEG TEG,
FAM_IMPUTATION FIM,
FAM_JOURNAL JOU,
FAM_MANAGED_VALUE VAL,
FAM_VAL_IMPUTATION VIM,
PCS.PC_CURR CUR
WHERE
JOU.FAM_JOURNAL_ID = TO_NUMBER(PARAMETER_0)
AND FDT.FAM_DOCUMENT_ID = FIM.FAM_DOCUMENT_ID(+)
AND FIM.FAM_IMPUTATION_ID = VIM.FAM_IMPUTATION_ID(+)
AND VIM.FAM_MANAGED_VALUE_ID = VAL.FAM_MANAGED_VALUE_ID(+)
AND FIM.ACS_FINANCIAL_CURRENCY_ID = FUR.ACS_FINANCIAL_CURRENCY_ID
AND FUR.PC_CURR_ID = CUR.PC_CURR_ID
AND FIM.FAM_FIXED_ASSETS_ID = FIX.FAM_FIXED_ASSETS_ID(+)
AND FIM.FAM_FIXED_ASSETS_CATEG_ID = TEG.FAM_FIXED_ASSETS_CATEG_ID
AND FDT.FAM_CATALOGUE_ID = CAT.FAM_CATALOGUE_ID(+)
AND FDT.FAM_JOURNAL_ID = JOU.FAM_JOURNAL_ID
AND JOU.ACS_FINANCIAL_YEAR_ID = YEA.ACS_FINANCIAL_YEAR_ID

;
end RPT_FAM_SUMMARY_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_FAM_VALUE_EVOL" (
   arefcursor        in out   CRYSTAL_CURSOR_TYPES.DualCursorTyp,
   procuser_lanid    in       PCS.PC_LANG.LANID%type,
   parameter_1       in       varchar2,
   parameter_2       in       varchar2,
   parameter_3       in       varchar2,
   parameter_4       in       varchar2,
   parameter_6       in       varchar2,
   parameter_7       in       varchar2,
   parameter_8       in       varchar2,
   parameter_9       in       varchar2,
   parameter_10     in       varchar2,
   parameter_12     in       varchar2,
   parameter_13     in       varchar2,
   parameter_14     in       varchar2,
   parameter_15     in       varchar2,
   parameter_16     in       varchar2,
   parameter_17     in       varchar2,
   parameter_18     in       varchar2,
   parameter_19     in       varchar2,
   parameter_20     in       varchar2,
   parameter_21     in       varchar2,
   parameter_22     in       varchar2,
   parameter_23     in       varchar2,
   parameter_24     in       varchar2,
   parameter_25     in       varchar2,
   parameter_26     in       varchar2,
   parameter_27     in       varchar2,
   parameter_28     in       varchar2,
   parameter_29     in       varchar2,
   parameter_30     in       varchar2
)
is
    /**
    *Description - Used for report FAM_VALUE_EVOL

    *@created JLIU 12 JAN 2009
    *@lastUpdate VHA 24 OCT 2011
    *@public
    *@param parameter_1:  Fixed assets from
    *@param parameter_2:  Fixed assets to
    *@param parameter_3:  Category from
    *@param parameter_4:  Category t0
    *@param parameter_6:  Managed value
    *@param parameter_7:  Exercice
    *@param parameter_8:  Period beginning
    *@param parameter_9:  Period end
    *@param parameter_10: Liste des Status
    *@param parameter_11: Impression(0: Cumulated;1: Detailed)--Part of structure 1
    *@param parameter_12: Structure element D1
    *@param parameter_13: Structure element D2
    *@param parameter_14: Structure element D3
    *@param parameter_15: Structure element D4
    *@param parameter_16: Structure element D5
    *@param parameter_17: Structure element D6
    *@param parameter_18: Structure element E1
    *@param parameter_19: Structure element E2
    *@param parameter_20: Structure element E3
    *@param parameter_21: Structure element E4
    *@param parameter_22: Structure element E5
    *@param parameter_23: Structure element E6
    *@param parameter_24: Structure element F1
    *@param parameter_25: Structure element F2
    *@param parameter_26: Structure element F3
    *@param parameter_27: Structure element F4
    *@param parameter_28: Structure element F5
    *@param parameter_29: Structure element F6
    *@param parameter_30: Type d' immobilisation (0: principale / 1: tous)
    */
    vpc_lang_id   PCS.PC_LANG.PC_LANG_ID%type;              --user language id
begin
   PCS.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := PCS.PC_I_LIB_SESSION.getuserlangid;

   open arefcursor for
      select   FIX.FAM_FIXED_ASSETS_ID,
                 FIX.FIX_NUMBER,
                 FIX.FIX_SHORT_DESCR,
                 FIX.C_FIXED_ASSETS_STATUS,
                 PCS.PC_FUNCTIONS.getdescodedescr
                          ('C_FIXED_ASSETS_STATUS',
                           FIX.C_FIXED_ASSETS_STATUS,
                           vpc_lang_id
                          ) C_FIXED_ASSETS_STATUS_DESCR,
                 CAT.CAT_DESCR,
                 ACS_FUNCTION.getaccountnumber
                    (FAM_FUNCTIONS.getfixedassetfinaccid (FIX.FAM_FIXED_ASSETS_ID,
                                                          to_number  (parameter_6),
                                                          '10'
                                                         )
                    ) ACC_NUMBER,
                 ACS_FUNCTION.getaccountnumber
                    (FAM_FUNCTIONS.getfixedassetcdaaccid (FIX.fam_fixed_assets_id,
                                                          to_number  (parameter_6),
                                                          '61'
                                                         )
                    ) CDA_NUMBER,
                 ACS_FUNCTION.getaccountnumber
                    (FAM_FUNCTIONS.getfixedassetdivaccid (FIX.fam_fixed_assets_id,
                                                          to_number  (parameter_6),
                                                          '10'
                                                         )
                    ) DIV_NUMBER,
                 ACS_FUNCTION.getlocalcurrencyname LOCAL_CUR_NAME,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_12),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_D1,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_13),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_D2,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_14),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_D3,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_15),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_D4,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_16),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_D5,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            2,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_17),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) c_immo_es_d6,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_18),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E1,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_19),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E2,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_20),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E3,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_21),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E4,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_22),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E5,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            0,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_23),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_E6,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_24),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F1,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_25),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F2,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_26),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F3,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_27),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F4,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_28),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F5,
                 FAM_FUNCTIONS.structureelementamount
                                           (0,
                                            1,
                                            FIX.FAM_FIXED_ASSETS_ID,
                                            to_number  (parameter_6),
                                            to_number  (parameter_29),
                                            to_number  (parameter_7),
                                            to_number  (parameter_8),
                                            to_number  (parameter_9)
                                           ) C_IMMO_ES_F6,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_12)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D1,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_13)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D2,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_14)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D3,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_15)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D4,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_16)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D5,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_17)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_D6,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_18)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E1,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_19)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E2,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_20)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E3,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_21)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E4,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_22)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E5,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_23)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_E6,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_24)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F1,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_25)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F2,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_26)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F3,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_27)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F4,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_28)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F5,
                 (select decode (TRA.TRA_DESCRIPTION,
                                 null, STR.ELE_DESCRIPTION,
                                 TRA.TRA_DESCRIPTION
                                )
                    from FAM_STRUCTURE_ELEMENT STR, FAM_TRADUCTION TRA
                   where STR.FAM_STRUCTURE_ELEMENT_ID = to_number  (parameter_29)
                     and STR.FAM_STRUCTURE_ELEMENT_ID = TRA.FAM_STRUCTURE_ELEMENT_ID(+)
                     and (TRA.PC_LANG_ID = vpc_lang_id or TRA.PC_LANG_ID is null
                         )) DESCR_ES_F6,
                 (select DES.DES_DESCRIPTION_SUMMARY
                    from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID =
                            FAM_FUNCTIONS.getfixedassetfinaccid
                                    (FIX.FAM_FIXED_ASSETS_ID,
                                     to_number  (parameter_6),
                                     '10'
                                    )
                     and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_FIN,
                 (select DES.DES_DESCRIPTION_SUMMARY
                    from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID =
                            FAM_FUNCTIONS.getfixedassetdivaccid
                                    (FIX.FAM_FIXED_ASSETS_ID,
                                     to_number  (parameter_6),
                                     '10'
                                    )
                     and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_DIV,
                 (select DES.DES_DESCRIPTION_SUMMARY
                    from ACS_DESCRIPTION DES
                   where DES.ACS_ACCOUNT_ID =
                            FAM_FUNCTIONS.getfixedassetcdaaccid
                                    (FIX.FAM_FIXED_ASSETS_ID,
                                     to_number  (parameter_6),
                                     '61'
                                    )
                     and DES.PC_LANG_ID = vpc_lang_id) ACS_DESCRIPTION_CDA
        from FAM_FIXED_ASSETS FIX,
             FAM_FIXED_ASSETS_CATEG CAT
        where FIX.FAM_FIXED_ASSETS_CATEG_ID = CAT.FAM_FIXED_ASSETS_CATEG_ID
         and (   (    parameter_1 is not null
                  and parameter_2 is not null
                  and FIX.FIX_NUMBER >= parameter_1
                  and FIX.FIX_NUMBER <= parameter_2
                 )
              or (parameter_1 is null and FIX.FIX_NUMBER <= parameter_2)
              or (parameter_2 is null and FIX.FIX_NUMBER >= parameter_1)
              or (parameter_1 is null and parameter_2 is null)
             )
         and (   (    parameter_3 is not null
                  and parameter_4 is not null
                  and CAT.CAT_DESCR >= parameter_3
                  and CAT.CAT_DESCR <= parameter_4
                 )
              or (parameter_3 is null and CAT.CAT_DESCR <= parameter_4)
              or (parameter_4 is null and CAT.CAT_DESCR >= parameter_3)
              or (parameter_3 is null and parameter_4 is null)
             )

         and instr(',' ||parameter_10 ||',' , ',' || FIX.C_FIXED_ASSETS_STATUS || ',' ) > 0
         and (   (parameter_30 = '0' and  FIX.C_FIXED_ASSETS_TYP = '1')
                or (parameter_30 = '1' )
               );
end RPT_FAM_VALUE_EVOL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_AVANCE_MATERIAL_FOR" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_AVANCEMENT_MAT.
 * Replace the procedure GAL_AVANCE_MATERIAL_FOR_RPT
 * @lastUpdate VHA 17 September 2013
 * @public
* @param parameter_0  GAL_TASK_ID
*/
  s_sql_gal_project varchar2(32762);
  a_aff_id          gal_project.gal_project_id%type;
  a_session_id      gal_project.gal_project_id%type   default 1;
  vpc_lang_id       PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id       PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id       PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id      PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
   end if;

  if parameter_0 is not null then
    select gal_task.gal_project_id
      into a_aff_id
      from gal_task
     where gal_task.gal_task_id = parameter_0;
  end if;

    gal_project_calculation.suivi_materiel(a_aff_id, parameter_0, a_session_id, 'N');
    -- GENERATION DU CURSEUR POUR CRYSTAL --
    s_sql_gal_project  :=
      'select
                       GAL_TASK.GAL_TASK_ID
                     ,GAL_TASK.TAS_CODE
                     ,GAL_TASK.TAS_WORDING
                     ,GAL_PROJECT.PRJ_CODE
                     ,GAL_PROJECT.PRJ_WORDING
                     ,GAL_TASK.TAS_VERSION
                     ,GAL_NEED_FOLLOW_UP.GAL_NEED_FOLLOW_UP_ID
                     ,GAL_NEED_FOLLOW_UP.NFU_NOMENCLATURE_LEVEL
                     ,GAL_NEED_FOLLOW_UP.NFU_PLAN_MARK
                     ,GAL_NEED_FOLLOW_UP.NFU_MAJOR_REFERENCE
                     ,GAL_NEED_FOLLOW_UP.NFU_SHORT_DESCRIPTION
                     ,GAL_NEED_FOLLOW_UP.NFU_PLAN_NUMBER
                     ,GAL_NEED_FOLLOW_UP.NFU_SUPPLY_TYPE AS TYPEAPPRO
                     ,GAL_NEED_FOLLOW_UP.NFU_NET_QUANTITY_NEED
                     ,GAL_NEED_FOLLOW_UP.NFU_UNIT_OF_MEASURE
                     ,GAL_NEED_FOLLOW_UP.NFU_NEED_DATE
                     ,GAL_NEED_FOLLOW_UP.NFU_INFO_SUPPLY
                     ,GAL_NEED_FOLLOW_UP.NFU_AVAILABLE_QUANTITY
                     ,GAL_NEED_FOLLOW_UP.NFU_SUPPLY_QUANTITY
                     ,GAL_NEED_FOLLOW_UP.NFU_TO_LAUNCH_QUANTITY
                     ,GAL_NEED_FOLLOW_UP.NFU_INFO_COLOR_SUPPLY
                     ,GAL_RESOURCE_FOLLOW_UP.GAL_RESOURCE_FOLLOW_UP_ID
                     ,(case when
                      GAL_RESOURCE_FOLLOW_UP.RFU_TYPE = ' ||
      chr(39) ||
      '6DF' ||
      chr(39) ||
      ' then (select sss.TAS_CODE from GAL_TASK sss WHERE sss.GAL_TASK_ID = GAL_RESOURCE_FOLLOW_UP.GAL_MANUFACTURE_TASK_ID) else GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_NUMBER end) RFU_SUPPLY_NUMBER
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_COMMENT RFU_SUPPLIER
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_STATE
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_ENVISAGED_DATE
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_AVAILABLE_QUANTITY
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_QUANTITY
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_AVAILABLE_DATE
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_TYPE
                     ,GAL_RESOURCE_FOLLOW_UP.RFU_TYPE_NEED_OR_SUPPLY
                     from
                      GAL_TASK
                     ,GAL_TASK_CATEGORY
                     ,GAL_PROJECT
                     ,GAL_NEED_FOLLOW_UP
                     ,GAL_RESOURCE_FOLLOW_UP
                     where
                       GAL_TASK_CATEGORY.C_TCA_TASK_TYPE=1
                        and nvl(GAL_RESOURCE_FOLLOW_UP.RFU_TYPE_NEED_OR_SUPPLY,''X'')|| nvl(GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_MODE,''X'')||nvl(GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_TYPE,''X'') <> ' ||
      chr(39) ||
      'NAA' ||
      chr(39) ||
      '  and nvl(GAL_RESOURCE_FOLLOW_UP.RFU_TYPE_NEED_OR_SUPPLY,''X'')|| nvl(GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_MODE,''X'')||nvl(GAL_RESOURCE_FOLLOW_UP.RFU_SUPPLY_TYPE,''X'') <> ' ||
      chr(39) ||
      'NFA' ||
      chr(39) ||
      '  and GAL_TASK.GAL_TASK_CATEGORY_ID      = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID
                     and GAL_TASK.GAL_PROJECT_ID               = GAL_PROJECT.GAL_PROJECT_ID
                     and GAL_TASK.GAL_TASK_ID = GAL_NEED_FOLLOW_UP.GAL_TASK_ID
                     and GAL_NEED_FOLLOW_UP.GAL_NEED_FOLLOW_UP_ID =
                          GAL_RESOURCE_FOLLOW_UP.GAL_NEED_FOLLOW_UP_ID(+)
                     and GAL_NEED_FOLLOW_UP.NFU_NOMENCLATURE_LEVEL <> 0
                     order by
                          GAL_PROJECT.PRJ_CODE
                        ,GAL_TASK.TAS_CODE
                        ,GAL_NEED_FOLLOW_UP.GAL_NEED_FOLLOW_UP_ID
                        ,GAL_RESOURCE_FOLLOW_UP.GAL_RESOURCE_FOLLOW_UP_ID';
    commit;

    open arefcursor for s_sql_gal_project;

end RPT_GAL_AVANCE_MATERIAL_FOR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_HOUR_HRM_CD_IND_BARCOD" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_HOUR_HRM_CODE_IND_BARCOD

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if ((procuser_lanid is not null) and (pc_user_id is not null) and (pc_comp_id is not null) and (pc_conli_id is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
   end if;

  open arefcursor for
    select DIC_GAL_HOUR_CODE_IND_ID
         , DIC_HCI_WORDING
      from DIC_GAL_HOUR_CODE_IND;
end RPT_GAL_HOUR_HRM_CD_IND_BARCOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_HOUR_HRM_PERSON_BARCOD" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, poste_beg    in     varchar2
, poste_end    in     varchar2
, emp_beg    in     varchar2
, emp_end    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_HOUR_HRM_PERSON_BARCOD

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param poste_beg: JOB_CODE
* @param poste_end: JOB_CODE
* @param emp_beg: EMP_NUMBER
* @param emp_end: EMP_NUMBER
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if ((procuser_lanid is not null) and (pc_user_id is not null) and (pc_comp_id is not null) and (pc_conli_id is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select   PER.HRM_PERSON_ID
             , PER.EMP_NUMBER
             , PER.PER_FIRST_NAME
             , PER.PER_LAST_NAME
             , HJB.HRM_JOB_ID
             , HJB.JOB_CODE
             , HJB.JOB_DESCR
             , HPJ.PEJ_FROM
             , HPJ.PEJ_TO
      from HRM_JOB HJB
         , HRM_PERSON PER
         , HRM_PERSON_JOB HPJ
     where HJB.HRM_JOB_ID(+) = HPJ.HRM_JOB_ID
       and HPJ.HRM_PERSON_ID = PER.HRM_PERSON_ID
       and (    (HPJ.PEJ_FROM is null)
            or (HPJ.PEJ_FROM <= sysdate) )
       and (    (HPJ.PEJ_TO is null)
            or (HPJ.PEJ_TO >= sysdate) )
       and (    (poste_beg = '*')
            or (HJB.JOB_CODE >= poste_beg) )
       and (    (poste_end = '*')
            or (HJB.JOB_CODE <= poste_end) )
       and (    (    (emp_beg = '*')
                 or (PER.EMP_NUMBER is null) )
            or (PER.EMP_NUMBER >= emp_beg) )
       and (    (emp_end = '*')
            or (PER.EMP_NUMBER <= emp_end) );
end RPT_GAL_HOUR_HRM_PERSON_BARCOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PRJ_DF_LISTEARTICLE" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_10    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_DF_LISTEARTICLE

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_10: GAL_TASK_ID
*/
  tmp          number;
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_10 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
   end if;

  open arefcursor for
    select PRJ_CODE
         , GAL_PROJECT_ID
         , PRJ_WORDING
         , DFCODE
         , DFDESCRIPTION
         , DFWORDING
         , DFSTARTDATE
         , DFENDDATE
         , DFAUTHOR
         , DFVERSION
         , DFSTATE
         , DFPRIORITY
         , DFTCA_WORDING
         , GAL_TASK_ID
         , GAL_TASK_ID_2
         , GAL_FATHER_TASK_ID
         , DFLOCATION
         , TAS_CODE
         , TAS_WORDING
         , TAS_END_DATE
         , TAS_VERSION
         , TAS_AUTHOR
         , DIC_GLO_WORDING
         , PER_NAME
         , PER_FORENAME
         , GTL_SEQUENCE
         , GTL_PLAN_NUMBER
         , GTL_QUANTITY
         , GTL_PLAN_VERSION
         , SCS_STEP_NUMBER
         , SCS_SHORT_DESCR
         , SCS_FREE_DESCR
         , SCS_LONG_DESCR
         , TAL_DUE_TSK
         , TAL_TSK_BALANCE
         , TAL_ACHIEVED_TSK
         , TAL_END_PLAN_DATE
         , TAL_BEGIN_PLAN_DATE
         , GAL_TASK_LINK_ID
         , CB_GAL_TASK_LINK_ID
         , FAC_REFERENCE
         , FAC_DESCRIBE
         , GOO_MAJOR_REFERENCE
         , GOO_SECONDARY_REFERENCE
         , PC_LANG_ID
         , DES_SHORT_DESCRIPTION
         , DES_LONG_DESCRIPTION
         , DES_FREE_DESCRIPTION
         , TAS_DESCRIPTION
         , C_TASK_TYPE
         , DOC_RECORD_ID
      from (select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , GTL_SEQUENCE
                 , GTL_PLAN_NUMBER
                 , GTL_QUANTITY
                 , GTL_PLAN_VERSION
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , GOO_MAJOR_REFERENCE
                 , GOO_SECONDARY_REFERENCE
                 , PC_LANG_ID
                 , DES_SHORT_DESCRIPTION
                 , DES_LONG_DESCRIPTION
                 , DES_FREE_DESCRIPTION
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LOT
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , GCO_GOOD
                 , GCO_DESCRIPTION
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where GAL_TASK_LOT.GAL_TASK_LOT_ID = GAL_TASK_LOT_LINK.GAL_TASK_LOT_ID
               and GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID = GAL_TASK_LINK.GAL_TASK_LINK_ID
               and TASCHILD.GAL_TASK_ID = GAL_TASK_LOT_LINK.GAL_TASK_ID
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LOT.GCO_GOOD_ID = GCO_GOOD.GCO_GOOD_ID
               and GCO_GOOD.GCO_GOOD_ID = GCO_DESCRIPTION.GCO_GOOD_ID
               and GCO_DESCRIPTION.C_DESCRIPTION_TYPE = '01'
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+)
            union
            select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , null
                 , null
                 , null
                 , null
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , null
                 , null
                 , 99
                 , null
                 , null
                 , null
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where TASCHILD.GAL_TASK_ID = GAL_TASK_LINK.GAL_TASK_ID
               and GAL_TASK_LINK.GAL_TASK_LINK_ID = GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID(+)
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+))
     where GAL_TASK_ID = to_number(parameter_10);
end RPT_GAL_PRJ_DF_LISTEARTICLE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PRJ_DF_LISTEART_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_1    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for subreport GAL_PROJECT_DF_LISTEARTICLE used in report GAL_PROJECT_BON_OP_DF

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_1: GAL_TASK_LINK_ID
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_1 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
   end if;

  open arefcursor for
    select PRJ_CODE
         , GAL_PROJECT_ID
         , PRJ_WORDING
         , DFCODE
         , DFDESCRIPTION
         , DFWORDING
         , DFSTARTDATE
         , DFENDDATE
         , DFAUTHOR
         , DFVERSION
         , DFSTATE
         , DFPRIORITY
         , DFTCA_WORDING
         , GAL_TASK_ID
         , GAL_TASK_ID_2
         , GAL_FATHER_TASK_ID
         , DFLOCATION
         , TAS_CODE
         , TAS_WORDING
         , TAS_END_DATE
         , TAS_VERSION
         , TAS_AUTHOR
         , DIC_GLO_WORDING
         , PER_NAME
         , PER_FORENAME
         , GTL_SEQUENCE
         , GTL_PLAN_NUMBER
         , GTL_QUANTITY
         , GTL_PLAN_VERSION
         , SCS_STEP_NUMBER
         , SCS_SHORT_DESCR
         , SCS_FREE_DESCR
         , SCS_LONG_DESCR
         , TAL_DUE_TSK
         , TAL_TSK_BALANCE
         , TAL_ACHIEVED_TSK
         , TAL_END_PLAN_DATE
         , TAL_BEGIN_PLAN_DATE
         , GAL_TASK_LINK_ID
         , CB_GAL_TASK_LINK_ID
         , FAC_REFERENCE
         , FAC_DESCRIBE
         , GOO_MAJOR_REFERENCE
         , GOO_SECONDARY_REFERENCE
         , PC_LANG_ID
         , DES_SHORT_DESCRIPTION
         , DES_LONG_DESCRIPTION
         , DES_FREE_DESCRIPTION
         , TAS_DESCRIPTION
         , C_TASK_TYPE
         , DOC_RECORD_ID
      from (select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , GTL_SEQUENCE
                 , GTL_PLAN_NUMBER
                 , GTL_QUANTITY
                 , GTL_PLAN_VERSION
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , GOO_MAJOR_REFERENCE
                 , GOO_SECONDARY_REFERENCE
                 , PC_LANG_ID
                 , DES_SHORT_DESCRIPTION
                 , DES_LONG_DESCRIPTION
                 , DES_FREE_DESCRIPTION
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LOT
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , GCO_GOOD
                 , GCO_DESCRIPTION
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where GAL_TASK_LOT.GAL_TASK_LOT_ID = GAL_TASK_LOT_LINK.GAL_TASK_LOT_ID
               and GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID = GAL_TASK_LINK.GAL_TASK_LINK_ID
               and TASCHILD.GAL_TASK_ID = GAL_TASK_LOT_LINK.GAL_TASK_ID
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LOT.GCO_GOOD_ID = GCO_GOOD.GCO_GOOD_ID
               and GCO_GOOD.GCO_GOOD_ID = GCO_DESCRIPTION.GCO_GOOD_ID
               and GCO_DESCRIPTION.C_DESCRIPTION_TYPE = '01'
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+)
            union
            select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , null
                 , null
                 , null
                 , null
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , null
                 , null
                 , 99
                 , null
                 , null
                 , null
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where TASCHILD.GAL_TASK_ID = GAL_TASK_LINK.GAL_TASK_ID
               and GAL_TASK_LINK.GAL_TASK_LINK_ID = GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID(+)
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+))
     where GAL_TASK_LINK_ID = to_number(parameter_1)
       and PC_LANG_ID = vpc_lang_id;
end RPT_GAL_PRJ_DF_LISTEART_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PRJ_DOC_BL_DF_ASSOCIE" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_DOC_BL_DF_DOC_ASSOCIE

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if ((procuser_lanid is not null) and (pc_user_id is not null) and (pc_comp_id is not null) and (pc_conli_id is not null)) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);

      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select DOC.DOC_DOCUMENT_ID
         , DOC.DOC_GAUGE_ID
         , DOC.DMT_NUMBER
         , DOC.DMT_DATE_DOCUMENT
         , GAG.GAU_DESCRIBE
      from DOC_DOCUMENT DOC
         , DOC_GAUGE GAG
     where DOC.DOC_GAUGE_ID = GAG.DOC_GAUGE_ID;
end RPT_GAL_PRJ_DOC_BL_DF_ASSOCIE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PRJ_DOC_BL_DF_ASS_SUB" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_1    in     GAL_TASK_LINK.DOC_RECORD_ID%type
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for subreport GAL_PROJECT_DOC_BL_DF_DOC_ASSOCIE used in report GAL_PROJECT_DOC_BL_DF

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_1: DOC_RECORD_ID
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_1 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select   DOC.DOC_DOCUMENT_ID
             , DOC.DOC_GAUGE_ID
             , DOC.DMT_NUMBER
             , DOC.DMT_DATE_DOCUMENT
             , GAG.GAU_DESCRIBE
             , POS.DOC_RECORD_ID
      from DOC_DOCUMENT DOC
         , DOC_GAUGE GAG
         , DOC_POSITION POS
     where DOC.DOC_DOCUMENT_ID = POS.DOC_DOCUMENT_ID
       and DOC.DOC_GAUGE_ID = GAG.DOC_GAUGE_ID
       and POS.DOC_RECORD_ID = parameter_1;
    end RPT_GAL_PRJ_DOC_BL_DF_ASS_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PRJ_FICHESUIVEUSE_DF" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_FICHESUIVEUSE_DF

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_0: GAL_TASK_ID
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select PRJ_CODE
         , GAL_PROJECT_ID
         , PRJ_WORDING
         , DFCODE
         , DFDESCRIPTION
         , DFWORDING
         , DFSTARTDATE
         , DFENDDATE
         , DFAUTHOR
         , DFVERSION
         , DFSTATE
         , DFPRIORITY
         , DFTCA_WORDING
         , GAL_TASK_ID
         , GAL_TASK_ID_2
         , GAL_FATHER_TASK_ID
         , DFLOCATION
         , TAS_CODE
         , TAS_WORDING
         , TAS_END_DATE
         , TAS_VERSION
         , TAS_AUTHOR
         , DIC_GLO_WORDING
         , PER_NAME
         , PER_FORENAME
         , GTL_SEQUENCE
         , GTL_PLAN_NUMBER
         , GTL_QUANTITY
         , GTL_PLAN_VERSION
         , SCS_STEP_NUMBER
         , SCS_SHORT_DESCR
         , SCS_FREE_DESCR
         , SCS_LONG_DESCR
         , TAL_DUE_TSK
         , TAL_TSK_BALANCE
         , TAL_ACHIEVED_TSK
         , TAL_END_PLAN_DATE
         , TAL_BEGIN_PLAN_DATE
         , GAL_TASK_LINK_ID
         , CB_GAL_TASK_LINK_ID
         , FAC_REFERENCE
         , FAC_DESCRIBE
         , GOO_MAJOR_REFERENCE
         , GOO_SECONDARY_REFERENCE
         , PC_LANG_ID
         , DES_SHORT_DESCRIPTION
         , DES_LONG_DESCRIPTION
         , DES_FREE_DESCRIPTION
         , TAS_DESCRIPTION
         , C_TASK_TYPE
         , DOC_RECORD_ID
      from (select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , GTL_SEQUENCE
                 , GTL_PLAN_NUMBER
                 , GTL_QUANTITY
                 , GTL_PLAN_VERSION
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , GOO_MAJOR_REFERENCE
                 , GOO_SECONDARY_REFERENCE
                 , PC_LANG_ID
                 , DES_SHORT_DESCRIPTION
                 , DES_LONG_DESCRIPTION
                 , DES_FREE_DESCRIPTION
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LOT
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , GCO_GOOD
                 , GCO_DESCRIPTION
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where GAL_TASK_LOT.GAL_TASK_LOT_ID = GAL_TASK_LOT_LINK.GAL_TASK_LOT_ID
               and GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID = GAL_TASK_LINK.GAL_TASK_LINK_ID
               and TASCHILD.GAL_TASK_ID = GAL_TASK_LOT_LINK.GAL_TASK_ID
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LOT.GCO_GOOD_ID = GCO_GOOD.GCO_GOOD_ID
               and GCO_GOOD.GCO_GOOD_ID = GCO_DESCRIPTION.GCO_GOOD_ID
               and GCO_DESCRIPTION.C_DESCRIPTION_TYPE = '01'
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+)
            union
            select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , null
                 , null
                 , null
                 , null
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , null
                 , null
                 , 99
                 , null
                 , null
                 , null
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where TASCHILD.GAL_TASK_ID = GAL_TASK_LINK.GAL_TASK_ID
               and GAL_TASK_LINK.GAL_TASK_LINK_ID = GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID(+)
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+))
     where (   PC_LANG_ID = vpc_lang_id
            or PC_LANG_ID = 99)
       and GAL_TASK_ID = to_number(parameter_0);
end RPT_GAL_PRJ_FICHESUIVEUSE_DF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PROJECT_BON_OP_DF" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_BON_OP_DF

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_0: GAL_TASK_ID
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select PRJ_CODE
         , GAL_PROJECT_ID
         , PRJ_WORDING
         , DFCODE
         , DFDESCRIPTION
         , DFWORDING
         , DFSTARTDATE
         , DFENDDATE
         , DFAUTHOR
         , DFVERSION
         , DFSTATE
         , DFPRIORITY
         , DFTCA_WORDING
         , GAL_TASK_ID
         , GAL_TASK_ID_2
         , GAL_FATHER_TASK_ID
         , DFLOCATION
         , TAS_CODE
         , TAS_WORDING
         , TAS_END_DATE
         , TAS_VERSION
         , TAS_AUTHOR
         , DIC_GLO_WORDING
         , PER_NAME
         , PER_FORENAME
         , GTL_SEQUENCE
         , GTL_PLAN_NUMBER
         , GTL_QUANTITY
         , GTL_PLAN_VERSION
         , SCS_STEP_NUMBER
         , SCS_SHORT_DESCR
         , SCS_FREE_DESCR
         , SCS_LONG_DESCR
         , TAL_DUE_TSK
         , TAL_TSK_BALANCE
         , TAL_ACHIEVED_TSK
         , TAL_END_PLAN_DATE
         , TAL_BEGIN_PLAN_DATE
         , GAL_TASK_LINK_ID
         , CB_GAL_TASK_LINK_ID
         , FAC_REFERENCE
         , FAC_DESCRIBE
         , GOO_MAJOR_REFERENCE
         , GOO_SECONDARY_REFERENCE
         , PC_LANG_ID
         , DES_SHORT_DESCRIPTION
         , DES_LONG_DESCRIPTION
         , DES_FREE_DESCRIPTION
         , TAS_DESCRIPTION
         , C_TASK_TYPE
         , DOC_RECORD_ID
      from (select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , GTL_SEQUENCE
                 , GTL_PLAN_NUMBER
                 , GTL_QUANTITY
                 , GTL_PLAN_VERSION
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , GOO_MAJOR_REFERENCE
                 , GOO_SECONDARY_REFERENCE
                 , PC_LANG_ID
                 , DES_SHORT_DESCRIPTION
                 , DES_LONG_DESCRIPTION
                 , DES_FREE_DESCRIPTION
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LOT
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , GCO_GOOD
                 , GCO_DESCRIPTION
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where GAL_TASK_LOT.GAL_TASK_LOT_ID = GAL_TASK_LOT_LINK.GAL_TASK_LOT_ID
               and GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID = GAL_TASK_LINK.GAL_TASK_LINK_ID
               and TASCHILD.GAL_TASK_ID = GAL_TASK_LOT_LINK.GAL_TASK_ID
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LOT.GCO_GOOD_ID = GCO_GOOD.GCO_GOOD_ID
               and GCO_GOOD.GCO_GOOD_ID = GCO_DESCRIPTION.GCO_GOOD_ID
               and GCO_DESCRIPTION.C_DESCRIPTION_TYPE = '01'
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+)
            union
            select PRJ_CODE
                 , GAL_PROJECT.GAL_PROJECT_ID
                 , PRJ_WORDING
                 , TASCHILD.TAS_CODE DFCODE
                 , TASCHILD.TAS_DESCRIPTION DFDESCRIPTION
                 , TASCHILD.TAS_WORDING DFWORDING
                 , TASCHILD.TAS_START_DATE DFSTARTDATE
                 , TASCHILD.TAS_END_DATE DFENDDATE
                 , TASCHILD.TAS_AUTHOR DFAUTHOR
                 , TASCHILD.TAS_VERSION DFVERSION
                 , TASCHILD.C_TAS_STATE DFSTATE
                 , TASCHILD.TAS_PRIORITY DFPRIORITY
                 , TCA_WORDING DFTCA_WORDING
                 , to_char(TASCHILD.GAL_TASK_ID) GAL_TASK_ID
                 , TASCHILD.GAL_TASK_ID GAL_TASK_ID_2
                 , to_char(TASCHILD.GAL_FATHER_TASK_ID) GAL_FATHER_TASK_ID
                 , nvl(CHILDLOCATION.DIC_GLO_WORDING, nvl(FATHERLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) ) DFLOCATION
                 , TASFATHER.TAS_CODE
                 , TASFATHER.TAS_WORDING
                 , TASFATHER.TAS_END_DATE
                 , TASFATHER.TAS_VERSION
                 , TASFATHER.TAS_AUTHOR
                 , FATHERLOCATION.DIC_GLO_WORDING
                 , PER_NAME
                 , PER_FORENAME
                 , null
                 , null
                 , null
                 , null
                 , SCS_STEP_NUMBER
                 , SCS_SHORT_DESCR
                 , SCS_FREE_DESCR
                 , SCS_LONG_DESCR
                 , TAL_DUE_TSK
                 , TAL_TSK_BALANCE
                 , TAL_ACHIEVED_TSK
                 , TAL_END_PLAN_DATE
                 , TAL_BEGIN_PLAN_DATE
                 , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
                 , GAL_TASK_LINK.GAL_TASK_LINK_ID CB_GAL_TASK_LINK_ID
                 , FAC_REFERENCE
                 , FAC_DESCRIBE
                 , null
                 , null
                 , 99
                 , null
                 , null
                 , null
                 , TASFATHER.TAS_DESCRIPTION
                 , C_TASK_TYPE
                 , GAL_TASK_LINK.DOC_RECORD_ID
              from GAL_TASK_CATEGORY
                 , GAL_TASK_LOT_LINK
                 , GAL_TASK_LINK
                 , GAL_TASK TASCHILD
                 , GAL_TASK TASFATHER
                 , DIC_GAL_LOCATION CHILDLOCATION
                 , DIC_GAL_LOCATION FATHERLOCATION
                 , DIC_GAL_LOCATION AFFAIRELOCATION
                 , GAL_PROJECT
                 , FAL_FACTORY_FLOOR
                 , PAC_CUSTOM_PARTNER
                 , PAC_PERSON
             where TASCHILD.GAL_TASK_ID = GAL_TASK_LINK.GAL_TASK_ID
               and GAL_TASK_LINK.GAL_TASK_LINK_ID = GAL_TASK_LOT_LINK.GAL_TASK_LINK_ID(+)
               and TASCHILD.GAL_FATHER_TASK_ID = TASFATHER.GAL_TASK_ID(+)
               and TASCHILD.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
               and TASCHILD.DIC_GAL_LOCATION_ID = CHILDLOCATION.DIC_GAL_LOCATION_ID(+)
               and TASFATHER.DIC_GAL_LOCATION_ID = FATHERLOCATION.DIC_GAL_LOCATION_ID(+)
               and AFFAIRELOCATION.dic_gal_location_id(+) = GAL_PROJECT.dic_gal_location_id
               and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID(+)
               and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
               and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
               and TASCHILD.GAL_TASK_CATEGORY_ID = GAL_TASK_CATEGORY.GAL_TASK_CATEGORY_ID(+))
     where (   PC_LANG_ID = vpc_lang_id
            or PC_LANG_ID = 99)
       and GAL_TASK_ID = to_number(parameter_0)
       and C_TASK_TYPE = '1';
end RPT_GAL_PROJECT_BON_OP_DF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_PROJECT_DOC_BL_DF" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_DOC_BL_DF

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_0: DMT_NUMBER
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select VDC.LANID
         , VDC.DMT_NUMBER
         , VDC.DOC_DOCUMENT_ID
         , VDC.FOO_FOOT_TEXT
         , VDC.POS_NUMBER
         , VDC.POS_REFERENCE
         , VDC.POS_SHORT_DESCRIPTION
         , VDC.POS_BODY_TEXT
         , VDC.POS_LONG_DESCRIPTION
         , VDC.POS_FREE_DESCRIPTION
         , VDC.C_GAUGE_TYPE_POS
         , VDC.POS_FINAL_QUANTITY
         , VDC.DIC_UNIT_OF_MEASURE_ID
         , VDC.POS_NET_VALUE_EXCL
         , VDC.DOC_POSITION_ID
         , VDC.PDE_CHARACTERIZATION_VALUE_1
         , VDC.PDE_CHARACTERIZATION_VALUE_2
         , VDC.PDE_CHARACTERIZATION_VALUE_3
         , VDC.PDE_CHARACTERIZATION_VALUE_4
         , VDC.PDE_CHARACTERIZATION_VALUE_5
         , VDC.PDE_FINAL_DELAY
         , VDC.P_PDE_FINAL_QUANTITY
         , VDC.DMT_TITLE_TEXT
         , VDC.DMT_HEADING_TEXT
         , VDC.DMT_DOCUMENT_TEXT
         , VDC.DMT_ADDRESS2
         , VDC.DMT_FORMAT_CITY2
         , VDC.PER_NAME
         , VDC.PER_FORENAME
         , VDC.PER_ACTIVITY
         , VDC.DMT_ADDRESS1
         , VDC.DMT_FORMAT_CITY1
         , VDC.GOO_NUMBER_OF_DECIMAL
         , VDC.POS_BASIS_QUANTITY
         , VDC.C_GAUGE_TITLE
         , VDC.PERE_DMT_NUMBER
         , VDC.G_PERE_DMT_NUMBER
         , VDC.C_DOCUMENT_STATUS
         , VDC.G_PERE_C_GAUGE_TITLE
         , VDC.G_PERE_DMT_DATE_DOCUMENT
         , VDC.PERE_C_GAUGE_TITLE
         , VDC.PERE_DMT_DATE_DOCUMENT
         , VDC.GCO1_CHARAC_DESCR
         , VDC.GCO2_CHARAC_DESCR
         , VDC.GCO3_CHARAC_DESCR
         , VDC.GCO4_CHARAC_DESCR
         , VDC.GCO5_CHARAC_DESCR
         , VDC.PDE_FINAL_QUANTITY
         , VDC.C_ADMIN_DOMAIN
         , VDC.C_GAUGE_SHOW_DELAY
         , VDC.PDE_INTERMEDIATE_DELAY
         , VDC.GAP_POS_DELAY
         , VDC.C_DOC_POS_STATUS
         , VDC.DMT_TOWN2
         , VDC.DMT_TOWN1
         , VDC.LOT_REFCOMPL
         , VDC.SCS_SHORT_DESCR
         , VDC.SCS_LONG_DESCR
         , VDC.SCS_FREE_DESCR
         , VDC.COMP_MAJOR_REFERENCE
         , VDC.GOO_MAJOR_REFERENCE
         , VDC.PER2_NAME
         , VDC.PER2_FORENAME
         , VDC.PER2_ACTIVITY
         , VDC.RCO_TITLE
         , GLK.GAL_TASK_LINK_ID
         , GLK.C_TASK_TYPE
         , GLK.SCS_SHORT_DESCR SCS_SHORT_DESCR_GLK
         , GLK.DOC_RECORD_ID
         , GLK1.SCS_SHORT_DESCR SCS_SHORT_DESCR_GLK_PREV
         , GTL.GCO_GOOD_ID
         , GTL.GTL_PLAN_VERSION
         , GTL.GTL_PLAN_NUMBER
         , GTD.GAL_TASK_LINK_ID_PREV
      from V_DOC_POS_4_PRNT VDC
         , GAL_TASK_LOT_LINK_DOC GTD
         , GAL_TASK_LINK GLK
         , GAL_TASK_LINK GLK1
         , GAL_TASK_LOT GTL
     where VDC.DOC_DOCUMENT_ID = GTD.DOC_DOCUMENT_ID
       and GTD.GAL_TASK_LINK_ID(+) = GLK.GAL_TASK_LINK_ID
       and GTD.GAL_TASK_LINK_ID_PREV = GLK1.GAL_TASK_LINK_ID
       and VDC.GCO_GOOD_ID = GTL.GCO_GOOD_ID
       and VDC.DMT_NUMBER = parameter_0;
end RPT_GAL_PROJECT_DOC_BL_DF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_REPORT_MO" (
  arefcursor     in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for reports GAL_PROJECT_BON_OP_MO and GAL_PROJECT_FICHESUIVEUSE_MO

* @author VHA
* @lastUpdate VHA 26 JUNE 2013
* @public
* @param parameter_0: GAL_TASK_ID
*/
  vpc_lang_id  PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id  PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id  PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (parameter_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId    => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId  => pc_conli_id);
      vpc_lang_id   := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id   := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id   := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id  := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  open arefcursor for
    select PRJ_CODE
         , GAL_PROJECT.GAL_PROJECT_ID
         , PRJ_WORDING
         , TAS_CODE
         , TAS_WORDING
         , TAS_START_DATE
         , TAS_END_DATE
         , TAS_AUTHOR
         , TAS_VERSION
         , to_char(GAL_TASK.GAL_TASK_ID) GAL_TASK_ID
         , nvl(TASKLOCATION.DIC_GLO_WORDING, AFFAIRELOCATION.DIC_GLO_WORDING) DIC_GLO_WORDING
         , PER_NAME
         , PER_FORENAME
         , SCS_STEP_NUMBER
         , SCS_SHORT_DESCR
         , SCS_FREE_DESCR
         , SCS_LONG_DESCR
         , TAL_DUE_TSK
         , TAL_TSK_BALANCE
         , TAL_ACHIEVED_TSK
         , TAL_END_PLAN_DATE
         , TAL_BEGIN_PLAN_DATE
         , to_char(GAL_TASK_LINK.GAL_TASK_LINK_ID) GAL_TASK_LINK_ID
         , FAC_REFERENCE
         , FAC_DESCRIBE
         , TAS_DESCRIPTION
      from GAL_TASK_LINK
         , GAL_TASK
         , DIC_GAL_LOCATION TASKLOCATION
         , DIC_GAL_LOCATION AFFAIRELOCATION
         , GAL_PROJECT
         , FAL_FACTORY_FLOOR
         , PAC_CUSTOM_PARTNER
         , PAC_PERSON
     where GAL_TASK.GAL_PROJECT_ID = GAL_PROJECT.GAL_PROJECT_ID
       and GAL_TASK.GAL_TASK_ID = GAL_TASK_LINK.GAL_TASK_ID
       and GAL_TASK.DIC_GAL_LOCATION_ID = TASKLOCATION.DIC_GAL_LOCATION_ID(+)
       and GAL_PROJECT.DIC_GAL_LOCATION_ID = AFFAIRELOCATION.DIC_GAL_LOCATION_ID(+)
       and GAL_TASK_LINK.FAL_FACTORY_FLOOR_ID = FAL_FACTORY_FLOOR.FAL_FACTORY_FLOOR_ID
       and PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID = PAC_PERSON.PAC_PERSON_ID(+)
       and GAL_PROJECT.PAC_CUSTOM_PARTNER_ID = PAC_CUSTOM_PARTNER.PAC_CUSTOM_PARTNER_ID(+)
       and GAL_TASK.GAL_TASK_ID = to_number(parameter_0);
end RPT_GAL_REPORT_MO;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GAL_SPENDING_GENERATE_FOR" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, procparam_0    in     varchar2
, procuser_lanid in     pcs.pc_lang.lanid%type
, pc_user_id     in     PCS.PC_USER.PC_USER_ID%type
, pc_comp_id     in     PCS.PC_COMP.PC_COMP_ID%type
, pc_conli_id    in     PCS.PC_CONLI.PC_CONLI_ID%type
)
is
/**
* description used for report GAL_PROJECT_FINANCIAL_BALANCE.
* Replace the procedure GAL_SPENDING_GENERATE_FOR_RPT
* @lastUpdate VHA 26 JUNE 2013
* @public
*/
  s_sql_gal_project varchar2(32762);
  vpc_lang_id       PCS.PC_LANG.PC_LANG_ID%type := null;
  vpc_user_id       PCS.PC_USER.PC_USER_ID%type := null;
  vpc_comp_id       PCS.PC_COMP.PC_COMP_ID%type := null;
  vpc_conli_id      PCS.PC_CONLI.PC_CONLI_ID%type := null;
begin
  if (procparam_0 is not null) then
    PCS.PC_LIB_SESSION.setLanUserId(iLanId => procuser_lanid
                                  , iPcUserId => pc_user_id
                                  , iPcCompId => pc_comp_id
                                  , iConliId => pc_conli_id);
      vpc_lang_id        := PCS.PC_I_LIB_SESSION.getUserlangId;
      vpc_user_id        := PCS.PC_I_LIB_SESSION.getUserId;
      vpc_comp_id        := PCS.PC_I_LIB_SESSION.getCompanyId;
      vpc_conli_id       := PCS.PC_I_LIB_SESSION.getConliId;
  end if;

  -- GENERATION DES TABLES DE DEPENSES --
  s_sql_gal_project  := 'select GAL_PROJECT_ID from GAL_PROJECT where 1=1 ';

  if procparam_0 is not null then
    s_sql_gal_project  := s_sql_gal_project || procparam_0;
  end if;

  if ((s_sql_gal_project is not null) and ( procparam_0 is not null)) then
    GAL_PROJECT_CONSOLIDATION.GAL_SPENDING_GENERATE_WITH_SEL(s_sql_gal_project);
  end if;

  -- GENERATION DU CURSEUR POUR CRYSTAL --
  s_sql_gal_project  :=
    'select ' ||
    'GAL_PROJECT.GAL_PROJECT_ID, ' ||
    'GAL_PROJECT.PRJ_CODE, ' ||
    'GAL_PROJECT.PRJ_WORDING, ' ||
    'GAL_PROJECT.PRJ_DESCRIPTION, ' ||
    'GAL_PROJECT.PRJ_COMMENT, ' ||
    'COM_DIC_FUNCTIONS.GETDICODESCR(''DIC_GAL_PRJ_CATEGORY'',GAL_PROJECT.DIC_GAL_PRJ_CATEGORY_ID) DIC_GAL_PRJ_CATEGORY_ID, ' ||
    'COM_DIC_FUNCTIONS.GETDICODESCR(''DIC_GAL_DIVISION'',GAL_PROJECT.DIC_GAL_DIVISION_ID) DIC_GAL_DIVISION_ID, ' ||
    'COM_DIC_FUNCTIONS.GETDICODESCR(''DIC_GAL_PRODUCT_LINE'',GAL_PROJECT.DIC_GAL_PRODUCT_LINE_ID) DIC_GAL_PRODUCT_LINE_ID, ' ||
    'COM_DIC_FUNCTIONS.GETDICODESCR(''DIC_GAL_LOCATION'',GAL_PROJECT.DIC_GAL_LOCATION_ID) DIC_GAL_LOCATION_ID, ' ||
    'HRM_PERSON.PER_LAST_NAME HRM_PROJECT_PERSON_ID, ' ||
    'PAC_PERSON.PER_NAME PAC_CUSTOM_PARTNER_ID, ' ||
    'COM_FUNCTIONS.GETDESCODEDESCR(''C_PRJ_STATE'',GAL_PROJECT.C_PRJ_STATE) C_PRJ_STATE, ' ||
    'GAL_PROJECT.A_DATECRE, ' ||
    'GAL_PROJECT.PRJ_LAUNCHING_DATE, ' ||
    'GAL_PROJECT.PRJ_DELIVERY_DATE, ' ||
    'GAL_PROJECT.PRJ_BALANCE_DATE, ' ||
    'GAL_PROJECT.PRJ_CUSTOMER_ORDER_REF, ' ||
    'GAL_PROJECT.PRJ_CUSTOMER_ORDER_DATE, ' ||
    'GAL_PROJECT.PRJ_CUSTOMER_DELIVERY_DATE, ' ||
    'GAL_PROJECT.PRJ_SALE_PRICE, ' ||
    'GAL_PROJECT.PRJ_INTERNAL, ' ||
    'GAL_PROJECT.PRJ_FORECAST, ' ||
    'GAL_PROJECT.PRJ_CODE_GROUP_1, ' ||
    'GAL_PROJECT.PRJ_CODE_GROUP_2, ' ||
    'GAL_PROJECT.PRJ_CODE_GROUP_3, ' ||
    'GAL_PROJECT.PRJ_CODE_CONSOLIDATION_1, ' ||
    'GAL_PROJECT.PRJ_CODE_CONSOLIDATION_2, ' ||
    'GAL_PROJECT.PRJ_CODE_CLASSIFICATION, ' ||
    'GAL_PROJECT.PRJ_PRODUCT_IDENFITICATION, ' ||
    'GAL_COST_CENTER.DIC_GAL_ANA_GROUP_ID, ' ||
    'COM_DIC_FUNCTIONS.GETDICODESCR (''DIC_GAL_ANA_GROUP'',GAL_COST_CENTER.DIC_GAL_ANA_GROUP_ID) DIC_GAL_ANA_GROUP_WORDING, ' ||
    'GAL_COST_CENTER.GCC_CODE GAL_COST_CENTER_ID, ' ||
    'GAL_COST_CENTER.GCC_WORDING, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL1_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL1_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL2_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL2_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL3_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL3_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL4_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL4_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL5_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_COL5_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_REMAINING_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_REMAINING_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_TOTAL_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_TOTAL_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_MARGIN_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_MARGIN_AMOUNT, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_MARGIN_QUANTITY*100/decode(GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_QUANTITY,0,null,GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_QUANTITY) GSP_PERC_MARGIN_QUANTITY, ' ||
    'GAL_SPENDING_CONSOLIDATED.GSP_MARGIN_AMOUNT*100/decode(GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_AMOUNT,0,null,GAL_SPENDING_CONSOLIDATED.GSP_BUDGET_AMOUNT) GSP_PERC_MARGIN_AMOUNT  ' ||
    'FROM ' ||
    'PAC_PERSON, ' ||
    'HRM_PERSON, ' ||
    'GAL_COST_CENTER, ' ||
    'GAL_SPENDING_CONSOLIDATED, ' ||
    'GAL_PROJECT ' ||
    'WHERE ' ||
    'GAL_COST_CENTER.GAL_COST_CENTER_ID (+) = GAL_SPENDING_CONSOLIDATED.GAL_COST_CENTER_ID AND ' ||
    'PAC_PERSON.PAC_PERSON_ID (+) =GAL_PROJECT.PAC_CUSTOM_PARTNER_ID AND ' ||
    'HRM_PERSON.HRM_PERSON_ID (+) =GAL_PROJECT.HRM_PROJECT_PERSON_ID AND ' ||
    'GAL_SPENDING_CONSOLIDATED.GAL_PROJECT_ID (+) =GAL_PROJECT.GAL_PROJECT_ID AND ' ||
    'GAL_SPENDING_CONSOLIDATED.GAL_BUDGET_ID IS NULL ';

  if procparam_0 is not null then
    s_sql_gal_project  := s_sql_gal_project || procparam_0;
  end if;

  open aRefCursor for s_sql_gal_project;
end RPT_GAL_SPENDING_GENERATE_FOR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_AUX_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PSEUDO_FORM_BATCH, GCO_SERVICE_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 7 MAY 2009
* @public
* @param parameter_0: GCO_GOOD_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT goo.goo_major_reference, goo.goo_secondary_reference,
             v_goo.gco_multimedia_element_id,
             v_goo.mme_multimedia_designation, v_goo.mme_free_description,
             v_goo.gco_substitution_list_id, v_goo.sul_subst_design_short,
             v_goo.sul_comment, v_goo.sul_from_date, v_goo.sul_until_date,
             v_goo.dic_accountable_group_id, v_goo.dic_good_line_id,
             v_goo.dic_good_family_id, v_goo.dic_good_model_id,
             v_goo.dic_good_group_id, v_goo.gco_good_id
        FROM v_gco_good_list v_goo, gco_good goo
       WHERE v_goo.sul_replacement_good_id = goo.gco_good_id(+)
         AND v_goo.gco_good_id = parameter_0;
END rpt_gco_aux_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_CORRELATION_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH, GCO_SERVICE_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 21 FEB 2009
* @public
* @PARAM PARAMETER_0 gco_good_id
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT con.gco_connected_good_id, con.gco_good_id,
             con.dic_connected_type_id, v_gca.goo_major_reference,
             v_gca.des_short_description
        FROM gco_connected_good con, v_gco_good_catalogue v_gca
       WHERE con.gco_gco_good_id = v_gca.gco_good_id
         AND v_gca.pc_lang_id = vpc_lang_id
         AND con.gco_good_id = parameter_0;
END rpt_gco_correlation_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_DESC_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PSEUDO_FORM_BATCH, GCO_SERVICE_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 7 MAY 2009
* @public
* @param parameter_0: GCO_GOOD_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT v_des.des_short_description, v_des.des_long_description,
             v_des.des_free_description, v_des.des_short_descr_st,
             v_des.des_long_descr_st, v_des.des_free_descr_st,
             v_des.des_short_descr_pu, v_des.des_long_descr_pu,
             v_des.des_free_descr_pu, v_des.des_short_descr_sa,
             v_des.des_long_descr_sa, v_des.des_free_descr_sa, lan.lanname,
             lan.pc_lang_id, v_des.gco_good_id
        FROM v_good_description v_des, pcs.pc_lang lan
       WHERE v_des.pc_lang_id = lan.pc_lang_id
         AND v_des.gco_good_id = parameter_0;
END rpt_gco_desc_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_FREE_DATA_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH, GCO_SERVICE_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 7 MAY 2009
* @public
* @PARAM PARAMETER_0 gco_good_id
*/
BEGIN
   OPEN arefcursor FOR
      SELECT dta.gco_free_data_id, dta.dic_free_table_1_id,
             dta.dic_free_table_2_id, dta.dic_free_table_3_id,
             dta.dic_free_table_4_id, dta.dic_free_table_5_id,
             dta.gco_good_id, dta.data_alpha_court_1, dta.data_alpha_court_2,
             dta.data_alpha_court_3, dta.data_alpha_court_4,
             dta.data_alpha_court_5, dta.data_alpha_long_1,
             dta.data_alpha_long_2, dta.data_alpha_long_3,
             dta.data_alpha_long_4, dta.data_alpha_long_5,
             dta.data_integer_1, dta.data_integer_2, dta.data_integer_3,
             dta.data_integer_4, dta.data_integer_5, dta.data_boolean_1,
             dta.data_boolean_2, dta.data_boolean_3, dta.data_boolean_4,
             dta.data_boolean_5, dta.data_dec_1, dta.data_dec_2,
             dta.data_dec_3, dta.data_dec_4, dta.data_dec_5
        FROM gco_free_data dta,
             dic_free_table_1 ftb1,
             dic_free_table_2 ftb2,
             dic_free_table_3 ftb3,
             dic_free_table_4 ftb4,
             dic_free_table_5 ftb5
       WHERE dta.dic_free_table_1_id = ftb1.dic_free_table_1_id(+)
         AND dta.dic_free_table_2_id = ftb2.dic_free_table_2_id(+)
         AND dta.dic_free_table_3_id = ftb3.dic_free_table_3_id(+)
         AND dta.dic_free_table_4_id = ftb4.dic_free_table_4_id(+)
         AND dta.dic_free_table_5_id = ftb5.dic_free_table_5_id(+)
         AND dta.gco_good_id = parameter_0;
END rpt_gco_free_data_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_GOOD_BY_THIRD" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
 Description - used for the report GCO_GOOD_BY_THIRD

* @author AWU 1 SEP 2008
* @lastupdate 19 Feb 2009
* @public
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT gcp.cda_complementary_reference, gcp.cda_short_description,
             gcp.cda_long_description, gcp.cpu_default_supplier,
             gde.des_short_description, gde.des_long_description,
             goo.goo_major_reference, ppe.per_name
        FROM gco_compl_data_purchase gcp,
             gco_description gde,
             gco_good goo,
             pac_person ppe
       WHERE gcp.pac_supplier_partner_id = ppe.pac_person_id
         AND gcp.gco_good_id = goo.gco_good_id
         AND goo.gco_good_id = gde.gco_good_id
         AND gde.c_description_type = '01'
         AND gde.pc_lang_id = vpc_lang_id;
END rpt_gco_good_by_third;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_GOOD_CATEGORY_BATCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**
 Description - used for the report GCO_GOOD_CATEGORY_BATCH

* @author AWU 1 JUN 2008
* @lastupdate 20 FEB 2009
* @public
* @PARAM  parameter_0  GCO_GOOD_CATEGORY_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cat.gco_good_category_id, cat.gco_good_category_wording,
             cat.gco_category_code, cat.cat_stk_possession_rate,
             cat.cat_compl_achat, cat.cat_compl_vente, cat.cat_compl_sav,
             cat.cat_compl_stock, cat.cat_compl_inv, cat.cat_compl_fab,
             cat.cat_compl_strait, cat.dic_category_free_1_id,
             cat.dic_category_free_2_id, cat.cat_free_text_1,
             cat.cat_free_text_2, cat.cat_free_text_3, cat.cat_free_text_4,
             cat.cat_free_text_5, cat.cat_free_number_1,
             cat.cat_free_number_2, cat.cat_free_number_3,
             cat.cat_free_number_4, cat.cat_free_number_5, cat.c_ean_type,
             cat.dic_good_ean_gen_id, cat.c_ean_type_purchase,
             cat.dic_good_ean_gen_pur_id, cat.c_ean_type_sale,
             cat.dic_good_ean_gen_sale_id, cat.c_ean_type_asa,
             cat.dic_good_ean_gen_asa_id, cat.c_ean_type_stock,
             cat.dic_good_ean_gen_stock_id, cat.c_ean_type_inv,
             cat.dic_good_ean_gen_inv_id, cat.c_ean_type_fal,
             cat.dic_good_ean_gen_fal_id, cat.c_ean_type_subcontract,
             cat.dic_good_ean_gen_sco_id, cat.dic_tabsheet_attribute_1_id,
             cat.dic_tabsheet_attribute_2_id,
             cat.dic_tabsheet_attribute_3_id,
             cat.dic_tabsheet_attribute_4_id,
             cat.dic_tabsheet_attribute_5_id,
             cat.dic_tabsheet_attribute_6_id,
             cat.dic_tabsheet_attribute_7_id,
             cat.dic_tabsheet_attribute_8_id,
             cat.dic_tabsheet_attribute_9_id,
             cat.dic_tabsheet_attribute_10_id,
             cat.dic_tabsheet_attribute_11_id,
             cat.dic_tabsheet_attribute_12_id,
             cat.dic_tabsheet_attribute_13_id,
             cat.dic_tabsheet_attribute_14_id,
             cat.dic_tabsheet_attribute_15_id,
             cat.dic_tabsheet_attribute_16_id,
             cat.dic_tabsheet_attribute_17_id,
             cat.dic_tabsheet_attribute_18_id,
             cat.dic_tabsheet_attribute_19_id,
             cat.dic_tabsheet_attribute_20_id, cat.cat_compl_attribute,
             cat.c_replication_type, num.gcn_description,
             tem.rte_description, tem.rte_designation, des.gcd_wording
        FROM gco_good_category cat,
             gco_reference_template tem,
             gco_good_numbering num,
             gco_good_category_descr des
       WHERE cat.gco_good_numbering_id = num.gco_good_numbering_id(+)
         AND cat.gco_reference_template_id = tem.gco_reference_template_id
         AND cat.gco_good_category_id = des.gco_good_category_id
         AND des.pc_lang_id = vpc_lang_id
         AND cat.gco_good_category_id = parameter_0;
END rpt_gco_good_category_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_GOOD_CATEGORY_LIST" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
 Description - used for the report GCO_GOOD_CATEGORY_LIST

* @author EQI 1 JUN 2008
* @lastupdate 20 FEB 2009
* @public
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cat.gco_good_category_id, cat.gco_good_category_wording,
             cat.gco_category_code, cat.cat_stk_possession_rate,
             cat.cat_compl_achat, cat.cat_compl_vente, cat.cat_compl_sav,
             cat.cat_compl_stock, cat.cat_compl_inv, cat.cat_compl_fab,
             cat.cat_compl_strait, cat.dic_category_free_1_id,
             cat.dic_category_free_2_id, cat.cat_free_text_1,
             cat.cat_free_text_2, cat.cat_free_text_3, cat.cat_free_text_4,
             cat.cat_free_text_5, cat.cat_free_number_1,
             cat.cat_free_number_2, cat.cat_free_number_3,
             cat.cat_free_number_4, cat.cat_free_number_5, cat.c_ean_type,
             cat.dic_good_ean_gen_id, cat.c_ean_type_purchase,
             cat.dic_good_ean_gen_pur_id, cat.c_ean_type_sale,
             cat.dic_good_ean_gen_sale_id, cat.c_ean_type_asa,
             cat.dic_good_ean_gen_asa_id, cat.c_ean_type_stock,
             cat.dic_good_ean_gen_stock_id, cat.c_ean_type_inv,
             cat.dic_good_ean_gen_inv_id, cat.c_ean_type_fal,
             cat.dic_good_ean_gen_fal_id, cat.c_ean_type_subcontract,
             cat.dic_good_ean_gen_sco_id, cat.dic_tabsheet_attribute_1_id,
             cat.dic_tabsheet_attribute_2_id,
             cat.dic_tabsheet_attribute_3_id,
             cat.dic_tabsheet_attribute_4_id,
             cat.dic_tabsheet_attribute_5_id,
             cat.dic_tabsheet_attribute_6_id,
             cat.dic_tabsheet_attribute_7_id,
             cat.dic_tabsheet_attribute_8_id,
             cat.dic_tabsheet_attribute_9_id,
             cat.dic_tabsheet_attribute_10_id,
             cat.dic_tabsheet_attribute_11_id,
             cat.dic_tabsheet_attribute_12_id,
             cat.dic_tabsheet_attribute_13_id,
             cat.dic_tabsheet_attribute_14_id,
             cat.dic_tabsheet_attribute_15_id,
             cat.dic_tabsheet_attribute_16_id,
             cat.dic_tabsheet_attribute_17_id,
             cat.dic_tabsheet_attribute_18_id,
             cat.dic_tabsheet_attribute_19_id,
             cat.dic_tabsheet_attribute_20_id, cat.cat_compl_attribute,
             cat.c_replication_type, num.gcn_description,
             tem.rte_description, tem.rte_designation, des.gcd_wording
        FROM gco_good_category cat,
             gco_reference_template tem,
             gco_good_numbering num,
             gco_good_category_descr des
       WHERE cat.gco_good_numbering_id = num.gco_good_numbering_id(+)
         AND cat.gco_reference_template_id = tem.gco_reference_template_id
         AND cat.gco_good_category_id = des.gco_good_category_id
         AND des.pc_lang_id = vpc_lang_id;
END rpt_gco_good_category_list;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_GOO_CATEGORY_INTER_SUB" (
   arefcursor                IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid            IN       pcs.pc_lang.lanid%TYPE,
   pm_gco_good_category_id   IN       VARCHAR2
)
IS
/**
 Description - used for the report GCO_GOOD_CATEGORY_LIST, GCO_GOOD_CATEGORY_BATCH

* @author EQI 1 JUN 2008
* @lastupdate 20 FEB 2009
* @public
* @PARAM PM_GCO_GOOD_CATEGORY_ID  GCO_GOOD_CATEGORY_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT gtl.gco_transfer_list_id, gtl.c_default_repl,
             gtl.c_transfer_type, gtl.xli_table_name, gtl.xli_field_name,
             gtl.xli_substitution, gtl.gco_good_category_id,
             gts.xsu_original, gts.xsu_replacement, gts.xsu_is_default_value
        FROM gco_transfer_subst gts, gco_transfer_list gtl
       WHERE gts.gco_transfer_list_id = gtl.gco_transfer_list_id
         AND gtl.gco_good_category_id = TO_NUMBER (pm_gco_good_category_id);
END rpt_gco_goo_category_inter_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_GOO_CATEGORY_SUB" (
   arefcursor                     IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid                 IN       pcs.pc_lang.lanid%TYPE,
   pm_dic_tabsheet_attribute_id   IN       gco_attribute_fields.dic_tabsheet_attribute_id%TYPE
)
IS
/**
 Description - used for the report GCO_GOOD_CATEGORY_LIST, GCO_GOOD_CATEGORY_BATCH

* @author EQI 1 JUN 2008
* @lastupdate 20 FEB 2009
* @public
* @PARAM pm_dic_tabsheet_attribute_id dic_tabsheet_attribute_id
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT dta.dic_tabsheet_attribute_id, dta.dic_description,
             gaf.atf_mandatory, gaf.atf_sequence_number, fdi.fdiheader,
             fld.fldname
        FROM dic_tabsheet_attribute dta,
             gco_attribute_fields gaf,
             pcs.pc_fdico fdi,
             pcs.pc_fldsc fld
       WHERE dta.dic_tabsheet_attribute_id = gaf.dic_tabsheet_attribute_id
         AND gaf.pc_fldsc_id = fld.pc_fldsc_id
         AND fdi.pc_fldsc_id = fld.pc_fldsc_id
         AND fdi.pc_lang_id = vpc_lang_id
         AND dta.dic_tabsheet_attribute_id = pm_dic_tabsheet_attribute_id;
END rpt_gco_goo_category_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_LIST_GOOD_MAN_ST_CONT" (arefcursor in out crystal_cursor_types.dualcursortyp, procuser_lanid in pcs.pc_lang.lanid%type)
is
/**
 Description - used for the report GCO_LIST_OF_GOODS_FOR_MANUAL_STOCK_CONTR

* @author SMA 25 SEP 2013
* @lastupdate
* @public
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select GOO.GOO_MAJOR_REFERENCE
         , GCO_LIB_FUNCTIONS.GetDescription(GOO.GCO_GOOD_ID, procuser_lanid, 1, null) DES_SHORT_DESCRIPTION
      from GCO_GOOD GOO
         , GCO_PRODUCT PDT
     where GOO.GCO_GOOD_ID = PDT.GCO_GOOD_ID
       and PDT.PDT_STOCK_MANAGEMENT = '1';
end rpt_gco_list_good_man_st_cont;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PDT_DET_FORM_MANF_SUB" (arefcursor in out crystal_cursor_types.dualcursortyp, parameter_0 in number)
is
/**Description - used for report GCO_PRODUCT_FORM_FULL

* @author SMA 09 MARCH 2015
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select   CDM.GCO_GOOD_ID
           , CDM.DIC_FAB_CONDITION_ID
           , CDM.CMA_LOT_QUANTITY
           , CDM.CMA_MANUFACTURING_DELAY
           , CDM.CMA_ECONOMICAL_QUANTITY
           , CDM.CMA_PLAN_NUMBER
           , CDM.CMA_PLAN_VERSION
           , PPS.PPS_NOMENCLATURE_ID
           , PPS.C_TYPE_NOM
           , PPS.NOM_VERSION
           , COM.PPS_NOM_BOND_ID
           , COM.PPS_NOMENCLATURE_ID
           , COM.COM_VAL
           , COM.COM_SEQ
           , COM.C_TYPE_COM
           , COM.C_KIND_COM
           , COM.GCO_GOOD_ID
           , COM.PPS_PPS_NOMENCLATURE_ID
           , GOO.GOO_SECONDARY_REFERENCE
           , DES.DES_SHORT_DESCRIPTION
           , GOO.DIC_UNIT_OF_MEASURE_ID
           , COM.COM_UTIL_COEFF
           , COM.COM_PDIR_COEFF
           , COM.COM_PERCENT_WASTE
           , COM.COM_FIXED_QUANTITY_WASTE
           , COM.COM_QTY_REFERENCE_LOSS
           , COM.COM_REC_PCENT
           , COM.COM_POS
           , COM.FAL_SCHEDULE_STEP_ID
           , COM.PPS_RANGE_OPERATION_ID
           , COM.STM_STOCK_ID
           , COM.STM_LOCATION_ID
           , COM.C_DISCHARGE_COM
           , COM.C_REMPLACEMENT_NOM
           , COM.COM_REMPLACEMENT
           , COM.COM_BEG_VALID
           , COM.COM_END_VALID
           , COM.COM_SUBSTITUT
           , COM.COM_INTERVAL
           , COM.COM_INCREASE_COST
           , COM.COM_TEXT
           , COM.COM_RES_TEXT
           , COM.COM_RES_NUM
           , COM.COM_MARK_TOPO
           , COM.COM_WEIGHING
           , COM.COM_WEIGHING_MANDATORY
           , GOO.GOO_PRECIOUS_MAT
           , COM.A_DATECRE
           , COM.A_IDCRE
           , COM.A_DATEMOD
           , COM.A_IDMOD
           , PPS.FAL_SCHEDULE_PLAN_ID
           , SCH.C_SCHEDULE_PLANNING
           , SCH.SCH_REF
        from GCO_COMPL_DATA_MANUFACTURE CDM
           , PPS_NOMENCLATURE PPS
           , PPS_NOM_BOND COM
           , GCO_GOOD GOO
           , GCO_DESCRIPTION DES
           , FAL_SCHEDULE_PLAN SCH
       where CDM.PPS_NOMENCLATURE_ID = PPS.PPS_NOMENCLATURE_ID(+)
         and COM.PPS_NOMENCLATURE_ID = pps.PPS_NOMENCLATURE_ID
         and GOO.GCO_GOOD_ID(+) = COM.GCO_GOOD_ID
         and pps.PPS_NOMENCLATURE_ID = COM.PPS_NOMENCLATURE_ID
         and COM.GCO_GOOD_ID = DES.GCO_GOOD_ID(+)
         and DES.PC_LANG_ID(+) = vpc_lang_id
         and DES.C_DESCRIPTION_TYPE(+) = '01'
         and CDM.FAL_SCHEDULE_PLAN_ID = SCH.FAL_SCHEDULE_PLAN_ID(+)
         and CDM.GCO_GOOD_ID = parameter_0
    order by CDM.DIC_FAB_CONDITION_ID nulls first
           , COM.COM_SEQ asc;
end rpt_gco_pdt_det_form_manf_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PDT_DET_FORM_STOCK_SUB" (arefcursor in out crystal_cursor_types.dualcursortyp, parameter_0 in number)
is
/**Description - used for report GCO_PRODUCT_FORM_FULL

* @author SMA 5 MARCH 2015
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
begin
  open arefcursor for
    select   CDS.GCO_GOOD_ID
           , STO.STO_DESCRIPTION
           , LOC.LOC_DESCRIPTION
           , CDS.CST_QUANTITY_MIN
           , CDS.CST_QUANTITY_MAX
           , CDS.CST_TRIGGER_POINT
           , CDS.DIC_TEMPERATURE_ID
           , CDS.DIC_LUMINOSITY_ID
           , CDS.DIC_RELATIVE_HUMIDITY_ID
           , CDS.DIC_STORAGE_POSITION_ID
        from GCO_COMPL_DATA_STOCK CDS
           , STM_STOCK STO
           , STM_LOCATION LOC
       where CDS.STM_STOCK_ID = STO.STM_STOCK_ID(+)
         and CDS.STM_LOCATION_ID = LOC.STM_LOCATION_ID(+)
         and CDS.GCO_GOOD_ID = parameter_0
    order by STO.STO_DESCRIPTION nulls first
           , LOC.LOC_DESCRIPTION nulls first;
end rpt_gco_pdt_det_form_stock_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_AUX_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 21 FEB 2009
* @public
* @PARAM PARAMETER_0 gco_good_id
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT goo.goo_major_reference, goo.goo_secondary_reference,
             goo.goo_obsolete, pdg.prg_name, pdg.prg_description,
             per.per_name, v_goo.gco_good_id,
             v_goo.gco_multimedia_element_id,
             v_goo.mme_multimedia_designation, v_goo.mme_free_description,
             v_goo.gco_substitution_list_id, v_goo.sul_subst_design_short,
             v_goo.sul_comment, v_goo.sul_from_date, v_goo.sul_until_date,
             v_goo.dic_accountable_group_id,
             v_goo.dic_accountable_group_wording, v_goo.dic_good_line_id,
             v_goo.dic_good_line_wording, v_goo.dic_good_family_id,
             v_goo.dic_good_family_wording, v_goo.dic_good_model_id,
             v_goo.dic_good_model_wording, v_goo.dic_good_group_id,
             v_goo.dic_good_group_wording, v_goo.gco_product_group_id,
             v_goo.dic_ptc_good_group_id, v_goo.dic_pur_tariff_struct_id,
             v_goo.dic_sale_tariff_struct_id, v_goo.dic_commissioning_id,
             v_goo.dic_tariff_set_purchase_id, v_goo.dic_tariff_set_sale_id,
             v_pdt.pdt_end_life, v_pdt.dic_unit_of_measure_id,
             v_pdt.dic_unit_of_measure_wording,
             v_pdt.pdt_conversion_factor_1, v_pdt.dic_unit_of_measure1_id,
             v_pdt.dic_unit_of_measure1_wording,
             v_pdt.pdt_conversion_factor_2, v_pdt.dic_unit_of_measure2_id,
             v_pdt.dic_unit_of_measure2_wording,
             v_pdt.pdt_conversion_factor_3, v_pdt.gco_gco_service_id,
             v_pdt.gco_service_major_reference,
             v_pdt.gco_service_sec_reference, v_pdt.pdt_mark_nomenclature,
             v_pdt.pdt_mark_used, v_pdt.pdt_stock_alloc_batch,
             v_pdt.pdt_scale_link, v_pdt.c_supply_type,
             v_pdt.c_product_delivery_typ, v_pdt.dic_del_typ_explain_id,
             v_pdt.pac_supplier_partner_id,
             v_pdt.gco_dangerous_transp_adr_id, v_pdt.gtd_reference_adr,
             v_pdt.gco_dangerous_transp_iata_id, v_pdt.gtd_reference_iata,
             v_pdt.gco_dangerous_transp_imdg_id, v_pdt.gtd_reference_imdg
        FROM v_gco_good_list v_goo,
             v_gco_product_list v_pdt,
             gco_good goo,
             gco_product_group pdg,
             pac_person per
       WHERE v_goo.gco_good_id = v_pdt.gco_good_id(+)
         AND v_goo.sul_replacement_good_id = goo.gco_good_id(+)
         AND v_goo.gco_product_group_id = pdg.gco_product_group_id (+)
         AND v_pdt.pac_supplier_partner_id = per.pac_person_id(+)
         AND v_pdt.pc_lang_id = vpc_lang_id
         AND v_goo.gco_good_id = parameter_0;
END rpt_gco_product_aux_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_CHARAC_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 21 FEB 2009
* @public
* @PARAM PARAMETER_0 gco_good_id
*/
BEGIN
   OPEN arefcursor FOR
      SELECT caf.caf_numbering_function, che.che_value, che.che_allocation,
             che.che_ean_code, cha.gco_characterization_id,
             cha.c_chronology_type, cha.c_charact_type, cha.c_unit_of_time,
             cha.gco_good_id, cha.cha_characterization_design,
             cha.cha_automatic_incrementation, cha.cha_increment_ste,
             cha.cha_last_used_increment, cha.cha_lapsing_delay,
             cha.cha_minimum_value, cha.cha_maximum_value, cha.cha_comment,
             cha.cha_stock_management, cha.gco_char_autonum_func_id,
             cha.cha_prefixe, cha.cha_suffixe, cha.cha_free_text_1,
             cha.cha_free_text_2, cha.cha_free_text_3, cha.cha_free_text_4,
             cha.cha_free_text_5, cha.cha_lapsing_marge,
             dsl.gco_desc_language_id, dsl.dla_description
        FROM gco_characterization cha,
             gco_characteristic_element che,
             gco_desc_language dsl,
             gco_char_autonum_func caf
       WHERE cha.gco_characterization_id = che.gco_characterization_id(+)
         AND cha.gco_characterization_id = dsl.gco_characterization_id(+)
         AND cha.gco_char_autonum_func_id = caf.gco_char_autonum_func_id(+)
         AND cha.gco_good_id = parameter_0;
END rpt_gco_product_charac_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_DESC_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 21 FEB 2009
* @public
* @PARAM PARAMETER_0 gco_good_id
*/
BEGIN
   OPEN arefcursor FOR
      SELECT gco_good.gco_good_id, gco_description.des_short_description,
             gco_description.des_long_description,
             gco_description.des_free_description,
             gco_description_st.des_short_description des_short_descr_st,
             gco_description_st.des_long_description des_long_descr_st,
             gco_description_st.des_free_description des_free_descr_st,
             gco_description_pu.des_short_description des_short_descr_pu,
             gco_description_pu.des_long_description des_long_descr_pu,
             gco_description_pu.des_free_description des_free_descr_pu,
             gco_description_sa.des_short_description des_short_descr_sa,
             gco_description_sa.des_long_description des_long_descr_sa,
             gco_description_sa.des_free_description des_free_descr_sa,
             gco_description_fa.des_short_description des_short_descr_fa,
             gco_description_fa.des_long_description des_long_descr_fa,
             gco_description_fa.des_free_description des_free_descr_fa,
             gco_description_so.des_short_description des_short_descr_so,
             gco_description_so.des_long_description des_long_descr_so,
             gco_description_so.des_free_description des_free_descr_so,
             gco_description_sv.des_short_description des_short_descr_sv,
             gco_description_sv.des_long_description des_long_descr_sv,
             gco_description_sv.des_free_description des_free_descr_sv,
             gco_description_in.des_short_description des_short_descr_in,
             gco_description_in.des_long_description des_long_descr_in,
             gco_description_in.des_free_description des_free_descr_in,
             gco_description_ca.des_short_description des_short_descr_ca,
             gco_description_ca.des_long_description des_long_descr_ca,
             gco_description_ca.des_free_description des_free_descr_ca,
             gco_description_tk.des_short_description des_short_descr_tk,
             gco_description_tk.des_long_description des_long_descr_tk,
             gco_description_tk.des_free_description des_free_descr_tk,
             gco_description_iv.des_short_description des_short_descr_iv,
             gco_description_iv.des_long_description des_long_descr_iv,
             gco_description_iv.des_free_description des_free_descr_iv,
             lan.pc_lang_id, lan.lanname
        FROM gco_good,
             gco_description,
             gco_description gco_description_st,
             gco_description gco_description_pu,
             gco_description gco_description_sa,
             gco_description gco_description_fa,
             gco_description gco_description_so,
             gco_description gco_description_sv,
             gco_description gco_description_in,
             gco_description gco_description_ca,
             gco_description gco_description_tk,
             gco_description gco_description_iv,
             pcs.pc_lang lan
       WHERE gco_good.gco_good_id = gco_description.gco_good_id
         AND gco_description.c_description_type = 1
         AND gco_description.gco_good_id = gco_description_st.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_st.pc_lang_id(+)
         AND gco_description_st.c_description_type(+) = 2
         AND gco_description.gco_good_id = gco_description_pu.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_pu.pc_lang_id(+)
         AND gco_description_pu.c_description_type(+) = 3
         AND gco_description.gco_good_id = gco_description_sa.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_sa.pc_lang_id(+)
         AND gco_description_sa.c_description_type(+) = 4
         AND gco_description.gco_good_id = gco_description_fa.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_fa.pc_lang_id(+)
         AND gco_description_fa.c_description_type(+) = 5
         AND gco_description.gco_good_id = gco_description_so.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_so.pc_lang_id(+)
         AND gco_description_so.c_description_type(+) = 6
         AND gco_description.gco_good_id = gco_description_sv.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_sv.pc_lang_id(+)
         AND gco_description_sv.c_description_type(+) = 7
         AND gco_description.gco_good_id = gco_description_in.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_in.pc_lang_id(+)
         AND gco_description_in.c_description_type(+) = 8
         AND gco_description.gco_good_id = gco_description_ca.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_ca.pc_lang_id(+)
         AND gco_description_ca.c_description_type(+) = 9
         AND gco_description.gco_good_id = gco_description_tk.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_tk.pc_lang_id(+)
         AND gco_description_tk.c_description_type(+) = 10
         AND gco_description.gco_good_id = gco_description_iv.gco_good_id(+)
         AND gco_description.pc_lang_id = gco_description_iv.pc_lang_id(+)
         AND gco_description_iv.c_description_type(+) = 11
         AND gco_description.pc_lang_id = lan.pc_lang_id(+)
         AND gco_good.gco_good_id = parameter_0;
END rpt_gco_product_desc_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_ASA_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 12 JAN 2010
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cda.gco_good_id, cda.cas_default_repair, cda.cas_with_guarantee,
             cda.cas_guarantee_delay, cda.c_asa_guaranty_unit,
             ret.ret_rep_type,
             (SELECT dtr.dtr_short_description
                FROM asa_rep_type_descr dtr
               WHERE dtr.c_asa_description_type = '1'
                 AND dtr.asa_rep_type_id = ret.asa_rep_type_id
                 AND dtr.pc_lang_id = vpc_lang_id) rep_type_descr
        FROM gco_compl_data_ass cda, asa_rep_type ret
       WHERE cda.asa_rep_type_id = ret.asa_rep_type_id(+)
             AND cda.gco_good_id = parameter_0;
END rpt_gco_product_form_asa_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_BATCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 10 FEB 2010
* @public
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT goo.gco_good_id gc_gco_good_id, goo.goo_major_reference,
             goo.goo_secondary_reference, goo.goo_number_of_decimal,
             goo.a_datecre, goo.a_datemod, vpc_lang_id pc_lang_id,
             gco_functions.getdescription2
                                      (goo.gco_good_id,
                                       vpc_lang_id,
                                       1,
                                       '01'
                                      ) des_short_description,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        2,
                                        '01'
                                       ) des_long_description,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        3,
                                        '01'
                                       ) des_free_description,
             goo.dic_unit_of_measure_id, goo.c_management_mode,
             goo.goo_precious_mat, pdt.gco_good_id, pdt.stm_stock_id,
             pdt.pdt_full_tracability, sto.sto_description,
             pdt.stm_location_id, loc.loc_description, pdt.c_supply_mode,
             pdt.pdt_stock_management, pdt.pdt_stock_obtain_management,
             pdt.pdt_calc_requirement_mngment, pdt.pdt_continuous_inventar,
             pdt.pdt_pic, pdt.pdt_block_equi, pdt.pdt_guaranty_use,
             pdt.pdt_multi_sourcing,
             (SELECT gde.gcd_wording
                FROM gco_good_category_descr gde
               WHERE gde.gco_good_category_id =
                                         goo.gco_good_category_id
                 AND gde.pc_lang_id = vpc_lang_id) gcd_wording
        FROM gco_good goo, gco_product pdt, stm_stock sto, stm_location loc
       WHERE goo.gco_good_id = pdt.gco_good_id
         AND pdt.stm_stock_id = sto.stm_stock_id(+)
         AND pdt.stm_location_id = loc.stm_location_id(+)
         AND goo.gco_good_id = parameter_0;
END rpt_gco_product_form_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_CTR_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 10 FEB 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT csu.gco_good_id, per.per_name, csu.csu_default_subcontracter,
             csu.dic_unit_of_measure_id, csu.csu_economical_quantity,
             csu.csu_subcontracting_delay
        FROM gco_compl_data_subcontract csu, pac_person per
       WHERE csu.pac_supplier_partner_id = per.pac_person_id(+)
         AND csu.gco_good_id = parameter_0;
END rpt_gco_product_form_ctr_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_DIS_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 12 JAN 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT cdi.gco_good_id, diu.diu_name, diu.diu_description,
             cdi.dic_unit_of_measure_id, cdi.cdi_stock_min,
             cdi.cdi_economical_quantity
        FROM gco_compl_data_distrib cdi, stm_distribution_unit diu
       WHERE cdi.stm_distribution_unit_id = diu.stm_distribution_unit_id(+)
         AND cdi.gco_good_id = parameter_0;
END rpt_gco_product_form_dis_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_EXT_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 9 FEB 2010
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT ext.gco_good_id, rcy.rcy_key, rcy.rcy_descr,
             ext.cea_new_items_warranty, ext.c_asa_new_guaranty_unit,
             ext.cea_old_items_warranty, ext.c_asa_old_guaranty_unit
        FROM gco_compl_data_external_asa ext, doc_record_category rcy
       WHERE ext.doc_record_category_id = rcy.doc_record_category_id(+)
         AND ext.gco_good_id = parameter_0;
END rpt_gco_product_form_ext_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_FULL" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     number
)
is
/**Description - used for report GCO_PRODUCT_FORM_FULL

* @author SMA 05 MARCH 2015
* @lastUpdate
* @public
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select GOO.GCO_GOOD_ID GC_GCO_GOOD_ID
         , GOO.GOO_MAJOR_REFERENCE
         , GOO.GOO_SECONDARY_REFERENCE
         , GOO.GOO_NUMBER_OF_DECIMAL
         , GOO.A_DATECRE
         , GOO.A_DATEMOD
         , VPC_LANG_ID PC_LANG_ID
         , GCO_FUNCTIONS.GETDESCRIPTION2(GOO.GCO_GOOD_ID, vpc_lang_id, 1, '01') DES_SHORT_DESCRIPTION
         , GCO_FUNCTIONS.GETDESCRIPTION2(GOO.GCO_GOOD_ID, vpc_lang_id, 2, '01') DES_LONG_DESCRIPTION
         , GCO_FUNCTIONS.GETDESCRIPTION2(GOO.GCO_GOOD_ID, vpc_lang_id, 3, '01') DES_FREE_DESCRIPTION
         , GOO.DIC_UNIT_OF_MEASURE_ID
         , GOO.C_MANAGEMENT_MODE
         , GOO.GOO_PRECIOUS_MAT
         , GOO.C_GOOD_STATUS
         , PDT.GCO_GOOD_ID
         , PDT.STM_STOCK_ID
         , PDT.PDT_FULL_TRACABILITY
         , STO.STO_DESCRIPTION
         , PDT.STM_LOCATION_ID
         , LOC.LOC_DESCRIPTION
         , PDT.C_SUPPLY_MODE
         , PDT.PDT_STOCK_MANAGEMENT
         , PDT.PDT_STOCK_OBTAIN_MANAGEMENT
         , PDT.PDT_CALC_REQUIREMENT_MNGMENT
         , PDT.PDT_CONTINUOUS_INVENTAR
         , PDT.PDT_PIC
         , PDT.PDT_BLOCK_EQUI
         , PDT.PDT_GUARANTY_USE
         , PDT.PDT_MULTI_SOURCING
         , PDT.PDT_VERSION
         , (select GDE.GCD_WORDING
              from GCO_GOOD_CATEGORY_DESCR GDE
             where GDE.GCO_GOOD_CATEGORY_ID = GOO.GCO_GOOD_CATEGORY_ID
               and GDE.PC_LANG_ID = VPC_LANG_ID) GCD_WORDING
         , CDM.GCO_COMPL_DATA_MANUFACTURE_ID
         , CDM.PPS_NOMENCLATURE_ID
         , CDM.FAL_SCHEDULE_PLAN_ID
         , CDM.DIC_FAB_CONDITION_ID
         , CDM.CMA_MANUFACTURING_DELAY
         , CDM.CMA_LOT_QUANTITY
         , CDM.CMA_ECONOMICAL_QUANTITY
         , CDM.CMA_PLAN_NUMBER
         , CDM.CMA_PLAN_VERSION
         , 1 GROUPE   -- Permet de gérer un groupe supplémentaire pour l'affichage du rapport
      from GCO_GOOD GOO
         , GCO_PRODUCT PDT
         , STM_STOCK STO
         , STM_LOCATION LOC
         , GCO_COMPL_DATA_MANUFACTURE CDM
     where GOO.GCO_GOOD_ID = PDT.GCO_GOOD_ID
       and GOO.GCO_GOOD_ID = CDM.GCO_GOOD_ID(+)
       and PDT.STM_STOCK_ID = STO.STM_STOCK_ID(+)
       and PDT.STM_LOCATION_ID = LOC.STM_LOCATION_ID(+)
       and GOO.GCO_GOOD_ID = parameter_0;
end rpt_gco_product_form_full;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_INV_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 5 JAN 2010
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT cin.gco_good_id, sto.sto_description, loc.loc_description,
             qpr.qpr_quality_principle_design, cin.cin_fixed_stock_position,
             cin.cin_turning_inventory, cin.cin_turning_inventory_delay,
             cin.cin_last_inventory_date, cin.cin_next_inventory_date
        FROM gco_compl_data_inventory cin,
             stm_stock sto,
             stm_location loc,
             gco_quality_principle qpr
       WHERE cin.stm_stock_id = sto.stm_stock_id(+)
         AND cin.stm_location_id = loc.stm_location_id(+)
         AND cin.gco_quality_principle_id = qpr.gco_quality_principle_id(+)
         AND cin.gco_good_id = parameter_0;
END rpt_gco_product_form_inv_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_LAUNCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2
)
IS
/**Description - used for report GCO_PRODUCT_FORM_LAUNCH

* @author AWU 24 FEB 2010
* @lastUpdate
* @public
* @param PARAMETER_0: Printing all products 0:no 1:yes
* @param PARAMETER_1: COM_LIST.LIS_JOB_ID only if parameter_0 is 0
* @param PARAMETER_2: Printing tabs string
* @param PARAMETER_3: Value checkbox for user selection 0:no 1:create 2:modify
* @param PARAMETER_4: Date from
* @param PARAMETER_5: Date to
* @param PARAMETER_6: Initial
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT goo.gco_good_id gc_gco_good_id, goo.goo_major_reference,
             goo.goo_secondary_reference, goo.goo_number_of_decimal,
             goo.a_datecre, goo.a_datemod, vpc_lang_id pc_lang_id,
             gco_functions.getdescription2
                                      (goo.gco_good_id,
                                       vpc_lang_id,
                                       1,
                                       '01'
                                      ) des_short_description,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        2,
                                        '01'
                                       ) des_long_description,
             gco_functions.getdescription2
                                       (goo.gco_good_id,
                                        vpc_lang_id,
                                        3,
                                        '01'
                                       ) des_free_description,
             goo.dic_unit_of_measure_id, goo.c_management_mode,
             goo.goo_precious_mat, pdt.gco_good_id, pdt.stm_stock_id,
             pdt.pdt_full_tracability, sto.sto_description,
             pdt.stm_location_id, loc.loc_description, pdt.c_supply_mode,
             pdt.pdt_stock_management, pdt.pdt_stock_obtain_management,
             pdt.pdt_calc_requirement_mngment, pdt.pdt_continuous_inventar,
             pdt.pdt_pic, pdt.pdt_block_equi, pdt.pdt_guaranty_use,
             pdt.pdt_multi_sourcing,
             (SELECT gde.gcd_wording
                FROM gco_good_category_descr gde
               WHERE gde.gco_good_category_id =
                                         goo.gco_good_category_id
                 AND gde.pc_lang_id = vpc_lang_id) gcd_wording
        FROM gco_good goo, gco_product pdt, stm_stock sto, stm_location loc
       WHERE goo.gco_good_id = pdt.gco_good_id
         AND pdt.stm_stock_id = sto.stm_stock_id(+)
         AND pdt.stm_location_id = loc.stm_location_id(+)
         AND (   goo.gco_good_id IN (
                    SELECT lis.lis_id_1
                      FROM com_list lis
                     WHERE lis.lis_job_id = TO_NUMBER (parameter_1)
                       AND lis.lis_code = 'GCO_GOOD_ID')
              OR parameter_0 = '1'
             )
         AND (   TRUNC (DECODE (parameter_3,
                                '1', goo.a_datecre,
                                '2', goo.a_datemod,
                                goo.a_datecre
                               )
                       ) >= TO_DATE (parameter_4, 'DD.MM.YYYY')
              OR parameter_3 = '0'
             )
         AND (   TRUNC (DECODE (parameter_3,
                                '1', goo.a_datecre,
                                '2', goo.a_datemod,
                                goo.a_datecre
                               )
                       ) <= TO_DATE (parameter_5, 'DD.MM.YYYY')
              OR parameter_3 = '0'
             )
         AND (   DECODE (parameter_3,
                         '1', goo.a_idcre,
                         '2', goo.a_datemod,
                         goo.a_idcre
                        ) = parameter_6
              OR parameter_3 = '0' OR parameter_6 is null
             );
END rpt_gco_product_form_launch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_MANF_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 14 JUL 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT cdm.gco_good_id, cdm.dic_fab_condition_id, nom.c_type_nom,
             nom.nom_version, sch.c_schedule_planning, cdm.cma_lot_quantity,
             sch.sch_ref, cdm.cma_manufacturing_delay,
             cdm.cma_economical_quantity, cdm.cma_plan_number,
             cdm.cma_plan_version
        FROM gco_compl_data_manufacture cdm,
             pps_nomenclature nom,
             fal_schedule_plan sch
       WHERE cdm.pps_nomenclature_id = nom.pps_nomenclature_id(+)
         AND cdm.fal_schedule_plan_id = sch.fal_schedule_plan_id(+)
         AND (cdm.cma_default = 1 OR cdm.cma_default IS NULL)
         AND cdm.gco_good_id = parameter_0;
END rpt_gco_product_form_manf_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_NOM_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     number
)
is
/**Description - used for report GCO_PRODUCT_FORM_FULL
* @author SMA 16.03.2015
* @lastUpdate
* @public
* parameter_0:  Id de nomenclature
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select     GOO0.GOO_MAJOR_REFERENCE MAJOR_0
             , GOO0.NOM_REF_QTY MAJOR_REF_QTY
             , HGOO.GOO_MAJOR_REFERENCE HEAD_SORT
             , HPRO.C_SUPPLY_MODE HEAD_SUPPLY_MODE
             , (select DES_SHORT_DESCRIPTION
                  from GCO_DESCRIPTION DES
                     , PCS.PC_LANG LAN
                 where DES.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                   and DES.PC_LANG_ID = LAN.PC_LANG_ID
                   and LAN.LANID = procuser_lanid
                   and DES.C_DESCRIPTION_TYPE = '01') HGOO_DESCRIPTION
             , (select     nvl(sum(NBO2.COM_UTIL_COEFF), 1)
                      from PPS_NOM_BOND NBO2
                     where NBO2.GCO_GOOD_ID =
                             (select NOM.GCO_GOOD_ID
                                from PPS_NOM_BOND COM
                                   , PPS_NOMENCLATURE NOM
                               where COM.PPS_NOMENCLATURE_ID = NOM.PPS_NOMENCLATURE_ID
                                 and COM.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
                                 and COM.PPS_NOMENCLATURE_ID in(select     max(COM2.PPS_PPS_NOMENCLATURE_ID)
                                                                      from PPS_NOM_BOND COM2
                                                                start with COM2.PPS_NOMENCLATURE_ID = parameter_0
                                                                connect by prior COM2.PPS_PPS_NOMENCLATURE_ID = COM2.PPS_NOMENCLATURE_ID) )
                start with NBO2.PPS_NOMENCLATURE_ID = parameter_0
                connect by prior NBO2.PPS_PPS_NOMENCLATURE_ID = NBO2.PPS_NOMENCLATURE_ID) PREV_HEAD_COEFFICIENT
             , (select     sum(NBO.COM_UTIL_COEFF)
                      from PPS_NOM_BOND NBO
                     where NBO.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                start with NBO.PPS_NOMENCLATURE_ID = parameter_0
                connect by prior NBO.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID) HEAD_COEFFICIENT
             , H_DESCRIPTION.DES_SHORT_DESCRIPTION H_DES_SHORT_DESCRIPTION
             , H_DESCRIPTION.DES_LONG_DESCRIPTION H_DES_LONG_DESCRIPTION
             , level
             , GOO.GOO_MAJOR_REFERENCE MAJOR
             , nvl(STMQTY.AVAILABLE_QUANTITY, 0) AVAILABLE_QUANTITY
             , D_DESCRIPTION.DES_SHORT_DESCRIPTION DES_SHORT_DESCRIPTION
             , D_DESCRIPTION.DES_LONG_DESCRIPTION DES_LONG_DESCRIPTION
             , NBO.COM_UTIL_COEFF
             , NBO.COM_PDIR_COEFF
             , NBO.COM_REC_PCENT
             , NBO.COM_POS
             , NBO.COM_REMPLACEMENT
             , NBO.COM_INTERVAL
             , NBO.COM_SEQ
             , NOM.NOM_VERSION
             , NOM.C_TYPE_NOM
             , NOM.NOM_REF_QTY
             , PRO.C_SUPPLY_MODE
             , COM_FUNCTIONS.GETDESCODEDESCR('C_TYPE_COM', NBO.C_TYPE_COM, vpc_lang_id) C_TYPE_COM
             , COM_FUNCTIONS.GETDESCODEDESCR('C_KIND_COM', NBO.C_KIND_COM, vpc_lang_id) C_KIND_COM
             , COM_FUNCTIONS.GETDESCODEDESCR('C_REMPLACEMENT_NOM', NBO.C_REMPLACEMENT_NOM, vpc_lang_id) C_REMPLACEMENT_NOM
             , COM_FUNCTIONS.GETDESCODEDESCR('C_DISCHARGE_COM', NBO.C_DISCHARGE_COM, vpc_lang_id) C_DISCHARGE_COM
             , NBO.COM_VAL
             , NBO.COM_BEG_VALID
             , NBO.COM_END_VALID
          from PPS_NOM_BOND NBO
             , GCO_GOOD GOO
             , GCO_PRODUCT PRO
             , GCO_GOOD HGOO
             , GCO_PRODUCT HPRO
             , PPS_NOMENCLATURE NOM
             , (select GCO_GOOD_ID
                     , DES.DES_SHORT_DESCRIPTION
                     , DES.DES_LONG_DESCRIPTION
                  from GCO_DESCRIPTION DES
                     , PCS.PC_LANG LAN
                 where DES.PC_LANG_ID = LAN.PC_LANG_ID
                   and LAN.LANID = procuser_lanid
                   and DES.C_DESCRIPTION_TYPE = '01') D_DESCRIPTION
             , (select HGOO.GOO_MAJOR_REFERENCE
                     , DESCRIPTION.DES_SHORT_DESCRIPTION
                     , DESCRIPTION.DES_LONG_DESCRIPTION
                  from GCO_GOOD HGOO
                     , PPS_NOMENCLATURE NOM
                     , (select GCO_GOOD_ID
                             , DES.DES_SHORT_DESCRIPTION
                             , DES.DES_LONG_DESCRIPTION
                          from GCO_DESCRIPTION DES
                             , PCS.PC_LANG LAN
                         where DES.PC_LANG_ID = LAN.PC_LANG_ID
                           and LAN.LANID = procuser_lanid
                           and DES.C_DESCRIPTION_TYPE = '01') DESCRIPTION
                 where NOM.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                   and DESCRIPTION.GCO_GOOD_ID(+) = HGOO.GCO_GOOD_ID
                   and NOM.PPS_NOMENCLATURE_ID = parameter_0) H_DESCRIPTION
             , (select   STM.GCO_GOOD_ID
                       , sum(STM.SPO_AVAILABLE_QUANTITY) AVAILABLE_QUANTITY
                    from STM_STOCK_POSITION STM
                group by STM.GCO_GOOD_ID) STMQTY
             , (select GOO1.GOO_MAJOR_REFERENCE
                     , NOM1.NOM_REF_QTY
                  from PPS_NOMENCLATURE NOM1
                     , GCO_GOOD GOO1
                 where NOM1.GCO_GOOD_ID = GOO1.GCO_GOOD_ID
                   and NOM1.PPS_NOMENCLATURE_ID = parameter_0) GOO0
         where NOM.PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
           and GOO.GCO_GOOD_ID = NBO.GCO_GOOD_ID
           and GOO.GCO_GOOD_ID = PRO.GCO_GOOD_ID
           and NOM.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
           and HPRO.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
           and D_DESCRIPTION.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
           and STMQTY.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
    start with NBO.PPS_NOMENCLATURE_ID = parameter_0
    connect by prior NBO.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
      order siblings by NBO.COM_SEQ;
end rpt_gco_product_form_nom_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_PUR_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 14 JUL 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT cdp.gco_good_id, per.per_name,
                pad.add_zipcode
             || ' '
             || pad.add_city
             || ' '
             || ctr.cntname per_address,
             cdp.cda_complementary_reference, cdp.cpu_supply_delay,
             cdp.cpu_economical_quantity
        FROM gco_compl_data_purchase cdp,
             pac_person per,
             pac_address pad,
             pcs.pc_cntry ctr
       WHERE cdp.pac_supplier_partner_id = per.pac_person_id(+)
         AND per.pac_person_id = pad.pac_person_id(+)
         AND (pad.add_principal = 1 OR pad.add_principal IS NULL)
         AND pad.pc_cntry_id = ctr.pc_cntry_id(+)
         AND cdp.gco_good_id = parameter_0;
END rpt_gco_product_form_pur_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_SAL_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 7 Jan 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT csa.gco_good_id, per.per_name, csa.cda_complementary_reference,
             csa.csa_th_supply_delay, csa.csa_dispatching_delay,
             csa.csa_delivery_delay
        FROM gco_compl_data_sale csa, pac_person per
       WHERE csa.pac_custom_partner_id = per.pac_person_id
         AND csa.gco_good_id = parameter_0;
END rpt_gco_product_form_sal_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_SCH_SUB" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, procuser_lanid in     pcs.pc_lang.lanid%type
, parameter_0    in     number
)
is
/**Description - used for report GCO_PRODUCT_FORM_FULL
* @author SMA 16.03.2015
* @lastUpdate
* @public
* PARAMETER_0:  Id de nomenclature
*/
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select   SCH.SCH_REF
           , SCH.SCH_SHORT_DESCR
           , SCS.SCS_STEP_NUMBER
           , SCS.SCS_SHORT_DESCR
           , SCS.SCS_ADJUSTING_TIME
           , SCS.SCS_WORK_TIME
           , SCS.SCS_QTY_REF_WORK
           , SCS.SCS_WORK_RATE
           , SCS.SCS_AMOUNT
           , SCS.SCS_QTY_REF_AMOUNT
           , SCH.FAL_SCHEDULE_PLAN_ID
           , SCS.PPS_PPS_OPERATION_PROCEDURE_ID
           , SCS.PPS_OPERATION_PROCEDURE_ID
           , SCS.SCS_DIVISOR_AMOUNT
           , SCS.GCO_GCO_GOOD_ID
           , SCS.PAC_SUPPLIER_PARTNER_ID
           , SCS.FAL_FACTORY_FLOOR_ID
           , SCS.FAL_TASK_ID
           , SCS.C_OPERATION_TYPE
           , SCH.C_SCHEDULE_PLANNING
           , SCS.SCS_ADJUSTING_RATE
           , SCS.FAL_SCHEDULE_STEP_ID
           , SCS.PPS_TOOLS1_ID
           , SCS.PPS_TOOLS2_ID
           , SCS.PPS_TOOLS3_ID
           , SCS.PPS_TOOLS4_ID
           , SCS.PPS_TOOLS5_ID
           , SCS.FAL_FAL_FACTORY_FLOOR_ID
           , SCS.SCS_QTY_FIX_ADJUSTING
           , SCS.SCS_WEIGH
           , SCS.SCS_WEIGH_MANDATORY
           , (select GCO_GOOD.GOO_MAJOR_REFERENCE
                from GCO_GOOD
               where GCO_GOOD.GCO_GOOD_ID = SCS.PPS_TOOLS1_ID) Tool1
           , (select GCO_GOOD.GOO_MAJOR_REFERENCE
                from GCO_GOOD
               where GCO_GOOD.GCO_GOOD_ID = SCS.PPS_TOOLS2_ID) Tool2
           , (select GCO_GOOD.GOO_MAJOR_REFERENCE
                from GCO_GOOD
               where GCO_GOOD.GCO_GOOD_ID = SCS.PPS_TOOLS3_ID) Tool3
           , (select GCO_GOOD.GOO_MAJOR_REFERENCE
                from GCO_GOOD
               where GCO_GOOD.GCO_GOOD_ID = SCS.PPS_TOOLS4_ID) Tool4
           , (select GCO_GOOD.GOO_MAJOR_REFERENCE
                from GCO_GOOD
               where GCO_GOOD.GCO_GOOD_ID = SCS.PPS_TOOLS5_ID) Tool5
        from FAL_SCHEDULE_PLAN SCH
           , FAL_LIST_STEP_LINK SCS
       where SCH.FAL_SCHEDULE_PLAN_ID = SCS.FAL_SCHEDULE_PLAN_ID(+)
         and SCH.FAL_SCHEDULE_PLAN_ID = parameter_0
    order by SCH.SCH_REF
           , SCS.SCS_STEP_NUMBER;
end rpt_gco_product_form_sch_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PRODUCT_FORM_STOCK_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 13 JUL 2009
* @lastUpdate
* @public
* @PARAM  parameter_0 GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT cds.gco_good_id, sto.sto_description, loc.loc_description,
             cds.cst_quantity_min, cds.cst_quantity_max,
             cds.cst_trigger_point
        FROM gco_compl_data_stock cds, stm_stock sto, stm_location loc
       WHERE cds.stm_stock_id = sto.stm_stock_id(+)
         AND cds.stm_location_id = loc.stm_location_id(+)
         AND cds.gco_good_id = parameter_0;
END rpt_gco_product_form_stock_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_PSEUDO_FORM_BATCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PSEUDO_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate AWU 6 MAY 2009 - PYB avril 09
* @public
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT pse.gco_good_id, v_ca.goo_major_reference,
             v_ca.goo_secondary_reference, v_ca.goo_ean_code,
             v_ca.goo_number_of_decimal, v_ca.a_datecre, v_ca.a_datemod,
             v_ca.des_short_description, v_ca.des_long_description,
             v_ca.des_free_description, v_ca.dic_unit_of_measure_id,
             v_ca.c_management_mode, des.gcd_wording
        FROM gco_pseudo_good pse,
             v_gco_good_catalogue v_ca,
             gco_good_category_descr des
       WHERE pse.gco_good_id = parameter_0
         AND pse.gco_good_id = v_ca.gco_good_id
         AND v_ca.pc_lang_id = vpc_lang_id
         AND v_ca.gco_good_category_id = des.gco_good_category_id
         AND des.pc_lang_id = vpc_lang_id;
END rpt_gco_pseudo_form_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_SERVICE_FORM_BATCH" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER
)
IS
/**Description - used for report GCO_PRODUCT_FORM_BATCH

* @author AWU 15 OCT 2009
* @lastUpdate AWU 6 MAY 2009 - PYB Avril 09
* @public
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT ser.gco_good_id, goo.goo_major_reference,
             goo.goo_secondary_reference, goo.goo_ean_code,
             goo.goo_number_of_decimal, goo.a_datecre, goo.a_datemod,
             gco_functions.getdescription
                                      (goo.gco_good_id,
                                       procuser_lanid,
                                       1,
                                       '01'
                                      ) des_short_description,
             gco_functions.getdescription
                                       (goo.gco_good_id,
                                        procuser_lanid,
                                        2,
                                        '01'
                                       ) des_long_description,
             gco_functions.getdescription
                                       (goo.gco_good_id,
                                        procuser_lanid,
                                        3,
                                        '01'
                                       ) des_free_description,
             ume.dic_unit_of_measure_id, goo.c_management_mode,
             (SELECT cds.gcd_wording
                FROM gco_good_category cat,
                     gco_good_category_descr cds
               WHERE goo.gco_good_category_id = cat.gco_good_category_id
                 AND cat.gco_good_category_id = cds.gco_good_category_id
                 AND cds.pc_lang_id = vpc_lang_id) gcd_wording
        FROM gco_service ser, gco_good goo, dic_unit_of_measure ume
       WHERE ser.gco_good_id = parameter_0
         AND ser.gco_good_id = goo.gco_good_id
         AND goo.dic_unit_of_measure_id = ume.dic_unit_of_measure_id(+);
END rpt_gco_service_form_batch;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_SERVICE_RESOURCE_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report GCO_SERVICE_FORM_BATCH

* @author AWU 13 OCT 2009
* @lastUpdate 7 MAY 2009
* @public
* @param parameter_0: GCO_GOOD_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT rtp.dic_resource_type_wording, res.gco_resource_id,
             res.gco_resource_wording, srs.gco_good_id,
             rtp.dic_resource_type_id
        FROM gco_service_resource srs,
             gco_resource res,
             dic_resource_type rtp
       WHERE srs.gco_resource_id = res.gco_resource_id
         AND res.dic_resource_type_id = rtp.dic_resource_type_id
         AND srs.gco_good_id = parameter_0;
END rpt_gco_service_resource_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_GCO_STOCK_LOC_SUB" (arefcursor in out crystal_cursor_types.dualcursortyp, procParamdummy in varchar2 default null)
is
/**Description - used for report GCO_LIST_OF_GOODS_FOR_MANUAL_STOCK_CONTR

* @author SMA 25 SEP 2013
* @lastUpdate
* @public
*/
begin
  open arefcursor for
    select   STM.STO_DESCRIPTION
           , LOC.LOC_DESCRIPTION
        from STM_STOCK STM
           , STM_LOCATION LOC
       where STM.STM_STOCK_ID = LOC.STM_STOCK_ID
         and STM.C_ACCESS_METHOD = 'PUBLIC'
    order by STM.STO_DESCRIPTION
           , LOC.LOC_DESCRIPTION;
end RPT_GCO_STOCK_LOC_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_ABSENCES_MANAGEMENT" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procparam_0      IN       VARCHAR2,
   procparam_1      IN       VARCHAR2,
   procparam_2      IN       VARCHAR2,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description Used for report RPT_HRM_ABSENCES_MANAGEMENT

*author VHA
*created on 30 jun 2011
*update VHA 09 September 2013
*@public
*@param procparam_0: Date from (YYYYMMDD)
*@param procparam_1: Date to (YYYYMMDD)
*@param procparam_2: GROUP BY (0:ABSENCE TYPE, 1:EMPLOYE, 2:DEPARTEMENT)
*@param user_lanid  : user language
*/

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
   v_date_from DATE;
   v_date_to    DATE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;
   v_date_from :=RPT_FUNCTIONS.StringToDate(procparam_0);
   v_date_to := RPT_FUNCTIONS.StringToDate(procparam_1);

  OPEN arefcursor FOR
        SELECT  v_date_from DATE_FROM,
                     v_date_to DATE_TO,
                     P.EMP_NUMBER,
                     P.PER_LAST_NAME||' '||P.PER_FIRST_NAME PER_NAME,
                     P.DIC_DEPARTMENT_ID,
                     (SELECT DD.DIT_DESCR
                        FROM    DICO_DESCRIPTION DD
                     WHERE   DD.DIT_CODE = P.DIC_DEPARTMENT_ID
                         AND     DD.DIT_TABLE = 'DIC_DEPARTMENT'
                         AND  DD.PC_LANG_ID(+) = vpc_lang_id) DIC_DEPARTMENT_DESCR,
                     P.HRM_PERSON_ID RES_ID,
                     SP.DIC_SCH_PERIOD_1_ID,
                     (SELECT DP.DIT_DESCR
                        FROM    DICO_DESCRIPTION DP
                        WHERE   DP.DIT_CODE(+) = SP.DIC_SCH_PERIOD_1_ID
                            AND       DP.DIT_TABLE(+) = 'DIC_SCH_PERIOD_1'
                            AND       DP.PC_LANG_ID(+) = vpc_lang_id) DIC_SCH_PERIOD_1_DESC,
                     SP.SCP_COMMENT,
                     SP.SCP_DATE,
                     SP.SCP_OPEN_TIME,
                     SP.SCP_CLOSE_TIME
        FROM    PAC_SCHEDULE_PERIOD SP,
                     HRM_PERSON P
        WHERE  P.PER_IS_EMPLOYEE = 1
            AND  SP.HRM_PERSON_ID(+) = P.HRM_PERSON_ID
            AND  SCP_DATE IS NOT NULL
            AND  NVL(SP.SCP_DATE, NEXT_DAY(v_date_from - 1, C_DAY_OF_WEEK)) BETWEEN v_date_from AND v_date_to;
END RPT_HRM_ABSENCES_MANAGEMENT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_AVS" (
    aRefCursor in out crystal_cursor_types.DualCursorTyp
  , procparam_0 number
  , procparam_1 number
)
is
/**
* description used for report HRM_AVS.rpt
* @author rhe, ire
* @created 07/2007
* @lastUpdate VHA 06.05.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
begin
  HRM_REP_LIST.AvsList(aRefCursor, procparam_0, procparam_1);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_CAF" (
  aRefCursor     in out crystal_cursor_types.DualCursorTyp
, procparam_0           number
, procparam_1           number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report HRM_CAF.rpt
* @author rhe, ire
* @created 07/2007
* @renamed vha NOV 2011
* @lastUpdate VHA 05.05.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
begin
  if (procuser_lanid is not null) then
    pcs.PC_I_LIB_SESSION.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  HRM_REP_LIST.CafList(aRefCursor, procparam_0, procparam_1, vpc_lang_id);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_CHILD_TRAIN_ALLOC" (
 aRefCursor       in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
 parameter_0      in     varchar2,
 procuser_lanid   in     PCS.PC_LANG.LANID%type
)
IS

/**
*Description
Used for report FAM_STRUCTURE

*author VHA
*created VHA 05 MAY 2011
*updated VHA 08 MAY 2012
* @public
*@param PARAMETER_0 :   Employee status
*/

vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;

begin
  PCS.PC_I_LIB_SESSION.setLanId (procuser_lanid);
  vpc_lang_id := PCS.PC_I_LIB_SESSION.GetUserLangId;

  open aRefCursor for
    select
        P.DIC_CANTON_WORK_ID,
        DC.WOC_DESCR,
        P.HRM_PERSON_ID,
        P.PER_LAST_NAME,
        P.PER_FIRST_NAME,
        P.EMP_NUMBER,
        HRM_VAR.childrenallowance(P.HRM_PERSON_ID, 1,'CHILDREN') + HRM_VAR.childrenallowance(P.HRM_PERSON_ID, 2,'CHILDREN') TOTAL_ALOC,
        R.REL_NAME,
        R.REL_FIRST_NAME,
        HRM_FUNCTIONS.ageingivenperiod(sysdate, R.REL_BIRTH_DATE) CHILDREN_AGE,
        R.REL_BIRTH_DATE,
        HRM_FUNCTIONS.arrayvalue2('CHILDREN',P.DIC_CANTON_WORK_ID||'1', HRM_FUNCTIONS.ageingivenperiod(sysdate, R.REL_BIRTH_DATE)) CHILDREN_ALOC,
        HRM_FUNCTIONS.arrayvalue2('CHILDREN',P.DIC_CANTON_WORK_ID||'2', HRM_FUNCTIONS.ageingivenperiod(sysdate, R.REL_BIRTH_DATE)) TRAINING_ALOC
    from
        HRM_PERSON P,
        DIC_CANTON_WORK DC,
        HRM_RELATED_TO R
    where
        P.DIC_CANTON_WORK_ID = DC.DIC_CANTON_WORK_ID
        and P.HRM_PERSON_ID = R.HRM_EMPLOYEE_ID
        and R.C_RELATED_TO_TYPE = '2'
        and (INSTR(','||parameter_0||',', TO_CHAR(','||P.EMP_STATUS||',')) > 0 OR parameter_0 is null)
        and R.REL_IS_DEPENDANT = 1
        and not exists(select 1 from HRM_RELATED_ALLOCATION A
                 where A.HRM_RELATED_TO_ID = R.HRM_RELATED_TO_ID and
                  sysdate between trunc(ALLO_BEGIN,'month') and nvl(ALLO_END, sysdate));
end RPT_HRM_CHILD_TRAIN_ALLOC;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_ELM_LPP_RECEIPT" (
  arefcursor     in out crystal_cursor_types.dualcursortyp
, parameter_0    in     number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* Description - used for the report HRM_ELM_LPP_RECEIPT

* @author
* @lastUpdate VHA 25 February 2013
* public
* @parameter_0: hrm_elm_recipient_id
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
  l_xmlns2    varchar2(255)                 := 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"';
  l_xmlns3    varchar2(255)                 := 'xmlns:ns3="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer"';
  l_xmlns23   varchar2(255)
    := 'xmlns:ns3="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer" xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"';
begin
  PCS.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.getuserlangid;

  open arefcursor for
    select INF.HRM_ELM_RECIPIENT_ID
         , INF.SEQ
         , INF.INFO1
         , INF.INFO2
         , INF.INFO3
         , INF.INFO4
         , INF.INFO5
         , INF.INFO6
         , INF.INFO7
         , INF.INFO8
         , INF.INFO9
         , INF.INFO10
         , INF.INFO11
         , INF.INFO12
         , INF.INFO13
         , INF.INFO14
         , INF.INFO15
         , INF.INFO16
         , INF.INFO17
         , INF.INFO18
         , INF.INFO19
         , INF.INFO20
         , TRS.ELM_YEAR
         , TRS.ELM_ORDER
         , INS.INS_NAME
         , INS.INS_CONTRACT_NR
         , decode(INF.INFO3
                , 'married', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Mar', vpc_lang_id)
                , 'single', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Cel', vpc_lang_id)
                , 'unknown', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Inconnu', vpc_lang_id)
                , 'widowed', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Veu', vpc_lang_id)
                , 'divorced', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Div', vpc_lang_id)
                , 'separated', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Sep', vpc_lang_id)
                , 'registeredPartnership', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Pen', vpc_lang_id)
                , 'partnershipDissolvedByLaw', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Pdi', vpc_lang_id)
                , 'partnershipDissolvedByDeath', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Pde', vpc_lang_id)
                , 'partnershipDissolvedByDeclarationOfLost', PCS.PC_FUNCTIONS.GetDescodeDescr('C_CIVIL_STATUS', 'Pab', vpc_lang_id)
                 , INF.INFO3) MARITAL_STATUS
         , decode(INF.INFO4
                , 'Identified', PCS.PC_FUNCTIONS.translateword('Identifié', vpc_lang_id)
                , 'Missing', PCS.PC_FUNCTIONS.translateword('Manquant', vpc_lang_id)
                , 'Unknown', PCS.PC_FUNCTIONS.translateword('Inconnu', vpc_lang_id)
                 ) STATUS
      from (
            /* Données globales */
            select cast(HRM_ELM_RECIPIENT_ID as number(12) ) HRM_ELM_RECIPIENT_ID
                 , 0 seq
                 , cast(null as varchar2(4000) ) INFO1
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:GeneralValidAsOf', l_xmlns2) INFO2
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns3:ChangesConsideredUpTo', l_xmlns3) INFO3
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Identified/ns2:Total', l_xmlns2) INFO4
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Identified/ns2:DetailsAvailable', l_xmlns2) INFO5
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Unknown/ns2:Total', l_xmlns2) INFO6
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Unknown/ns2:DetailsAvailable', l_xmlns2) INFO7
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Missing/ns2:Total', l_xmlns2) INFO8
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Persons/ns2:Missing/ns2:DetailsAvailable', l_xmlns2) INFO9
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:Identical', l_xmlns2) INFO10
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:ManualMutationRequiredFrom', l_xmlns2) INFO11
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:AutomaticMutationPossibleFrom', l_xmlns2) INFO12
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:AutomaticMutationProcessedFrom', l_xmlns2) INFO13
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:MappedFrom', l_xmlns2) INFO14
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:Missing', l_xmlns2) INFO15
                 , extractvalue(xmltype(elm_lpp_response_xml), '//ns2:Contributions-BVG-LPP-Code/ns2:Unknown', l_xmlns2) INFO16
                 , cast(null as varchar2(4000) ) INFO17
                 , cast(null as varchar2(4000) ) INFO18
                 , cast(null as varchar2(4000) ) INFO19
                 , cast(null as varchar2(4000) ) INFO20
              from hrm_elm_recipient
             where length(elm_lpp_response_xml) > 0
               and hrm_elm_recipient_id = parameter_0
            union all
            /* Warning global */
            select hrm_elm_recipient_id
                 , 1
                 , extractvalue(column_value, '//ns3:Description', l_xmlns3)
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
              from hrm_elm_recipient
                 , table(xmlsequence(extract(xmltype(elm_lpp_response_xml), '//ns3:BVG-LPP/ns3:Warning/ns3:Notification', l_xmlns3) ) )
             where length(elm_lpp_response_xml) > 0
               and hrm_elm_recipient_id = parameter_0
            union all
            /* Info générale */
            select hrm_elm_recipient_id
                 , 1
                 , extractvalue(column_value, '//ns3:Description', l_xmlns3)
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
              from hrm_elm_recipient
                 , table(xmlsequence(extract(xmltype(elm_lpp_response_xml), '//ns3:BVG-LPP/ns3:Info/ns3:Notification', l_xmlns3 || ' ' || l_xmlns2) ) )
             where length(elm_lpp_response_xml) > 0
               and hrm_elm_recipient_id = parameter_0
            union all
            /* Codes LPP disponibles */
            select hrm_elm_recipient_id
                 , 2 seq
                 , extractvalue(column_value, '//ns2:BVG-LPP-Code', l_xmlns2) info1
                 , extractvalue(column_value, '//ns2:Description', l_xmlns2) info2
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null
                 , null INFO16
                 , null INFO17
                 , null INFO18
                 , null INFO19
                 , NULL INFO20
              from hrm_elm_recipient
                 , table(xmlsequence(extract(xmltype(elm_lpp_response_xml), '//ns3:CodeDescriptions/ns2:CodeDescription', l_xmlns23) ) )
             where length(elm_lpp_response_xml) > 0
               and hrm_elm_recipient_id = parameter_0
            union all
            /* employés manquants */
            select hrm_elm_recipient_id
                 , 3
                 , ssid
                 , fullname
                 , c_civil_status
                 , code
                 , code1 ||
                   ' ' ||
                   case
                     when autoproc1 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc1 || ')'
                     when manual1 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual1 || ')'
                     when autopos1 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos1 || ')'
                     when conv1 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') || case when manual1 is not null then ' (' || manual1 || ')' else '' end
                     when unknown1 =1 then pcs.pc_public.translateword('Code inconnu')
                     when missing1 =1 then pcs.pc_public.translateword('Code manquant')
                   end code1
                 , code2 ||
                   ' ' ||
                   case
                     when autoproc2 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc2 || ')'
                     when manual2 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual2 || ')'
                     when autopos2 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos2 || ')'
                     when conv2 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') || case when manual2 is not null then ' (' || manual2 || ')' else '' end
                     when unknown2 =1 then pcs.pc_public.translateword('Code inconnu')
                     when missing2 =1 then pcs.pc_public.translateword('Code manquant')
                   end code2
                 , validasof1
                 , validasof2
                 , to_char(EmployeeContribution / 12,'FM999999999.00')
                 , to_char(EmployeeContribution2 / 12,'FM999999999.00')
                 , to_char(EmployerContribution / 12,'FM999999999.00')
                 , to_char(EmployerContribution2 / 12,'FM999999999.00')
                 , warning
                 , info
                 , warning2
                 , info2
                 , warning3
                 , info3
                 , to_char(ThirdPartyContribution / 12,'FM999999999.00')
                 , to_char(ThirdPartyContribution2 / 12,'FM999999999.00')
              from (select hrm_elm_recipient_id
                         , extractvalue(column_value, '//ns2:SV-AS-Number', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ssid
                         , extractvalue(column_value, '//ns2:Lastname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ||
                           ' ' ||
                           extractvalue(column_value, '//ns2:Firstname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') fullname
                         , extractvalue(column_value, '//ns2:CivilStatus/ns2:Status', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"')
                                                                                                                                                 c_civil_status
                         , 'Missing' code
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning2
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning3
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info3
                      from hrm_elm_recipient
                         , table(xmlsequence(extract(xmltype(elm_lpp_response_xml)
                                                   , '//ns2:Missing/ns2:Person'
                                                   , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                                    )
                                            )
                                )
                     where length(elm_lpp_response_xml) > 0
                       and hrm_elm_recipient_id = parameter_0)
            union all
            /* Employés identifiés */
            select hrm_elm_recipient_id
                 , 3
                 , ssid
                 , fullname
                 , c_civil_status
                 , code
                 , code1 ||
                   ' ' ||
                   case
                     when autoproc1 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc1 || ')'
                     when manual1 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual1 || ')'
                     when autopos1 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos1 || ')'
                     when conv1 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') || case when manual1 is not null then ' (' || manual1 || ')' else '' end
                     when unknown1 =1 then pcs.pc_public.translateword('Code inconnu')
                     when missing1 =1 then pcs.pc_public.translateword('Code manquant')
                   end code1
                 , code2 ||
                   ' ' ||
                   case
                     when autoproc2 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc2 || ')'
                     when manual2 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual2 || ')'
                     when autopos2 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos2 || ')'
                     when conv2 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') || case when manual2 is not null then ' (' || manual2 || ')' else '' end
                     when unknown2 =1 then pcs.pc_public.translateword('Code inconnu')
                     when missing2 =1 then pcs.pc_public.translateword('Code manquant')
                   end code2
                 , validasof1
                 , validasof2
                 , to_char(EmployeeContribution / 12,'FM999999999.00')
                 , to_char(EmployeeContribution2 / 12,'FM999999999.00')
                 , to_char(EmployerContribution / 12,'FM999999999.00')
                 , to_char(EmployerContribution2 / 12,'FM999999999.00')
                 , warning
                 , info
                 , warning2
                 , info2
                 , warning3
                 , info3
                 , to_char(ThirdPartyContribution / 12,'FM999999999.00')
                 , to_char(ThirdPartyContribution2 / 12,'FM999999999.00')
              from (select hrm_elm_recipient_id
                         , extractvalue(column_value, '//ns2:SV-AS-Number', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ssid
                         , extractvalue(column_value, '//ns2:Lastname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ||
                           ' ' ||
                           extractvalue(column_value, '//ns2:Firstname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') fullname
                         , extractvalue(column_value, '//ns2:CivilStatus/ns2:Status', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"')
                                                                                                                                                 c_civil_status
                         , 'Identified' code
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning2
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning3
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info3
                      from hrm_elm_recipient
                         , table(xmlsequence(extract(xmltype(elm_lpp_response_xml)
                                                   , '//ns2:Identified/ns2:Person'
                                                   , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                                    )
                                            )
                                )
                     where length(elm_lpp_response_xml) > 0
                       and hrm_elm_recipient_id = parameter_0)
            union all
            /* employés inconnus */
            select hrm_elm_recipient_id
                 , 3
                 , ssid
                 , fullname
                 , c_civil_status
                 , code
                 , code1 ||
                   ' ' ||
                   case
                     when autoproc1 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc1 || ')'
                     when manual1 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual1 || ')'
                     when autopos1 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos1 || ')'
                     when conv1 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') || case when manual1 is not null then ' (' || manual1 || ')' else '' end
                     when unknown1 = 1 then pcs.pc_public.translateword('Code inconnu')
                     when missing1 =1  then pcs.pc_public.translateword('Code manquant')
                   end code1
                 , code2 ||
                   ' ' ||
                   case
                     when autoproc2 is not null then pcs.pc_public.translateword('Mutation automatique effectuée') || ' (' || autoproc2 || ')'
                     when manual2 is not null then pcs.pc_public.translateword('Mutation manuelle nécessaire') || ' (' || manual2 || ')'
                     when autopos2 is not null then pcs.pc_public.translateword('Mutation automatique possible') || ' (' || autopos2 || ')'
                     when conv2 is not null then pcs.pc_public.translateword('Conversion automatique effectuée') ||case when manual2 is not null then ' (' || manual2 || ')' else '' end
                     when unknown2 =1 then pcs.pc_public.translateword('Code inconnu')
                     when missing2 = 1 then pcs.pc_public.translateword('Code manquant')
                   end code2
                 , validasof1
                 , validasof2
                 , to_char(EmployeeContribution / 12,'FM999999999.00')
                 , to_char(EmployeeContribution2 / 12,'FM999999999.00')
                 , to_char(EmployerContribution / 12,'FM999999999.00')
                 , to_char(EmployerContribution2 / 12,'FM999999999.00')
                 , warning
                 , info
                 , warning2
                 , info2
                 , warning3
                 , info3
                 , to_char(ThirdPartyContribution / 12,'FM999999999.00')
                 , to_char(ThirdPartyContribution2 / 12,'FM999999999.00')
              from (select hrm_elm_recipient_id
                         , extractvalue(column_value, '//ns2:SV-AS-Number', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ssid
                         , extractvalue(column_value, '//ns2:Lastname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') ||
                           ' ' ||
                           extractvalue(column_value, '//ns2:Firstname', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') fullname
                         , extractvalue(column_value, '//ns2:CivilStatus/Status', 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"')
                                                                                                                                                 c_civil_status
                         , 'Unknown' code
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv1
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationProcessedFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) autoproc2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                              case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@manualMutationRequiredFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) manual2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@automaticMutationPossibleFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                              ) autoPos2
                         , nvl(extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ),
                               case when existsnode( column_value,'//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code/@mappingFrom'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"') = 1 then '-' end
                               ) conv2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Missing'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) missing2
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown1
                         , existsnode(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:Unknown'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) unknown2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:BVG-LPP-Code'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) code2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof1
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ValidAsOf'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) validasof2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployeeContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployeeContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:EmployerContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) EmployerContribution2
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[1]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution
                         , extractvalue(column_value
                                      , '//ns2:Contributions/ns2:Contribution[2]/ns2:ThirdPartyContribution'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) ThirdPartyContribution2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[1]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning2
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[2]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info2
                         , extractvalue(column_value
                                      , '//ns2:Warning/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) warning3
                         , extractvalue(column_value
                                      , '//ns2:Info/ns2:Notification[3]/ns2:Description'
                                      , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                       ) info3
                      from hrm_elm_recipient
                         , table(xmlsequence(extract(xmltype(elm_lpp_response_xml)
                                                   , '//ns2:Unknown/ns2:Person'
                                                   , 'xmlns:ns2="http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration"'
                                                    )
                                            )
                                )
                     where length(elm_lpp_response_xml) > 0
                       and hrm_elm_recipient_id = parameter_0) ) INF
         , HRM_ELM_RECIPIENT RCP
         , HRM_ELM_TRANSMISSION TRS
         , HRM_INSURANCE INS
     where RCP.HRM_ELM_RECIPIENT_ID = INF.HRM_ELM_RECIPIENT_ID
       and TRS.HRM_ELM_TRANSMISSION_ID = RCP.HRM_ELM_TRANSMISSION_ID
       and INS.HRM_INSURANCE_ID = RCP.HRM_INSURANCE_ID;
end RPT_HRM_ELM_LPP_RECEIPT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_ELM_TAXSOURCE" (
   parameter_0         IN     hrm_elm_transmission.hrm_elm_transmission_id%TYPE,
   aRefCursor          IN OUT crystal_cursor_types.dualcursortyp) IS
BEGIN
   OPEN aRefCursor FOR
               SELECT 'NORMAL' TYP,
                      elm_order,
                      ELM_VALID_AS_OF,
                      elm_month,
                      emp_social_securityno2,
                      emp_number,
                      per_last_name,
                      per_first_name,
                      ino_in,
                      ino_out,
                      ino_mod,
                      c_hrm_canton,
                      elm_taxable_earning,
                      elm_ascertained_earning,
                      elm_taxsource,
                      elm_taxcode
                 FROM (SELECT elm_order, ELM_VALID_AS_OF, XMLTYPE (ELM_CONTENT) O
                         FROM HRM_ELM_TRANSMISSION
                        WHERE hrm_elm_transmission_id = parameter_0),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:Staff/sd:Person'
                         PASSING o
                         COLUMNS emp_social_securityno2 VARCHAR2 (50)
                                       PATH '/sd:Person/sd:Particulars/sd:Social-InsuranceIdentification/sd:SV-AS-Number',
                                 emp_number VARCHAR2 (20) PATH '/sd:Person/sd:Particulars/sd:EmployeeNumber',
                                 per_last_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Lastname',
                                 per_First_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Firstname',
                                 --ino_in VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:EntryDate',
                                 --ino_out VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:WithdrawalDate',
                                 taxsource XMLTYPE PATH '/sd:Person/sd:TaxAtSourceSalaries'),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:TaxAtSourceSalaries/sd:TaxAtSourceSalary[exists(sd:Current/sd:TaxableEarning)]'
                         PASSING taxsource
                         COLUMNS c_hrm_canton   VARCHAR2 (50)
                                       PATH '/sd:TaxAtSourceSalary/sd:TaxAtSourceCanton',
                                 elm_month VARCHAR2 (10) PATH '/sd:TaxAtSourceSalary/sd:CurrentMonth',
                                 elm_taxable_earning NUMBER
                                       PATH '/sd:TaxAtSourceSalary/sd:Current/sd:TaxableEarning',
                                 elm_ascertained_earning NUMBER
                                       PATH '/sd:TaxAtSourceSalary/sd:Current/sd:AscertainedTaxableEarning',
                                 elm_taxsource NUMBER PATH '/sd:TaxAtSourceSalary/sd:Current/sd:TaxAtSource',
                                 elm_taxcode    VARCHAR2 (10)
                                       PATH '/sd:TaxAtSourceSalary/sd:Current/sd:TaxAtSourceCategory/sd:TaxAtSourceCode',
                                 elm_corrections XMLTYPE PATH '/sd:TaxAtSourceSalary/sd:Correction',
                                 ino_in path '/sd:TaxAtSourceSalary/sd:Current/sd:DeclarationCategory/sd:Entry[1]/sd:ValidAsOf'

                                 ,ino_out path '/sd:TaxAtSourceSalary/sd:Current/sd:DeclarationCategory/sd:Withdrawal[1]/sd:ValidAsOf'
                                 ,ino_mod path '/sd:TaxAtSourceSalary/sd:Current/sd:DeclarationCategory/sd:Mutation[1]/sd:ValidAsOf')
      UNION ALL
               SELECT 'CORRECTION' TYP,
                      elm_order,
                      ELM_VALID_AS_OF,
                      elm_cor_month,
                      emp_social_securityno2,
                      emp_number,
                      per_last_name,
                      per_first_name,
                      ino_in,
                      ino_out,
                      ino_mod,
                      c_hrm_canton,
                      new_taxable + old_taxable,
                      NULL,
                      new_taxsource + old_taxsource,
                      new_taxcode
                 FROM (SELECT elm_order, ELM_VALID_AS_OF, XMLTYPE (ELM_CONTENT) O
                         FROM HRM_ELM_TRANSMISSION
                        WHERE hrm_elm_transmission_id = parameter_0),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:Staff/sd:Person'
                         PASSING o
                         COLUMNS emp_social_securityno2 VARCHAR2 (50)
                                       PATH '/sd:Person/sd:Particulars/sd:Social-InsuranceIdentification/sd:SV-AS-Number',
                                 emp_number VARCHAR2 (20) PATH '/sd:Person/sd:Particulars/sd:EmployeeNumber',
                                 per_last_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Lastname',
                                 per_First_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Firstname',
--                                 ino_in VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:EntryDate',
--                                 ino_out VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:WithdrawalDate',
                                 taxsource XMLTYPE PATH '/sd:Person/sd:TaxAtSourceSalaries'),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:TaxAtSourceSalaries/sd:TaxAtSourceSalary'
                         PASSING taxsource
                         COLUMNS c_hrm_canton   VARCHAR2 (50)
                                       PATH '/sd:TaxAtSourceSalary/sd:TaxAtSourceCanton',
                                 elm_corrections XMLTYPE PATH '/sd:TaxAtSourceSalary/sd:Correction'
                                ),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '/sd:Correction'
                         PASSING elm_corrections
                         COLUMNS elm_cor_month VARCHAR2 (10) PATH '/sd:Correction/sd:Month',
                                 old_taxable NUMBER PATH '/sd:Correction/sd:Old/sd:TaxableEarning',
                                 old_taxsource NUMBER PATH '/sd:Correction/sd:Old/sd:TaxAtSource',
                                 new_taxable NUMBER PATH '/sd:Correction/sd:New/sd:TaxableEarning',
                                 new_taxsource NUMBER PATH '/sd:Correction/sd:New/sd:TaxAtSource',
                                 old_taxcode    VARCHAR2 (20)
                                       PATH '/sd:Correction/sd:Old/sd:TaxAtSourceCategory/sd:TaxAtSourceCode',
                                 new_taxcode    VARCHAR2 (20)
                                       PATH '/sd:Correction/sd:New/sd:TaxAtSourceCategory/sd:TaxAtSourceCode',
                                 ino_in path '/sd:Correction/sd:New/sd:DeclarationCategory/sd:Entry[1]/sd:ValidAsOf'
                                 ,ino_out path '/sd:Correction/sd:New/sd:DeclarationCategory/sd:Withdrawal[1]/sd:ValidAsOf'
                                 ,ino_mod path '/sd:Correction/sd:New/sd:DeclarationCategory/sd:Mutation[1]/sd:ValidAsOf')
      UNION ALL
               SELECT 'CONFIRMATION' TYP,
                      elm_order,
                      ELM_VALID_AS_OF,
                      elm_cor_month,
                      emp_social_securityno2,
                      emp_number,
                      per_last_name,
                      per_first_name,
                      ino_in,
                      ino_out,
                      null ino_mod,
                      c_hrm_canton,
                      conf_taxable,
                      NULL,
                      conf_taxsource,
                      NULL
                 FROM (SELECT elm_order, ELM_VALID_AS_OF, XMLTYPE (ELM_CONTENT) O
                         FROM HRM_ELM_TRANSMISSION
                        WHERE  hrm_elm_transmission_id = parameter_0),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:Staff/sd:Person'
                         PASSING o
                         COLUMNS emp_social_securityno2 VARCHAR2 (50)
                                       PATH '/sd:Person/sd:Particulars/sd:Social-InsuranceIdentification/sd:SV-AS-Number',
                                 emp_number VARCHAR2 (20) PATH '/sd:Person/sd:Particulars/sd:EmployeeNumber',
                                 per_last_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Lastname',
                                 per_First_name VARCHAR2 (50) PATH '/sd:Person/sd:Particulars/sd:Firstname',
                                 ino_in VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:EntryDate',
                                 ino_out VARCHAR2 (10) PATH '/sd:Person/sd:Work/sd:WithdrawalDate',
                                 taxsource XMLTYPE PATH '/sd:Person/sd:TaxAtSourceSalaries'),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:TaxAtSourceSalaries/sd:TaxAtSourceSalary'
                         PASSING taxsource
                         COLUMNS c_hrm_canton   VARCHAR2 (50)
                                       PATH '/sd:TaxAtSourceSalary/sd:TaxAtSourceCanton',
                                 elm_corrections XMLTYPE PATH '/sd:TaxAtSourceSalary/sd:CorrectionConfirmed'),
                      XMLTABLE (
                         XMLNAMESPACES (
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclaration' AS "sd",
                            'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationContainer' AS "sdc",
                            DEFAULT 'http://www.swissdec.ch/schema/sd/20130514/SalaryDeclarationServiceTypes'),
                         '//sd:CorrectionConfirmed'
                         PASSING taxsource
                         COLUMNS elm_cor_month VARCHAR2 (10) PATH '/sd:CorrectionConfirmed/sd:Month',
                                 conf_taxable NUMBER PATH '/sd:CorrectionConfirmed/sd:TaxableEarning',
                                 conf_taxsource NUMBER PATH '/sd:CorrectionConfirmed/sd:TaxAtSource');
END;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_EMP_STATOCC" (
  aRefCursor     in out CRYSTAL_CURSOR_TYPES.DualCursorTyp
, parameter_0    in     varchar2
, parameter_1    in     varchar2
, parameter_2    in     varchar2
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
*Description
Used for report HRM_EMP_STATOCC

*author VHA
*created VHA 04 JUNE 2012    (DEVRPT-10573)
*updated VHA 28 March 2013
* @public
*@param parameter_0 :   LIST_ID
*@param  parameter_1 :   REF_DATE
*@param  parameter_2 : Detailled by establishment  (True/False)
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type;
begin
  PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
  vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;

  open aRefCursor for
    select STS.DATE_REF
         , STS.HRM_PERSON_ID
         , least(1
               , nvl(case
                       when C_OFS_CONTRACT_TYPE in('3', '5') then nvl((select sum(HIS_PAY_SUM_VAL)
                                                                     from HRM_HISTORY_DETAIL DE
                                                                    where DE.HRM_EMPLOYEE_ID = HRM_PERSON_ID
                                                                      and HIS_PAY_PERIOD = DATE_REF
                                                                      and exists(
                                                                            select 1
                                                                              from HRM_CONTROL_ELEMENTS CE
                                                                             where CE.HRM_CONTROL_ELEMENTS_ID = DE.HRM_ELEMENTS_ID
                                                                               and CE.HRM_CONTROL_LIST_ID = parameter_0
                                                                               and COE_BOX = 'STAT03') ) /
                                                                  (STS.EST_HOURS_WEEK * (52/12) ), STS.RATE)
                       else STS.RATE
                     end
                   , 0
                    )
                ) RATE
         , STS.BORDER_WORKER
         , STS.PER_GENDER
         , case
             when upper(parameter_2) = 'TRUE'
             then (select EST_HOURS_WEEK
                     from HRM_ESTABLISHMENT
                    where HRM_ESTABLISHMENT_ID = EST.HRM_ESTABLISHMENT_ID)
             else (select EST_HOURS_WEEK
                     from HRM_ESTABLISHMENT
                    where EST_DEFAULT = 1)
           end EST_HOURS_WEEK
         , EST.HRM_ESTABLISHMENT_ID
         , EST.EST_NAME
         , EST.EST_ADDRESS
         , EST.EST_CITY
         , EST.EST_REE
      from (select   to_date(parameter_1, 'dd.MM.yyyy') DATE_REF
                   , C_OFS_CONTRACT_TYPE
                   , HRM_PERSON_ID
                   , least(100, sum(nvl(CON_ACTIVITY_RATE,PER_ACTIVITY_RATE)) ) / 100 RATE
                   , case
                       when DIC_NATIONALITY_ID <> 'CH'
                       and exists(
                             select 1
                               from HRM_EMPLOYEE_WK_PERMIT W
                              where W.HRM_PERSON_ID = P.HRM_PERSON_ID
                                and DIC_WORK_PERMIT_ID = 'G'
                                and to_date(parameter_1, 'dd.MM.yyyy') >= WOP_VALID_FROM
                                and (   to_date(parameter_1, 'dd.MM.yyyy') <= WOP_VALID_TO
                                     or WOP_VALID_TO is null) ) then 1
                       else 0
                     end BORDER_WORKER
                   , PER_GENDER
                   , min( (select EST_HOURS_WEEK
                             from HRM_ESTABLISHMENT
                            where HRM_ESTABLISHMENT_ID = IO.HRM_ESTABLISHMENT_ID) ) EST_HOURS_WEEK
                   , max( (select HRM_ESTABLISHMENT_ID
                             from HRM_IN_OUT
                            where HRM_IN_OUT_ID = IO.HRM_IN_OUT_ID) ) HRM_ESTABLISHMENT_ID
                from HRM_PERSON P
                   , HRM_CONTRACT C
                   , HRM_IN_OUT IO
               where P.HRM_PERSON_ID = IO.HRM_EMPLOYEE_ID
               and C_IN_OUT_CATEGORY='3'
                 and C.HRM_IN_OUT_ID (+) = IO.HRM_IN_OUT_ID
                 and  (   to_date(parameter_1, 'dd.MM.yyyy') >= CON_BEGIN
                      or CON_BEGIN is null)
                 and (   to_date(parameter_1, 'dd.MM.yyyy') <= CON_END
                      or CON_END is null)
                 and HRM_FUNCTIONS.ageingivenyear(to_date(parameter_1, 'dd.MM.yyyy'), PER_BIRTH_DATE) >= 18
            group by HRM_PERSON_ID
                   , C_OFS_CONTRACT_TYPE
                   , PER_GENDER
                   , DIC_NATIONALITY_ID
            union all
            select   add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3)
                   , C_OFS_CONTRACT_TYPE
                   , HRM_PERSON_ID
                   , least(100, sum(nvl(CON_ACTIVITY_RATE,PER_ACTIVITY_RATE)) ) / 100 RATE
                   , case
                       when DIC_NATIONALITY_ID <> 'CH'
                       and exists(
                             select 1
                               from HRM_EMPLOYEE_WK_PERMIT W
                              where W.HRM_PERSON_ID = P.HRM_PERSON_ID
                                and DIC_WORK_PERMIT_ID = 'G'
                                and add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3) >= WOP_VALID_FROM
                                and (   add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3) <= WOP_VALID_TO
                                     or WOP_VALID_TO is null) ) then 1
                       else 0
                     end BORDER_WORKER
                   , PER_GENDER
                   , min( (select EST_HOURS_WEEK
                             from HRM_ESTABLISHMENT
                            where HRM_ESTABLISHMENT_ID = IO.HRM_ESTABLISHMENT_ID) ) EST_HOURS_WEEK
                   , max( (select HRM_ESTABLISHMENT_ID
                             from HRM_IN_OUT
                            where HRM_IN_OUT_ID = IO.HRM_IN_OUT_ID) ) HRM_ESTABLISHMENT_ID
                from HRM_PERSON P
                   , HRM_CONTRACT C
                   , HRM_IN_OUT IO
               where P.HRM_PERSON_ID = IO.HRM_EMPLOYEE_ID
                 and C_IN_OUT_CATEGORY='3'
                 and C.HRM_IN_OUT_ID (+) = IO.HRM_IN_OUT_ID
                 and (   add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3) >= CON_BEGIN
                      or CON_BEGIN is null)
                 and (   add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3) <= CON_END
                      or CON_END is null)
                 and HRM_FUNCTIONS.ageingivenyear(add_months(to_date(parameter_1, 'dd.MM.yyyy'), -3), PER_BIRTH_DATE) >= 18
            group by HRM_PERSON_ID
                   , C_OFS_CONTRACT_TYPE
                   , PER_GENDER
                   , DIC_NATIONALITY_ID) STS
         , HRM_ESTABLISHMENT EST
     where EST.HRM_ESTABLISHMENT_ID = STS.HRM_ESTABLISHMENT_ID;
end RPT_HRM_EMP_STATOCC;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_HEADCOUNT" (
  aRefCursor in out crystal_cursor_types.DualCursorTyp,
  PROCPARAM_0 VARCHAR2,
  PROCPARAM_1 number,
  PR_PC_USELANG_ID IN PCS.PC_LANG.PC_LANG_ID%TYPE
)
/**
 * @created 04/2008
 * @author ire
 * @update VHA 26 JUNE 2013
 *
 * Utilisé par le rapport HRM_HEADCOUNT.rpt
 * @param PROCPARAM_0  Période (YYYYMM)
 * @param PROCPARAM_1  Axe
 *
 * Modifications:
 *   05.12.2013: Procedure renamed  from HRM_HEADCOUNT_RPT to RPT_HRM_HEADCOUNT
 */
is
  vLangId PCS.PC_LANG.PC_LANG_ID%TYPE;
  vRefDate DATE;
  vRefDateEnd DATE;
  vEndDate DATE;
begin
  vLangId := PR_PC_USELANG_ID;

  -- Dates
  vEndDate := to_date('31.12.2022', 'dd.mm.yyyy');

  if (PROCPARAM_0 is not null) then
    vRefDate := to_date(PROCPARAM_0||'01', 'yyyymmdd');
  end if;

  vRefDateEnd := last_day(vRefDate);

  -- Query
  open aRefCursor for
  SELECT
    case PROCPARAM_1
      when 0 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_DEPARTMENT', AXE, vLangId)
      when 1 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('DTO', AXE, vLangId)
      when 2 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('CDA', AXE, vLangId)
      when 3 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('COS', AXE, vLangId)
      when 4 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('PRO', AXE, vLangId)
      when 5 then AXE
      when 6 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_RESPONSABILITY', AXE, vLangId)
      when 7 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_PROFESSIONAL_CATEGORY', AXE, vLangId)
    end AXE,
    EFFECTIF,
    EFFECTIF_H,
    EFFECTIF_F,
    RATE,
    RATE_H,
    RATE_F,
    CNT_IN,
    CNT_OUT,
    CNT_IN - CNT_OUT DIFF_INOUT,
    AGE,
    SENIORITY
    FROM
      (SELECT
         AXE,
         SUM(CNT) EFFECTIF,
         SUM(case PER_GENDER when 'M' then CNT else 0 end) EFFECTIF_H,
         SUM(case PER_GENDER when 'F' then CNT else 0 end) EFFECTIF_F,
         SUM(RATE) RATE,
         SUM(case PER_GENDER when 'M' then RATE else 0 end) RATE_H,
         SUM(case PER_GENDER when 'F' then RATE else 0 end) RATE_F,
         SUM(CNT_IN) CNT_IN,
         SUM(CNT_OUT) CNT_OUT,
         AVG(AGE) AGE,
         AVG(SENIORITY) SENIORITY
       FROM
         (SELECT
            case PROCPARAM_1
              when 0 then j.dic_department_id
              when 1 then j.job_div_number
              when 2 then j.job_cda_number
              when 3 then j.job_pf_number
              when 4 then j.job_pj_number
              when 5 then j.job_code||' '||job_descr
              when 6 then j.dic_responsability_id
              when 7 then j.dic_professional_category_id
            end AXE,
            case when pej_from >= vRefDate then 1 else 0 end CNT_IN,  -- Entrée dans le mois
            case when pej_to <= vRefDateEnd then 1 else 0 end CNT_OUT, -- Sortie dans le mois
            1 CNT,
            pj.pej_affect_rate / 100 RATE,
            hrm_functions.AgeInGivenPeriod(vRefDate, per_birth_date) AGE,
            trunc(months_between(
                Least(last_day(pej_to), vRefDateEnd),
                last_day(pej_from)) / 12) SENIORITY,
            p.per_gender
          FROM
            hrm_person p,
            hrm_job j,
            (SELECT  pej_from, nvl(pej_to, vEndDate) pej_to, pej_affect_rate,
               hrm_job_id, hrm_person_id
             FROM hrm_person_job) pj
          WHERE
            p.hrm_person_id = pj.hrm_person_id AND
            j.hrm_job_id = pj.hrm_job_id AND
            -- Employés présent, entrés ou sortis dans la période
            vRefDate between trunc(pej_from, 'month') and pej_to) v
       GROUP BY
         AXE);
end RPT_HRM_HEADCOUNT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_HEADCOUNT_CONTRACT" (
  aRefCursor IN OUT crystal_cursor_types.DualCursorTyp,
  PROCPARAM_0 IN VARCHAR2,
  PR_PC_USELANG_ID IN pcs.pc_lang.pc_lang_id%TYPE)
/**
 * Utilisé par le rapport HRM_HEADCOUNT
 * @param PROCPARAM_0  Période (YYYYMM).
 * @param PR_PC_USELANG_ID  Identifiant de la langue.
 *
 * @date 04/2008
 * @author ireber
 * @author spfister
 * @update VHA 26 JUNE 2013
 *
 * Modifications:
 * spfister 29.09.2010: Ajout d'une condition sur le type d'entrée/sortie lors de recherches sur la table HRM_IN_OUT.
 *   01.09.2011: Procedure renamed  from HRM_HEADCOUNT_CONTRACT_RPT to RPT_HRM_HEADCOUNT_CONTRACT
 *   26.06.2013: DEVRPT-10670 WEBERP - Correction des procédures PL/SQL pour autoriser les valeurs de paramètres à null
 */

IS
  ln_lang_id pcs.pc_lang.pc_lang_id%TYPE;
  ld_ref_date DATE;
  ld_ref_begin_date DATE;
  ld_end_date DATE;
  lv_unknown pcs.pc_dico.dictrans%TYPE;
BEGIN
  ln_lang_id := PR_PC_USELANG_ID;

  -- Dates
  ld_end_date := to_date('31.12.2022', 'dd.mm.yyyy');
  if (PROCPARAM_0 is not null) then
    ld_ref_date := to_date(PROCPARAM_0||'01', 'yyyymmdd');
  end if;
  ld_ref_begin_date := Trunc(ld_ref_date - 330, 'month');
  lv_unknown := pcs.pc_public.TranslateWord('<Indéfini>', ln_lang_id);

  -- (calcul de l'effectif total et des taux dans crystal)..
  -- CNT_IN / EFFECTIF_TOTAL * 100
  -- CNT_OUT / EFFECTIF_TOTAL * 100
  open aRefCursor for
  select
    PER_BEGIN PERIOD,
    nvl(pcs.pc_public.GetDescodeDescr('C_CONTRACT_TYPE', C_CONTRACT_TYPE, ln_lang_id), C_CONTRACT_TYPE) IN_GRP,
    case when DIC_OUT_TYPE_ID is not null then
      Nvl(com_dic_functions.getDicoDescr('DIC_OUT_TYPE', DIC_OUT_TYPE_ID, ln_lang_id), DIC_OUT_TYPE_ID) else lv_unknown
    end OUT_GRP,
    Sum(case when IO.INO_IN < PER.PER_BEGIN then 1 else 0 end) EFFECTIF,-- Effectif au début du mois
    Sum(case when IO.INO_IN >= PER.PER_BEGIN then 1 else 0 end) CNT_IN, -- Entrée ds le mois
    Sum(case when IO.INO_OUT <= PER.PER_END then 1 else 0 end) CNT_OUT -- Sorties ds le mois
  from
    (select DIC_OUT_TYPE_ID, C_CONTRACT_TYPE, INO_IN, Nvl(INO_OUT, ld_end_date) INO_OUT
     from HRM_IN_OUT I, HRM_CONTRACT C
     where C.HRM_IN_OUT_ID = I.HRM_IN_OUT_ID and
       I.C_IN_OUT_CATEGORY = '3' and
       -- Données du dernier contrat pour l'entrée/sortie
       C.CON_BEGIN = (select Max(CON_BEGIN) from HRM_CONTRACT where HRM_IN_OUT_ID = C.HRM_IN_OUT_ID)
    ) IO,
    HRM_PERIOD PER
  where
    -- Employés présent, entrés ou sortis dans la période
    IO.INO_IN <= PER.PER_END and IO.INO_OUT >= PER.PER_BEGIN and
    -- Filtre périodes selon date de référence
    PER.PER_BEGIN between ld_ref_begin_date and ld_ref_date
  group by
    PER.PER_BEGIN, IO.DIC_OUT_TYPE_ID, IO.C_CONTRACT_TYPE;
END RPT_HRM_HEADCOUNT_CONTRACT;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_HEADCOUNT_PERIOD" (
  aRefCursor in out crystal_cursor_types.DualCursorTyp,
  PROCPARAM_0 VARCHAR2,
  PROCPARAM_1 number,
  PR_PC_USELANG_ID IN PCS.PC_LANG.PC_LANG_ID%TYPE
)
/**
 * @created 04/2008
 * @author ire
 * @update VHA 26 JUNE 2013
 *
 * Utilisé par le rapport HRM_HEADCOUNT.rpt
 * @param PROCPARAM_0  Période (YYYYMM)
 * @param PROCPARAM_1  Axe
 *
 * Modifications:
 *   05.12.2013: Procedure renamed from HRM_HEADCOUNT_PERIOD_RPT to RPT_HRM_HEADCOUNT_PERIOD
 */
is
  vLangId PCS.PC_LANG.PC_LANG_ID%TYPE := null;
  vRefDate DATE := null;
  vRefBeginDate DATE := null;
  vEndDate DATE := null;
begin
  vLangId := PR_PC_USELANG_ID;

  -- Dates
  vEndDate := to_date('31.12.2022', 'dd.mm.yyyy');

  if (PROCPARAM_0 is not null) then
    vRefDate := to_date(PROCPARAM_0||'01', 'yyyymmdd');
  end if;

  vRefBeginDate := trunc(vRefDate - 330, 'month');

  -- Query
  open aRefCursor for
  SELECT
    case PROCPARAM_1
      when 0 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_DEPARTMENT', AXE, vLangId)
      when 1 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('DTO', AXE, vLangId)
      when 2 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('CDA', AXE, vLangId)
      when 3 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('COS', AXE, vLangId)
      when 4 then AXE||' '||HRM_BREAK_FCT.get_Account_Descr('PRO', AXE, vLangId)
      when 5 then AXE
      when 6 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_PROFESSIONAL_CATEGORY', AXE, vLangId)
      when 7 then AXE||' '||COM_DIC_FUNCTIONS.getDicoDescr('DIC_RESPONSABILITY', AXE, vLangId)
    end AXE,
    PERIOD,
    EFFECTIF,
    CNT_IN,
    NVL(CNT_IN  / EFFECTIF * 100, 0) RATE_IN,
    CNT_OUT,
    NVL(CNT_OUT / EFFECTIF * 100, 0) RATE_OUT
  FROM
    (SELECT
       AXE,
       per_begin PERIOD,
       SUM(case when pej_from < per_begin then 1 end) EFFECTIF,-- Effectif au début du mois
       SUM(case when pej_from >= per_begin then 1 end) CNT_IN, -- Entrée dans le mois
       SUM(case when pej_to <= per_end then 1 end) CNT_OUT     -- Sortie dans le mois
     FROM
       (SELECT
          case PROCPARAM_1
            when 0 then j.dic_department_id
            when 1 then j.job_div_number
            when 2 then j.job_cda_number
            when 3 then j.job_pf_number
            when 4 then j.job_pj_number
            when 5 then j.job_code||' '||job_descr
            when 6 then j.dic_professional_category_id
            when 7 then j.dic_responsability_id
          end AXE,
          pej_from,
          pej_to,
          per_begin,
          per_end
        FROM
          hrm_job J,
          (SELECT pej_from, nvl(pej_to, vEndDate) pej_to, hrm_job_id FROM hrm_person_job) pj,
          hrm_period per
        WHERE
          j.hrm_job_id = pj.hrm_job_id AND
          -- Employés présent, entrés ou sortis dans la période
          pej_from <= per_end AND
          pej_to >= per_begin AND
          -- Filtre périodes selon date de référence
          per_begin BETWEEN vRefBeginDate AND vRefDate) v
     GROUP BY
       AXE, per_begin);

end RPT_HRM_HEADCOUNT_PERIOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_LAA" (
  aRefCursor     in out crystal_cursor_types.DualCursorTyp
, procparam_0           number
, procparam_1           number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report HRM_LAA.rpt
* @author rhe, ire
* @created 07/2007
* @renamed vha 05.12.2013
* @lastUpdate vha 05.05.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
begin
  if (procuser_lanid is not null) then
    PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  HRM_REP_LIST.LaaList(aRefCursor, procparam_0, procparam_1, 0, vpc_lang_id);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_LAAC" (
  aRefCursor     in out crystal_cursor_types.DualCursorTyp
, procparam_0           number
, procparam_1           number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report HRM_LAAC.rpt and HRM_IJM.rpt
* @author rhe, ire
* @created 07/2007
* @renamed vha 05.12.2013
* @lastUpdate vha 05.05.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
  vpc_lang_id PCS.PC_LANG.PC_LANG_ID%type   := null;
begin
  if (procuser_lanid is not null) then
    PCS.PC_I_LIB_SESSION.setLanId(procuser_lanid);
    vpc_lang_id  := PCS.PC_I_LIB_SESSION.GetUserLangId;
  end if;

  HRM_REP_LIST.LaacList(aRefCursor, procparam_0, procparam_1, 1, vpc_lang_id);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_LPP" (
  aRefCursor     in out crystal_cursor_types.DualCursorTyp
, procparam_0           number
, procparam_1           number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report HRM_LPP.rpt
* @author rhe, ire
* @created 07/2007
* @renamed vha NOV 2011
* @lastUpdate VHA 05.05.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
begin
  HRM_REP_LIST.LppList(aRefCursor, procparam_0, procparam_1, procuser_lanid);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_LPP_ANNUAL_DECLARATION" (
   arefcursor       in out   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       NUMBER,
   procuser_lanid   in       pcs.pc_lang.lanid%type

)
IS
/**
 Description - used for the report HRM_ANNUAL_DECLARATION


 @parameter_0: hrm_elm_transmission_id (1: full, 2: personal)

 @author VHA 24.06.2011
 @public
*/
vpc_lang_id   pcs.pc_lang.pc_lang_id%type;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR

      SELECT    t.c_elm_transmission_type,
          ELM_VALID_AS_OF effective_date,
          t.elm_year,
          c.lpp_yearly_amount,
          d.c_hrm_lpp_ref_type,
          d.lpp_factor,
          d.lpp_monthly_amount,
          d.lpp_ref_amount,
          p.per_last_name,
          p.per_first_name,
          p.emp_number,
          hrm_elm_recipient_id,
          (SELECT cod_code
              FROM  hrm_employee_const c,
                hrm_control_elements e,
                hrm_code_table t
              WHERE c.hrm_employee_id = p.hrm_person_id
                AND emc_active = 1
                AND c.hrm_code_table_id = t.hrm_code_table_id(+)
                AND sysdate BETWEEN emc_value_from
                AND emc_value_to
                AND e.hrm_control_elements_id = c.hrm_constants_id
                AND coe_box = 'CODE'
                AND RE.HRM_CONTROL_LIST_ID = e.HRM_CONTROL_LIST_ID) coe_code,
          (SELECT cod_code
              FROM  hrm_employee_const c,
                hrm_control_elements e,
                hrm_code_table t
              WHERE c.hrm_employee_id = p.hrm_person_id
                AND emc_active = 1
                AND c.hrm_code_table_id = t.hrm_code_table_id(+)
                AND sysdate BETWEEN emc_value_from
                AND emc_value_to
                AND e.hrm_control_elements_id = c.hrm_constants_id
                AND coe_box = 'CODE2'
                AND RE.HRM_CONTROL_LIST_ID = e.HRM_CONTROL_LIST_ID) coe_code2,
          p.per_activity_rate,
          greatest(io.ino_in,trunc(trunc(elm_valid_as_of,'year')-1,'year')) ino_in,
          least(nvl(io.ino_out, elm_valid_as_of), trunc(elm_valid_as_of,'year')-1) ino_out,
          de.erd_descr,
          r.elr_root_code,
          i.ins_name,
          i.ins_contract_nr,
          c.lpp_valid_on
      FROM  hrm_lpp_emp_calc c,
          hrm_lpp_emp_calc_detail d,
          hrm_elements_root r,
          hrm_elements_root_descr de,
          hrm_person p,
          hrm_in_out io,
          hrm_elm_recipient re,
          hrm_insurance i,
          hrm_elm_transmission t
      WHERE   d.hrm_elements_root_id = r.hrm_elements_root_id
          AND r.hrm_elements_root_id = de.hrm_elements_root_id
          AND de.pc_lang_id = vpc_lang_id
          AND p.hrm_person_id = c.hrm_person_id
          AND c.hrm_lpp_emp_calc_id = d.hrm_lpp_emp_calc_id
          AND d.hrm_in_out_id = io.hrm_in_out_id (+)
          AND p.hrm_person_id = c.hrm_person_id
          AND c.hrm_elm_transmission_id = re.hrm_elm_transmission_id
          AND re.hrm_insurance_id(+) = i.hrm_insurance_id
          AND c.hrm_elm_transmission_id = t.hrm_elm_transmission_id
          AND c.hrm_elm_transmission_id = parameter_0
          AND elm_valid_as_of is not null
          AND c_hrm_insurance = '07'
          AND elm_selected = 1
          AND EXISTS(SELECT 1
              FROM hrm_employee_const c,
                   hrm_control_elements e
              WHERE hrm_employee_id =  p.hrm_person_id
                AND hrm_constants_id = hrm_control_elements_id
                AND re.hrm_control_list_id = e.hrm_control_list_id
                AND coe_box = 'CODE')
      ORDER BY
          p.per_last_name,
          p.per_first_name;


END rpt_hrm_lpp_annual_declaration;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_OFS" (
  aRefCursor     in out crystal_cursor_types.DualCursorTyp
, procparam_0           number
, procparam_1           number
, procuser_lanid in     PCS.PC_LANG.LANID%type
)
is
/**
* description used for report HRM_LPP.rpt
* @author rhe, ire
* @created 08/2007
* @renamed vha 05.12.2013
* @lastUpdate SMA 25.09.2014
* @public
* @param procparam_0  Id List
* @param procparam_1  Année
*/
begin
  HRM_REP_LIST.OfsList(aRefCursor, procparam_0, procparam_1, procuser_lanid);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_TAXSOURCE" (
  aRefCursor  in out crystal_cursor_types.DualCursorTyp
, ProcParam_0        number
, ProcParam_1        number
, ProcParam_2        number
, ProcParam_3        varchar2
, ProcParam_4        varchar2
, ProcParam_5        varchar2
)
is
/**
* description used for report HRM_TAXSOURCE.rpt
* @author rhe
* @created 06/2014
* @lastUpdate
* @public
* @param ProcParam_0  Id List
* @param ProcParam_1  Année mois ( début )
* @param ProcParam_2  Année mois ( fin )
* @param ProcParam_3  Contact
* @param ProcParam_4  Tél
* @param ProcParam_5  canton
*/
begin
  open aRefCursor for
    select EMP_SOCIAL_SECURITYNO2
         , PER_LAST_NAME
         , PER_FIRST_NAME
         , D.HIS_PAY_SUM_VAL
         , D.HIS_PAY_PERIOD
         , CE.COE_BOX
         , PER_BIRTH_DATE
         , T.EMT_CANTON
         , nvl(OFS_CITY, T.EMT_CITY) as EMT_CITY
         , PER_SEARCH_NAME
         , P.HRM_PERSON_ID
         , IO.INO_IN
         , IO.INO_OUT
         , CE.HRM_CONTROL_LIST_ID
         , T.EMT_VALUE
         , T.EMT_FROM
         , T.EMT_TO
         , H.HIT_PAY_PERIOD
         , IO.C_IN_OUT_CATEGORY
         , to_char(H.HIT_PAY_PERIOD, 'YYYYMM') as HISPERIODYYYYMM
         , to_char(H.HIT_PAY_PERIOD, 'MM') as HISPERIODMM
         , HRM_DATE.NEXTINOUTINDATE(IO.INO_IN, IO.HRM_EMPLOYEE_ID) as NEXTINDATE
         , HRM_IS_VD_EMPACI.NEXTEMPTAXINDATE(T.EMT_FROM, T.HRM_PERSON_ID) as NEXTEMTFROM
         , last_day(T.EMT_TO) as LASTDAYEMTTO
         , ProcParam_3 as CONTACT
         , ProcParam_4 as CONTACT_PHONE
         , TAX_PAYER_NO
         , TAX_COMMISSION
      from HRM_EMPLOYEE_TAXSOURCE T
         , HRM_HISTORY_DETAIL D
         , HRM_CONTROL_ELEMENTS CE
         , HRM_HISTORY H
         , HRM_PERSON P
         , HRM_IN_OUT IO
         , HRM_TAXSOURCE_DEFINITION TD
         , PCS.PC_OFS_CITY CITY
     where D.HRM_ELEMENTS_ID = CE.HRM_CONTROL_ELEMENTS_ID
       and D.HRM_EMPLOYEE_ID = H.HRM_EMPLOYEE_ID
       and D.HIS_PAY_NUM = H.HIT_PAY_NUM
       and H.HRM_EMPLOYEE_ID = P.HRM_PERSON_ID
       and T.HRM_PERSON_ID = P.HRM_PERSON_ID
       and P.HRM_PERSON_ID = IO.HRM_EMPLOYEE_ID
       and IO.C_IN_OUT_CATEGORY = '3'
       and CE.HRM_CONTROL_LIST_ID = ProcParam_0
       and T.EMT_CANTON = TD.C_HRM_CANTON
       and (   T.EMT_CANTON = ProcParam_5
            or ProcParam_5 is null)
       and H.HIT_PAY_PERIOD between IO.INO_IN and HRM_DATE.NextInOutInDate(IO.INO_IN, IO.HRM_EMPLOYEE_ID)
       and hit_pay_period between to_date(nvl(ProcParam_1, '190001') || 01, 'YYYYMMDD') and last_day(to_date(nvl(ProcParam_2, '290001') || 01, 'YYYYMMDD') )
       and H.HIT_PAY_PERIOD between T.EMT_FROM and HRM_DATE.EndEmpTaxDate(t.emt_from, t.emt_to,t.hrm_person_id)
       and T.PC_OFS_CITY_ID = CITY.PC_OFS_CITY_ID(+);
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_HRM_TAX_CERTIF" (
  aRefCursor in out crystal_cursor_types.DualCursorTyp,
  PROCPARAM_0 IN number, -- ListId [8]
  PROCPARAM_1 IN number, -- Year [0]]
  PROCPARAM_2 IN number, -- Langue [9]
  PROCPARAM_3 IN varchar2 default 'A',    -- De l'employé [6]
  PROCPARAM_4 IN varchar2 default 'zzzz',
  PROCPARAM_5 IN varchar2 default null, -- De la période (YYYYMM)
  PROCPARAM_6 IN varchar2 default null, -- A la période (YYYYMM)
  PROCPARAM_7 IN number default 1, -- Type de description (0,1,2)

  PROCPC_USER_ID IN PCS.PC_USER.PC_USER_ID%TYPE, -- Id utilisateur
  PROCPC_COMP_ID IN PCS.PC_COMP.PC_COMP_ID%TYPE -- Id Société
)
/**
 * @created 07/2007
 * @author rhe, ire
 * @update VHA 26 JUNE 2013
 *
 * Utilisé par le rapport HRM_TAX_CERTIF_2005.rpt
 * @param PROCPARAM_0  Id List
 * @param PROCPARAM_1  Année
 * @param PROCPARAM_2  LangType (0: User; 1: Company; 2: Employee)
 * @param PROCPARAM 3  FromEmp
 * @param PROCPARAM 4  ToEmp
 * @param PROCPARAM 5  FromPeriod (YYYYMM) pour une impression intermédiaire
 * @param PROCPARAM 6  ToPeriod (YYYYMM) pour une impression intermédiaire
 * @param PROCPARAM 7  DescrType (0:RootCode, 1:Descr, 2:SubstCode)
 *
 * Modifications:
 *   04.05.2009: Ajout DescrType (correction recherche textes concaténés 15.1)
 *   08.05.2008: Intégration liste intérmédiaire (parmètres période)
 *   05.12.2013: Procedure renamed from HRM_CERTIF_RPT TO RPT_HRM_TAX_CERTIF
 */
is
  vPeriodFrom Date;
  vPeriodTo Date;
begin
  -- Initialiser
  if PROCPC_USER_ID is not null then
    pcs.PC_I_LIB_SESSION.SetUserId(PROCPC_USER_ID);
  end if;
  if PROCPC_COMP_ID is not null then
    pcs.PC_I_LIB_SESSION.SetCompanyId(PROCPC_COMP_ID);
  end if;

  -- Annuel
  if (PROCPARAM_5 is null) then
    hrm_rep_list.CertifList(aRefCursor, PROCPARAM_0, PROCPARAM_1, PROCPARAM_2, PROCPARAM_3, PROCPARAM_4, PROCPARAM_7);
  -- Intermédiaire
  else
    vPeriodFrom := To_Date(PROCPARAM_5||'01', 'YYYYMMDD');
    vPeriodTo := Last_Day(To_Date(PROCPARAM_6||'01', 'YYYYMMDD'));
    hrm_rep_list.CertifPeriodList(aRefCursor, PROCPARAM_0, PROCPARAM_1,
        vPeriodFrom, vPeriodTo, PROCPARAM_2, PROCPARAM_3, PROCPARAM_4, PROCPARAM_7);
  end if;

end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_ACS_AUX_CUR_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  ACS_AUXILIARY_ACCOUNT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT aac.acs_auxiliary_account_id,
             NVL (aac.asc_default, 0) asc_default, pcu.currency,
             pcu.currname
        FROM acs_aux_account_s_fin_curr aac,
             acs_financial_currency fcr,
             pcs.pc_curr pcu
       WHERE aac.acs_financial_currency_id = fcr.acs_financial_currency_id
         AND fcr.pc_curr_id = pcu.pc_curr_id
         AND aac.acs_auxiliary_account_id = parameter_99;
END rpt_pac_acs_aux_cur_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_ADDRESS_FORM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_ADDRESS_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  Client de : (PER_NAME)
 @PARAM  parameter_1  Client à : (PER_NAME)
 @PARAM  parameter_3  Sélection: 0 = Aucune, 1 = Création, 2 = Modification
 @PARAM  parameter_4  Date du: (Création ou modification) YYYYMMDD
 @PARAM  parameter_5  Date au: (Création ou modification) YYYYMMDD
 @PARAM  parameter_6  Initiales utilisateur: (Création ou modification)
 @PARAM  parameter_8  pac_person_id
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;
   param_a_datecre_start   DATE;
   param_a_datecre_end     DATE;
   param_a_idcre           VARCHAR2 (5);
   param_a_datemod_start   DATE;
   param_a_datemod_end     DATE;
   param_a_idmod           VARCHAR2 (5);
BEGIN
   CASE parameter_3
      WHEN '0'
      THEN
         NULL;
      WHEN '1'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         ELSE
            param_a_datecre_start := parameter_4;
            param_a_datecre_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         END IF;
      WHEN '2'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         ELSE
            param_a_datemod_start := parameter_4;
            param_a_datemod_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         END IF;
      ELSE
         NULL;
   END CASE;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT per.pac_person_id, per.dic_person_politness_id, per.per_name,
             per.per_forename, per.per_short_name, per.per_contact,
             per.per_comment, per.per_activity, per.per_key1, per.per_key2,
             per.dic_free_code1_id, per.dic_free_code2_id,
             per.dic_free_code3_id, per.dic_free_code4_id,
             per.dic_free_code5_id, per.dic_free_code6_id,
             per.dic_free_code7_id, per.dic_free_code8_id,
             per.dic_free_code9_id, per.dic_free_code10_id,
             thi.dic_third_activity_id, thi.dic_third_area_id,
             thi.dic_juridical_status_id, thi.dic_citi_code_id,
             thi.thi_no_siren, thi.thi_no_siret, thi.thi_no_tva,
             thi.thi_no_intra, thi.thi_custom_number, thi.pac_pac_person_id
        FROM pac_third thi, pac_person per
       WHERE per.pac_person_id = thi.pac_third_id(+)
         AND (   (per.per_name >= parameter_0 AND per.per_name <= parameter_1
                 )
              OR (parameter_0 IS NULL AND parameter_1 IS NULL AND parameter_8 = per.pac_person_id)
             )
         AND (   (    per.a_datecre >= param_a_datecre_start
                  AND per.a_datecre <= param_a_datecre_end
                 )
              OR param_a_datecre_start IS NULL
             )
         AND (   per.a_idcre = param_a_idcre
              OR (    param_a_idcre IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '1')
                 )
             )
         AND (   (    per.a_datemod >= param_a_datemod_start
                  AND per.a_datemod <= param_a_datemod_end
                 )
              OR param_a_datemod_start IS NULL
             )
         AND (   per.a_idmod = param_a_idmod
              OR (    param_a_idmod IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '2')
                 )
             );
END rpt_pac_address_form;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_ADDRESS_LABEL" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   PARAMETER_0      IN       VARCHAR2,
   PARAMETER_1      IN       VARCHAR2,
   PARAMETER_2      IN       VARCHAR2,
   PARAMETER_3      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_ADDRESS_LABEL
 @Created JLIU 27 August 2009
 @public
 @PARAM  parameter_0  Adresses: 0= Toutes; 1= Clients; 2= Fournisseurs; 3= Personnes
 @PARAM  parameter_1  Print additional address
 @PARAM  parameter_2  PER_NAME : (FROM)
 @PARAM  parameter_3  PER_NAME: (TO)
*/


   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;

BEGIN

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

OPEN arefcursor FOR
SELECT
ADR.ADD_ADDRESS1,
ADR.ADD_FORMAT,
ADR.ADD_PRINCIPAL,
CUS.PAC_CUSTOM_PARTNER_ID,
PER.PER_NAME,
PER.PER_FORENAME,
PER.PER_ACTIVITY,
SUP.PAC_SUPPLIER_PARTNER_ID
FROM
PAC_ADDRESS ADR,
PAC_CUSTOM_PARTNER CUS,
PAC_PERSON PER,
PAC_SUPPLIER_PARTNER SUP,
PAC_THIRD THI
WHERE
ADR.PAC_PERSON_ID = PER.PAC_PERSON_ID
AND PER.PAC_PERSON_ID = THI.PAC_THIRD_ID(+)
AND PER.PAC_PERSON_ID = SUP.PAC_SUPPLIER_PARTNER_ID(+)
AND PER.PAC_PERSON_ID = CUS.PAC_CUSTOM_PARTNER_ID(+)
AND (PER.PER_NAME >= NVL(PARAMETER_2,'(') AND PER.PER_NAME <= NVL(PARAMETER_3,'}'))
AND (PARAMETER_0 is Null OR
     (PARAMETER_0 = '1' AND CUS.PAC_CUSTOM_PARTNER_ID IS NOT NULL) OR
     (PARAMETER_0 = '2' AND SUP.PAC_SUPPLIER_PARTNER_ID IS NOT NULL) OR
     (PARAMETER_0 = '0' AND CUS.PAC_CUSTOM_PARTNER_ID IS NULL AND SUP.PAC_SUPPLIER_PARTNER_ID IS NULL)
     )
AND (PARAMETER_1 = '1' OR
     (PARAMETER_1 <> '1' AND ADR.ADD_PRINCIPAL = 1))
ORDER BY
PER.PER_NAME


;
END RPT_PAC_ADDRESS_LABEL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_ADDRESS_LIST" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_ADDRESS_LIST
 @Created JLIU - 27 August 2009
 @lastUpdate mzh 17.05.2010
 @public
 @PARAM  parameter_0  PER_NAME: (FROM)
 @PARAM  parameter_1  PER_NAME : (TO)
 @PARAM  parameter_2  Adresses: 0= Toutes; 1= Clients; 2= Fournisseurs; 3= Personnes
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT DISTINCT cus.pac_custom_partner_id, sup.pac_supplier_partner_id,
                      rep.pac_person_id, rep.per_name, rep.per_forename,
                      rep.per_short_name, rep.per_activity, rep.per_key1,
                      rep.per_key2
                 FROM pac_custom_partner cus,
                      pac_supplier_partner sup,
                      pac_person rep
                WHERE rep.pac_person_id = cus.pac_custom_partner_id(+)
                  AND rep.pac_person_id = sup.pac_supplier_partner_id(+)
                  AND (    rep.per_name >= NVL (parameter_0, '(')
                       AND rep.per_name <= NVL (parameter_1, '}')
                      )
                  AND (   parameter_2 = '0'
                       OR (    parameter_2 = '1'
                           AND cus.pac_custom_partner_id IS NOT NULL
                          )
                       OR (    parameter_2 = '2'
                           AND sup.pac_supplier_partner_id IS NOT NULL
                          )
                       OR (    parameter_2 = '3'
                           AND cus.pac_custom_partner_id IS NULL
                           AND sup.pac_supplier_partner_id IS NULL
                          )
                      );
END rpt_pac_address_list;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_ASSOCIE_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_ADDRESS_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_PERSON_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT adr.pac_person_id, adr.add_address1, adr.add_format,
             thi.pac_pac_person_id
        FROM pac_third thi, pac_address adr
       WHERE thi.pac_pac_person_id = adr.pac_person_id(+)
             AND adr.pac_person_id = parameter_99;
END rpt_pac_associe_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CHARGE_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID (PAC_SUPPLIER_PARTNER_ID)
*/
BEGIN
   OPEN arefcursor FOR
      SELECT crg.crg_name
        FROM ptc_charge crg, ptc_charge_s_partners cpa
       WHERE crg.ptc_charge_id = cpa.ptc_charge_id
         AND cpa.pac_third_id = parameter_99;
END rpt_pac_charge_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_COMMUNICATION_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM, PAC_ADDRESS_FORM

 @author AWU 1Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_PERSON_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT pad.dic_address_type_id, com.dic_communication_type_id,
             com.com_ext_number, com.com_area_code, com.com_int_number
        FROM pac_address pad, pac_communication com
       WHERE com.pac_address_id = pad.pac_address_id(+)
             AND com.pac_person_id = parameter_99;
END rpt_pac_communication_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CONTACT_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM, PAC_ADDRESS_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID (PAC_SUPPLIER_PARTNER_ID,PAC_PERSON_ID)
*/
BEGIN
   OPEN arefcursor FOR
      SELECT com.dic_communication_type_id, com.com_ext_number,
             com.com_int_number, com.com_area_code, per.per_name,
             ass.pac_person_association_id, ass.dic_association_type_id,
             ass.pas_function
        FROM pac_communication com,
             pac_person per,
             pac_person_association ass
       WHERE ass.pac_pac_person_id = com.pac_person_id(+)
         AND ass.pac_pac_person_id = per.pac_person_id
         AND ass.pac_person_id = parameter_99;
END rpt_pac_contact_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CREDIT_LIMIT_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID (PAC_SUPPLIER_PARTNER_ID)
*/
BEGIN
   OPEN arefcursor FOR
      SELECT crl.c_valid, crl.c_limit_type, crl.pc_user_id,
             crl.cre_amount_limit, crl.cre_comment, crl.cre_limit_date,
             acs_function.getcurrencyname
                                       (crl.acs_financial_currency_id)
                                                                     monnaie
        FROM pac_credit_limit crl
       WHERE crl.pac_custom_partner_id = parameter_99;
END rpt_pac_credit_limit_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CUSTOM_FORM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  Client de : (PER_NAME)
 @PARAM  parameter_1  Client à: (PER_NAME)
 @PARAM  parameter_3  Section: 0 = Aucune, 1 = Crétion, 2 = Modification
 @PARAM  parameter_4  Date du: (Crétion ou modification) YYYYMMDD
 @PARAM  parameter_5  Date au: (Crétion ou modification) YYYYMMDD
 @PARAM  parameter_6  Initiales utilisateur: (Crétion ou modification)
 @PARAM  parameter_8  pac_person_id
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;
   param_a_datecre_start   DATE;
   param_a_datecre_end     DATE;
   param_a_idcre           VARCHAR2 (5);
   param_a_datemod_start   DATE;
   param_a_datemod_end     DATE;
   param_a_idmod           VARCHAR2 (5);
BEGIN
   CASE parameter_3
      WHEN '0'
      THEN
         NULL;
      WHEN '1'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         ELSE
            param_a_datecre_start := parameter_4;
            param_a_datecre_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         END IF;
      WHEN '2'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         ELSE
            param_a_datemod_start := parameter_4;
            param_a_datemod_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         END IF;
      ELSE
         NULL;
   END CASE;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT per.pac_person_id, per.per_key1, per.per_key2,
             per.dic_person_politness_id, per.per_name, per.per_forename,
             per.per_short_name, per.per_activity, per.per_comment,
             per.dic_free_code1_id, per.dic_free_code2_id,
             per.dic_free_code3_id, per.dic_free_code4_id,
             per.dic_free_code5_id, per.dic_free_code6_id,
             per.dic_free_code7_id, per.dic_free_code8_id,
             per.dic_free_code9_id, per.dic_free_code10_id,
             cus.pac_custom_partner_id, cus.c_partner_category,
             acc1.acc_number, cus.pac_payment_condition_id,
             cus.c_partner_status, cus.c_status_settlement,
             cus.dic_type_submission_id, thi.thi_no_tva, thi.thi_no_intra,
             cus.c_remainder_launching, cus.cus_without_remind_date,
             cus.pac_remainder_category_id, cus.dic_type_partner_id,
             cus.cus_free_zone1, cus.cus_free_zone2, cus.cus_free_zone3,
             cus.cus_free_zone4, cus.cus_free_zone5, cus.dic_statistic_1_id,
             cus.dic_statistic_2_id, cus.dic_statistic_3_id,
             cus.dic_statistic_4_id, cus.dic_statistic_5_id,
             pe1.per_name per_name_1, pe1.per_forename per_forename_1,
             pe2.per_name per_name_2, pe2.per_forename per_forename_2,
             cus.pac_representative_id, cus.dic_ptc_third_group_id,
             cus.dic_tariff_id, cus.pac_sending_condition_id,
             cus.cus_rate_for_value, cus.pac_calendar_type_id,
             cus.dic_complementary_data_id, cus.dic_pic_group_id,
             cus.c_incoterms, cus.cus_incoterms_place, cus.c_reservation_typ,
             cus.cus_delivery_delay,
             NVL (cus.cus_periodic_delivery, 0) cus_periodic_delivery,
             cus.c_delivery_typ, cus.dic_delivery_period_id,
             cus.c_doc_creation,
             NVL (cus.cus_periodic_invoicing, 0) cus_periodic_invoicing,
             cus.dic_invoicing_period_id, cus.c_doc_creation_invoice,
             cus.cus_min_invoicing, cus.cus_min_invoicing_delay,
             cus.c_bvr_generation_method, cus.c_type_edi, cus.cus_data_export,
             cus.cus_supplier_number, cus.cus_ean_number, cus.doc_gauge_id,
             cus.doc_doc_gauge_id, cus.cus_sup_copy1, cus.cus_sup_copy2,
             cus.cus_sup_copy3, cus.cus_sup_copy4, cus.cus_sup_copy5,
             cus.cus_sup_copy6, cus.cus_sup_copy7, cus.cus_sup_copy8,
             cus.cus_sup_copy9, cus.cus_sup_copy10, thi.dic_third_activity_id,
             thi.dic_third_area_id, thi.dic_juridical_status_id,
             thi.dic_citi_code_id, thi.thi_no_siren, thi.thi_no_siret,
             thi.pac_pac_person_id, cus.pc_appltxt_id, cus.pc__pc_appltxt_id,
             cus.pc_2_pc_appltxt_id, cus.pc_3_pc_appltxt_id,
             cus.pc_4_pc_appltxt_id, cus.cus_lapsing_marge,
             aux.acs_auxiliary_account_id, aux.acs_prep_coll_id,
             aux.acs_invoice_coll_id, aux.acs_financial_account_id,
             NVL (acc2.acc_detail_printing, 0) acc_detail_printing,
             NVL (acc2.acc_blocked, 0) acc_blocked, acc2.acc_valid_since,
             acc2.acc_valid_to, des.des_description_summary,
             pcs.pc_functions.getappltxtlabel
                               (cus.pc_appltxt_id,
                                vpc_lang_id
                               ) c_texte_pied_1_description,
             pcs.pc_functions.getappltxtlabel
                           (cus.pc__pc_appltxt_id,
                            vpc_lang_id
                           ) c_texte_pied_2_description,
             pcs.pc_functions.getappltxtlabel
                          (cus.pc_2_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_3_description,
             pcs.pc_functions.getappltxtlabel
                          (cus.pc_3_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_4_description,
             pcs.pc_functions.getappltxtlabel
                          (cus.pc_4_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_5_description,
             (SELECT ade1.des_description_summary
                FROM acs_description ade1
               WHERE ade1.acs_sub_set_id = acc1.acs_sub_set_id
                 AND ade1.pc_lang_id = vpc_lang_id) acs_sub_se,
             (SELECT ade2.des_description_summary
                FROM acs_description ade2
               WHERE ade2.acs_payment_method_id =
                                    pay.acs_payment_method_id
                 AND ade2.pc_lang_id = vpc_lang_id) acs_payment_met,
             (SELECT ade3.des_description_summary
                FROM acs_description ade3
               WHERE ade3.acs_vat_det_account_id =
                                   cus.acs_vat_det_account_id
                 AND ade3.pc_lang_id = vpc_lang_id) acs_vat_det_acc,
             (SELECT ade4.des_description_summary
                FROM acs_description ade4
               WHERE ade4.acs_accounting_id =
                                      aux.acs_invoice_coll_id
                 AND ade4.pc_lang_id = vpc_lang_id) acs_invoice_col,
             (SELECT ade5.des_description_summary
                FROM acs_description ade5
               WHERE ade5.acs_account_id = aux.acs_prep_coll_id
                 AND ade5.pc_lang_id = vpc_lang_id) acs_prep_col,
             (SELECT ade6.des_description_summary
                FROM acs_description ade6
               WHERE ade6.acs_account_id =
                               aux.acs_financial_account_id
                 AND ade6.pc_lang_id = vpc_lang_id) acs_financial_acc,
             NVL (cus.cus_no_rem_charge, 0) cus_no_rem_charge,
             NVL (cus.cus_no_moratorium_interest,
                  0
                 ) cus_no_moratorium_interest,
             NVL (cus.cus_tariff_by_set, 0) cus_tariff_by_set,
             thi.thi_custom_number
        FROM pac_person pe2,
             pac_person pe1,
             pac_third thi,
             acs_fin_acc_s_payment pay,
             acs_account acc1,
             pac_person per,
             pac_custom_partner cus,
             acs_description des,
             acs_account acc2,
             acs_auxiliary_account aux,
             acs_sub_set sub
       WHERE per.pac_person_id = cus.pac_custom_partner_id
         AND cus.acs_auxiliary_account_id = acc1.acs_account_id(+)
         AND cus.acs_fin_acc_s_payment_id = pay.acs_fin_acc_s_payment_id(+)
         AND cus.pac_custom_partner_id = thi.pac_third_id
         AND cus.pac_pac_third_1_id = pe1.pac_person_id(+)
         AND cus.pac_pac_third_2_id = pe2.pac_person_id(+)
         AND cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id(+)
         AND aux.acs_auxiliary_account_id = acc2.acs_account_id
         AND acc2.acs_account_id = des.acs_account_id
         AND acc2.acs_sub_set_id = sub.acs_sub_set_id
         AND sub.c_type_sub_set = 'AUX'
         AND (   (per.per_name >= parameter_0 AND per.per_name <= parameter_1
                 )
              OR (parameter_0 IS NULL AND parameter_1 IS NULL AND per.pac_person_id = parameter_8)
             )
         AND (   (    cus.a_datecre >= param_a_datecre_start
                  AND cus.a_datecre <= param_a_datecre_end
                 )
              OR param_a_datecre_start IS NULL
             )
         AND (   cus.a_idcre = param_a_idcre
              OR (    param_a_idcre IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '1')
                 )
             )
         AND (   (    cus.a_datemod >= param_a_datemod_start
                  AND cus.a_datemod <= param_a_datemod_end
                 )
              OR param_a_datemod_start IS NULL
             )
         AND (   cus.a_idmod = param_a_idmod
              OR (    param_a_idmod IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '2')
                 )
             )
         AND des.pc_lang_id = vpc_lang_id;
END rpt_pac_custom_form;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CUS_PAR_PAY_MORALITY" (
aRefCursor           IN OUT CRYSTAL_CURSOR_TYPES.DualCursorTyp,
PROCUSER_LANID       IN     pcs.pc_lang.lanid%type,
PROC_PARAMETER_0          IN     varchar2,
PROC_PARAMETER_1          IN     varchar2,
PROC_PARAMETER_2          IN     varchar2,
PROC_PARAMETER_3          IN     varchar2,
PROC_PARAMETER_4          IN     varchar2


)
IS

/**
* DESCRIPTION
* USED FOR REPORT  PAC_CUSTOM_PARTNER_PAYMENT_MORALITY
* @MIDIFIED BY   JLIU
* @LASTUPDATE   20 JUN 2010
* @PUBLIC

* @PARAM  parameter_0  List of subset if
* @PARAM  parameter_1  List of pac payment condition id
* @PARAM  parameter_2  List of pac person id
* @PARAM  parameter_3  Value(Average credit)
* @PARAM  parameter_4  Value(Coefficient)
*/

VPC_LANG_ID pcs.pc_lang.pc_lang_id%type;

begin



pcs.PC_I_LIB_SESSION.setLanId (procuser_lanid);
VPC_LANG_ID:= pcs.PC_I_LIB_SESSION.GetUserLangId;



open aRefCursor for

select ANNEE.FYE_NO_EXERCICE annee
     , DSUB.ACS_SUB_SET_ID
     , DSUB.DES_DESCRIPTION_SUMMARY
     , PER.PAC_PERSON_ID
     , PER.PER_KEY1
     , PER.PER_NAME
     , PAY.PCO_DESCR
     , trad.APT_LABEL
     , ACR_FUNCTIONS.AveragePaymentByExercice(aux.ACS_AUXILIARY_ACCOUNT_ID, annee.acs_financial_year_id) DELAI_PART
     , nvl(CUS.CUS_PAYMENT_FACTOR, 0) Coefficient
     , nvl(to_char(CUS.CUS_PAYMENT_FACTOR_DATE, 'dd.mm.yyyy'), 0) date_coeff
     , ACR_FUNCTIONS.MeanCreditInDay(aux.ACS_AUXILIARY_ACCOUNT_ID, annee.acs_financial_year_id) CREDIT_PART
  from pac_person per
     , pac_custom_partner cus
     , acs_auxiliary_account aux
     , acs_financial_year annee
     , acs_account acc
     , acs_sub_set sub
     , acs_description dsub
     , pac_payment_condition pay
     , pcs.PC_APPLTXT_TRADUCTION trad
 where cus.pac_custom_partner_id(+) = per.pac_person_id
   and cus.acs_auxiliary_account_id = aux.acs_auxiliary_account_id
   and ACC.ACS_ACCOUNT_ID = AUX.ACS_AUXILIARY_ACCOUNT_ID
   and ANNEE.FYE_NO_EXERCICE = to_char(sysdate, 'yyyy')
   and ACC.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
   and DSUB.ACS_SUB_SET_ID = SUB.ACS_SUB_SET_ID
   and DSUB.PC_LANG_ID = VPC_LANG_ID
   and CUS.PAC_PAYMENT_CONDITION_ID = PAY.PAC_PAYMENT_CONDITION_ID
   and PAY.PC_APPLTXT_ID = TRAD.PC_APPLTXT_ID
   and TRAD.PC_LANG_ID = VPC_LANG_ID
   and (PROC_PARAMETER_0 IS NULL OR INSTR( ',' || PROC_PARAMETER_0 ||',' , ',' || ACC.ACS_SUB_SET_ID ||',' ) > 0 )
   and (PROC_PARAMETER_2 IS NULL OR INSTR( ',' || PROC_PARAMETER_2 ||',' , ',' || per.pac_person_id  ||',' ) > 0 )
   and (PROC_PARAMETER_1 IS NULL OR INSTR( ',' || PROC_PARAMETER_1 ||',' , ',' || CUS.PAC_PAYMENT_CONDITION_ID  ||',' ) > 0 )
   and ACR_FUNCTIONS.MeanCreditInDay(aux.ACS_AUXILIARY_ACCOUNT_ID, annee.acs_financial_year_id)>=to_number(PROC_PARAMETER_3)
   and nvl(CUS.CUS_PAYMENT_FACTOR, 0)>=to_number(PROC_PARAMETER_4);


end RPT_PAC_CUS_PAR_PAY_MORALITY;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_CUS_PREC_MAT_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_99     IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID
*/
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT cus.c_material_mgnt_mode,
             pcs.pc_functions.getdescodedescr
                                         ('C_MATERIAL_MGNT_MODE',
                                          cus.c_material_mgnt_mode,
                                          vpc_lang_id
                                         ) mgnt_mode,
             thi.gco_alloy_id, gal.gal_alloy_ref, gal.gal_alloy_descr,
             thi.dic_basis_material_id,
             (SELECT dit.dit_descr
                FROM dico_description dit
               WHERE dit.dit_table = 'DIC_BASIS_MATERIAL'
                 AND dit.dit_code = thi.dic_basis_material_id
                 AND dit.pc_lang_id = vpc_lang_id) dit_descr,
             NVL (thi.tha_managed, 0) tha_managed, thi.tha_number,
             cus.c_third_material_relation_type,
             pcs.pc_functions.getdescodedescr
                ('C_THIRD_MATERIAL_RELATION_TYPE',
                 cus.c_third_material_relation_type,
                 vpc_lang_id
                ) third_material_relation_type,
             cus.c_weighing_mgnt,
             pcs.pc_functions.getdescodedescr
                                          ('C_WEIGHING_MGNT',
                                           cus.c_weighing_mgnt,
                                           vpc_lang_id
                                          ) weighing_mgnt,
             cus.c_adv_material_mode,
             pcs.pc_functions.getdescodedescr
                                  ('C_ADV_MATERIAL_MODE',
                                   cus.c_adv_material_mode,
                                   vpc_lang_id
                                  ) adv_material_mode
        FROM pac_custom_partner cus, pac_third_alloy thi, gco_alloy gal
       WHERE cus.pac_custom_partner_id = thi.pac_custom_partner_id(+)
         AND thi.gco_alloy_id = gal.gco_alloy_id(+)
         AND cus.pac_custom_partner_id = parameter_99;
END rpt_pac_cus_prec_mat_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_DISCOUNT_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM
 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID (PAC_SUPPLIER_PARTNER_ID)
*/
BEGIN
   OPEN arefcursor FOR
      SELECT dnt.dnt_name
        FROM ptc_discount dnt, ptc_discount_s_third dth
       WHERE dnt.ptc_discount_id = dth.ptc_discount_id
         AND dth.pac_third_id = parameter_99;
END rpt_pac_discount_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_EVENT_PLA" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_EVENT_PLA

 @author AWU Jan 2009
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  PC_USER_ID : 0=all
 @PARAM  parameter_1  Date from : YYYYMMDD
 @PARAM  parameter_2  Date to : YYYYMMDD
 @PARAM  parameter_3  Private Events : 0=all, 1=not private, 2=private
 @PARAM  parameter_6  DIC_EVENT_DOMAIN_ID : #=all  / ID-list
*/
   vpc_lang_id    pcs.pc_lang.pc_lang_id%TYPE;
   para_private   NUMBER (1);
BEGIN
   CASE parameter_3
      WHEN '1'
      THEN
         para_private := 0;
      WHEN '2'
      THEN
         para_private := 1;
      WHEN '0'
      THEN
         para_private := 2;
      ELSE
         NULL;
   END CASE;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT eve.pac_event_id, eve.pac_person_id, eve.eve_text, eve.eve_date,
             eve.eve_number, eve.eve_date_completed, evo.eve_text eve_text_o,
             evo.eve_date eve_date_o, des.typ_long_description,
             deo.typ_long_description typ_long_description_o, lea.lea_label,
             per.per_short_name, pas.pac_pac_person_id, usr.pc_user_id,
             usr.use_name, usr.use_descr, eve.eve_percent_complete
        FROM pac_event eve,
             pac_person per,
             pac_person_association pas,
             pcs.pc_user usr,
             pac_event evo,
             pac_event_type tyo,
             pac_event_type_descr deo,
             pac_event_type typ,
             pac_event_type_descr des,
             pac_lead lea,
             THE
                (SELECT CAST
                           (doc_document_list_functions.in_list
                                                       (REPLACE (parameter_6,
                                                                 '''',
                                                                 ''
                                                                ),
                                                        ';'
                                                       ) AS char_table_type
                           )
                   FROM DUAL
                ) dic_event_domain_id_list
       WHERE eve.pac_event_id = per.pac_person_id(+)
         AND eve.pac_association_id = pas.pac_person_association_id(+)
         AND eve.eve_user_id = usr.pc_user_id
         AND eve.pac_pac_event_id = evo.pac_event_id(+)
         AND evo.pac_event_type_id = tyo.pac_event_type_id(+)
         AND tyo.pac_event_type_id = deo.pac_event_type_id(+)
         AND eve.pac_event_type_id = typ.pac_event_type_id
         AND typ.pac_event_type_id = des.pac_event_type_id(+)
         AND eve.pac_lead_id = lea.pac_lead_id(+)
         AND eve.eve_ended = 0
         AND eve.eve_date BETWEEN TO_DATE (parameter_1, 'YYYYMMDD')
                              AND TO_DATE (parameter_2, 'YYYYMMDD')
         AND (usr.pc_user_id = parameter_0 OR parameter_0 = 0)
         AND (eve.eve_private = para_private OR para_private = 2)
         AND (   typ.dic_event_domain_id =
                                         dic_event_domain_id_list.COLUMN_VALUE
              OR parameter_6 = '#'
             )
         AND (des.pac_event_type_id IS NULL OR des.pc_lang_id = vpc_lang_id)
         AND (deo.pac_event_type_id IS NULL OR deo.pc_lang_id = vpc_lang_id);
END rpt_pac_event_pla;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_EVENT_REP" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       NUMBER,
   parameter_1      IN       VARCHAR2,
   parameter_2      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_EVENT_REP

 @author AWU Jan 2009
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  PC_USER_ID : 0=all
 @PARAM  parameter_1  Date from : YYYYMMDD
 @PARAM  parameter_2  Date to : YYYYMMDD
 @PARAM  parameter_3  Private Events : 0=all, 1=not private, 2=private
 @PARAM  parameter_6  DIC_EVENT_DOMAIN_ID : #=all  / ID-list
*/
   vpc_lang_id    pcs.pc_lang.pc_lang_id%TYPE;
   para_private   NUMBER (1);
BEGIN
   CASE parameter_3
      WHEN '1'
      THEN
         para_private := 0;
      WHEN '2'
      THEN
         para_private := 1;
      WHEN '0'
      THEN
         para_private := 2;
      ELSE
         NULL;
   END CASE;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT eve.pac_event_id, eve.pac_person_id, eve.eve_text, eve.eve_date,
             eve.eve_number, eve.eve_date_completed, evo.eve_text eve_text_o,
             evo.eve_date eve_date_o, des.typ_long_description,
             deo.typ_long_description typ_long_description_o, lea.lea_label,
             per.per_short_name, pas.pac_pac_person_id, usr.pc_user_id,
             usr.use_name, usr.use_descr
        FROM pac_event eve,
             pac_person per,
             pac_person_association pas,
             pcs.pc_user usr,
             pac_event evo,
             pac_event_type tyo,
             pac_event_type_descr deo,
             pac_event_type typ,
             pac_event_type_descr des,
             pac_lead lea,
             THE
                (SELECT CAST
                           (doc_document_list_functions.in_list
                                                       (REPLACE (parameter_6,
                                                                 '''',
                                                                 ''
                                                                ),
                                                        ';'
                                                       ) AS char_table_type
                           )
                   FROM DUAL
                ) dic_event_domain_id_list
       WHERE eve.pac_event_id = per.pac_person_id(+)
         AND eve.pac_association_id = pas.pac_person_association_id(+)
         AND eve.eve_user_id = usr.pc_user_id
         AND eve.pac_pac_event_id = evo.pac_event_id(+)
         AND evo.pac_event_type_id = tyo.pac_event_type_id(+)
         AND tyo.pac_event_type_id = deo.pac_event_type_id(+)
         AND eve.pac_event_type_id = typ.pac_event_type_id
         AND typ.pac_event_type_id = des.pac_event_type_id(+)
         AND eve.pac_lead_id = lea.pac_lead_id(+)
         AND eve.eve_ended = 1
         AND eve.eve_date BETWEEN TO_DATE (parameter_1, 'YYYYMMDD')
                              AND TO_DATE (parameter_2, 'YYYYMMDD')
         AND (usr.pc_user_id = parameter_0 OR parameter_0 = 0)
         AND (eve.eve_private = para_private OR para_private = 2)
         AND (   typ.dic_event_domain_id =
                                         dic_event_domain_id_list.COLUMN_VALUE
              OR parameter_6 = '#'
             )
         AND (des.pac_event_type_id IS NULL OR des.pc_lang_id = vpc_lang_id)
         AND (deo.pac_event_type_id IS NULL OR deo.pc_lang_id = vpc_lang_id);
END rpt_pac_event_rep;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_EVE_CONTACT_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER,
   parameter_8   IN       VARCHAR
)
IS
/**
 Description - used for the report PAC_EVENT_REP, PAC_EVENT_PLA

 @author AWU Jan 2009
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  PAC_PERSON_ID
 @PARAM  parameter_8  DIC_ASSOCIATION_TYPE_ID : #=all  / ID-list
*/
BEGIN
   OPEN arefcursor FOR
      SELECT com.dic_communication_type_id, com.com_ext_number,
             com.com_int_number, com.com_area_code, per.per_name,
             per.per_forename, pas.pac_person_id,
             pas.dic_association_type_id
        FROM pac_person_association pas,
             pac_person per,
             pac_communication com,
             THE
                (SELECT CAST
                           (doc_document_list_functions.in_list
                                                       (REPLACE (parameter_8,
                                                                 '''',
                                                                 ''
                                                                ),
                                                        ';'
                                                       ) AS char_table_type
                           )
                   FROM DUAL
                ) dic_association_type_id_list
       WHERE pas.pac_pac_person_id = per.pac_person_id
         AND per.pac_person_id = com.pac_person_id(+)
         AND (   pas.dic_association_type_id =
                                     dic_association_type_id_list.COLUMN_VALUE
              OR parameter_8 = '#'
             )
         AND pas.pac_person_id = parameter_0;
END rpt_pac_eve_contact_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_EVE_PERSON_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_EVENT_REP, PAC_EVENT_PLA

 @author AWU Jan 2009
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  PAC_PERSON_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT dco.dco_default1, dco.dco_default2, dco.dco_default3,
             adr.pac_address_id, adr.pac_person_id, adr.add_address1,
             adr.add_format, adr.add_principal,
             com.dic_communication_type_id, com.com_ext_number,
             com.com_int_number, com.com_area_code, per.per_name,
             per.per_forename, per.per_activity
        FROM dic_communication_type dco,
             pac_address adr,
             pac_communication com,
             pac_person per
       WHERE per.pac_person_id = adr.pac_person_id(+)
         AND per.pac_person_id = com.pac_person_id(+)
         AND com.dic_communication_type_id = dco.dic_communication_type_id(+)
         AND per.pac_person_id = parameter_0;
END rpt_pac_eve_person_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_LEADS" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       VARCHAR,
   parameter_1   IN       VARCHAR
)
IS
/**
 Description - used for the report PAC_LEADS

 @author AWU Jan 2009
 @lastupdate VHA 08 May 2012
 @public
 @PARAM  parameter_0  LEA_DATE
 @PARAM  parameter_1  LEA_DATE
*/
BEGIN
   OPEN arefcursor FOR
      SELECT lea.pac_person_id, lea.lea_label, lea.dic_lea_category_id,
             lea.dic_lea_subcategory_id, lea.dic_lea_classification_id,
             lea.c_opportunity_status, lea.dic_lea_rating_id,
             lea.lea_budget_amount, lea.lea_project_begin_date,
             lea.lea_project_end_date,
             lea.lea_company_name, per.per_name,
             nvl(rep.rep_descr,pcs.pc_functions.translateword2 ('Pas de représentant',1)) rep_descr,
             nvl(ste.ste_description,pcs.pc_functions.translateword2 ('Pas de territoire de vente',1)) ste_description,
             cur.currency
        FROM pac_lead lea,
             pac_person per,
             pac_sale_territory ste,
             pac_representative rep,
             pcs.pc_curr cur
       WHERE lea.pac_person_id = per.pac_person_id
         AND lea.pac_sale_territory_id = ste.pac_sale_territory_id(+)
         AND lea.pac_representative_id = rep.pac_representative_id(+)
         AND lea.pc_curr_id = cur.pc_curr_id(+)
         AND lea.lea_date BETWEEN TO_DATE (parameter_0, 'YYYY-MM-DD')
                              AND TO_DATE (parameter_1, 'YYYY-MM-DD');
END rpt_pac_leads;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_PAYMENT_CONDITION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2
)
IS
/**
 Description - used for report PAC_PAYMENT_CONDITION

 @author JLIU
 @LastUpdate 25 Aug 2009
 @public
 @PARAM  parameter_0  PCO_DESCR: (from)
 @PARAM  parameter_1  PCO_DESCR: (to)
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;

BEGIN


   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR

SELECT
CON.PAC_PAYMENT_CONDITION_ID,
CON.PCO_DESCR,
CON.PCO_DEFAULT,
CON.C_PARTNER_STATUS,
CON.PCO_DEFAULT_PAY,
CON.DIC_CONDITION_TYP_ID,
TXT.PC_APPLTXT_ID,
TXT.C_TEXT_TYPE,
TXT.APH_CODE,
TRA.PC_LANG_ID,
TRA.APT_TEXT
FROM
PAC_PAYMENT_CONDITION CON,
PCS.PC_APPLTXT TXT,
PCS.PC_APPLTXT_TRADUCTION TRA
WHERE
CON.PC_APPLTXT_ID = TXT.PC_APPLTXT_ID(+)
AND TXT.PC_APPLTXT_ID = TRA.PC_APPLTXT_ID(+)
AND TRA.PC_LANG_ID = vpc_lang_id
AND ((parameter_0 IS NULL AND parameter_1 IS NULL)
    OR (parameter_0 IS NOT NULL AND parameter_1 IS NULL AND CON.PCO_DESCR >= parameter_0)
    OR (parameter_1 IS NOT NULL AND parameter_0 IS NULL AND CON.PCO_DESCR <= parameter_1)
    OR (parameter_0 IS NOT NULL AND parameter_1 IS NOT NULL AND CON.PCO_DESCR >= parameter_0 AND CON.PCO_DESCR <= parameter_1))


;
END RPT_PAC_PAYMENT_CONDITION;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_SENDING_CONDITION" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2
)
IS
/**
 Description - used for report PAC_SENDING_CONDITION

 @author PYB
 @LastUpdate 24 NOV 2009
 @public
 @PARAM  parameter_0  PCO_DESCR: (from)
 @PARAM  parameter_1  PCO_DESCR: (to)
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;

BEGIN

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR

SELECT
   per.pac_person_id,
   per.dic_person_politness_id,
   per.per_name,
   per.per_forename,
   per.per_short_name,
   per.per_activity,
   per.per_key1,
   per.per_key2,
   adr.add_principal,
   adr.dic_address_type_id,
   adr.add_address1,
   cty.cntid,
   cty.cntname,
   adr.pac_address_id,
   adr.add_zipcode,
   adr.add_city,
   adr.add_state,
   adr.add_format,
   adr.pc_lang_id,
   SEN.PAC_SENDING_CONDITION_ID,
   SEN.SEN_KEY,
   SEN.C_PARTNER_STATUS,
   SEN.C_CONDITION_MODE
   FROM pac_sending_condition sen,
        pcs.pc_cntry cty,
        pac_address adr,
        pac_person per
   WHERE SEN.PAC_ADDRESS_ID = ADR.PAC_ADDRESS_ID (+)
         AND  adr.pac_person_id = per.pac_person_id (+)
         AND  adr.pc_cntry_id = cty.pc_cntry_id (+)
         AND ((parameter_0 IS NULL AND parameter_1 IS NULL)
              OR (parameter_0 IS NOT NULL AND parameter_1 IS NULL AND SEN.SEN_KEY >= parameter_0)
              OR (parameter_1 IS NOT NULL AND parameter_0 IS NULL AND SEN.SEN_KEY <= parameter_1)
              OR (parameter_0 IS NOT NULL AND parameter_1 IS NOT NULL AND SEN.SEN_KEY >= parameter_0 AND SEN.SEN_KEY <= parameter_1));

END RPT_PAC_SENDING_CONDITION;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_SUPPLIER_FORM" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_3      IN       VARCHAR2,
   parameter_4      IN       VARCHAR2,
   parameter_5      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2
)
IS
/**
 Description - used for the report PAC_SUPPLIER_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_0  Client de : (PER_NAME)
 @PARAM  parameter_1  Client à : (PER_NAME)
 @PARAM  parameter_3  Sélection: 0 = Aucune, 1 = Création, 2 = Modification
 @PARAM  parameter_4  Date du: (Création ou modification) YYYYMMDD
 @PARAM  parameter_5  Date au: (Création ou modification) YYYYMMDD
 @PARAM  parameter_6  Initiales utilisateur: (Création ou modification)
 @PARAM  parameter_8  pac_person_id
*/
   vpc_lang_id             pcs.pc_lang.pc_lang_id%TYPE;
   param_a_datecre_start   DATE;
   param_a_datecre_end     DATE;
   param_a_idcre           VARCHAR2 (5);
   param_a_datemod_start   DATE;
   param_a_datemod_end     DATE;
   param_a_idmod           VARCHAR2 (5);
BEGIN
   CASE parameter_3
      WHEN '0'
      THEN
         NULL;
      WHEN '1'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         ELSE
            param_a_datecre_start := parameter_4;
            param_a_datecre_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idcre := parameter_6;
            END IF;
         END IF;
      WHEN '2'
      THEN
         IF parameter_4 = '0'
         THEN
            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         ELSE
            param_a_datemod_start := parameter_4;
            param_a_datemod_end := parameter_5;

            IF parameter_6 IS NOT NULL
            THEN
               param_a_idmod := parameter_6;
            END IF;
         END IF;
      ELSE
         NULL;
   END CASE;

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT per.pac_person_id, per.per_key1, per.per_key2,
             per.dic_person_politness_id, per.per_name, per.per_forename,
             per.per_short_name, per.per_activity, per.per_comment,
             per.dic_free_code1_id, per.dic_free_code2_id,
             per.dic_free_code3_id, per.dic_free_code4_id,
             per.dic_free_code5_id, per.dic_free_code6_id,
             per.dic_free_code7_id, per.dic_free_code8_id,
             per.dic_free_code9_id, per.dic_free_code10_id,
             sup.pac_supplier_partner_id, sup.c_partner_category,
             acc2.acc_number, sup.pac_payment_condition_id,
             sup.c_partner_status, sup.c_status_settlement,
             sup.dic_type_submission_id, thi.thi_no_tva, thi.thi_no_intra,
             sup.c_remainder_launching, sup.cre_without_remind_date,
             sup.pac_remainder_category_id, sup.dic_type_partner_f_id,
             sup.cre_free_zone1, sup.cre_free_zone2, sup.cre_free_zone3,
             sup.cre_free_zone4, sup.cre_free_zone5, sup.dic_statistic_f1_id,
             sup.dic_statistic_f2_id, sup.dic_statistic_f3_id,
             sup.dic_statistic_f4_id, sup.dic_statistic_f5_id,
             pe1.per_name per_name_1, pe1.per_forename per_forename_1,
             pe2.per_name per_name_2, pe2.per_forename per_forename_2,
             sup.dic_ptc_third_group_id, sup.dic_tariff_id,
             sup.pac_sending_condition_id, sup.pac_calendar_type_id,
             sup.dic_complementary_data_id, sup.dic_pic_group_id,
             sup.c_incoterms, sup.cre_incoterms_place, sup.cre_supply_delay,
             sup.cre_manufacturer, sup.c_delivery_typ, sup.c_type_edi,
             sup.cre_data_export, sup.cre_customer_number, sup.cre_ean_number,
             sup.cre_sup_copy1, sup.cre_sup_copy2, sup.cre_sup_copy3,
             sup.cre_sup_copy4, sup.cre_sup_copy5, sup.cre_sup_copy6,
             sup.cre_sup_copy7, sup.cre_sup_copy8, sup.cre_sup_copy9,
             sup.cre_sup_copy10, thi.dic_third_activity_id,
             thi.dic_third_area_id, thi.dic_juridical_status_id,
             thi.dic_citi_code_id, thi.thi_no_siren, thi.thi_no_siret,
             thi.pac_pac_person_id, sup.dic_priority_payment_id,
             sup.dic_center_payment_id, sup.dic_level_priority_id,
             sup.cre_blocked, sup.pc_appltxt_id, sup.pc__pc_appltxt_id,
             sup.pc_2_pc_appltxt_id, sup.pc_3_pc_appltxt_id,
             sup.pc_4_pc_appltxt_id, sup.cre_day_capacity,
             aux.acs_auxiliary_account_id, aux.acs_prep_coll_id,
             aux.acs_invoice_coll_id, aux.acs_financial_account_id,
             acc2.acc_detail_printing, acc2.acc_blocked, acc2.acc_interest,
             acc2.acc_valid_since, acc2.acc_valid_to,
             des.des_description_summary,
             pcs.pc_functions.getappltxtlabel
                               (sup.pc_appltxt_id,
                                vpc_lang_id
                               ) c_texte_pied_1_description,
             pcs.pc_functions.getappltxtlabel
                           (sup.pc__pc_appltxt_id,
                            vpc_lang_id
                           ) c_texte_pied_2_description,
             pcs.pc_functions.getappltxtlabel
                          (sup.pc_2_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_3_description,
             pcs.pc_functions.getappltxtlabel
                          (sup.pc_3_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_4_description,
             pcs.pc_functions.getappltxtlabel
                          (sup.pc_4_pc_appltxt_id,
                           vpc_lang_id
                          ) c_texte_pied_5_description,
             (SELECT ade1.des_description_summary
                FROM acs_description ade1
               WHERE ade1.acs_sub_set_id = acc1.acs_sub_set_id
                 AND ade1.pc_lang_id = vpc_lang_id) acs_sub_se,
             (SELECT ade2.des_description_summary
                FROM acs_description ade2
               WHERE ade2.acs_payment_method_id =
                                    pay.acs_payment_method_id
                 AND ade2.pc_lang_id = vpc_lang_id) acs_payment_met,
             (SELECT ade3.des_description_summary
                FROM acs_description ade3
               WHERE ade3.acs_vat_det_account_id =
                                   sup.acs_vat_det_account_id
                 AND ade3.pc_lang_id = vpc_lang_id) acs_vat_det_acc,
             (SELECT ade4.des_description_summary
                FROM acs_description ade4
               WHERE ade4.acs_accounting_id =
                                      aux.acs_invoice_coll_id
                 AND ade4.pc_lang_id = vpc_lang_id) acs_invoice_col,
             (SELECT ade5.des_description_summary
                FROM acs_description ade5
               WHERE ade5.acs_account_id = aux.acs_prep_coll_id
                 AND ade5.pc_lang_id = vpc_lang_id) acs_prep_col,
             (SELECT ade6.des_description_summary
                FROM acs_description ade6
               WHERE ade6.acs_account_id =
                               aux.acs_financial_account_id
                 AND ade6.pc_lang_id = vpc_lang_id) acs_financial_acc,
             sup.cre_tariff_by_set, thi.thi_custom_number
        FROM pac_person pe2,
             pac_person pe1,
             pac_third thi,
             acs_fin_acc_s_payment pay,
             acs_account acc1,
             pac_person per,
             pac_supplier_partner sup,
             acs_description des,
             acs_account acc2,
             acs_auxiliary_account aux,
             acs_sub_set sub
       WHERE per.pac_person_id = sup.pac_supplier_partner_id
         AND sup.acs_auxiliary_account_id = acc1.acs_account_id
         AND sup.acs_fin_acc_s_payment_id = pay.acs_fin_acc_s_payment_id(+)
         AND sup.pac_supplier_partner_id = thi.pac_third_id
         AND sup.pac_pac_third_1_id = pe1.pac_person_id(+)
         AND sup.pac_pac_third_2_id = pe2.pac_person_id(+)
         AND sup.acs_auxiliary_account_id = aux.acs_auxiliary_account_id(+)
         AND aux.acs_auxiliary_account_id = acc2.acs_account_id
         AND acc2.acs_account_id = des.acs_account_id
         AND acc2.acs_sub_set_id = sub.acs_sub_set_id
         AND sub.c_type_sub_set = 'AUX'
         AND (   (per.per_name >= parameter_0 AND per.per_name <= parameter_1
                 )
              OR (parameter_0 IS NULL AND parameter_1 IS NULL AND per.pac_person_id = parameter_8)
             )
         AND (   (    sup.a_datecre >= param_a_datecre_start
                  AND sup.a_datecre <= param_a_datecre_end
                 )
              OR param_a_datecre_start IS NULL
             )
         AND (   sup.a_idcre = param_a_idcre
              OR (    param_a_idcre IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '1')
                 )
             )
         AND (   (    sup.a_datemod >= param_a_datemod_start
                  AND sup.a_datemod <= param_a_datemod_end
                 )
              OR param_a_datemod_start IS NULL
             )
         AND (   sup.a_idmod = param_a_idmod
              OR (    param_a_idmod IS NULL
                  AND (parameter_4 <> 0 OR parameter_3 <> '2')
                 )
             )
         AND des.pc_lang_id = vpc_lang_id;
END rpt_pac_supplier_form;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_SUP_PREC_MAT_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_99     IN       NUMBER
)
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
/**
 Description - used for the report PAC_SUPPLIER_FORM
 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_SUPPLIER_PARTNER_ID
*/
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT sup.c_material_mgnt_mode,
             pcs.pc_functions.getdescodedescr
                                         ('C_MATERIAL_MGNT_MODE',
                                          sup.c_material_mgnt_mode,
                                          vpc_lang_id
                                         ) mgnt_mode,
             thi.gco_alloy_id, gal.gal_alloy_ref, gal.gal_alloy_descr,
             thi.dic_basis_material_id,
             (SELECT dit.dit_descr
                FROM dico_description dit
               WHERE dit.dit_table = 'DIC_BASIS_MATERIAL'
                 AND dit.dit_code = thi.dic_basis_material_id
                 AND dit.pc_lang_id = vpc_lang_id) dit_descr,
             thi.tha_managed, thi.tha_number,
             sup.c_third_material_relation_type,
             pcs.pc_functions.getdescodedescr
                ('C_THIRD_MATERIAL_RELATION_TYPE',
                 sup.c_third_material_relation_type,
                 vpc_lang_id
                ) third_material_relation_type,
             sup.c_weighing_mgnt,
             pcs.pc_functions.getdescodedescr
                                          ('C_WEIGHING_MGNT',
                                           sup.c_weighing_mgnt,
                                           vpc_lang_id
                                          ) weighing_mgnt,
             sup.c_adv_material_mode,
             pcs.pc_functions.getdescodedescr
                                  ('C_ADV_MATERIAL_MODE',
                                   sup.c_adv_material_mode,
                                   vpc_lang_id
                                  ) adv_material_mode
        FROM pac_supplier_partner sup, pac_third_alloy thi, gco_alloy gal
       WHERE sup.pac_supplier_partner_id = thi.pac_supplier_partner_id(+)
         AND thi.gco_alloy_id = gal.gco_alloy_id(+)
         AND sup.pac_supplier_partner_id = parameter_99;
END rpt_pac_sup_prec_mat_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_THI_NO_VAT_SUB" (
  arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, procuser_lanid in PCS.PC_LANG.LANID%type
, parameter_0 in varchar2
)
/**
*Description

 Used for subreport RPT_PAC_THI_NO_VAT_SUB, subreport OF ACR_VAT_FORM_DET
*@created JLIU 06.JUNE.2009
*@lastUpdate  VHA 09.04.2013
*@public
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  pcs.PC_I_LIB_SESSION.setlanid(procuser_lanid);
  vpc_lang_id  := pcs.PC_I_LIB_SESSION.getuserlangid;

  open aRefCursor for
    select PER.PER_NAME
         , THI.THI_NO_TVA
      from PAC_PERSON PER
         , PAC_THIRD THI
     where PER.PAC_PERSON_ID = THI.PAC_THIRD_ID
       and PER.PAC_PERSON_ID = to_number(parameter_0);
end RPT_PAC_THI_NO_VAT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PAC_WEB_ACCESS_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_99   IN       NUMBER
)
IS
/**
 Description - used for the report PAC_CUSTOM_FORM, PAC_SUPPLIER_FORM, PAC_ADDRESS_FORM

 @author AWU 1 Dec 2008
 @lastupdate 13 Feb 2009
 @public
 @PARAM  parameter_99  PAC_CUSTOM_PARTNER_ID (PAC_SUPPLIER_PARTNER_ID,PAC_PERSON_ID)
*/
BEGIN
   OPEN arefcursor FOR
      SELECT thi.thi_web_key, web.web_user, web.web_password,
             NVL (web.web_password_modification, 0)
                                                   web_password_modification,
             web.web_days_validity, web.web_access_level, web.web_start_date,
             web.web_end_date, web.web_last_access,
             web.web_last_pw_modification, web.pc_lang_id
        FROM pac_third thi, pac_web_access web
       WHERE thi.pac_third_id = web.pac_third_id
         AND thi.pac_third_id = parameter_99;
END rpt_pac_web_access_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PPS_NOBOND_SUB" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0   in pps_nomenclature.pps_nomenclature_id%type

)
IS
/**Description
* procedure used for report PPS_NOMENCLATURE.RPT
* @author JLIU 15 Jan 2009
* @lastUpdate AWU 5 oct 2010
* @version
* @public
* parameter_2 pps_nomenclature_id
*/

vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id

BEGIN


   PPS_INIT.SETNOMID (parameter_0);
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR

      select PPS.QUERY_ID_SEQ,
             pps.level_nom,
             COM_FUNCTIONS.GETDESCODEDESCR('C_REMPLACEMENT_NOM',bon.C_REMPLACEMENT_NOM ,vpc_lang_id) C_REMPLACEMENT_NOM,
             COM_FUNCTIONS.GETDESCODEDESCR('C_TYPE_COM',BON.C_TYPE_COM ,vpc_lang_id) C_TYPE_COM,
             COM_FUNCTIONS.GETDESCODEDESCR('C_DISCHARGE_COM',bon.C_DISCHARGE_COM ,vpc_lang_id) C_DISCHARGE_COM,
             COM_FUNCTIONS.GETDESCODEDESCR('C_KIND_COM',bon.C_KIND_COM ,vpc_lang_id) C_KIND_COM,
             bon.com_val,
             bon.com_substitut,
             bon.com_pos,
             bon.com_util_coeff,
             BON.COM_REF_QTY,
             bon.com_pdir_coeff,
             bon.com_rec_pcent,
             bon.com_interval,
             bon.com_beg_valid,
             bon.com_end_valid,
             bon.com_remplacement,
             GOO.GOO_MAJOR_REFERENCE,
             GOO.GOO_SECONDARY_REFERENCE,
             gco_functions.getdescription (goo.gco_good_id,
                                           procuser_lanid,
                                           1,
                                           '01'
                                          ) descr
      from
      v_pps_nomenclature_interro pps,
      gco_good goo,
      pps_nom_bond bon,
      pps_range_operation ope
      where
          PPS.GCO_GOOD_ID = GOO.GCO_GOOD_ID
      AND bon.pps_range_operation_id = ope.pps_range_operation_id(+)
      and PPS.PPS_NOM_BOND_ID = BON.PPS_NOM_BOND_ID
      order by query_id_seq;

--      SELECT dbt.wdt_structure, dbt.wdt_level, dbt.wdt_order,
--             bon.c_remplacement_nom, bon.c_type_com, bon.c_discharge_com,
--             bon.c_kind_com, bon.com_val, bon.com_substitut, bon.com_pos,
--             bon.com_util_coeff, bon.com_pdir_coeff, bon.com_rec_pcent,
--             bon.com_interval, bon.com_beg_valid, bon.com_end_valid,
--             bon.com_remplacement, des.goo_major_reference,
--             des.goo_secondary_reference, des.c_description_type,
--             des.pc_lang_id
--        FROM pcs.pc_work_dbtree dbt,
--             pps_nom_bond bon,
--             pps_range_operation ope,
--             v_good_description des
--       WHERE dbt.wdt_id_num = bon.pps_nom_bond_id
--         AND bon.pps_range_operation_id = ope.pps_range_operation_id(+)
--         AND bon.gco_good_id = des.gco_good_id
--         AND des.pc_lang_id = procuser_lanid --TO_NUMBER (lang_id)
--         AND dbt.wdt_structure = TO_NUMBER (parameter_0)
--         AND dbt.wdt_level >= 1
--         AND dbt.wdt_level <= TO_NUMBER (parameter_1)
--         AND des.c_description_type = '01';
END rpt_pps_nobond_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PPS_NOMENCLATURE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0   in pps_nomenclature.pps_nomenclature_id%type,
   parameter_1   IN       VARCHAR2
   )
IS
/**Description - used for report PPS_NOMENCLATURE
* @author JLIU 15 Jan 2009
* @lastUpdate 5 oct 2010
* @public
* Parameter_2   pps_nomenclature_id
*/

   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;              --user language id

begin

   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

open arefcursor for
     select goo.goo_major_reference,
            nom.nom_text,
            COM_FUNCTIONS.GETDESCODEDESCR('C_TYPE_NOM',nom.C_TYPE_NOM ,vpc_lang_id) C_TYPE_NOM,
            nom.nom_version,
            nom.nom_default,
            nom.a_datecre,
            nom.a_datemod,
            nom.nom_ref_qty,
            goo.goo_secondary_reference,
            gco_functions.getdescription (goo.gco_good_id,
                                           procuser_lanid,
                                           1,
                                           '01'
                                          ) descr
       from pps_nomenclature nom
           ,gco_good goo
      where nom.gco_good_id = goo.gco_good_id
            and nom.pps_Nomenclature_id = parameter_0;


end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PPS_NOMENCLATURE_VAL" (
  AREFCURSOR      in out CRYSTAL_CURSOR_TYPES.DUALCURSORTYP
, PROCUSER_LANID  in     PCS.PC_LANG.LANID%type
, NOMENCLATURE_ID in     PPS_NOMENCLATURE.PPS_NOMENCLATURE_ID%type
, PARAMETER_0     in     varchar2
, PARAMETER_1     in     varchar2
, PARAMETER_2     in     varchar2
)
is
/**Description - used for report PPS_NOMENCLATURE_VAL
* @author VHA 30.08.2011
* @lastUpdate VHA 11.09.2012
* @public
* PARAMETER_0:  Mode de valorisation (0:Mode de gestion / 1:PRCS / 2:PRC / 3:PRF / 4:Dernier Prix)
* PARAMETER_1:  Include higher level (0:No / 1:Yes)
* PARAMETER_2:  Purchased product details  (0:No / 1:Yes)
*/
  VPC_LANG_ID PCS.PC_LANG.PC_LANG_ID%type;   --user language id
begin
  PCS.PC_I_LIB_SESSION.SETLANID(PROCUSER_LANID);

  open AREFCURSOR for
    select     GOO0.GOO_MAJOR_REFERENCE MAJOR_0
             , GOO0.NOM_REF_QTY MAJOR_REF_QTY
             , HGOO.GOO_MAJOR_REFERENCE HEAD_SORT
             , HPRO.C_SUPPLY_MODE HEAD_SUPPLY_MODE
             , (select DES_SHORT_DESCRIPTION
                  from GCO_DESCRIPTION DES
                     , PCS.PC_LANG LAN
                 where DES.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                   and DES.PC_LANG_ID = LAN.PC_LANG_ID
                   and LAN.LANID = PROCUSER_LANID
                   and DES.C_DESCRIPTION_TYPE = '01') HGOO_DESCRIPTION
             , (select     nvl(sum(NBO2.COM_UTIL_COEFF), 1)
                      from PPS_NOM_BOND NBO2
                     where NBO2.GCO_GOOD_ID =
                             (select NOM.GCO_GOOD_ID
                                from PPS_NOM_BOND COM
                                   , PPS_NOMENCLATURE NOM
                               where COM.PPS_NOMENCLATURE_ID = NOM.PPS_NOMENCLATURE_ID
                                 and COM.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
                                 and COM.PPS_NOMENCLATURE_ID in(select max(COM2.PPS_PPS_NOMENCLATURE_ID)
                                                                      from PPS_NOM_BOND COM2
                                                                start with COM2.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID
                                                                connect by prior COM2.PPS_PPS_NOMENCLATURE_ID = COM2.PPS_NOMENCLATURE_ID) )
                start with NBO2.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID
                connect by prior NBO2.PPS_PPS_NOMENCLATURE_ID = NBO2.PPS_NOMENCLATURE_ID) PREV_HEAD_COEFFICIENT
             , (select     sum(NBO.COM_UTIL_COEFF)
                      from PPS_NOM_BOND NBO
                     where NBO.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                start with NBO.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID
                connect by prior NBO.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID) HEAD_COEFFICIENT
             , H_DESCRIPTION.DES_SHORT_DESCRIPTION H_DES_SHORT_DESCRIPTION
             , H_DESCRIPTION.DES_LONG_DESCRIPTION H_DES_LONG_DESCRIPTION
             , level
             , GOO.GOO_MAJOR_REFERENCE MAJOR
             , nvl(STMQTY.AVAILABLE_QUANTITY, 0) AVAILABLE_QUANTITY
             , D_DESCRIPTION.DES_SHORT_DESCRIPTION DES_SHORT_DESCRIPTION
             , D_DESCRIPTION.DES_LONG_DESCRIPTION DES_LONG_DESCRIPTION
             , NBO.COM_UTIL_COEFF
             , NBO.COM_PDIR_COEFF
             , NBO.COM_REC_PCENT
             , NBO.COM_POS
             , NBO.COM_REMPLACEMENT
             , NBO.COM_INTERVAL
             , NBO.COM_SEQ
             , NOM.NOM_VERSION
             , NOM.C_TYPE_NOM
             , NOM.NOM_REF_QTY
             , decode(PRO.C_SUPPLY_MODE, 2, 0, GCO_FUNCTIONS.GETCOSTPRICEWITHMANAGEMENTMODE(NBO.GCO_GOOD_ID, PARAMETER_0) ) PRF
             , PRO.C_SUPPLY_MODE
          from PPS_NOM_BOND NBO
             , GCO_GOOD GOO
             , GCO_PRODUCT PRO
             , GCO_GOOD HGOO
             , GCO_PRODUCT HPRO
             , PPS_NOMENCLATURE NOM
             , (select GCO_GOOD_ID
                     , DES.DES_SHORT_DESCRIPTION
                     , DES.DES_LONG_DESCRIPTION
                  from GCO_DESCRIPTION DES
                     , PCS.PC_LANG LAN
                 where DES.PC_LANG_ID = LAN.PC_LANG_ID
                   and LAN.LANID = PROCUSER_LANID
                   and DES.C_DESCRIPTION_TYPE = '01') D_DESCRIPTION
             , (select HGOO.GOO_MAJOR_REFERENCE
                     , DESCRIPTION.DES_SHORT_DESCRIPTION
                     , DESCRIPTION.DES_LONG_DESCRIPTION
                  from GCO_GOOD HGOO
                     , PPS_NOMENCLATURE NOM
                     , (select GCO_GOOD_ID
                             , DES.DES_SHORT_DESCRIPTION
                             , DES.DES_LONG_DESCRIPTION
                          from GCO_DESCRIPTION DES
                             , PCS.PC_LANG LAN
                         where DES.PC_LANG_ID = LAN.PC_LANG_ID
                           and LAN.LANID = PROCUSER_LANID
                           and DES.C_DESCRIPTION_TYPE = '01') DESCRIPTION
                 where NOM.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
                   and DESCRIPTION.GCO_GOOD_ID(+) = HGOO.GCO_GOOD_ID
                   and NOM.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID) H_DESCRIPTION
             , (select   STM.GCO_GOOD_ID
                       , sum(STM.SPO_AVAILABLE_QUANTITY) AVAILABLE_QUANTITY
                    from STM_STOCK_POSITION STM
                group by STM.GCO_GOOD_ID) STMQTY
             , (select GOO1.GOO_MAJOR_REFERENCE
                     , NOM1.NOM_REF_QTY
                  from PPS_NOMENCLATURE NOM1
                     , GCO_GOOD GOO1
                 where NOM1.GCO_GOOD_ID = GOO1.GCO_GOOD_ID
                   and NOM1.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID) GOO0
         where NOM.PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
           and GOO.GCO_GOOD_ID = NBO.GCO_GOOD_ID
           and GOO.GCO_GOOD_ID = PRO.GCO_GOOD_ID
           and NOM.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
           and HPRO.GCO_GOOD_ID = HGOO.GCO_GOOD_ID
           and D_DESCRIPTION.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
           and STMQTY.GCO_GOOD_ID(+) = GOO.GCO_GOOD_ID
    start with NBO.PPS_NOMENCLATURE_ID = NOMENCLATURE_ID
    connect by prior NBO.PPS_PPS_NOMENCLATURE_ID = NBO.PPS_NOMENCLATURE_ID
           and ((PARAMETER_2 = '0' and HPRO.C_SUPPLY_MODE <> '1')  or (PARAMETER_2 = '1'))
      order siblings by NBO.COM_SEQ;
end RPT_PPS_NOMENCLATURE_VAL;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PPS_NOM_BOND_DELTA" (aRefCursor in out CRYSTAL_CURSOR_TYPES.DualCursorTyp,
                                                    procParam_0 in number,
                                                    procParam_1 in number,
                                                    procParam_2 in number,
                                                    procUser_lanid in varchar2,
                                                    procCompany_lanid in varchar2,
                                                    procCompany_name in varchar2,
                                                    procCompany_owner in varchar2,
                                                    procPc_conli_id in varchar2,
                                                    procPc_object_id in varchar2,
                                                    procPc_user_id in varchar2,
                                                    procPc_comp_id in varchar2
                                                 )
                                                 is

/*
 * Stored procedure used for the report PPS_NOM_BOND_DELTA
 * Replace the procedure PPS_NOM_BOND_DELTA_RPT
*/

/* variables locales propres à la procédure */

begin

/* ============================================================================

   Paramètres :

   procParam_0        nomenclature source
   procParam_1        nomenclature cible
   procParam_2        quantité référence

============================================================================ */
if procPc_comp_id is not null then
   pcs.PC_I_LIB_SESSION.SetCompanyId (to_number(procPc_comp_id));
end if;

if procPc_user_id is not null then
   pcs.PC_I_LIB_SESSION.SetUserId (to_number(procPc_user_id));
end if;

if procPc_object_id is not null then
   pcs.PC_I_LIB_SESSION.SetObjectId (to_number(procPc_object_id));
end if;

if procUser_lanid is not null then
   pcs.PC_I_LIB_SESSION.setLanId (procUser_lanid);
end if;

pps_nom_bond_fct.generate_bond_delta (procParam_0, procParam_1, procParam_2);

/* ============================================================================

   Remplacer "Select * from dual" par l'ordre SQL approprié.

============================================================================ */

open aRefCursor
 for
     select case
             when delta_nom.nbd_util_coeff > 0 then 'ADD' else 'DEL'
            end delta_type,
            goo1.goo_major_reference src_product_major_ref,
            pps1.nom_version src_nom_version,
            pcs.pc_functions.GetDescodeDescr ('C_TYPE_NOM', pps1.c_type_nom, pcs.PC_I_LIB_SESSION.GetUserLangId) src_type_nom,
            goo1.goo_secondary_reference src_product_secondary_ref,
            (select des.des_short_description
               from gco_description des
              where goo1.gco_good_id = des.gco_good_id (+)
                and des.pc_lang_id (+) = pcs.PC_I_LIB_SESSION.GetUserLangId
                and des.c_description_type = '01') src_product_short_description,
            goo2.goo_major_reference tgt_product_major_ref,
            pps2.nom_version tgt_nom_version,
            pcs.pc_functions.GetDescodeDescr ('C_TYPE_NOM', pps2.c_type_nom, pcs.PC_I_LIB_SESSION.GetUserLangId) tgt_type_nom,
            goo2.goo_secondary_reference tgt_product_secondary_ref,
            (select des.des_short_description
               from gco_description des
              where goo2.gco_good_id = des.gco_good_id (+)
                and des.pc_lang_id (+) = pcs.PC_I_LIB_SESSION.GetUserLangId
                and des.c_description_type = '01') tgt_product_short_description,
            delta_nom.ref_qty,
            delta_nom.goo_major_reference cpt_major_ref,
            pps3.nom_version cpt_nom_version,
            delta_nom.goo_secondary_reference cpt_secondary_ref,
            delta_nom.des_short_description cpt_short_description,
            delta_nom.nbd_util_coeff cpt_delta_coeff
       from pps_nomenclature pps1,
            pps_nomenclature pps2,
            pps_nomenclature pps3,
            gco_good goo1,
            gco_good goo2,
            (select procParam_0 source_nomenclature_id,
                    procParam_1 target_nomenclature_id,
                    procParam_2 ref_qty,
                    nbd.nbd_util_coeff ,
                    goo_cpt.goo_major_reference,
                    goo_cpt.goo_secondary_reference,
                    nbd.pps_pps_nomenclature_id,
                    (select des.des_short_description
                       from gco_description des
                      where goo_cpt.gco_good_id = des.gco_good_id (+)
                        and des.pc_lang_id (+) = pcs.PC_I_LIB_SESSION.GetUserLangId
                        and des.c_description_type = '01') des_short_description
               from pps_nom_bond_delta nbd,
                    gco_good goo_cpt
              where nbd.gco_good_id = goo_cpt.gco_good_id) delta_nom
      where delta_nom.source_nomenclature_id = pps1.pps_nomenclature_id
        and pps1.gco_good_id = goo1.gco_good_id
        and delta_nom.target_nomenclature_id = pps2.pps_nomenclature_id
        and pps2.gco_good_id = goo2.gco_good_id
        and delta_nom.pps_pps_nomenclature_id = pps3.pps_nomenclature_id (+);

end RPT_PPS_NOM_BOND_DELTA;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PTC_TARIFF_BUY_LANDSCAPE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   procparam_0       IN      GCO_GOOD.GOO_MAJOR_REFERENCE%TYPE,
   procparam_1       IN      PTC_TARIFF.DIC_TARIFF_ID%TYPE,
   procparam_2       IN      PAC_PERSON.PER_NAME%TYPE
)
/*
* Description
* STORED PROCEDURE USED FOR REPORT PTC_TARIFF_BUY_LANDSCAPE
* @AUTHOR JJI
* @Creation DATE May.20 2010 JJI
* @LASTUPDATE
* @PUBLIC
*  procparam_0      GOO_MAJOR_REFERENCE
*  procparam_1      DIC_TARIFF_ID
*  procparam_2      NOM DU FOURNISSEUR
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   goo.gco_good_id, goo.goo_major_reference,
               goo.goo_secondary_reference, per.pac_person_id, per.per_name,
               ptc.ptc_tariff_id,
               (SELECT   COUNT
                            (pab_grp.ptc_tariff_table_id
                            )
                    FROM ptc_tariff_table pab_grp
                   WHERE pab_grp.ptc_tariff_id = ptc.ptc_tariff_id
                GROUP BY pab_grp.ptc_tariff_id) price_table_record_number,
               ptc.dic_tariff_id, ptc.c_tariff_type,
               ptc.c_tariffication_mode, ptc.trf_starting_date,
               ptc.trf_ending_date,
               NVL (TO_CHAR (ptc.trf_starting_date, 'yyyyMMdd'),
                    '99999999'
                   ) to_nume_trf_start_date,
               ptc.trf_descr, ptc.trf_unit, pab.tta_from_quantity,
               pab.tta_to_quantity, pab.tta_price, acu.currency,
               des.dit_table, des.dit_descr, lan_des.lanid
          FROM ptc_tariff ptc,
               ptc_tariff_table pab,
               v_acs_financial_currency acu,
               gco_good goo,
               pac_person per,
               dico_description des,
               pcs.pc_lang lan_des
         WHERE goo.gco_good_id = ptc.gco_good_id
           AND ptc.c_tariff_type = 'A_PAYER'
           AND goo.goo_major_reference LIKE LIKE_PARAM_FS (procparam_0)
           AND nvl(per.per_name,'%') like like_param_fs (procparam_2)
           AND PTC.DIC_TARIFF_ID like like_param_fs (procparam_1)
           AND ptc.ptc_tariff_id = pab.ptc_tariff_id
           AND ptc.pac_third_id = per.pac_person_id(+)
           AND ptc.acs_financial_currency_id = acu.acs_financial_currency_id
           AND (ptc.dic_tariff_id IS NULL OR des.dit_table = 'DIC_TARIFF')
           AND ptc.dic_tariff_id = des.dit_code(+)
           AND des.pc_lang_id = lan_des.pc_lang_id(+)
           AND (des.pc_lang_id = vpc_lang_id OR des.pc_lang_id IS NULL)
      ORDER BY goo.goo_major_reference,
               ptc.dic_tariff_id ASC,
               ptc.trf_descr,
               TO_NUMBER (NVL (TO_CHAR (ptc.trf_starting_date, 'yyyyMMdd'),
                               '00000000'
                              )
                         ) DESC,
               ptc.ptc_tariff_id ASC;
END rpt_ptc_tariff_buy_landscape;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_PTC_TARIFF_SELL_LANDSCAPE" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   procparam_0       IN      GCO_GOOD.GOO_MAJOR_REFERENCE%TYPE,
   procparam_1       IN      PTC_TARIFF.DIC_TARIFF_ID%TYPE,
   procparam_2       IN      PAC_PERSON.PER_NAME%TYPE
)
/*
* Description
* STORED PROCEDURE USED FOR REPORT PTC_TARIFF_BUY_LANDSCAPE
* @AUTHOR JJI
* @Creation DATE May.20 2010 JJI
* @LASTUPDATE oct 2010
* @PUBLIC
*  procparam_0      GOO_MAJOR_REFERENCE
*  procparam_1      DIC_TARIFF_ID
*  procparam_2      NOM DU FOURNISSEUR
*/
IS
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   goo.gco_good_id, goo.goo_major_reference,
               goo.goo_secondary_reference, per.pac_person_id, per.per_name,
               ptc.ptc_tariff_id,
               (SELECT   COUNT
                            (pab_grp.ptc_tariff_table_id
                            )
                    FROM ptc_tariff_table pab_grp
                   WHERE pab_grp.ptc_tariff_id = ptc.ptc_tariff_id
                GROUP BY pab_grp.ptc_tariff_id) price_table_record_number,
               ptc.dic_tariff_id, ptc.c_tariff_type,
               ptc.c_tariffication_mode, ptc.trf_starting_date,
               ptc.trf_ending_date,
               NVL (TO_CHAR (ptc.trf_starting_date, 'yyyyMMdd'),
                    '99999999'
                   ) to_nume_trf_start_date,
               ptc.trf_descr, ptc.trf_unit, pab.tta_from_quantity,
               pab.tta_to_quantity, pab.tta_price, acu.currency,
               des.dit_table, des.dit_descr, lan_des.lanid
          FROM ptc_tariff ptc,
               ptc_tariff_table pab,
               v_acs_financial_currency acu,
               gco_good goo,
               pac_person per,
               dico_description des,
               pcs.pc_lang lan_des
         WHERE goo.gco_good_id = ptc.gco_good_id
           AND ptc.c_tariff_type = 'A_FACTURER'
           AND ptc.ptc_tariff_id = pab.ptc_tariff_id
           AND goo.goo_major_reference LIKE LIKE_PARAM_FS (procparam_0)
           AND nvl(per.per_name,'%') like like_param_fs (procparam_2)
           AND PTC.DIC_TARIFF_ID like like_param_fs (procparam_1)
           AND ptc.pac_third_id = per.pac_person_id(+)
           AND ptc.acs_financial_currency_id = acu.acs_financial_currency_id
           AND (ptc.dic_tariff_id IS NULL OR des.dit_table = 'DIC_TARIFF')
           AND ptc.dic_tariff_id = des.dit_code(+)
           AND des.pc_lang_id = lan_des.pc_lang_id(+)
           AND (des.pc_lang_id = vpc_lang_id OR des.pc_lang_id IS NULL)
      ORDER BY goo.goo_major_reference,
               ptc.dic_tariff_id ASC,
               ptc.trf_descr,
               TO_NUMBER (NVL (TO_CHAR (ptc.trf_starting_date, 'yyyyMMdd'),
                               '00000000'
                              )
                         ) DESC,
               ptc.ptc_tariff_id ASC;
END rpt_ptc_tariff_sell_landscape;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_SQM_AUDIT" (
   arefcursor    IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0   IN       NUMBER
)
IS
/**Description - used for report SQM_AUDIT

* @author AWU 13 MAY 2009
* @lastUpdate
* @public
* @PARAM PARAMETER_0 SQM_AUDIT_ID
*/
BEGIN
   OPEN arefcursor FOR
      SELECT aum.aum_description, per.per_name, aud.aud_result, aud.aud_date,
             aud.aud_comment, ade.sqm_audit_chapter_id, ach.ach_title,
             ade.sqm_audit_question_id, aqu.aqu_description,
             ade.sqm_audit_id,
             (SELECT NVL (ade1.ade_points, 0)
                FROM sqm_audit_detail ade1
               WHERE ade1.sqm_audit_id = ade.sqm_audit_id
                 AND ade1.sqm_audit_chapter_id = ade.sqm_audit_chapter_id
                 AND ade1.sqm_audit_question_id IS NULL) chapter_ade_point,
             (SELECT ade1.ade_comment
                FROM sqm_audit_detail ade1
               WHERE ade1.sqm_audit_id = ade.sqm_audit_id
                 AND ade1.sqm_audit_chapter_id = ade.sqm_audit_chapter_id
                 AND ade1.sqm_audit_question_id IS NULL) chapter_ade_comment,
             NVL (TO_CHAR (ade.ade_answer_number),
                  NVL (ade.ade_answer_text,
                       NVL (axv.axv_description, axv.axv_value)
                      )
                 ) response,
             NVL (ade.ade_points, 0) ade_points, ade.ade_comment,
             aqu.aqu_seq, csm.csm_sequence, ade.sqm_axis_value_id
        FROM sqm_audit aud,
             sqm_audit_detail ade,
             sqm_audit_model aum,
             sqm_audit_chapter ach,
             sqm_audit_question aqu,
             sqm_axis sax,
             sqm_axis_value axv,
             sqm_audit_chap_s_model csm,
             pac_person per
       WHERE aud.sqm_audit_id = ade.sqm_audit_id(+)
         AND aud.sqm_audit_model_id = aum.sqm_audit_model_id(+)
         AND ade.sqm_audit_chapter_id = ach.sqm_audit_chapter_id(+)
         AND ade.sqm_audit_question_id = aqu.sqm_audit_question_id(+)
         AND aqu.sqm_axis_id = sax.sqm_axis_id(+)
         AND ade.sqm_axis_value_id = axv.sqm_axis_value_id(+)
         AND aud.pac_third_id = per.pac_person_id(+)
         AND ade.ade_mcq_selected = 1
         AND aud.sqm_audit_model_id = csm.sqm_audit_model_id
         AND ade.sqm_audit_chapter_id = csm.sqm_audit_chapter_id
         AND aud.sqm_audit_id = parameter_0;
END rpt_sqm_audit;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_INVENTORY_PRINT_IJO" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       stm_inventory_print.ipt_print_session%TYPE
)
IS
/**
* Description Used for report STM_INVENTORY_JOB_DETAILED
* @created AWU Dec.2008
* @lastUpdate MZHU 22 Feb 2009
* @param PARAMETER_0: Print session
* */
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT inv.inv_description, ili.ili_description,
             goo.goo_major_reference, goo.goo_number_of_decimal,
             ijo.ijo_job_description, ijo.stm_inventory_job_id,
             ijd.ijd_characterization_value_1,
             ijd.ijd_characterization_value_2,
             ijd.ijd_characterization_value_3,
             ijd.ijd_characterization_value_4,
             ijd.ijd_characterization_value_5, ijd.ijd_quantity,
             ijd.ijd_value, ijd.ijd_unit_price,
             gco_functions.getdescription (goo.gco_good_id,
                                           procuser_lanid,
                                           1,
                                           '01'
                                          ) gco_good_descr
        FROM stm_inventory_task inv,
             stm_inventory_print ipt,
             stm_inventory_list ili,
             stm_inventory_job ijo,
             stm_inventory_job_detail ijd,
             stm_stock sto,
             stm_location loc,
             stm_period per,
             stm_exercise exe,
             gco_good goo,
             gco_good_calc_data gcd
       WHERE inv.stm_inventory_task_id = ijo.stm_inventory_task_id
         AND inv.stm_period_id = per.stm_period_id
         AND per.stm_exercise_id = exe.stm_exercise_id
         AND ipt.stm_inventory_job_id = ijo.stm_inventory_job_id
         AND ijo.stm_inventory_job_id = ijd.stm_inventory_job_id
         AND ijo.stm_inventory_list_id = ili.stm_inventory_list_id
         AND ijd.stm_stock_id = sto.stm_stock_id
         AND ijd.gco_good_id = goo.gco_good_id
         AND ijd.stm_location_id = loc.stm_location_id
         AND goo.gco_good_id = gcd.gco_good_id
         AND ipt.ipt_print_session = parameter_0;
END rpt_stm_inventory_print_ijo;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_INVENTORY_PRINT_ILP" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       stm_inventory_print.ipt_print_session%TYPE
)
IS
/**
* Description Used for report STM_INVENTORY_LIST_COUNTING ,STM_INVENTORY_LIST_WITH_VALUE

* @created AWU Dec.2008
* @lastUpdate mzhu 20 Feb 2009
* @param PARAMETER_0: Print session
* */
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT inv.inv_description, ili.ili_description, ili.ili_remark,
             goo.goo_major_reference, goo.goo_number_of_decimal,
             sto.sto_description, loc.loc_description,
             ilp.ilp_characterization_value_1,
             ilp.ilp_characterization_value_2,
             ilp.ilp_characterization_value_3,
             ilp.ilp_characterization_value_4,
             ilp.ilp_characterization_value_5,
             gco_functions.getdescription (goo.gco_good_id,
                                           procuser_lanid,
                                           1,
                                           '01'
                                          ) descr,
             gco_functions.getcharacdescr4prnt
                              (ilp.gco_characterization_id,
                               procuser_lanid
                              ) v_charpact_desc_1,
             gco_functions.getcharacdescr4prnt
                          (ilp.gco_gco_characterization_id,
                           procuser_lanid
                          ) v_charpact_desc_2,
             gco_functions.getcharacdescr4prnt
                         (ilp.gco2_gco_characterization_id,
                          procuser_lanid
                         ) v_charpact_desc_3,
             gco_functions.getcharacdescr4prnt
                         (ilp.gco3_gco_characterization_id,
                          procuser_lanid
                         ) v_charpact_desc_4,
             ilp.ilp_inventory_value, ilp.ilp_inventory_quantity,
             ilp.ilp_system_value, ilp.ilp_system_quantity
        FROM stm_inventory_task inv,
             stm_inventory_print ipt,
             stm_inventory_list ili,
             stm_inventory_list_pos ilp,
             stm_stock sto,
             stm_location loc,
             stm_period per,
             stm_exercise exe,
             gco_good goo,
             gco_good_calc_data gcd
       WHERE inv.stm_inventory_task_id = ilp.stm_inventory_task_id
         AND inv.stm_period_id = per.stm_period_id
         AND per.stm_exercise_id = exe.stm_exercise_id
         AND ipt.stm_inventory_list_id = ili.stm_inventory_list_id
         AND ili.stm_inventory_list_id = ilp.stm_inventory_list_id
         AND ilp.stm_stock_id = sto.stm_stock_id
         AND ilp.gco_good_id = goo.gco_good_id
         AND ilp.stm_location_id = loc.stm_location_id
         AND goo.gco_good_id = gcd.gco_good_id
         AND ipt.ipt_print_session = parameter_0;
END rpt_stm_inventory_print_ilp;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_INV_PRINT_CUM_SUB" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE,
   parameter_0      IN       stm_inventory_print.ipt_print_session%TYPE
)
IS
/**
* Description Used for report STM_INVENTORY_LIST_WITH_VALUE
* @created AWU Dec.2008
* @lastUpdate mzhu 20 Feb 2009
* @param PARAMETER_0: Print session
* */
   vpc_lang_id   pcs.pc_lang.pc_lang_id%TYPE;
BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   OPEN arefcursor FOR
      SELECT   ipt.ipt_print_session, inv.inv_description,
               ili.ili_description, sto.sto_description, loc.loc_description,
               SUM (ilp.ilp_system_value) ilp_system_value_cum,
               SUM (ilp.ilp_system_quantity) ilp_system_quantity_cum,
               SUM (ilp.ilp_inventory_value) ilp_inventory_value_cum,
               SUM (ilp.ilp_inventory_quantity) ilp_inventory_quantity_cum,
               SUM (ilp.ilp_inventory_value - ilp.ilp_system_value
                   ) ilp_inventory_diff_value_cum,
               SUM (ilp.ilp_inventory_quantity - ilp.ilp_system_quantity
                   ) ilp_inventory_diff_qty_cum
          FROM stm_inventory_task inv,
               stm_inventory_print ipt,
               stm_inventory_list ili,
               stm_inventory_list_pos ilp,
               stm_stock sto,
               stm_location loc
         WHERE inv.stm_inventory_task_id = ilp.stm_inventory_task_id
           AND ipt.stm_inventory_list_id = ili.stm_inventory_list_id
           AND ili.stm_inventory_list_id = ilp.stm_inventory_list_id
           AND ilp.stm_stock_id = sto.stm_stock_id
           AND ilp.stm_location_id = loc.stm_location_id
           AND ipt.ipt_print_session = parameter_0
      GROUP BY ipt.ipt_print_session,
               inv.stm_inventory_task_id,
               inv.inv_description,
               ili.stm_inventory_list_id,
               ili.ili_description,
               sto.stm_stock_id,
               sto.sto_description,
               loc.stm_location_id,
               loc.loc_description;
END rpt_stm_inv_print_cum_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_MAGLIST_SUB" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_14   IN       NUMBER
)
IS
/**
*Description USED FOR SUB-REPORT MAGLIST.RPT OF STM_STOCK_EFFECTIF_VAL/STM_STOCK_EFFECTIF_VALORISED_GAMME/STM_QTY_END_OF_MONTH_WITH_GROUP
* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 21 Feb 2009
* @LASTUPDATE 24 jan 2010
* @VERSION
* @PUBLIC
* @PARAM PARAMETER_14 COM_list : job_id
*/
BEGIN
   OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, loc.loc_description,
             sto.sto_description
        FROM stm_location loc, stm_stock sto,  com_list c_loc
       WHERE sto.stm_stock_id = loc.stm_stock_id
         AND loc.stm_location_id = c_loc.lis_id_1
         AND c_loc.lis_job_id = parameter_14
         AND c_loc.lis_code = 'STM_LOCATION_ID';
END rpt_stm_maglist_sub;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_QTY_EOM_WITH_GRP" (
   arefcursor       IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       NUMBER,
   parameter_13     IN       NUMBER,
   parameter_14     IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/**
*Description USED FOR REPORT STM_QTY_END_OF_MONTH_WITH_GROUP.RPT
* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 21 Feb 2009
* @LASTUPDATE MZH 16 Apr 2010
* @PUBLIC
* @PARAM PARAMETER_0     Mode de Prix  (0: Mode de gestion, 1: PRCS, 2 PRC, 3 PRF, 4 prix dernier mouvement)
* @PARAM PARAMETER_1     Out Category (0: no 1: yes)
* @PARAM PARAMETER_6     Name of selected category ( 0:All)
* @PARAM PARAMETER_7     Date value (yyyymmdd)
* @PARAM PARAMETER_8     Short description (0:No - 1:Yes)
* @PARAM PARAMETER_9     Long description (0:No - 1:Yes)
* @PARAM PARAMETER_10    Free description (0:No - 1:Yes)
* @PARAM PARAMETER_11    Product Selection (1:All)
* @PARAM PARAMETER_12    Gco_good_id (com_list if PARAMETER_11 =0)
* @PARAM PARAMETER_13    Stm_Stock_id (com_list)
* @PARAM PARAMETER_14    Stm_Location_id (com_list)
* @PARAM procuser_lanid  User language
*/
   vpc_lang_id               pcs.pc_lang.pc_lang_id%TYPE;
   p_category_wording        VARCHAR2 (200 CHAR);
   t_date                    DATE;
   vlis_job_id               NUMBER(12);

BEGIN
   pcs.PC_I_LIB_SESSION.setlanid (procuser_lanid);
   vpc_lang_id := pcs.PC_I_LIB_SESSION.getuserlangid;

   IF parameter_6 <> '0'
   THEN
      p_category_wording := parameter_6;
   ELSE
      p_category_wording := '*';
   END IF;

   t_date := TO_DATE (parameter_7, 'YYYYMMDD');



   SELECT
   INIT_ID_SEQ.NEXTVAL INTO vlis_job_id
   FROM
   DUAL;

   RPT_FUNCTIONS.INSERTSELECTEDSTOCKATDATE(parameter_7,parameter_14,parameter_11,parameter_12,vlis_job_id);

IF PARAMETER_11 = '1' THEN -- ALL PRODUCTS
   OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, fam.dic_good_family_wording,
             grp.dic_good_group_wording, lne.dic_good_line_wording,
             MOD.dic_good_model_wording, goo1.gco_good_id, goo1.c_good_status,
             goo1.c_management_mode, goo1.goo_major_reference,
             goo1.DIC_UNIT_OF_MEASURE_ID,
             goo1.goo_number_of_decimal, goo1.gco_good_category_wording,
             goo1.qty_lig,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo1.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  v_descr,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo1.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  v_descr_long,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo1.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  v_descr_free,
             gco_functions.getcostpricewithmanagementmode
                              (goo1.gco_good_id,
                               NULL,
                               DECODE (parameter_0,
                                       '0', goo1.c_management_mode,
                                       parameter_0
                                      ),
                               t_date
                              ) v_prix_produit
        FROM (select goo.gco_good_id,
                     goo.dic_good_line_id,
                     goo.dic_good_family_id,
                     goo.dic_good_model_id,
                     goo.dic_good_group_id,
                     goo.goo_number_of_decimal,
                     DIC_UNIT_OF_MEASURE_ID,
                     goo.c_management_mode,
                     goo.goo_major_reference,
                     goo.c_good_status,
                     cat.gco_good_category_wording,
                     LIS.LIS_FREE_NUMBER_1 qty_lig
             FROM gco_good goo, gco_good_category cat, COM_LIST LIS
             where goo.gco_good_category_id = cat.gco_good_category_id
                   AND cat.gco_good_category_wording LIKE  like_param (p_category_wording)
                   and GOO.GCO_GOOD_ID = LIS.LIS_ID_1
                   AND LIS.LIS_JOB_ID = VLIS_JOB_ID
             ) goo1,
             dic_good_family fam,
             dic_good_group grp,
             dic_good_line lne,
             dic_good_model MOD,
             gco_product pdt
       WHERE goo1.gco_good_id = pdt.gco_good_id
         AND goo1.dic_good_line_id = lne.dic_good_line_id(+)
         AND goo1.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo1.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo1.dic_good_group_id = grp.dic_good_group_id(+)
         AND qty_lig <> 0;

ELSE   --SELECTION OF PRODUCTS
      OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, fam.dic_good_family_wording,
             grp.dic_good_group_wording, lne.dic_good_line_wording,
             MOD.dic_good_model_wording, goo.gco_good_id, goo.c_good_status,
             goo.c_management_mode, goo.goo_major_reference,
             goo.DIC_UNIT_OF_MEASURE_ID,
             goo.goo_number_of_decimal, cat.gco_good_category_wording,
             LIS.LIS_FREE_NUMBER_1 qty_lig,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  v_descr,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  v_descr_long,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  v_descr_free,
             gco_functions.getcostpricewithmanagementmode
                              (goo.gco_good_id,
                               NULL,
                               DECODE (parameter_0,
                                       '0', goo.c_management_mode,
                                       parameter_0
                                      ),
                               t_date
                              ) v_prix_produit
        FROM gco_good goo,
             dic_good_family fam,
             dic_good_group grp,
             dic_good_line lne,
             dic_good_model MOD,
             gco_good_category cat,
             gco_product pdt,
             COM_LIST LIS
       WHERE goo.gco_good_id = pdt.gco_good_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND goo.dic_good_line_id = lne.dic_good_line_id(+)
         AND goo.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo.dic_good_group_id = grp.dic_good_group_id(+)
         AND cat.gco_good_category_wording LIKE
                                               like_param (p_category_wording)
         AND GOO.GCO_GOOD_ID = LIS.LIS_ID_1
                   AND LIS.LIS_JOB_ID = VLIS_JOB_ID;

END IF;



END rpt_stm_qty_eom_with_grp;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_STOCK_EFFECTIF" (
   AREFCURSOR    IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCPARAM_0   IN       VARCHAR2,
   PROCPARAM_1   IN       VARCHAR2,
   PROCPARAM_2   IN       VARCHAR2,
   PROCPARAM_3   IN       VARCHAR2,
   PROCPARAM_4   IN       VARCHAR2,
   PROCPARAM_5   IN       VARCHAR2,
   PROCPARAM_6   IN       VARCHAR2,
   USER_LANID    IN       PCS.PC_LANG.LANID%TYPE
)
IS
/**
*Description USED FOR REPORT STM_STOCK_EFFECTIF_VALORISED_DET
* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 21 Feb 2009
* @LASTUPDATE VHA 8 Sept 2011
* @PUBLIC
* @PARAM PROCPARAM_0     Mode de Prix  (0: Mode de gestion, 1: PRCS, 2 PRC, 3: PRF, 4: prix dernier mouvement)
* @PARAM PROCPARAM_1    Code famille de bien (DIC_GOOD_FAMILY_ID)
* @PARAM PROCPARAM_2    Code groupe de bien (DIC_GOOD_GROUP_ID)
* @PARAM PROCPARAM_3    Code ligne de bien (DIC_GOOD_LINE_ID)
* @PARAM PROCPARAM_4    Code modèle de bien (DIC_GOOD_MODEL_ID)
* @PARAM PROCPARAM_5    Sélection par bien (GOO_MAJOR_REFERENCE)
* @PARAM PROCPARAM_6    Sélection par stock (STO_DESCRIPTION)
* @PARAM USER_LANID     User language
*/

   VPC_LANG_ID   PCS.PC_LANG.PC_LANG_ID%TYPE;

BEGIN
   PCS.PC_I_LIB_SESSION.SETLANID (USER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

   OPEN AREFCURSOR FOR
      SELECT GOO.GCO_GOOD_ID,
                  GOO.GOO_MAJOR_REFERENCE,
                  GOO.GOO_NUMBER_OF_DECIMAL,
                  GOO.C_MANAGEMENT_MODE,
                  NVL (GOO.DIC_GOOD_FAMILY_ID,
                  PCS.PC_FUNCTIONS.TRANSLATEWORD2 ('Vide', VPC_LANG_ID)) DIC_GOOD_FAMILY_ID,
                  NVL (FAM.DIC_GOOD_FAMILY_WORDING,
                  PCS.PC_FUNCTIONS.TRANSLATEWORD2 ('Pas de famille produit', VPC_LANG_ID)) DIC_GOOD_FAMILY_WORDING,
                  DES.DES_SHORT_DESCRIPTION,
                  DES.DES_LONG_DESCRIPTION,
                  DES.DES_FREE_DESCRIPTION,
                  STO.STO_DESCRIPTION,
                  LOC.LOC_DESCRIPTION,
                  SPO.SPO_STOCK_QUANTITY,
                  (GCO_FUNCTIONS.GETCOSTPRICEWITHMANAGEMENTMODE(GOO.GCO_GOOD_ID,NULL,DECODE (PROCPARAM_0, '0', GOO.C_MANAGEMENT_MODE, PROCPARAM_0))) PRICE
        FROM STM_STOCK_POSITION SPO,
                  GCO_GOOD GOO,
                  STM_STOCK STO,
                  DIC_GOOD_FAMILY FAM,
                  STM_LOCATION LOC,
                  (SELECT   GCO_GOOD_ID, DES_SHORT_DESCRIPTION, DES_LONG_DESCRIPTION, DES_FREE_DESCRIPTION
                    FROM     GCO_DESCRIPTION
                    WHERE   PC_LANG_ID = VPC_LANG_ID AND C_DESCRIPTION_TYPE = '01') DES
        WHERE SPO.GCO_GOOD_ID = GOO.GCO_GOOD_ID
            AND  SPO.STM_STOCK_ID = STO.STM_STOCK_ID
            AND  SPO.STM_LOCATION_ID = LOC.STM_LOCATION_ID
            AND  GOO.GCO_GOOD_ID = DES.GCO_GOOD_ID(+)
            AND  GOO.DIC_GOOD_FAMILY_ID = FAM.DIC_GOOD_FAMILY_ID(+)
            AND  (
                        ((PROCPARAM_1 IS NOT NULL) AND  (GOO.DIC_GOOD_FAMILY_ID LIKE PCS.LIKE_PARAM_FS(PROCPARAM_1))) OR
                        ((PROCPARAM_1 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_2 IS NOT NULL) AND  (GOO.DIC_GOOD_GROUP_ID LIKE PCS.LIKE_PARAM_FS(PROCPARAM_2))) OR
                        ((PROCPARAM_2 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_3 IS NOT NULL) AND  (GOO.DIC_GOOD_LINE_ID LIKE PCS.LIKE_PARAM_FS(PROCPARAM_3))) OR
                        ((PROCPARAM_3 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_4 IS NOT NULL) AND  (GOO.DIC_GOOD_MODEL_ID LIKE PCS.LIKE_PARAM_FS(PROCPARAM_4))) OR
                        ((PROCPARAM_4 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_5 IS NOT NULL) AND  (GOO.GOO_MAJOR_REFERENCE LIKE PCS.LIKE_PARAM_FS(PROCPARAM_5))) OR
                        ((PROCPARAM_5 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_6 IS NOT NULL) AND  (STO.STO_DESCRIPTION LIKE PCS.LIKE_PARAM_FS(PROCPARAM_6))) OR
                        ((PROCPARAM_6 IS NULL))
                   )
;
END RPT_STM_STOCK_EFFECTIF;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_STOCK_EFFECTIF_VAL" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       NUMBER,
   parameter_13     IN       NUMBER,
   parameter_14     IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/*
*Description USED FOR REPORT STM_STOCK_EFFECTIF_VAL.RPT / STM_STOCK_EFFECTIF_BY_STCOK_VAL_

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 21 FEB 2009
* @LASTUPDATE 26 jan 2010
* @PUBLIC
* @PARAM PARAMETER_0     Mode de Prix  (0: Mode de gestion, 1: PRCS, 2 PRC, 3 PRF, 4 prix dernier mouvement)
* @PARAM PARAMETER_1     Out Category (0: no 1: yes)
* @PARAM PARAMETER_6     Name of selected category ( 0:All)
* @PARAM PARAMETER_8     Short description (0:No - 1:Yes)
* @PARAM PARAMETER_9     Long description (0:No - 1:Yes)
* @PARAM PARAMETER_10    Free description (0:No - 1:Yes)
* @PARAM PARAMETER_11    Product Selection (1:All)
* @PARAM PARAMETER_12    Gco_good_id (com_list if PARAMETER_11 =0)
* @PARAM PARAMETER_13    Stm_Stock_id (com_list)
* @PARAM PARAMETER_14    Stm_Location_id (com_list)
* @PARAM procuser_lanid  User language
*/

   CATEGORY                  VARCHAR2 (50 CHAR);
BEGIN
   IF parameter_6 <> '0'
   THEN
      CATEGORY := parameter_6;
   ELSE
      CATEGORY := '*';
   END IF;


IF PARAMETER_11 = '1' THEN -- ALL PRODUCTS
   OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, goo.gco_good_id,
             goo.c_management_mode, goo.goo_major_reference,
             goo.goo_number_of_decimal, cat.gco_good_category_wording,
             lin.dic_good_line_wording, fam.dic_good_family_wording,
             MOD.dic_good_model_wording, grp.dic_good_group_wording,
             spo.spo_stock_quantity,
             sto.sto_description,
             loc.loc_description,
             gco_functions.getcostpricewithmanagementmode
                              (goo.gco_good_id,
                               NULL,
                               DECODE (parameter_0,
                                       '0', goo.c_management_mode,
                                       parameter_0
                                      ),
                               SYSDATE
                              ) v_prix_produit,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  des_short_description,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  des_long_description,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  des_free_description
        FROM stm_stock_position spo,
             gco_good goo,
             stm_stock sto,
             stm_location loc,
             gco_good_category cat,
             dic_good_line lin,
             dic_good_family fam,
             dic_good_model MOD,
             dic_good_group grp,
             com_list c_loc
       WHERE spo.gco_good_id = goo.gco_good_id
         AND spo.stm_stock_id = sto.stm_stock_id
         AND spo.stm_location_id = loc.stm_location_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND goo.dic_good_line_id = lin.dic_good_line_id(+)
         AND goo.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo.dic_good_group_id = grp.dic_good_group_id(+)
         AND cat.gco_good_category_wording LIKE like_param (CATEGORY)
         AND loc.stm_location_id = c_loc.lis_id_1
         AND c_loc.lis_job_id = parameter_14
         AND c_loc.lis_code = 'STM_LOCATION_ID';

ELSE   --SELECTION OF PRODUCTS

 OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, goo.gco_good_id,
             goo.c_management_mode, goo.goo_major_reference,
             goo.goo_number_of_decimal, cat.gco_good_category_wording,
             lin.dic_good_line_wording, fam.dic_good_family_wording,
             MOD.dic_good_model_wording, grp.dic_good_group_wording,
             spo.spo_stock_quantity,
             sto.sto_description,
             loc.loc_description,
             gco_functions.getcostpricewithmanagementmode
                              (goo.gco_good_id,
                               NULL,
                               DECODE (parameter_0,
                                       '0', goo.c_management_mode,
                                       parameter_0
                                      ),
                               SYSDATE
                              ) v_prix_produit,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  des_short_description,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  des_long_description,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  des_free_description
        FROM stm_stock_position spo,
             gco_good goo,
             stm_stock sto,
             stm_location loc,
             gco_good_category cat,
             dic_good_line lin,
             dic_good_family fam,
             dic_good_model MOD,
             dic_good_group grp,
             com_list c_loc,
             com_list com
       WHERE spo.gco_good_id = goo.gco_good_id
         AND spo.stm_stock_id = sto.stm_stock_id
         AND spo.stm_location_id = loc.stm_location_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND goo.dic_good_line_id = lin.dic_good_line_id(+)
         AND goo.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo.dic_good_group_id = grp.dic_good_group_id(+)
         AND cat.gco_good_category_wording LIKE like_param (CATEGORY)
         AND loc.stm_location_id = c_loc.lis_id_1
         AND c_loc.lis_job_id = parameter_14
         AND c_loc.lis_code = 'STM_LOCATION_ID'
         AND goo.gco_good_id = com.lis_id_1
         AND com.lis_job_id = parameter_12
         AND com.lis_code = 'GCO_GOOD_ID';

END IF;

DELETE FROM COM_LIST WHERE COM_LIST_ID IN (PARAMETER_12,PARAMETER_13,PARAMETER_14);

commit;

END rpt_stm_stock_effectif_val;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_STOCK_EFF_VAL_GAMME" (
   arefcursor     IN OUT   crystal_cursor_types.dualcursortyp,
   parameter_0      IN       VARCHAR2,
   parameter_1      IN       VARCHAR2,
   parameter_6      IN       VARCHAR2,
   parameter_7      IN       VARCHAR2,
   parameter_8      IN       VARCHAR2,
   parameter_9      IN       VARCHAR2,
   parameter_10     IN       VARCHAR2,
   parameter_11     IN       VARCHAR2,
   parameter_12     IN       NUMBER,
   parameter_13     IN       NUMBER,
   parameter_14     IN       NUMBER,
   procuser_lanid   IN       pcs.pc_lang.lanid%TYPE
)
IS
/*
*Description USED FOR REPORT STM_STOCK_EFFECTIF_VALORISED_GAMME.RPT

* @CREATED IN PROCONCEPT CHINA
* @AUTHOR MZH 21 FEb 2009
* @LASTUPDATE 26 jan 2010
** @PARAM PARAMETER_0     Mode de Prix  (0: Mode de gestion, 1: PRCS, 2 PRC, 3 PRF, 4 prix dernier mouvement)
* @PARAM PARAMETER_1     Out Category (0: no 1: yes)
* @PARAM PARAMETER_6     Name of selected category ( 0:All)
* @PARAM PARAMETER_7     Date value (yyyymmdd)
* @PARAM PARAMETER_8     Short description (0:No - 1:Yes)
* @PARAM PARAMETER_9     Long description (0:No - 1:Yes)
* @PARAM PARAMETER_10    Free description (0:No - 1:Yes)
* @PARAM PARAMETER_11    Product Selection (1:All)
* @PARAM PARAMETER_12    Gco_good_id (com_list if PARAMETER_11 =0)
* @PARAM PARAMETER_13    Stm_Stock_id (com_list)
* @PARAM PARAMETER_14    Stm_Location_id (com_list)
* @PARAM procuser_lanid  User language
*/

   CATEGORY                  VARCHAR2 (4000 CHAR);
BEGIN
   IF parameter_6 <> '0'
   THEN
      CATEGORY := parameter_6;
   ELSE
      CATEGORY := '*';
   END IF;

IF PARAMETER_11 = '1' THEN -- ALL PRODUCTS

   OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, goo.gco_good_id,
             goo.c_management_mode, goo.goo_major_reference,
             goo.gco_good_category_wording, lin.dic_good_line_wording,
             fam.dic_good_family_wording, MOD.dic_good_model_wording,
             grp.dic_good_group_wording, goo.goo_number_of_decimal,
             fcp.cpr_price,
             price,
             qty,
             qty_cc,
             qty_cf,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  des_short_description,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  des_long_description,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  des_free_description
      FROM (select
                    gco_functions.getcostpricewithmanagementmode
                                  (goo.gco_good_id, NULL, DECODE (parameter_0, '0', goo.c_management_mode, parameter_0), SYSDATE ) price,
                    NVL(rpt_functions.getqtystockt (goo.gco_good_id, parameter_14 ),0) qty,
                    NVL(rpt_functions.getqtycct (goo.gco_good_id, parameter_14 ),0) qty_cc,
                    NVL(rpt_functions.getqtycft (goo.gco_good_id, parameter_14 ),0) qty_cf,
                    GOO.gco_good_id,
                    c_management_mode,
                    goo_major_reference,
                    goo_number_of_decimal,
                    dic_good_line_id,
                    dic_good_family_id,
                    dic_good_model_id,
                    dic_good_group_id,
                    cat.gco_good_category_wording
              FROM  gco_good goo, gco_good_category cat,  gco_product pdt
              WHERE goo.gco_good_id = pdt.gco_good_id
                    AND goo.gco_good_category_id = cat.gco_good_category_id
                    AND pdt.pdt_stock_management in (1,2)
                    AND cat.gco_good_category_wording LIKE like_param (CATEGORY)
      ) goo,
      dic_good_line lin,
      dic_good_family fam,
      dic_good_model MOD,
      dic_good_group grp,
      (SELECT gco_good_id, cpr_price
                FROM ptc_fixed_costprice
               WHERE c_costprice_status = 'ACT' AND cpr_default = 1) fcp
       WHERE goo.dic_good_line_id = lin.dic_good_line_id(+)
         AND goo.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo.dic_good_group_id = grp.dic_good_group_id(+)
         AND goo.gco_good_id = fcp.gco_good_id(+)
         AND qty <> 0 and qty_cc <> 0 and qty_cf <> 0;

ELSE   --SELECTION OF PRODUCTS

   OPEN arefcursor FOR
      SELECT 'GROUP_STRING' group_string, goo.gco_good_id,
             goo.c_management_mode, goo.goo_major_reference,
             cat.gco_good_category_wording, lin.dic_good_line_wording,
             fam.dic_good_family_wording, MOD.dic_good_model_wording,
             grp.dic_good_group_wording, goo.goo_number_of_decimal,
             fcp.cpr_price,
             gco_functions.getcostpricewithmanagementmode
                                       (goo.gco_good_id,
                                        NULL,
                                        DECODE (parameter_0,
                                                '0', goo.c_management_mode,
                                                parameter_0
                                               ),
                                        SYSDATE
                                       ) price,
              NVL(rpt_functions.getqtystockt (goo.gco_good_id,
                                          parameter_14
                                         ),0) qty,
              NVL(rpt_functions.getqtycct (goo.gco_good_id,
                                       parameter_14
                                      ),0) qty_cc,
             NVL(rpt_functions.getqtycft (goo.gco_good_id,
                                       parameter_14
                                      ),0) qty_cf,
             case when PARAMETER_8 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 1, '01')
             ELSE ''
             END  des_short_description,
             case when PARAMETER_9 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 2, '01')
             ELSE ''
             END  des_long_description,
             case when PARAMETER_10 = 1 THEN gco_functions.getdescription (goo.gco_good_id, procuser_lanid, 3, '01')
             ELSE ''
             END  des_free_description
        FROM gco_good goo,
             gco_product pdt,
             gco_good_category cat,
             dic_good_line lin,
             dic_good_family fam,
             dic_good_model MOD,
             dic_good_group grp,
             com_list com,
             (SELECT gco_good_id, cpr_price
                FROM ptc_fixed_costprice
               WHERE c_costprice_status = 'ACT' AND cpr_default = 1) fcp
       WHERE goo.gco_good_id = pdt.gco_good_id
         AND goo.gco_good_category_id = cat.gco_good_category_id
         AND goo.dic_good_line_id = lin.dic_good_line_id(+)
         AND goo.dic_good_family_id = fam.dic_good_family_id(+)
         AND goo.dic_good_model_id = MOD.dic_good_model_id(+)
         AND goo.dic_good_group_id = grp.dic_good_group_id(+)
         AND goo.gco_good_id = fcp.gco_good_id(+)
         AND pdt.pdt_stock_management in (1,2)
         AND goo.gco_good_id = com.lis_id_1
         AND com.lis_job_id = parameter_12
         AND com.lis_code = 'GCO_GOOD_ID'
         AND cat.gco_good_category_wording LIKE like_param (CATEGORY);

end if;

DELETE FROM COM_LIST WHERE COM_LIST_ID IN (PARAMETER_12,PARAMETER_13,PARAMETER_14);

commit;

END rpt_stm_stock_eff_val_gamme;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_STOCK_EVOL_BY_PERIOD" (
   AREFCURSOR    IN OUT   CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCPARAM_0       IN      VARCHAR2,
   PROCPARAM_1       IN      VARCHAR2,
   PROCPARAM_2       IN      VARCHAR2,
   PROCPARAM_3       IN      VARCHAR2,
   PROCPARAM_4       IN      VARCHAR2,
   PROCUSER_LANID   IN      PCS.PC_LANG.LANID%TYPE
)
IS

/**
*Description USED FOR REPORT RPT_STM_STOCK_EVOLUTION_BY_PERIOD
* @AUTHOR VHA 12.09.2011
* @LASTUPDATE
* @PUBLIC
* @PARAM PROCPARAM_0           Start date (YYYYMMDD)
* @PARAM PROCPARAM_1           End date (YYYYMMDD)
* @PARAM PROCPARAM_2          Sélection par bien (GOO_MAJOR_REFERENCE)
* @PARAM PROCPARAM_3          Sélection par stock (STO_DESCRIPTION)
* @PARAM PROCPARAM_4          Sélection par emplacement (LOC_DESCRIPTION)

* @PARAM PROCUSER_LANID      USER LANGUAGE
*/

   VPC_LANG_ID               PCS.PC_LANG.PC_LANG_ID%TYPE;

BEGIN
   PCS.PC_I_LIB_SESSION.SETLANID (PROCUSER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

   OPEN AREFCURSOR FOR
    SELECT GOO.GOO_MAJOR_REFERENCE,
                (SELECT   DES.DES_SHORT_DESCRIPTION
                    FROM   GCO_DESCRIPTION DES
                    WHERE DES.GCO_GOOD_ID = GOO.GCO_GOOD_ID
                        AND DES.PC_LANG_ID = VPC_LANG_ID
                        AND C_DESCRIPTION_TYPE ='01') SHORT_DESCRIPTION,
                SEV.SPE_START_QUANTITY,
                SEV.SPE_INPUT_QUANTITY,
                SEV.SPE_OUTPUT_QUANTITY,
                SEV.SPE_START_QUANTITY + (SPE_INPUT_QUANTITY - SPE_OUTPUT_QUANTITY) BALANCE_QUANTITY,
                SEV.SPE_START_VALUE,
                SEV.SPE_INPUT_VALUE,
                SEV.SPE_OUTPUT_VALUE,
                SEV.SPE_START_VALUE + (SPE_INPUT_VALUE-SPE_OUTPUT_VALUE) BALANCE_VALUE,
                SPE.PER_STARTING_PERIOD,
                SPE.PER_ENDING_PERIOD,
                STO.STO_DESCRIPTION,
                LOC.LOC_DESCRIPTION
    FROM   STM_EXERCISE_EVOLUTION SEV,
                GCO_GOOD GOO,
                STM_STOCK STO,
                STM_LOCATION LOC,
                STM_PERIOD SPE
    WHERE  SEV.GCO_GOOD_ID = GOO.GCO_GOOD_ID
        AND  SEV.STM_STOCK_ID = STO.STM_STOCK_ID
        AND  SEV.STM_PERIOD_ID = SPE.STM_PERIOD_ID
        AND  LOC.STM_STOCK_ID = STO.STM_STOCK_ID
        AND  SPE.PER_STARTING_PERIOD >= COALESCE(TO_DATE (PROCPARAM_0,'YYYYMMDD'), SPE.PER_STARTING_PERIOD)
        AND  SPE.PER_ENDING_PERIOD <= COALESCE(TO_DATE (PROCPARAM_1,'YYYYMMDD'), SPE.PER_ENDING_PERIOD)
        AND  (
                      ((PROCPARAM_2 IS NOT NULL) AND  (GOO.GOO_MAJOR_REFERENCE LIKE PCS.LIKE_PARAM_FS(PROCPARAM_2))) OR
                      ((PROCPARAM_2 IS NULL))
                )
        AND  (
                      ((PROCPARAM_3 IS NOT NULL) AND  (STO.STO_DESCRIPTION LIKE PCS.LIKE_PARAM_FS(PROCPARAM_3))) OR
                      ((PROCPARAM_3 IS NULL))
                )
        AND  (
                      ((PROCPARAM_4 IS NOT NULL) AND  (LOC.LOC_DESCRIPTION LIKE PCS.LIKE_PARAM_FS(PROCPARAM_4))) OR
                      ((PROCPARAM_4 IS NULL))
                )
;

END RPT_STM_STOCK_EVOL_BY_PERIOD;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_STM_STOCK_EVOL_BY_YEAR" (
   AREFCURSOR    IN OUT     CRYSTAL_CURSOR_TYPES.DUALCURSORTYP,
   PROCPARAM_0     IN       VARCHAR2,
   PROCPARAM_1     IN       VARCHAR2,
   PROCPARAM_2     IN       VARCHAR2,
   PROCPARAM_3     IN       VARCHAR2,
   PROCUSER_LANID   IN      PCS.PC_LANG.LANID%TYPE
)
IS

/**
*Description USED FOR REPORT RPT_STM_STOCK_EVOLUTION_BY_YEAR
* @AUTHOR VHA 07.09.2011
* @LASTUPDATE SMA 26.08.2013
* @PUBLIC
* @PARAM PROCPARAM_0          Année (SAE_YEAR)
* @PARAM PROCPARAM_1          Sélection par bien (GOO_MAJOR_REFERENCE)
* @PARAM PROCPARAM_2          Sélection par stock (STO_DESCRIPTION)
* @PARAM PROCPARAM_3          Sélection par emplacement (LOC_DESCRIPTION)
* @PARAM PROCUSER_LANID      USER LANGUAGE
*/

   VPC_LANG_ID              PCS.PC_LANG.PC_LANG_ID%TYPE;

BEGIN
   PCS.PC_I_LIB_SESSION.SETLANID (PROCUSER_LANID);
   VPC_LANG_ID := PCS.PC_I_LIB_SESSION.GETUSERLANGID;

   OPEN AREFCURSOR FOR
    SELECT GOO.GOO_MAJOR_REFERENCE,
                (SELECT   DES.DES_SHORT_DESCRIPTION
                    FROM   GCO_DESCRIPTION DES
                    WHERE DES.GCO_GOOD_ID = GOO.GCO_GOOD_ID
                        AND DES.PC_LANG_ID = VPC_LANG_ID
                        AND C_DESCRIPTION_TYPE ='01') SHORT_DESCRIPTION,
                SAV.SAE_START_QUANTITY,
                SAV.SAE_INPUT_QUANTITY,
                SAV.SAE_OUTPUT_QUANTITY,
                SAV.SAE_START_QUANTITY + (SAE_INPUT_QUANTITY - SAE_OUTPUT_QUANTITY) BALANCE_QUANTITY,
                SAV.SAE_START_VALUE,
                SAV.SAE_INPUT_VALUE,
                SAV.SAE_OUTPUT_VALUE,
                SAV.SAE_START_VALUE + (SAE_INPUT_VALUE - SAE_OUTPUT_VALUE) BALANCE_VALUE,
                CAST(SAV.SAE_YEAR AS varchar2(4)) SAE_YEAR,      -- Forcer le type de la valeur (web)
                STO.STO_DESCRIPTION,
                LOC.LOC_DESCRIPTION
    FROM   STM_ANNUAL_EVOLUTION SAV,
                GCO_GOOD GOO,
                STM_STOCK STO,
                STM_LOCATION LOC
    WHERE  SAV.GCO_GOOD_ID = GOO.GCO_GOOD_ID
        AND  SAV.STM_STOCK_ID = STO.STM_STOCK_ID
        AND  LOC.STM_STOCK_ID = STO.STM_STOCK_ID
        AND  SAV.SAE_YEAR  = COALESCE(PROCPARAM_0, SAV.SAE_YEAR)
            AND  (
                        ((PROCPARAM_1 IS NOT NULL) AND  (GOO.GOO_MAJOR_REFERENCE LIKE PCS.LIKE_PARAM_FS(PROCPARAM_1))) OR
                        ((PROCPARAM_1 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_2 IS NOT NULL) AND  (STO.STO_DESCRIPTION LIKE PCS.LIKE_PARAM_FS(PROCPARAM_2))) OR
                        ((PROCPARAM_2 IS NULL))
                   )
            AND  (
                        ((PROCPARAM_3 IS NOT NULL) AND  (LOC.LOC_DESCRIPTION LIKE PCS.LIKE_PARAM_FS(PROCPARAM_3))) OR
                        ((PROCPARAM_3 IS NULL))
                   )
;

END RPT_STM_STOCK_EVOL_BY_YEAR;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_THI_NO_VAT_SUB" (
  arefcursor in out CRYSTAL_CURSOR_TYPES.dualcursortyp
, parameter_0 in varchar2
)
/**
*Description

 Used for report the sub report of ACR_VAT_FORM_DET
*@created JLIU 06.JUNE.2009
*@lastUpdate  VHA 09.04.2013
*@public
*/
is
  vpc_lang_id pcs.pc_lang.pc_lang_id%type;   --user language id
begin
  open aRefCursor for
    select PER.PER_NAME
         , THI.THI_NO_TVA
      from PAC_PERSON PER
         , PAC_THIRD THI
     where PER.PAC_PERSON_ID = THI.PAC_THIRD_ID
       and PER.PAC_PERSON_ID = to_number(parameter_0);
end RPT_THI_NO_VAT_SUB;


  CREATE OR REPLACE PROCEDURE "C_ITX"."RPT_WEB_EXPENSIVE" (
   arefcursor                       in out   crystal_cursor_types.dualcursortyp,
   eco_users_id                   in       varchar2,
   web_expensive_head_id   in       number
)
/**
 * @created
 * @author ire
 * @update VHA 26 JUNE 2013
 *
 * Utilisé actuellement dans aucun rapport
 * @param eco_users_id
 * @param web_expensive_head_id
 *
 * Modifications:
 *   23.07.2013: DEVRPT-10597 Unifier procédure: utiliser toujours rpt_...
 *   26.06.2013: DEVRPT-10670 WEBERP - Correction des procédures PL/SQL pour autoriser les valeurs de paramètres à null
 */
IS
 vTeteSql varchar2(4000);
 vHead_id number := null;

begin
    if (web_expensive_head_id is not null) then
        vHead_id := web_expensive_head_id;
    end if;

  open aRefCursor for
    select
     HEA.WEB_EXPENSIVE_HEAD_ID,
     HEA.WEH_NUMBER,
     HEA.C_WEB_EXPENSIVE_STATE WEH_STATUS,
     WEH_NAME_TO PER_NAME,
    to_char(HEA.WEH_DATE1,'yyyy') WEH_YEAR,
    SCO.SCO_COMMENT2 WEH_LEG,
    WEH_COMMENT1 WEH_COMMENTS,
    WEB_EXPENSIVE_ID WED_SEQUENCE,
    SCO.SCO_DATE,
    SCO_WHO,
    RCO_TITLE,
    SCO.DIC_WEB_EXPENSIVE_TYPE_ID,
    COM_DIC_FUNCTIONS.getdicodescr('DIC_WEB_EXPENSIVE_TYPE', SCO.DIC_WEB_EXPENSIVE_TYPE_ID,3) DIC_WEB_EXPENSIVE_TYPE,
    SCO_QTE,
    SCO_TO_BILL,
    (select CURRENCY from PCS.PC_CURR where PC_CURR_ID = (select PC_CURR_ID from ACS_FINANCIAL_CURRENCY where ACS_FINANCIAL_CURRENCY_ID = SCO.ACS_FINANCIAL_CURRENCY_ID)) CURRENCY,
    SCO_AMOUNT,
    SCO_COMMENT,
    HEA.C_WEB_EXPENSIVE_STATE,
    SCO.SCO_COMMENT2
    from
    WEB_EXPENSIVE_HEAD HEA,
    WEB_EXPENSIVE SCO ,
    DOC_RECORD REC
    where HEA.WEB_EXPENSIVE_HEAD_ID = SCO.WEB_EXPENSIVE_HEAD_ID
    and REC.DOC_RECORD_ID = SCO.SCO_PROJECT_ID
    and HEA.WEB_EXPENSIVE_HEAD_ID = VHEAD_ID;
end RPT_WEB_EXPENSIVE;


  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_ACR_ACC_BALANCE_DATE" (
  aACC_NUMBER_From       varchar2
, aACC_NUMBER_To         varchar2
, aACS_FINANCIAL_YEAR_ID varchar2
, aCUMUL_DATE            varchar2
, aCUMUL_DATE_FROM       varchar2
)
is
/**
* Description
*
* @author BL
* @version 2003
* @lastUpdate
* @public
* @param aACC_NUMBER_From
* @param aACC_NUMBER_To
* @param aACS_FINANCIAL_YEAR_ID
* @param aCUMUL_DATE
* @param aCUMUL_DATE_FROM
*/
begin
  ACR_FUNCTIONS.ACC_NUMBER1      := aACC_NUMBER_From;
  ACR_FUNCTIONS.ACC_NUMBER2      := aACC_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID      := aACS_FINANCIAL_YEAR_ID;
  ACR_FUNCTIONS.CUMUL_DATE       := to_date(aCUMUL_DATE, 'yyyymmdd');
  ACR_FUNCTIONS.CUMUL_DATE_FROM  := to_date(aCUMUL_DATE_FROM, 'yyyymmdd');

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;
end SetV_ACR_ACC_BALANCE_DATE;




  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_ACT_IMPUTATION" (
  aACC_NUMBER_From       varchar2
, aACC_NUMBER_To         varchar2
, aACS_FINANCIAL_YEAR_ID varchar2
)
is
/**
* Description
*
* @author BL
* @lastUpdate
* @version 2003
* @public
* @param aACC_NUMBER_From
* @param aACC_NUMBER_To
* @param aACS_FINANCIAL_YEAR_ID
*/
begin
  ACR_FUNCTIONS.ACC_NUMBER1  := aACC_NUMBER_From;
  ACR_FUNCTIONS.ACC_NUMBER2  := aACC_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID  := aACS_FINANCIAL_YEAR_ID;

  if ACS_FUNCTION.GetFirstDivision is not null then
    ACR_FUNCTIONS.EXIST_DIVISION  := 1;
  else
    ACR_FUNCTIONS.EXIST_DIVISION  := 0;
  end if;
end SetV_ACT_IMPUTATION;




  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_ACT_JOURNAL_COND" (
  aJOU_NUMBER_From       varchar2
, aJOU_NUMBER_To         varchar2
, aACS_FINANCIAL_YEAR_ID varchar2
)
is
/**
* Description
*
* @author BL
* @version 2003
* @lastUpdate
* @public
* @param aJOU_NUMBER_From
* @param aJOU_NUMBER_To
* @param aACS_FINANCIAL_YEAR_ID
*/
begin
  ACR_FUNCTIONS.JOU_NUMBER1  := aJOU_NUMBER_From;
  ACR_FUNCTIONS.JOU_NUMBER2  := aJOU_NUMBER_To;
  ACR_FUNCTIONS.FIN_YEAR_ID  := aACS_FINANCIAL_YEAR_ID;
end SetV_ACT_JOURNAL_COND;




  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_GCO_GOOD_ID" (aGoodId varchar2)
is
begin
PPS_INIT.GCO_GOOD_ID := aGoodId;
end SetV_GCO_GOOD_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_PPS_NOMENCLATURE_ID" (aNomId varchar2)
is
begin
PPS_INIT.PPS_NOMENCLATURE_ID := aNomId;
end SetV_PPS_NOMENCLATURE_ID;




  CREATE OR REPLACE PROCEDURE "C_ITX"."SETV_RCO_IMPUTATION" (
  aRCO_TITLE_From        varchar2
, aRCO_TITLE_To          varchar2
, aACS_FINANCIAL_YEAR_ID varchar2
)
is
/**
* Description
*
* @author PVO
* @lastUpdate
* @version 2003
* @public
* @param aRCO_TITLE_From
* @param aRCO_TITLE_To
* @param aACS_FINANCIAL_YEAR_ID
* @param aLEVEL
*/
begin
  ACR_FUNCTIONS.RCO_TITLE1     := aRCO_TITLE_From;
  ACR_FUNCTIONS.RCO_TITLE2     := aRCO_TITLE_To;
  ACR_FUNCTIONS.FIN_YEAR_ID    := aACS_FINANCIAL_YEAR_ID;
end SetV_RCO_IMPUTATION;




  CREATE OR REPLACE PROCEDURE "C_ITX"."UPDATE_DOC_NETWORK"
is
  cursor GetDetailPositions(aGaugeType in DOC_GAUGE.C_GAUGE_TYPE%type)
  is
    select Detail.*
      from Doc_position_detail Detail
         , Doc_position position
         , Doc_document Doc
         , Doc_gauge Gauge
     where Detail.Doc_position_id = position.Doc_position_id
       and position.Doc_document_id = Doc.Doc_document_id
       and Doc.Doc_gauge_id = Gauge.Doc_gauge_id
       and position.C_DOC_POs_STATUS in('02', '03')
       and position.C_Gauge_Type_Pos in('1', '2', '3', '7', '8', '9', '10', '71', '81', '91', '101')
       and Gauge.c_Gauge_Type = aGaugeType;

  aCount       integer;
  aInsertCount integer;
  aRecords     integer;
  lvFanDescr   FAL_NETWORK_SUPPLY.FAN_DESCRIPTION%type;
begin
  aInsertCount  := 0;
  aRecords      := 0;

  -- Traitement des Approvisionnements ----------------------------------------------------------------------------------
  for aDetailRecord in GetDetailPositions('2') loop
    aRecords  := aRecords + 1;

    -- Vérifier si ce détail position n'existe pas déjà dans les réseaux ----------------------------------------------
    select count(*)
      into aCount
      from FAL_NETWORK_SUPPLY
     where DOC_POSITION_DETAIL_ID = aDetailRecord.DOC_POSITION_DETAIL_ID;

    DBMS_OUTPUT.put_line(to_char(aRecords) || '   Count : ' || to_char(aCount) );

    if aCount = 0 then
      aInsertCount  := aInsertCount + 1;

      -- Description de l'appro
      select DMT.DMT_NUMBER || ' / ' || POS.POS_NUMBER
        into lvFanDescr
        from DOC_DOCUMENT DMT
           , DOC_POSITION POS
       where POS.DOC_POSITION_ID = aDetailRecord.DOC_POSITION_ID
         and POS.DOC_DOCUMENT_ID = DMT.DOC_DOCUMENT_ID;

      -- Réseau inexistant. Processus : Création ReseauxLogAppro -----------------------------------------------------
      FAL_NETWORK_DOC.ReseauApproDOC_Creation(aPositionDetail     => aDetailRecord
                                            , pDocumentID         => null
                                            , pGoodID             => null
                                            , pDocRecordID        => null
                                            , pConversionFactor   => null
                                            , iDescription        => lvFanDescr
                                             );
    end if;
  end loop;

  -- Traitement des Besoins ---------------------------------------------------------------------------------------------
  for aDetailRecord in GetDetailPositions('1') loop
    aRecords  := aRecords + 1;

    -- Vérifier si ce détail position n'existe pas déjà dans les réseaux ----------------------------------------------
    select count(*)
      into aCount
      from FAL_NETWORK_NEED
     where DOC_POSITION_DETAIL_ID = aDetailRecord.DOC_POSITION_DETAIL_ID;

    DBMS_OUTPUT.put_line(to_char(aRecords) || '   Count : ' || to_char(aCount) );

    if aCount = 0 then
      aInsertCount  := aInsertCount + 1;

      -- Description du besoin
      select DMT.DMT_NUMBER || ' / ' || POS.POS_NUMBER
        into lvFanDescr
        from DOC_DOCUMENT DMT
           , DOC_POSITION POS
       where POS.DOC_POSITION_ID = aDetailRecord.DOC_POSITION_ID
         and POS.DOC_DOCUMENT_ID = DMT.DOC_DOCUMENT_ID;

      -- Réseau inexistant. Processus : Création ReseauxLogBesoin ----------------------------------------------------
      FAL_NETWORK_DOC.ReseauBesoinDOC_Creation(aPositionDetail          => aDetailRecord
                                             , pDocumentID              => null
                                             , pGoodID                  => null
                                             , pDocRecordID             => null
                                             , pConversionFactor        => null
                                             , pPAC_REPRESENTATIVE_ID   => null
                                             , iDescription             => lvFanDescr
                                              );
    end if;
  end loop;

  DBMS_OUTPUT.put_line('Nb records vus : ' || to_char(aRecords) );
  DBMS_OUTPUT.put_line('Nb records traités : ' || to_char(aInsertCount) );
end;


  CREATE OR REPLACE PROCEDURE "C_ITX"."UPDATE_ORTEMS_BATCH_COLOR" (aSchemaName in varchar2)
/**
* Description
*    Export a color for batches and propositions according to their status
*
* @author   Christophe Le Gland
* @version  29.09.2004
* @public
* @param    aSchemaName
*/
is
  BuffSQL        varchar2(2000);
  Cursor_Handle  integer;
  Execute_Cursor integer;
  aLotOrPropId   varchar2(15);
  aIsLot         number;
  aStatus        number;
  aColor         char(2);

  procedure Update_Batch_Color
  is
    BuffSQL        varchar2(2000);
    Cursor_Handle  integer;
    Execute_Cursor integer;
  begin
    BuffSQL         := 'UPDATE ' || aSchemaName || '.B_OF             ';
    BuffSQL         := BuffSQL || '   SET CODECOUL = :vCODECOUL       ';
    BuffSQL         := BuffSQL || ' WHERE OF_CH_DESC1 = :vOF_CH_DESC1 ';
    Cursor_Handle   := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(Cursor_Handle, BuffSQL, DBMS_SQL.V7);
    DBMS_SQL.BIND_VARIABLE(Cursor_Handle, 'vCODECOUL', aColor);
    DBMS_SQL.BIND_VARIABLE(Cursor_Handle, 'vOF_CH_DESC1', aLotOrPropId);
    Execute_Cursor  := DBMS_SQL.execute(Cursor_Handle);
    DBMS_SQL.CLOSE_CURSOR(Cursor_Handle);
  end;
begin
  BuffSQL         := 'SELECT  OF_CH_DESC1 ';
  BuffSQL         := BuffSQL || 'FROM ' || aSchemaName || '.B_OF ';

  if DBMS_SQL.IS_OPEN(Cursor_Handle) then
    DBMS_SQL.CLOSE_CURSOR(Cursor_Handle);
  end if;

  Cursor_Handle   := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(Cursor_Handle, BuffSQL, DBMS_SQL.V7);
  DBMS_SQL.DEFINE_COLUMN(Cursor_Handle, 1, aLotOrPropId, 15);
  Execute_Cursor  := DBMS_SQL.execute(Cursor_Handle);

  loop
    if DBMS_SQL.FETCH_ROWS(Cursor_Handle) > 0 then
      DBMS_SQL.COLUMN_VALUE(Cursor_Handle, 1, aLotOrPropId);

      select 1 is_lot
           , to_number(c_lot_status) status
        into aIsLot
           , aStatus
        from fal_lot
       where fal_lot_id = aLotOrPropId
      union
      select 0 is_lot
           , fal_pic_id status
        from fal_lot_prop
       where fal_lot_prop_id = aLotOrPropId;

      if aIsLot = 1 then
        if aStatus = 1 then
          -- Planned batch (green)
          aColor  := '10';
        else
          -- Launched batch (yellow)
          aColor  := '14';
        end if;
      else
        if nvl(aStatus, 0) > 0 then
          -- Propositions coming from master plan (pink)
          aColor  := '13';
        else
          -- Propositions coming from need calculation (blue)
          aColor  := '11';
        end if;
      end if;

      Update_Batch_Color;
    else
      exit;
    end if;
  end loop;

  DBMS_SQL.CLOSE_CURSOR(Cursor_Handle);
end Update_Ortems_Batch_Color;




  CREATE OR REPLACE PROCEDURE "C_ITX"."WEB_C9_ACTIVITY_BY_RECORD_FT" (
  aRefCursor  IN OUT Crystal_Cursor_Types.DualCursorTyp,
  INITIALDATE IN VARCHAR2,
  USERINI     IN WEB_ACTIVITY.SAC_WHO%TYPE,
  REPORTTYPE  IN VARCHAR2,
  RECORDID    IN VARCHAR2,
  ONLYME      IN VARCHAR2,
  FROMDATE    IN VARCHAR2
   ) IS
/******************************************************************************
   NAME:       WEB_C9_ACTIVITY_BY_RECORD_Prnt
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   			  23/02/2007  RRI			   Correction pour que ça fonctionne même si pas de message client à afficher
   			  06/12/2006  RRI			   Correction pour que ça fonctionne même si pas de message client à afficher
          17/11/2006  RRI              Remis le message supprimer par PYB
   			  01/11/2006  RRI 			   Ajout message client
          17/03/2006  RRI			   Add new param FROMDATE
   1.0    09/03/2005          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     WEB_C9_ACTIVITY_RECORD_Prnt
      Sysdate:         09/03/2005
      Date and Time:   09/03/2005, 09:57:28, and 09/03/2005 09:57:28
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
  -- Sélection résultat.
  OPEN aRefCursor FOR

  SELECT
    SEM_ACTIVITY.SAC_DATE,
    SEM_ACTIVITY.SAC_WHO,
 		SEM_ACTIVITY.SAC_TEXT,
 		SEM_ACTIVITY.SAC_HOURS,
 		SEM_ACTIVITY.SAC_HOURS_BILLED,
 		SEM_ACTIVITY.SAC_TASK_CODE,
 		SEM_ACTIVITY.SAC_PROJECT_ID,
 		SEM_ACTIVITY.SAC_CUST_MACHINE,
 		RCO.RCO_TITLE,
		SEM_ACTIVITY.sac_quick_op,
 		SEM_ACTIVITY.SAC_BILL_TYPE,
 		FROMDATE,
 		INITIALDATE,
 		(SELECT
		   wmt_message message
 		 FROM
		   WEB_MESSAGE_TRANSL t,
		   WEB_MESSAGE m,
		   DOC_RECORD r,
		   PAC_ADDRESS a
 		 WHERE
		   r.doc_record_id=TO_NUMBER(recordid)
		   AND r.PAC_THIRD_ID=a.pac_person_id
		   AND ADD_PRINCIPAL=1
		   AND m.web_message_id(+)=t.web_message_id
		   AND m.CME_MSG_TXT='MESSAGE RAPPORT CLIENT'
		   AND ROWNUM=1
		   AND t.pc_lang_id=a.pc_lang_id) MESSAGE
     FROM
	   WEB_ACTIVITY SEM_ACTIVITY,
  	   DOC_RECORD RCO
  WHERE
    sac_who LIKE DECODE(ONLYME,'true',USERINI,'%')
 	AND	SEM_ACTIVITY.SAC_PROJECT_ID = TO_NUMBER(recordid)
	AND SEM_ACTIVITY.SAC_PROJECT_ID = RCO.DOC_RECORD_ID
 	AND sac_date BETWEEN TO_DATE(INITIALDATE,'dd-mm-yy') AND TO_DATE(FROMDATE,'dd-mm-yy');

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END Web_C9_Activity_By_Record_Ft;


  CREATE OR REPLACE PROCEDURE "C_ITX"."WEB_C9_ACTIVITY_BY_RECORD_PRNT" (
  aRefCursor  IN OUT Crystal_Cursor_Types.DualCursorTyp,
  INITIALDATE IN VARCHAR2,
  USERINI     IN WEB_ACTIVITY.SAC_WHO%type,
  REPORTTYPE  IN VARCHAR2,
  RECORDID      IN VARCHAR2,
  ONLYME      IN VARCHAR2
   ) IS
/******************************************************************************
   NAME:       WEB_C9_ACTIVITY_BY_RECORD_Prnt
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        09/03/2005          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     WEB_C9_ACTIVITY_RECORD_Prnt
      Sysdate:         09/03/2005
      Date and Time:   09/03/2005, 09:57:28, and 09/03/2005 09:57:28
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
  -- Sélection résultat.
  OPEN aRefCursor FOR

 SELECT SEM_ACTIVITY.SAC_DATE,
        SEM_ACTIVITY.SAC_WHO,
		SEM_ACTIVITY.SAC_TEXT,
		SEM_ACTIVITY.SAC_HOURS,
		SEM_ACTIVITY.SAC_TASK_CODE,
		SEM_ACTIVITY.SAC_PROJECT_ID
 FROM   WEB_ACTIVITY SEM_ACTIVITY
 WHERE
    sac_who like decode(ONLYME,'true',USERINI,'%')
	and	SEM_ACTIVITY.SAC_PROJECT_ID = to_number(recordid)
	and sac_date=to_date(INITIALDATE,'dd-mm-yy');

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END WEB_C9_ACTIVITY_BY_RECORD_Prnt;




  CREATE OR REPLACE PROCEDURE "C_ITX"."WEB_C9_ACTIVITY_MONTH_PRNT" (aRefCursor  IN OUT Crystal_Cursor_Types.DualCursorTyp, INITIALDATE IN VARCHAR2, USERINI     IN WEB_ACTIVITY.SAC_WHO%TYPE ) IS
/******************************************************************************
   NAME:       WEB_C9_ACTIVITY_MONTH_Prnt
   PURPOSE: Données pour rapport Analytique



  2005 03 09 Created this procedure.
  2008 10 02 RRI Prise en compte du paramètre provenant du ePrint


   NOTES:


******************************************************************************/
  vINITIALDATE varchar2(10);
BEGIN
  -- Sélection résultat.
    if substr(INITIALDATE,3,1) in ('0','1') then
      vINITIALDATE := substr(INITIALDATE,7,2)||' '||substr(INITIALDATE,5,2)||' '||substr(INITIALDATE,3,2);
    else
     vINITIALDATE := INITIALDATE;
  end if;

  OPEN aRefCursor FOR
     SELECT
            pac.cal_date,
            pac.CAL_OPENDAY,
            rco_title,
            web.web_activity_id,
            web.sac_date,
            NVL(sac_who,USERINI) SAC_WHO,
            sac_task_code,
            sac_project_id,
            sac_hours,
            sac_text,
            sac_hours,
            sac_bill_type,
            c_web_activity_state,
            web.a_datecre,
            web.a_datemod,
            web.a_idmod,
            web.new_doc_record_id,
            web.new_pac_custom_partner_id,
            web.new_price,
            new_sac_bill_type,
            sac_cust_machine,
            use_descr,
            rco.pac_third_id
     FROM
            PAC_CALENDAR_DAYS pac,
            WEB_ACTIVITY web,
            DOC_RECORD rco,
            pcs.pc_user p
     WHERE
            p.use_ini = USERINI
        AND pac.cal_date = web.sac_date (+)
        AND web.SAC_PROJECT_ID = rco.doc_record_id (+)
        AND web.sac_who(+) = USERINI
        AND TO_CHAR(cal_date,'YYMM') =  SUBSTR(vINITIALDATE,7,2)||SUBSTR(vINITIALDATE,4,2);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END Web_C9_Activity_Month_Prnt;


  CREATE OR REPLACE PROCEDURE "C_ITX"."WFL_WHOCALLEDME" (aOwner out Varchar2,
                                            aName out Varchar2,
                                            aLineNum out Number,
                                            aType out Varchar2)
is
  cCallStack  Varchar2(4000) default dbms_utility.format_call_stack;
  nNum Number;
  bFoundStack Boolean default False;
  cLine Varchar2(255);
  nCnt Number := 0;
begin
  loop
    nNum := Instr(cCallStack,chr(10));
    exit when (nCnt=3 or nNum is NULL or nNum = 0);

    cLine := Substr(cCallStack,1,nNum-1);
    cCallStack := Substr(cCallStack,nNum+1);
    if (not bFoundStack) then
      if (cLine like '%handle%number%name%') then
        bFoundStack := True;
      end if;
    else
      nCnt := nCnt+1;

      -- line is like : 0x56b84cf0       103  package body WFL_WORKFLOW_MANAGEMENT.PL_FLOW
      --
      -- nCnt = 1 is ME
      --
      -- nCnt = 2 is MY Caller
      --
      -- nCnt = 3 is Their Caller
      if (nCnt = 3) then
        aLineNum := To_Number(Substr(cLine,11,10));
        cLine := Substr(cLine,23);

        if (cLine like 'pr%') then
          nNum := Length('procedure ');
        elsif (cLine like 'fun%') then
          nNum := Length('function ');
        elsif (cLine like 'package body%') then
          nNum := Length('package body ');
        elsif (cLine like 'pack%') then
          nNum := Length('package ');
        elsif (cLine like 'anonymous%') then
          nNum := Length('anonymous block ');
        else
          nNum := null;
        end if;

        if (nNum is not null) then
          aType := LTrim(RTrim(Upper(Substr(cLine, 1, nNum-1))));
        else
          aType := 'TRIGGER';
        end if;

        cLine := Substr(cLine,nvl(nNum,1));
        nNum := Instr(cLine,'.');
        aOwner := LTrim(RTrim(Substr(cLine,1,nNum-1)));
        aName := LTrim(RTrim(Substr(cLine,nNum+1)));
      end if;
    end if;
  end loop;
end;

